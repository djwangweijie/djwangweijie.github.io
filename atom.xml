<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael_Wang</title>
  
  <subtitle>JavaAndKafka_Streams</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangweijie.vip/"/>
  <updated>2020-02-18T14:05:43.787Z</updated>
  <id>https://wangweijie.vip/</id>
  
  <author>
    <name>Michael_Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据分析之python数据结构和序列</title>
    <link href="https://wangweijie.vip/2020/02/18/2020-02-18-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%8F%E5%88%97/"/>
    <id>https://wangweijie.vip/2020/02/18/2020-02-18-数据分析之python数据结构和序列/</id>
    <published>2020-02-18T14:00:09.011Z</published>
    <updated>2020-02-18T14:05:43.787Z</updated>
    
    <content type="html"><![CDATA[<p>每个数据结构都是语言设计者的精心设计,推导式也是有趣的部分</p><h1 id="python的数据结构-函数和文件"><a href="#python的数据结构-函数和文件" class="headerlink" title="python的数据结构,函数和文件"></a>python的数据结构,函数和文件</h1><ol><li>数据结构和序列,函数,文件讲分为3个部分进行叙述</li></ol><h1 id="数据结构和序列"><a href="#数据结构和序列" class="headerlink" title="数据结构和序列"></a>数据结构和序列</h1><p><strong>python的数据结构有元组,列表,字典,集合</strong></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><em>元组是一个固定长度,不可改变的python序列对象,创建元组最简单的方式就是用逗号进行分隔</em></p><p><img src="/images/resources/2ADB91417B20DC838C193A4ACDF1A6A1.jpg" alt="IMAGE"></p><p><em>如何元组中某个对象是可变的,可以在原位上进行修改</em></p><p><img src="/images/resources/4687ABDDABDE1152358DE012E5CBC3C7.jpg" alt="IMAGE"></p><p><em>元组可以相接与复制</em></p><p><img src="/images/resources/755E5FA05748213CCA82761CBE40B6C5.jpg" alt="IMAGE"></p><h3 id="拆分元组"><a href="#拆分元组" class="headerlink" title="拆分元组"></a>拆分元组</h3><h4 id="拆分和数值交换"><a href="#拆分和数值交换" class="headerlink" title="拆分和数值交换"></a>拆分和数值交换</h4><p><img src="/images/resources/92858794DECE6DAD07EE673BBD4FDCC7.jpg" alt="IMAGE"></p><h4 id="拆分迭代元组或者列表序列"><a href="#拆分迭代元组或者列表序列" class="headerlink" title="拆分迭代元组或者列表序列"></a>拆分迭代元组或者列表序列</h4><p><img src="/images/resources/22F732D23D4E4917BA09FC95F66DB0F3.jpg" alt="IMAGE"></p><h4 id="tuple方法"><a href="#tuple方法" class="headerlink" title="tuple方法"></a>tuple方法</h4><p><em>元组有一个方法和列表保持一致是叫做count,可以统计某个值出现的频率</em></p><p><img src="/images/resources/F5BFB1E3646A723755FB1A2C2303A8D3.jpg" alt="IMAGE"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><em>与元组对比,列表的长度可变,内容可以被修改,可以用方括号定义,或者用list函数</em></p><p><img src="/images/resources/3FA6147CEEC6591A8FF02FEA84DD0682.jpg" alt="IMAGE"></p><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><p><img src="/images/resources/C74934A48935FB96A9827AE4CF762EB1.jpg" alt="IMAGE"></p><h3 id="通过in或者not-in可以检查列表是否包含该数据"><a href="#通过in或者not-in可以检查列表是否包含该数据" class="headerlink" title="通过in或者not in可以检查列表是否包含该数据"></a>通过in或者not in可以检查列表是否包含该数据</h3><p><img src="/images/resources/5FE59F4596DF44F604E9EF46372515A7.jpg" alt="IMAGE"></p><h3 id="串联和组合列表"><a href="#串联和组合列表" class="headerlink" title="串联和组合列表"></a>串联和组合列表</h3><p><img src="/images/resources/3AAC6E0B610071462195D4AD879D36A2.jpg" alt="IMAGE"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><em>通过使用sort函数对一个列表原地排序</em></p><p><img src="/images/resources/BEFDED1B684DFB66AD6B773B661DCE7B.jpg" alt="IMAGE"></p><h3 id="二分搜索和维护已排序的列表"><a href="#二分搜索和维护已排序的列表" class="headerlink" title="二分搜索和维护已排序的列表"></a>二分搜索和维护已排序的列表</h3><p><em>在python中bisect模块支持二分查找和向已排序的列表插入值</em></p><p><img src="/images/resources/39F97B38573F4D1D30B11FCAB79E7D92.jpg" alt="IMAGE"></p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p><em>切片的目的主要选取大多数序列类型的一部分,切片的基本形式就是strat:stop</em></p><p><em>切片的起始元素是包含的,但不包含结束元素,因此结果中包含的元素个数为stop-start</em></p><p><img src="/images/resources/8AB835212447CFEFA8F40535D85F72E2.jpg" alt="IMAGE"></p><h4 id="递进切片"><a href="#递进切片" class="headerlink" title="递进切片"></a>递进切片</h4><p><img src="/images/resources/66ADF11715DBDE531B2283C4AE59EFE0.jpg" alt="IMAGE"></p><h2 id="切片的规律可以如下图所示"><a href="#切片的规律可以如下图所示" class="headerlink" title="切片的规律可以如下图所示"></a>切片的规律可以如下图所示</h2><p><img src="/images/resources/185AADC5CACCF64F386E5769BB564A2A.jpg" alt="IMAGE"></p><h2 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a>序列函数</h2><h3 id="enumerate函数"><a href="#enumerate函数" class="headerlink" title="enumerate函数"></a>enumerate函数</h3><p><em>迭代一个序列的时候,想知道当前项的序号</em></p><p><img src="/images/resources/AA3852DD100C8F45ACF57882952A231D.jpg" alt="IMAGE"></p><h3 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h3><p><em>sorted函数可以从任意序列的元素返回一个新的排好序的列表</em></p><p><img src="/images/resources/5657F65F4C8FD5441E3C3916E3A54A6C.jpg" alt="IMAGE"></p><h3 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h3><p><em>zip函数可以将多个列表，元组或其它序列组合成一个元组列表</em></p><p><img src="/images/resources/272D7629905D0F009F37B257463A591A.jpg" alt="IMAGE"></p><h3 id="reversed函数"><a href="#reversed函数" class="headerlink" title="reversed函数"></a>reversed函数</h3><p><em>reversed可以从后向前迭代一个序列</em></p><p><img src="/images/resources/D5154AC437784C34B97FF8A39087B138.jpg" alt="IMAGE"></p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><em>字典是python最为重要的数据结构,也可以叫做哈希映射或关联数组.以键值的方式构成,键值都可以是python对象</em></p><p><em>创建字典的方法之一是使用尖括号,用冒号进行键和值的分隔</em></p><p><img src="/images/resources/A5C76341228517851E00CDB816CA3A39.jpg" alt="IMAGE"></p><h3 id="删除的2种方式"><a href="#删除的2种方式" class="headerlink" title="删除的2种方式"></a>删除的2种方式</h3><p><img src="/images/resources/6599F1C98711F040F7CA77A780A1E9FF.jpg" alt="IMAGE"></p><h3 id="键值的迭代与字典融合"><a href="#键值的迭代与字典融合" class="headerlink" title="键值的迭代与字典融合"></a>键值的迭代与字典融合</h3><p><img src="/images/resources/E4C4DCF8FAC151BC5DE3BF0BF54A4E22.jpg" alt="IMAGE"></p><h3 id="通过序列创建字典"><a href="#通过序列创建字典" class="headerlink" title="通过序列创建字典"></a>通过序列创建字典</h3><p><img src="/images/resources/FD763C5F0162EAF6F5E9DB2AA875E2AC.jpg" alt="IMAGE"></p><h3 id="对单词进行分类"><a href="#对单词进行分类" class="headerlink" title="对单词进行分类"></a>对单词进行分类</h3><p><img src="/images/resources/5160274AFDB6C56B59E6D2265426568D.jpg" alt="IMAGE"></p><h3 id="关于有效的键类型"><a href="#关于有效的键类型" class="headerlink" title="关于有效的键类型"></a>关于有效的键类型</h3><p><strong>键通常是不可变的标量类型,list是不被允许的</strong></p><p><img src="/images/resources/B428C73E1B1025035FC0E7C5D866631C.jpg" alt="IMAGE"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><em>集合是无序,不可重复的元素的集合,可以理解为字典,只有键没有值,创建集合有2种方式,通过set函数或者使用尖括号set语句</em></p><p><img src="/images/resources/D87BD1A35015B4AF0A8C72053B521F42.jpg" alt="IMAGE"></p><h3 id="集合支持合并-交集-等集合运算"><a href="#集合支持合并-交集-等集合运算" class="headerlink" title="集合支持合并,交集,等集合运算"></a>集合支持合并,交集,等集合运算</h3><p><img src="/images/resources/411E63BDE36BE3DC7D014E840F5F96B5.jpg" alt="IMAGE"></p><h3 id="集合中常用的方法"><a href="#集合中常用的方法" class="headerlink" title="集合中常用的方法"></a>集合中常用的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S.add(e) 在集合中添加一个新的元素e；如果元素已经存在，则不添加</span><br><span class="line">S.remove(e) 从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误</span><br><span class="line">S.discard(e) 从集合S中移除一个元素e;</span><br><span class="line">S.clear() 清空集合内的所有元素</span><br><span class="line">S.copy() 将集合进行一次浅拷贝</span><br><span class="line">S.pop() 从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常</span><br><span class="line">S.update(s2) 用 S与s2得到的全集更新变量S</span><br><span class="line">以下内容可以用运算符操作代替  </span><br><span class="line">S.difference(s2) 用S - s2 运算，返回存在于在S中，但不在s2中的所有元素的集合</span><br><span class="line">S.difference_update(s2) 等同于 S = S - s2</span><br><span class="line">S.intersection(s2) 等同于S &amp; s2</span><br><span class="line">S.intersection_update(s2) 等同于S = S &amp; s2</span><br><span class="line">S.isdisjoint(s2) 如果S与s2交集为空返回True,非空则返回False</span><br><span class="line">S.issubset(s2) 如果S与s2交集为非空返回True,空则返回False</span><br><span class="line">S.issuperset(...) 如果S为s2的子集返回True,否则返回False</span><br><span class="line">S.symmetric_difference(s2) 返回对称补集,等同于 S ^ s2</span><br><span class="line">S.symmetric_difference_update(s2) 用S 与 s2的对称补集更新 S</span><br><span class="line">S.union(s2) 生成 S 与 s2的全集</span><br></pre></td></tr></table></figure><h2 id="列表-集合-字典推导式以及嵌套推导式"><a href="#列表-集合-字典推导式以及嵌套推导式" class="headerlink" title="列表,集合,字典推导式以及嵌套推导式"></a>列表,集合,字典推导式以及嵌套推导式</h2><p><em>语法格式如下:[expr for val in colletion if condition]</em></p><p><img src="/images/resources/19E78E4840C00686CC94012669B01D67.jpg" alt="IMAGE"></p><h3 id="嵌套推导式-稍难"><a href="#嵌套推导式-稍难" class="headerlink" title="嵌套推导式(稍难)"></a>嵌套推导式(稍难)</h3><p><img src="/images/resources/8AF0CADA6EAE4D2EAE8968C87A325DCB.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个数据结构都是语言设计者的精心设计,推导式也是有趣的部分&lt;/p&gt;
&lt;h1 id=&quot;python的数据结构-函数和文件&quot;&gt;&lt;a href=&quot;#python的数据结构-函数和文件&quot; class=&quot;headerlink&quot; title=&quot;python的数据结构,函数和文件&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据结构" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="序列" scheme="https://wangweijie.vip/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="推导式" scheme="https://wangweijie.vip/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python基础语法2</title>
    <link href="https://wangweijie.vip/2020/02/17/2020-02-17-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/"/>
    <id>https://wangweijie.vip/2020/02/17/2020-02-17-数据分析之python基础语法2/</id>
    <published>2020-02-17T08:03:14.622Z</published>
    <updated>2020-02-17T08:19:36.569Z</updated>
    
    <content type="html"><![CDATA[<p>继续前进,这是python基础知识的完结,后续我们将进阶到数据结构,函数和文件</p><h1 id="python数据类型和控制流"><a href="#python数据类型和控制流" class="headerlink" title="python数据类型和控制流"></a>python数据类型和控制流</h1><ol><li>标量类型是什么,如何使用</li><li>控制流式什么,如何使用</li></ol><h1 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h1><p><em>在python的标准库中,有一些内建的类型,用来处理数值数据,字符串,布尔值,日期类型.单值类型成为标量类型</em></p><ol><li>None         表明python里面的控制</li><li>str          字符串类型,有以UTF-8为基准</li><li>bytes        原生的ascii字节</li><li>float        双精度浮点数</li><li>bool         True或false值</li><li>int          任意精度整数</li></ol><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="int可以存储任意大的数"><a href="#int可以存储任意大的数" class="headerlink" title="int可以存储任意大的数"></a>int可以存储任意大的数</h3><p><img src="/images/resources/BCEB5560ADDBFD33CEFA045B1FE0F0CC.jpg" alt="IMAGE"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><em>字符串的表现,可以用单引号和双引号,有换行的可以用三引号</em></p><p><img src="/images/resources/302597F360B28DB47883A85B37C57F71.jpg" alt="IMAGE"></p><p><em>python的字符串是不可变的,不能修改字符串</em></p><p><img src="/images/resources/D58AE7B29D7594EC5F157E8E855256B5.jpg" alt="IMAGE"></p><p><em>许多python对象可以转换为字符串,字符串是一个有序列的unicode字符,可以像列表和元组一样处理(用于切片)</em></p><p><img src="/images/resources/B8B3839B489398E76BBC35787E77A93F.jpg" alt="IMAGE"></p><p><em>用r来表示字符本身,字符串合并,字符串格式化</em></p><p><img src="/images/resources/2DE7E3EAC6027725B02131A41F6BAC1F.jpg" alt="IMAGE"></p><p><em>字节和Unicode</em></p><p><img src="/images/resources/D7C95EC8DABD2198462AD9B0D31094A7.jpg" alt="IMAGE"></p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p><img src="/images/resources/00762643AC8645079A66413E2FF4FFD2.jpg" alt="IMAGE"></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><img src="/images/resources/24C0806F8555931DBFDFD0AC4791BB6C.jpg" alt="IMAGE"></p><h3 id="关于特殊的None"><a href="#关于特殊的None" class="headerlink" title="关于特殊的None"></a>关于特殊的None</h3><p><em>None是python的空值类型,一个函数没有明确的返回值,就默认返回为none</em></p><p><img src="/images/resources/9D1235D92D422E3FB6449AF2FBEB275C.jpg" alt="IMAGE"></p><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p><em>python内建的datetime模块提供了datetime,date,time类型,datetime结合date和time是常使用的</em></p><p><img src="/images/resources/A625D02AB8ECB7A603FAEDFC0DFE59C5.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%a星期的英文单词的缩写：如星期一， 则返回 Mon</span><br><span class="line">%A星期的英文单词的全拼：如星期一，返回 Monday</span><br><span class="line">%b月份的英文单词的缩写：如一月， 则返回 Jan</span><br><span class="line">%B月份的引文单词的缩写：如一月， 则返回 January</span><br><span class="line">%c返回datetime的字符串表示，如03/08/15 23:01:26</span><br><span class="line">%d返回的是当前时间是当前月的第几天</span><br><span class="line">%f微秒的表示： 范围: [0,999999]</span><br><span class="line">%H以24小时制表示当前小时</span><br><span class="line">%I以12小时制表示当前小时</span><br><span class="line">%j返回 当天是当年的第几天 范围[001,366]</span><br><span class="line">%m返回月份 范围[0,12]</span><br><span class="line">%M返回分钟数 范围 [0,59]</span><br><span class="line">%P返回是上午还是下午–AM or PM</span><br><span class="line">%S返回秒数 范围 [0,61]。。。手册说明的</span><br><span class="line">%U返回当周是当年的第几周 以周日为第一天</span><br><span class="line">%W返回当周是当年的第几周 以周一为第一天</span><br><span class="line">%w当天在当周的天数，范围为[0, 6]，6表示星期天</span><br><span class="line">%x日期的字符串表示 ：03/08/15</span><br><span class="line">%X时间的字符串表示 ：23:22:08</span><br><span class="line">%y两个数字表示的年份 15</span><br><span class="line">%Y四个数字表示的年份 2015</span><br><span class="line">%z与utc时间的间隔 （如果是本地时间，返回空字符串）</span><br><span class="line">%Z时区名称（如果是本地时间，返回空字符串）</span><br></pre></td></tr></table></figure><h4 id="时间替换和时间差"><a href="#时间替换和时间差" class="headerlink" title="时间替换和时间差"></a>时间替换和时间差</h4><p><img src="/images/resources/726822CE28F6DAE65F3A4D73632E21CC.jpg" alt="IMAGE"></p><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><p><em>在python中有若干的关键字进行条件逻辑,循环,以及其他控制流操作</em></p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if,elif,else"></a>if,elif,else</h2><p><img src="/images/resources/47EC1A063113F928740E64748596D507.jpg" alt="IMAGE"></p><p><img src="/images/resources/0D86D52E143AA8D621CE3BFFF2856E7C.jpg" alt="IMAGE"></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="contiune"><a href="#contiune" class="headerlink" title="contiune"></a>contiune</h3><p><em>contiune代表着当次循环跳过,继续进行下一次的循环</em></p><p><img src="/images/resources/B8D21E133AE0C982129F7B9098A78436.jpg" alt="IMAGE"></p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><em>break代表着跳出整个循环,并结束循环的过程</em></p><p><img src="/images/resources/6945B396B8E12DBF4E67B8BC838E4C73.jpg" alt="IMAGE"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><img src="/images/resources/6A11357229210DA6A177A2B96B4A543D.jpg" alt="IMAGE"></p><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><p><em>pass是python中的非操作语句,代码块不需要执行任何动作</em></p><p><img src="/images/resources/7953034C9AB1DA6CC980D6029A4F3D35.jpg" alt="IMAGE"></p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p><em>rang函数返回一个迭代器,用来产生一个均匀分布的整数序列</em></p><p><img src="/images/resources/D551EBF7FB2492428B00937256A0BE99.jpg" alt="IMAGE"></p><p><img src="/images/resources/9AE7D1020C0B8A6FDC404A681543A2E9.jpg" alt="IMAGE"></p><p><strong>注意:虽然range可以产生任意大的序号.所耗用的时长和内容比较小</strong></p><p><img src="/images/resources/FC805DC118C375042C3DCEB08C855B1D.jpg" alt="IMAGE"></p><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p><img src="/images/resources/D784B98ADA87F900AF14C9E03FDBB05E.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续前进,这是python基础知识的完结,后续我们将进阶到数据结构,函数和文件&lt;/p&gt;
&lt;h1 id=&quot;python数据类型和控制流&quot;&gt;&lt;a href=&quot;#python数据类型和控制流&quot; class=&quot;headerlink&quot; title=&quot;python数据类型和控制流&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="语言基础2" scheme="https://wangweijie.vip/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%802/"/>
    
      <category term="面向对象" scheme="https://wangweijie.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python基础语法1</title>
    <link href="https://wangweijie.vip/2020/02/16/2020-02-15-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/"/>
    <id>https://wangweijie.vip/2020/02/16/2020-02-15-数据分析之python基础语法1/</id>
    <published>2020-02-16T09:03:27.058Z</published>
    <updated>2020-02-16T09:27:28.389Z</updated>
    
    <content type="html"><![CDATA[<p>从语言思维来牢记基础,对于我们用语言来创造是必要的.</p><h1 id="python语言基础"><a href="#python语言基础" class="headerlink" title="python语言基础"></a>python语言基础</h1><ol><li>语言的艺术</li><li>语言的标准</li></ol><h1 id="语言的艺术"><a href="#语言的艺术" class="headerlink" title="语言的艺术"></a>语言的艺术</h1><blockquote><p>语言的语义</p></blockquote><p><strong>python语言在编写的时候强调的是可读性,简洁,清晰.</strong></p><blockquote><p>语言使用缩进而不是括号</p></blockquote><ol><li>使用tab或者4个空格来组织自己的代码</li><li>增加可读性,简洁</li></ol><p><img src="/images/resources/CABF027DF32BB72242382DCD94299087.jpg" alt="IMAGE"></p><blockquote><p>万物皆对象</p></blockquote><p><strong>在python所构建的数据都是对象,而这个对象拥有一致性也就是目标和目的是一致的</strong></p><p><em>每个数字,字符串,数据结构等都是对象,对象中都有自己的数据类型和内部数据</em></p><blockquote><p>注释</p></blockquote><ol><li>注释注重解释</li></ol><p><img src="/images/resources/249CBE5EA473D4C1AB847514449F4C41.jpg" alt="IMAGE"></p><blockquote><p>函数和对象上的方法调用</p></blockquote><ol><li>定义函数,调用函数,定义对象,对象方法调用</li></ol><p><img src="/images/resources/E78BDD7B30D1C7AE2ADFE5F043151BE3.jpg" alt="IMAGE"></p><h1 id="语言的标准"><a href="#语言的标准" class="headerlink" title="语言的标准"></a>语言的标准</h1><h2 id="变量和参数的传递"><a href="#变量和参数的传递" class="headerlink" title="变量和参数的传递"></a>变量和参数的传递</h2><ol><li>变量即是创建一个名字,而等号右边则是这个变量所代表的含义即是数据</li></ol><p><img src="/images/resources/4CABE6DC8BA41177D66FF4EB6B59E005.jpg" alt="IMAGE"></p><p><em>a和b都是同一个引用,指向的是具体的对象</em></p><h3 id="赋值-绑定-传递对象"><a href="#赋值-绑定-传递对象" class="headerlink" title="赋值=绑定,传递对象"></a>赋值=绑定,传递对象</h3><p><em>赋值称作为绑定,把一个名字绑定给一个对象,变量名可能被称为绑定变量</em></p><p><em>把对象传递给函数的时候,不会复制,而是直接引用</em></p><p><img src="/images/resources/09640B27C22D97CABE93AF55534FCB04.jpg" alt="IMAGE"></p><h3 id="动态引用和强类型"><a href="#动态引用和强类型" class="headerlink" title="动态引用和强类型"></a>动态引用和强类型</h3><p><img src="/images/resources/3E769A6E9B8C16189DBEC3D12804ACF9.jpg" alt="IMAGE"></p><p><em>注意知晓元组类型</em></p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p><em>对象都拥有属性和方法</em></p><p><strong>对象拥有属性和方法</strong></p><p><img src="/images/resources/CF718DF421AB02EDB230CB55BA654466.jpg" alt="IMAGE"></p><h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><p><em>如果不关心对象的类型,只关心是否有些方法和用途,这种称作为鸭子类型,比如你只想关心这个对象是否可以迭代.那么可以</em></p><p><img src="/images/resources/DEF5DA99ABBEBB8E238A50B26AD26348.jpg" alt="IMAGE"></p><h3 id="关于模块的引入"><a href="#关于模块的引入" class="headerlink" title="关于模块的引入"></a>关于模块的引入</h3><p><strong>引入模块有三种形式</strong></p><ol><li>引入整个模块</li><li>引入模块中的某个部分</li><li>引入的模块构建一个别名</li></ol><p><img src="/images/resources/F9DF1ABBA17F2D2FE6522B8482904CB0.jpg" alt="IMAGE"></p><h3 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h3><p><img src="/images/resources/4975BC58F07B92BE658ECB9EBF8CDC02.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a+b : a加b</span><br><span class="line"></span><br><span class="line">a-b :  a减b</span><br><span class="line"></span><br><span class="line">a*b :  a乘b</span><br><span class="line"></span><br><span class="line">a/b : a除以b</span><br><span class="line"></span><br><span class="line">a//b:a整除以b,表示的是返回a除以b的结果的整数部分，而不是证明了a能被b整除。要证明a能被b整除，可以是if a%b==0: 或者a/b＝int 等等</span><br><span class="line"></span><br><span class="line">a**b : a的b次方</span><br><span class="line"></span><br><span class="line">a&amp;b : a与b,对于整数则是按位AND</span><br><span class="line"></span><br><span class="line">a|b :  a或b,对于整数则是按位OR</span><br><span class="line"></span><br><span class="line">a^b :  对布尔值，a异或b,对于整数则是按位异或</span><br><span class="line"></span><br><span class="line">a==b : a和b相等则为Ture</span><br><span class="line"></span><br><span class="line">a!=b: a和b不相等则为Ture</span><br><span class="line"></span><br><span class="line">a&lt;=b,a&lt;b : 小于等于，小于</span><br><span class="line"></span><br><span class="line">a&gt;=b,a&gt;b : 大于等于，大于</span><br><span class="line"></span><br><span class="line">a is b: a和b是同一个python对象则为Ture</span><br><span class="line"></span><br><span class="line">a is not b: a和b不是同一个python对象则为Ture</span><br></pre></td></tr></table></figure><p><strong>在python中is是判断对象,==才是判断对象里面的内容是否一样</strong></p><h3 id="可变和不可编对象"><a href="#可变和不可编对象" class="headerlink" title="可变和不可编对象"></a>可变和不可编对象</h3><p><em>在python的大多数对象中,如:列表,字典,Numpy数组和用户自定义类型都是可变的</em></p><p><img src="/images/resources/7BFA7F926936CAC7642A7A70526A81DE.jpg" alt="IMAGE"></p><p><em>但是对于字符串和元组是不可变的</em></p><p><img src="/images/resources/3CA0B3E0025D142C615B4B917C590694.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从语言思维来牢记基础,对于我们用语言来创造是必要的.&lt;/p&gt;
&lt;h1 id=&quot;python语言基础&quot;&gt;&lt;a href=&quot;#python语言基础&quot; class=&quot;headerlink&quot; title=&quot;python语言基础&quot;&gt;&lt;/a&gt;python语言基础&lt;/h1&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="面向对象" scheme="https://wangweijie.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="语言基础" scheme="https://wangweijie.vip/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之常用操作</title>
    <link href="https://wangweijie.vip/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://wangweijie.vip/2020/02/14/2020-02-14-数据分析之常用操作/</id>
    <published>2020-02-14T14:24:13.202Z</published>
    <updated>2020-02-14T14:43:48.642Z</updated>
    
    <content type="html"><![CDATA[<p>熟知一些基本操作,能够加快你的学习效率。</p><h1 id="python日常操作"><a href="#python日常操作" class="headerlink" title="python日常操作"></a>python日常操作</h1><ol><li>python交互工具jupyter_notebook日常使用</li></ol><h1 id="notebook的使用"><a href="#notebook的使用" class="headerlink" title="notebook的使用"></a>notebook的使用</h1><h2 id="命令窗口中输入jupyter-notebook"><a href="#命令窗口中输入jupyter-notebook" class="headerlink" title="命令窗口中输入jupyter notebook"></a>命令窗口中输入jupyter notebook</h2><p><strong>可以在切换到自己要写笔记的目录中</strong></p><p><img src="/images/resources/B53284DA6C7F0A216CDE866AB9B635A6.jpg" alt="IMAGE"></p><h2 id="在notenook中第一次操作"><a href="#在notenook中第一次操作" class="headerlink" title="在notenook中第一次操作"></a>在notenook中第一次操作</h2><p><img src="/images/resources/53861EE5B0A4F68971F8688B99F8D47C.jpg" alt="IMAGE"></p><p><em>注意:我们在使用的时候可以输入关键字的用Tab键进行补全操作</em></p><h3 id="Tab补全说明"><a href="#Tab补全说明" class="headerlink" title="Tab补全说明"></a>Tab补全说明</h3><p>1.Tab补全不是万能的,会尽可能的补全你的代码.按下Tab会搜索已输入的变量(对象,函数等等)</p><p><img src="/images/resources/92C3982A52F89E66DE166DBA8974181E.jpg" alt="IMAGE"></p><p><img src="/images/resources/42AD3F735B677C78D1EE45BC13000A74.jpg" alt="IMAGE"></p><p>2.同样的tab也适应于模块</p><p><img src="/images/resources/C2CCD872AD89C00E60B2F26A4BE7E001.jpg" alt="IMAGE"></p><p>3.同样适用与函数</p><p><img src="/images/resources/B9DE29D92317E46F3F2CEB3F20AA4D99.jpg" alt="IMAGE"></p><h2 id="自省操作"><a href="#自省操作" class="headerlink" title="自省操作"></a>自省操作</h2><p><strong>通过自省可以关注对象的类型</strong></p><p><img src="/images/resources/63C327928CBF5FA6B1D5B905C127226D.jpg" alt="IMAGE"></p><p><strong>针对自定义函数</strong></p><p><img src="/images/resources/5616539F0C89B3FED84CE97BFB5580E1.jpg" alt="IMAGE"></p><p><img src="/images/resources/B8036F487C114A4937BCD63D830106F9.jpg" alt="IMAGE"></p><h2 id="其余额外的命令"><a href="#其余额外的命令" class="headerlink" title="其余额外的命令"></a>其余额外的命令</h2><ol><li>%run命令可以用来执行某一个位置上的py文件</li><li>%load命令可以将代码导入到某一个位置中</li><li>使用Ctrl+C可以随时终端执行中的程序</li></ol><h2 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h2><p><em>魔术命令是指在指令面前加上%,可以是普通任务更快捷,更方便</em></p><p><strong>注意:没下载numpy的话可以执行 pip3 install numpy</strong></p><p><img src="/images/resources/1572ECAE3810677FBED5CAFB70B50E64.jpg" alt="IMAGE"></p><p><img src="/images/resources/B760556E4AF6D26DF497A3189EFDEBB1.jpg" alt="IMAGE"></p><h3 id="常用的魔术命令"><a href="#常用的魔术命令" class="headerlink" title="常用的魔术命令"></a>常用的魔术命令</h3><p>%quickref       显示IPython的快速参考</p><p>%magic          显示所有魔术命令的详细文档</p><p>%debug          从最新的异常跟踪的底部进入交互式调试器</p><p>%hist           打开命令的输入（可选输出）历史</p><p>%pdb            在异常发生后自动进入调试器</p><p>%paste          执行剪贴板中的Python代码</p><p>%cpaste         打开一个特殊的提示符以便于手工粘贴待执行的Python代码</p><p>%reset          删除interactive命名空间中的全部变量、名称</p><p>%page OBJECT    通过分页器打印出OBJECT</p><p>%run script.py  执行Python脚本文件</p><p>%prun statement 通过cProfile执行statement,并打印分析器的输出结果</p><p>%time statement 报告statement的执行时间</p><p>%timeit statement 多次执行statement以计算系综合平均执行时间。对那些执行时间非常小的代码有用</p><p>%who、%who_ls、whos 显示interactive命名空间中定义的变量，信息级别/冗余度可变</p><p>%xdel variable 删除variable,并尝试清除其在IPython中的对象上的一切引用</p><p><strong>后面在使用的时候可以在回过来进行查找</strong></p><h2 id="集成美丽的制图"><a href="#集成美丽的制图" class="headerlink" title="集成美丽的制图"></a>集成美丽的制图</h2><p><em>同样的需要安装制图执行命令:pip3 install matplotlib -i <a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a></em></p><p><img src="/images/resources/9163D86D2540DF9C66DF020EB18231C8.jpg" alt="IMAGE"></p><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p>1.np.random.randn(50) 代表着返回一组标准正态分布的随机值,范围在-1.96～+1.96</p><p><img src="/images/resources/1E7AF91A912DEA021CBF628480AE1DE8.jpg" alt="IMAGE"></p><p>2.numpy.cumsum()代表着累加求和 1 1+2 1+2+3 依次类推</p><p><img src="/images/resources/E16A45C8AC4BB3BF79964275A0CA50DA.jpg" alt="IMAGE"></p><p>3.plt.plot()代表着线性制图</p><p><img src="/images/resources/3FD580DCF3524851AEF1217B9566B66D.jpg" alt="IMAGE"></p><ol start="4"><li>%matplotlib inline 用于省掉plt.show()</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熟知一些基本操作,能够加快你的学习效率。&lt;/p&gt;
&lt;h1 id=&quot;python日常操作&quot;&gt;&lt;a href=&quot;#python日常操作&quot; class=&quot;headerlink&quot; title=&quot;python日常操作&quot;&gt;&lt;/a&gt;python日常操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pyth
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据的禅意" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A6%85%E6%84%8F/"/>
    
      <category term="日常操作" scheme="https://wangweijie.vip/tags/%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/"/>
    
      <category term="初次接触" scheme="https://wangweijie.vip/tags/%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据分析前的准备工作</title>
    <link href="https://wangweijie.vip/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://wangweijie.vip/2020/02/14/2020-02-14-数据分析前的准备工作/</id>
    <published>2020-02-14T08:37:39.234Z</published>
    <updated>2020-02-14T14:24:49.339Z</updated>
    
    <content type="html"><![CDATA[<p>做好数据分析,先好好理解数据和工具</p><h1 id="数据分析前的准备工作"><a href="#数据分析前的准备工作" class="headerlink" title="数据分析前的准备工作"></a>数据分析前的准备工作</h1><ol><li>数据与python</li><li>python处理数据问题上面重要的库</li><li>环境安装以及常用的学习工具与开发工具</li></ol><h1 id="数据与python"><a href="#数据与python" class="headerlink" title="数据与python"></a>数据与python</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><strong>数据这个词是抽象的,我们如何认识数据,有2个点我们需要我们作为前提</strong></p><ol><li>数据有可能代表是世界,人等一切事物,及时杂乱无序,但是也在当中存在规律</li><li>从数据中找到合适的规律和特点,那么我们需要结构化数据。那么结构化的数据有哪些？比如:表格类型的数据,多维数组,通过关键列构建的表格类型数据等</li></ol><p><strong><em>注意:大部分数据集都能转换成结构化的数据,结构化只是一种形式,更多的还是人自主的思维能力.比如:一组新闻文章里面的内容可以提取出词频表,而这个表就可以对于以后的情感进行分析</em></strong></p><h2 id="为什么选择用python"><a href="#为什么选择用python" class="headerlink" title="为什么选择用python"></a>为什么选择用python</h2><ol><li>python作为胶水语言可以随时沾和随时撕掉</li><li>python语言在设计的过程中就是构建以数据为中心的应用型数据</li><li>python适用于构建分析应用和一些常见的通用系统(日常的管理系统)</li></ol><p><strong>注:python作为一种解释性语言没有编译性语言的运行时间效率要高.这也是python的不足之处</strong></p><h1 id="python重要的库"><a href="#python重要的库" class="headerlink" title="python重要的库"></a>python重要的库</h1><blockquote><p>Numpy (数值处理)</p></blockquote><ol><li>可以构建快速高效的多维数组对象(ndarray)</li><li>可以用于对数组执行数学运算和计算.提供了大量的函数</li><li>可以用于读写硬盘中基于数组的数据集的工具</li><li>常见的线性代数等包含随机数的生成</li></ol><blockquote><p>pandas (面板数据)</p></blockquote><ol><li>能够处理大量结构化数据</li><li>常用的2个对象一个是DataFrame和Series,分别是面向列的二维表结构以及一个一维的标签化数组对象</li><li>提供复杂精细的索引功能,能够快速的完成重塑,切片,切块,聚合以及选取数据子集等操作</li></ol><blockquote><p>matplotlib</p></blockquote><ol><li>绘制图表以及其他二维数据可视化的工具</li></ol><blockquote><p>ipython与jupyter</p></blockquote><ol><li>2个都是良好的交互工具</li><li>ipython用于运行，调试，测试等操作</li><li>jupyter良好的学习笔记工具</li></ol><blockquote><p>Scipy与scikit-learn与statsmodels</p></blockquote><ol><li>Scipy解决计算中各种标准问题域</li><li>scikit-learn机器学习的工具包,偏重于预测</li><li>statsmodels统计分析包,偏重于统计与推断</li></ol><h1 id="环境安装以及常用的学习工具"><a href="#环境安装以及常用的学习工具" class="headerlink" title="环境安装以及常用的学习工具"></a>环境安装以及常用的学习工具</h1><h2 id="python环境的安装"><a href="#python环境的安装" class="headerlink" title="python环境的安装"></a>python环境的安装</h2><p><strong><em>python环境的安装不在进行说明,只是需要注意的是检查不同系统的变量设置,macos系统比较特殊,需要检查.bash_prifile中是否添加</em></strong></p><blockquote><p>ipython</p></blockquote><p><img src="/images/resources/0F0228205486739552A6EC6780BA2B68.jpg" alt="IMAGE"></p><blockquote><p>jupyter</p></blockquote><p>1.更新pip<br>python -m pip install -U pip setuptools</p><p>2.安装,使用国内源满速安装<br>pip install jupyter -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>3.在命令中直接jupyter notebook</p><p><img src="/images/resources/2A5E8FE12AE7421DA99315DFC30983A7.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做好数据分析,先好好理解数据和工具&lt;/p&gt;
&lt;h1 id=&quot;数据分析前的准备工作&quot;&gt;&lt;a href=&quot;#数据分析前的准备工作&quot; class=&quot;headerlink&quot; title=&quot;数据分析前的准备工作&quot;&gt;&lt;/a&gt;数据分析前的准备工作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;数据与pyth
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据的禅意" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A6%85%E6%84%8F/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(归约和聚合)</title>
    <link href="https://wangweijie.vip/2020/01/08/2020-01-08-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E5%BD%92%E7%BA%A6%E5%92%8C%E8%81%9A%E5%90%88)/"/>
    <id>https://wangweijie.vip/2020/01/08/2020-01-08-kafkaStream晋阶之路(归约和聚合)/</id>
    <published>2020-01-08T02:54:40.026Z</published>
    <updated>2020-01-08T03:02:12.113Z</updated>
    
    <content type="html"><![CDATA[<p>归约比聚合相对容易,但是聚合可以做更多的事情</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>归约和聚合概念</li><li>解决实际需求</li><li>如何归约</li><li>如何聚合</li></ol><h2 id="归约和聚合概念"><a href="#归约和聚合概念" class="headerlink" title="归约和聚合概念"></a>归约和聚合概念</h2><p>1.归约即是reduce,代表着累加求和，无论是在现在的python已经jdk新特性中都有体现</p><p>2.聚合即是aggregate,代表着聚集合并在一起的操作,一般来说归约和聚合在一起是一种完美的搭配</p><p><a href="http://www.pianshen.com/article/2852280086/" target="_blank" rel="noopener">相对参考的文章</a></p><h2 id="解决实际需求"><a href="#解决实际需求" class="headerlink" title="解决实际需求"></a>解决实际需求</h2><ol><li>比如股票在不断的交易。累计计算从开始成交的总和</li><li>总和有的情况下,获取交易量前5.(按照成交量决定)</li></ol><h2 id="如何归约-代码示例-reduce"><a href="#如何归约-代码示例-reduce" class="headerlink" title="如何归约(代码示例)reduce"></a>如何归约(代码示例)reduce</h2><h3 id="构建一个普通的用户交易记录"><a href="#构建一个普通的用户交易记录" class="headerlink" title="构建一个普通的用户交易记录"></a>构建一个普通的用户交易记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StockTransaction &#123;</span><br><span class="line">//股票标记</span><br><span class="line">    private String symbol;</span><br><span class="line">    //股票领域</span><br><span class="line">    private String sector;</span><br><span class="line">    //股票分类</span><br><span class="line">    private String industry;</span><br><span class="line">    //成交量</span><br><span class="line">    private int shares;</span><br><span class="line">    //成交价格</span><br><span class="line">    private double sharePrice;</span><br><span class="line">    //用户编号</span><br><span class="line">    private String customerId;</span><br><span class="line">    //交易时间</span><br><span class="line">    private Date transactionTimestamp;</span><br><span class="line">    //是否成交</span><br><span class="line">    private boolean purchase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建一个提取交易量的记录类"><a href="#构建一个提取交易量的记录类" class="headerlink" title="构建一个提取交易量的记录类"></a>构建一个提取交易量的记录类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class ShareVolume &#123;</span><br><span class="line">//股票标记</span><br><span class="line">    private String symbol;</span><br><span class="line">    //成交量</span><br><span class="line">    private int shares;</span><br><span class="line">    //股票领域</span><br><span class="line">    private String industry;</span><br><span class="line">public String getSymbol() &#123;</span><br><span class="line">return symbol;</span><br><span class="line">&#125;</span><br><span class="line">public void setSymbol(String symbol) &#123;</span><br><span class="line">this.symbol = symbol;</span><br><span class="line">&#125;</span><br><span class="line">public int getShares() &#123;</span><br><span class="line">return shares;</span><br><span class="line">&#125;</span><br><span class="line">public void setShares(int shares) &#123;</span><br><span class="line">this.shares = shares;</span><br><span class="line">&#125;</span><br><span class="line">public String getIndustry() &#123;</span><br><span class="line">return industry;</span><br><span class="line">&#125;</span><br><span class="line">public void setIndustry(String industry) &#123;</span><br><span class="line">this.industry = industry;</span><br><span class="line">&#125;</span><br><span class="line">    public ShareVolume() &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public ShareVolume(String symbol, int shares, String industry) &#123;</span><br><span class="line">super();</span><br><span class="line">this.symbol = symbol;</span><br><span class="line">this.shares = shares;</span><br><span class="line">this.industry = industry;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    //构建一个shareVolume对象</span><br><span class="line">public  static  ShareVolume  buildInstance(StockTransaction  st) &#123;</span><br><span class="line">   ShareVolume  sv  = new  ShareVolume(st.getSymbol(), st.getShares(), st.getIndustry());</span><br><span class="line">   return sv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//构建一个统计总和对象</span><br><span class="line">public static ShareVolume sum(ShareVolume  s1,ShareVolume s2) &#123;</span><br><span class="line"> ShareVolume  sv =  new ShareVolume();</span><br><span class="line"> sv.setIndustry(s2.getIndustry());</span><br><span class="line"> sv.setSymbol(s1.getSymbol());</span><br><span class="line"> sv.setShares(s1.getShares()+s2.getShares());</span><br><span class="line"> return  sv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分别构建对应的序列化器"><a href="#分别构建对应的序列化器" class="headerlink" title="分别构建对应的序列化器"></a>分别构建对应的序列化器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ShareVolumeSerde  extends WrapperSerde&lt;ShareVolume&gt; &#123;</span><br><span class="line"></span><br><span class="line">public ShareVolumeSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(ShareVolume.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">public class StockTransactionSerde  extends WrapperSerde&lt;StockTransaction&gt; &#123;</span><br><span class="line"></span><br><span class="line">public StockTransactionSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(StockTransaction.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建流程序"><a href="#构建流程序" class="headerlink" title="构建流程序"></a>构建流程序</h3><blockquote><p>先看下reduce接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface Reducer&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 合二为一</span><br><span class="line">     * Aggregate the two given values into a single one.</span><br><span class="line">     *</span><br><span class="line">     * @param value1 the first value for the aggregation</span><br><span class="line">     * @param value2 the second value for the aggregation</span><br><span class="line">     * @return the aggregated value</span><br><span class="line">     */</span><br><span class="line">    V apply(final V value1, final V value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程序代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class RG_Stream &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">        props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KTable-aggregations&quot;);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KTable-aggregations-id&quot;);</span><br><span class="line">        props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KTable-aggregations-client&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">        props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">        props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockTransactionSerde().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">        </span><br><span class="line">    /**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line"></span><br><span class="line">KeyValueMapper&lt;String, ShareVolume, String&gt; classKey1 = (key, sharevolume) -&gt; sharevolume.getSymbol();</span><br><span class="line">KStream&lt;String, ShareVolume&gt; shareStream = streamsBuilder.stream(&quot;STTOPIC&quot;,Consumed.with(Serdes.String(),new StockTransactionSerde()))</span><br><span class="line">.mapValues(st -&gt;ShareVolume.buildInstance(st));</span><br><span class="line"></span><br><span class="line">shareStream.print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">KTable&lt;String, ShareVolume&gt;  shareKTable = shareStream</span><br><span class="line"> .selectKey(classKey1)</span><br><span class="line"> .groupByKey(Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line"> .reduce(ShareVolume::sum);</span><br><span class="line">shareKTable.toStream().print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票成交量总量变更&quot;));</span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:在流内部设置从最先开始消费,这个配置大于初始配置。</p><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><ol><li>开起zookeeper</li><li>开起kafka</li><li>创建主题”STTOPIC”</li><li>启动流程序</li><li>模拟数据发送</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">StockTransaction  record  = new  StockTransaction();</span><br><span class="line">record.setSymbol(&quot;好当家&quot;);</span><br><span class="line">record.setSector(&quot;食品&quot;);</span><br><span class="line">record.setIndustry(&quot;生产类&quot;);</span><br><span class="line">record.setShares(1000);</span><br><span class="line">record.setSharePrice(5.00);</span><br><span class="line">record.setCustomerId(&quot;001&quot;);</span><br><span class="line">record.setTransactionTimestamp(new Date());</span><br><span class="line">record.setPurchase(true);</span><br><span class="line"></span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, StockTransaction&gt; kp =  new KafkaProducer&lt;String,StockTransaction&gt;(properties,new StringSerializer(),new JsonSerializer&lt;StockTransaction&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockTransaction&gt;(&quot;STTOPIC&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论如下:</p></blockquote><p><img src="/images/resources/BBBEE3B9D53E02E604FC5D581655A5B4.jpg" alt="IMAGE"></p><p>即使是断掉程序，在重启程序后，计算依然保持从头开始</p><h2 id="如何聚合-代码示例-aggregate"><a href="#如何聚合-代码示例-aggregate" class="headerlink" title="如何聚合(代码示例)aggregate"></a>如何聚合(代码示例)aggregate</h2><p><strong><em>在聚合之前,归约是聚合的一种形式。归约操作是将产生相同类型的对象,聚合也是对结果求和。但是可以返回不同的类型</em></strong></p><p>现在有一个需求,获取股票交易量前5的，降序产生</p><blockquote><p> 构建一个降序的优先级队列并构建序列化器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueue&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private  TreeSet&lt;T&gt; inner;</span><br><span class="line"></span><br><span class="line">private  int  maxSize;</span><br><span class="line"></span><br><span class="line">    public FixedSizePriorityQueue(Comparator&lt;T&gt; comparator, int maxSize) &#123;</span><br><span class="line">        this.inner = new TreeSet&lt;&gt;(comparator);</span><br><span class="line">        this.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public FixedSizePriorityQueue&lt;T&gt; add(T element) &#123;</span><br><span class="line">        inner.add(element);</span><br><span class="line">        if (inner.size() &gt; maxSize) &#123;</span><br><span class="line">            inner.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FixedSizePriorityQueue&lt;T&gt; remove(T element) &#123;</span><br><span class="line">        if (inner.contains(element)) &#123;</span><br><span class="line">            inner.remove(element);</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Iterator&lt;T&gt; iterator() &#123;</span><br><span class="line">        return inner.iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 改进流式程序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">public class RG_Stream &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">        props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KTable-aggregation&quot;);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KTable-aggregations-i&quot;);</span><br><span class="line">        props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KTable-aggregations-clien&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">        props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">        props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockTransactionSerde().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">        </span><br><span class="line">    /**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用reduce</span><br><span class="line"> */</span><br><span class="line">KeyValueMapper&lt;String, ShareVolume, String&gt; classKey1 = (key, sharevolume) -&gt; sharevolume.getSymbol();</span><br><span class="line">KStream&lt;String, ShareVolume&gt; shareStream = streamsBuilder.stream(&quot;ST2&quot;,Consumed.with(Serdes.String(),new StockTransactionSerde()))</span><br><span class="line">.mapValues(st -&gt;ShareVolume.buildInstance(st));</span><br><span class="line"></span><br><span class="line">shareStream.print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">KTable&lt;String, ShareVolume&gt;  shareKTable = shareStream</span><br><span class="line"> .selectKey(classKey1)</span><br><span class="line"> .groupByKey(Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line"> .reduce(ShareVolume::sum);</span><br><span class="line">shareKTable.toStream().print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票成交量总量变更&quot;));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用aggreate</span><br><span class="line"> */</span><br><span class="line">Comparator&lt;ShareVolume&gt; comparator = (s1,s2) -&gt; s2.getShares()-s1.getShares();</span><br><span class="line">FixedSizePriorityQueue&lt;ShareVolume&gt; fixedQueue  = new FixedSizePriorityQueue&lt;&gt;(comparator, 5);</span><br><span class="line">    ValueMapper&lt;FixedSizePriorityQueue, String&gt; valueMapper = </span><br><span class="line">    fpq -&gt;&#123;</span><br><span class="line">    StringBuilder builder = new StringBuilder();</span><br><span class="line">                Iterator&lt;ShareVolume&gt; iterator = fpq.iterator();</span><br><span class="line">                int counter= 1;</span><br><span class="line">                while (iterator.hasNext()) &#123;</span><br><span class="line">                    ShareVolume stockVolume = iterator.next();</span><br><span class="line">                    if (stockVolume != null) &#123;</span><br><span class="line">                        builder.append(counter++).append(&quot;)&quot;).append(stockVolume.getSymbol())</span><br><span class="line">                                .append(&quot;:&quot;).append(NumberFormat.getInstance().format(stockVolume.getShares())).append(&quot; &quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return builder.toString();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//pair重新生成 new key-value pair</span><br><span class="line">    KTable&lt;String, String&gt; fixKTable = shareKTable.groupBy((k, v) -&gt; KeyValue.pair(v.getIndustry(), v), Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line">                .aggregate(() -&gt; fixedQueue,</span><br><span class="line">                        (k, v, agg) -&gt; agg.add(v),</span><br><span class="line">                        (k, v, agg) -&gt; agg.remove(v),</span><br><span class="line">                        Materialized.with(Serdes.String(), new FixedSizePriorityQueueSerde()))</span><br><span class="line">                .mapValues(valueMapper);</span><br><span class="line"></span><br><span class="line">//peek可用于作日志记录  .peek((k,v) -&gt; System.out.println(&quot;key值&quot;+k+&quot;------value&quot;+v)); </span><br><span class="line">fixKTable.toStream()</span><br><span class="line">.print(Printed.&lt;String, String&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">                    </span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 额外附属的操作(添加对复杂对象的序列化适配器)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueueAdapter extends TypeAdapter&lt;FixedSizePriorityQueue&lt;ShareVolume&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 需要被序列化的对象</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void write(JsonWriter writer, FixedSizePriorityQueue&lt;ShareVolume&gt; value) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        if (value == null) &#123;</span><br><span class="line">            writer.nullValue();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator&lt;ShareVolume&gt; iterator = value.iterator();</span><br><span class="line">        List&lt;ShareVolume&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            ShareVolume stockTransaction = iterator.next();</span><br><span class="line">            if (stockTransaction != null) &#123;</span><br><span class="line">                list.add(stockTransaction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.beginArray();</span><br><span class="line">        for (ShareVolume transaction : list) &#123;</span><br><span class="line">            writer.value(gson.toJson(transaction));</span><br><span class="line">        &#125;</span><br><span class="line">        writer.endArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 反序列化实例</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public FixedSizePriorityQueue&lt;ShareVolume&gt; read(JsonReader reader) throws IOException &#123;</span><br><span class="line">        List&lt;ShareVolume&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        reader.beginArray();</span><br><span class="line">        while (reader.hasNext()) &#123;</span><br><span class="line">            list.add(gson.fromJson(reader.nextString(), ShareVolume.class));</span><br><span class="line">        &#125;</span><br><span class="line">        reader.endArray();</span><br><span class="line"></span><br><span class="line">        Comparator&lt;ShareVolume&gt; c = (c1, c2) -&gt; c2.getShares() - c1.getShares();</span><br><span class="line">        FixedSizePriorityQueue&lt;ShareVolume&gt; fixedSizePriorityQueue = new FixedSizePriorityQueue&lt;&gt;(c, 5);</span><br><span class="line"></span><br><span class="line">        for (ShareVolume transaction : list) &#123;</span><br><span class="line">            fixedSizePriorityQueue.add(transaction);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return fixedSizePriorityQueue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注册到反序列化器中(修订)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class JsonDeserializer&lt;T&gt; implements Deserializer&lt;T&gt; &#123;</span><br><span class="line"> private Gson gson;</span><br><span class="line">    private Class&lt;T&gt; deserializedClass;</span><br><span class="line">    private Type reflectionTypeToken;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer(Class&lt;T&gt; deserializedClass) &#123;</span><br><span class="line">        this.deserializedClass = deserializedClass;</span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer(Type reflectionTypeToken) &#123;</span><br><span class="line">        this.reflectionTypeToken = reflectionTypeToken;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void init () &#123;</span><br><span class="line">        GsonBuilder builder = new GsonBuilder();</span><br><span class="line">        builder.registerTypeAdapter(FixedSizePriorityQueue.class, new FixedSizePriorityQueueAdapter().nullSafe());</span><br><span class="line">        gson = builder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">        if(deserializedClass == null) &#123;</span><br><span class="line">            deserializedClass = (Class&lt;T&gt;) map.get(&quot;serializedClass&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public T deserialize(String s, byte[] bytes) &#123;</span><br><span class="line">         if(bytes == null)&#123;</span><br><span class="line">             return null;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         Type deserializeFrom = deserializedClass != null ? deserializedClass : reflectionTypeToken;</span><br><span class="line"></span><br><span class="line">         return gson.fromJson(new String(bytes),deserializeFrom);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FixedSizePriorityQueueSerde修订</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueueSerde extends WrapperSerde&lt;FixedSizePriorityQueue&gt;&#123;</span><br><span class="line"></span><br><span class="line">  public FixedSizePriorityQueueSerde() &#123;</span><br><span class="line">          super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(new TypeToken&lt;FixedSizePriorityQueue&lt;ShareVolume&gt;&gt;() &#123;&#125;.getType()));</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: ShareVolume同时实现compareble</p><p><strong><em>后续代码改进:可以考虑修订comparetor</em></strong></p><blockquote><p>测试代码通过</p></blockquote><p><img src="/images/resources/DAF74D20FE4A8CD93F0C4069681F42CC.jpg" alt="IMAGE"></p><blockquote><p>关机重启</p></blockquote><p><img src="/images/resources/3CC9639E141CD067CFB8B5615588F0E5.jpg" alt="IMAGE"></p><p>数据计算保持一致</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;归约比聚合相对容易,但是聚合可以做更多的事情&lt;/p&gt;
&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;归约和聚合概念&lt;/li&gt;
&lt;li&gt;解决实际需求&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="聚合" scheme="https://wangweijie.vip/tags/%E8%81%9A%E5%90%88/"/>
    
      <category term="归约" scheme="https://wangweijie.vip/tags/%E5%BD%92%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(KTable)</title>
    <link href="https://wangweijie.vip/2020/01/03/2020-01-03-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(KTable)/"/>
    <id>https://wangweijie.vip/2020/01/03/2020-01-03-kafkaStream晋阶之路(KTable)/</id>
    <published>2020-01-03T07:34:44.906Z</published>
    <updated>2020-01-03T07:40:22.752Z</updated>
    
    <content type="html"><![CDATA[<p>只有清晰的明白流和表，你才有可能明白聚合以及开窗</p><h1 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h1><ol><li>流与表的关系</li><li>记录流概念</li><li>更新记录和日志</li><li>2者之间的对比</li><li>工作原理</li></ol><h2 id="流与表的关系"><a href="#流与表的关系" class="headerlink" title="流与表的关系"></a>流与表的关系</h2><p>在生活中,我们无时无刻都在产生一些事件,每个事件上面都可以看成在历史的记录中不断的添加一笔新的操作.而这些记录与其他的记录无关，都是独立的。</p><h2 id="记录流的概念"><a href="#记录流的概念" class="headerlink" title="记录流的概念"></a>记录流的概念</h2><p><strong>流被定义为无限的事件序列</strong></p><p>例如股票市场中,每只股票的报价都是一个离散时间,它们彼此之间没有任何关联。即使一家公司股票有多次报价。在某个时候我们称作为记录流,如图:</p><p><img src="/images/resources/2344A96518B42F8D06C8C4D2A79CAB99.jpg" alt="IMAGE"></p><p>每个时间就是一个插入项，为表中每个插入项建立一个地增量为1的key</p><h2 id="更定记录和变更日志"><a href="#更定记录和变更日志" class="headerlink" title="更定记录和变更日志"></a>更定记录和变更日志</h2><p>如果讲事件流看成是一个日志,更新流可以看成是一个不断在变更的日志。</p><p><strong><em>如上图所示，如果以股票名字作为主键。那么动作发生将是更新操作。</em></strong></p><p>注意:日志和变更日志都是讲记录追加到文件末尾,在日志中可以看到所有的记录.但是在变更日志中,对任何一个给定键只保留最新记录。</p><p>对于变更日志和更新流来说,我们用KTable进行抽象的表现与描述</p><h2 id="2者之间的对比"><a href="#2者之间的对比" class="headerlink" title="2者之间的对比"></a>2者之间的对比</h2><h3 id="通过代码我们来进行呈现说明"><a href="#通过代码我们来进行呈现说明" class="headerlink" title="通过代码我们来进行呈现说明"></a>通过代码我们来进行呈现说明</h3><blockquote><p>构建股票信息类StockMsg</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class StockMsg &#123;</span><br><span class="line">//股票价格</span><br><span class="line">private  double  stockPrice;</span><br><span class="line">//股票名字</span><br><span class="line">private  String    stockName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改进通用化序列器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class WrapperSerde&lt;T&gt;  implements  Serde&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    private JsonSerializer&lt;T&gt; serializer;</span><br><span class="line">    private JsonDeserializer&lt;T&gt; deserializer;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public WrapperSerde() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public  WrapperSerde(JsonSerializer&lt;T&gt; serializer, JsonDeserializer&lt;T&gt; deserializer) &#123;</span><br><span class="line">        this.serializer = serializer;</span><br><span class="line">        this.deserializer = deserializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Serializer&lt;T&gt; serializer() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return serializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Deserializer&lt;T&gt; deserializer() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return deserializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类序列器的构建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class StockSerde extends WrapperSerde&lt;StockMsg&gt;&#123;</span><br><span class="line"></span><br><span class="line">public StockSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(StockMsg.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建流式程序"><a href="#构建流式程序" class="headerlink" title="构建流式程序"></a>构建流式程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class KTVSKS_Stream &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">// stream流的名字</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KStreamVSKTable_app&quot;);</span><br><span class="line">// 消费者组名字</span><br><span class="line">props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KStreamVSKTable_group&quot;);</span><br><span class="line">// 消费者名字</span><br><span class="line">props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KStreamVSKTable_client&quot;);</span><br><span class="line">// 每次消费最新的数据</span><br><span class="line">props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;latest&quot;);</span><br><span class="line">// 自动提交偏移</span><br><span class="line">props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;15000&quot;);</span><br><span class="line">// 服务器地址</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">// 并行的线程数</span><br><span class="line">props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockSerde().getClass().getName());</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">/**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 分别创建KStream和KTable实例并打印</span><br><span class="line">KeyValueMapper&lt;String, StockMsg, String&gt; classKey1 = (key, stock) -&gt; stock.getStockName();</span><br><span class="line">KStream&lt;String, StockMsg&gt; stockStream = streamsBuilder.stream(&quot;STOCKTOPIC&quot;);</span><br><span class="line">    KStream&lt;String, StockMsg&gt;  ssKStream  =stockStream.selectKey(classKey1);</span><br><span class="line">    ssKStream.to(&quot;STOCKTOPICTABLE&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssKStream.print(Printed.&lt;String, StockMsg&gt;toSysOut().withLabel(&quot;股市交易流&quot;));</span><br><span class="line"></span><br><span class="line">KTable&lt;String, StockMsg&gt; stocKTable = streamsBuilder.table(&quot;STOCKTOPICTABLE&quot;);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">stocKTable.toStream().print(Printed.&lt;String, StockMsg&gt;toSysOut().withLabel(&quot;股市交易表&quot;));</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟生产者</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">StockMsg  record  = new StockMsg();</span><br><span class="line">record.setStockName(&quot;好当家&quot;);</span><br><span class="line">record.setStockPrice(3.09);</span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, StockMsg&gt; kp =  new KafkaProducer&lt;String,StockMsg&gt;(properties,new StringSerializer(),new JsonSerializer&lt;StockMsg&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockMsg&gt;(&quot;STOCKTOPIC&quot;, record));</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockMsg&gt;(&quot;STOCKTOPICTABLE&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ol><li>启动zookeeper</li><li>启动kafka</li><li>创建主题–STOCKTOPIC 和 STOCKTOPICTABLE</li><li>启动流程序 (需要指定key值)</li><li>模拟数据发送</li></ol><p><img src="/images/resources/D0DE6D193FCC74CD47A9F1515A472783.jpg" alt="IMAGE"></p><p>注意:表始终在更新以最新的标准被基准，当然前提是流有进行过选择对应的key值</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>1.在创建KTable的时候,同时在后台创建了一个追踪流状态的状态存储,从而创建了一个更新流。创建后会有一个内容名称，但是 不能显式的进行交互式访问。但是KTable通过使用Materialized(计量)可以进行显式的查询</p><p>2.KTable何时进行更新,并发往下游处理器.</p><blockquote><p>因素</p></blockquote><ol><li>较高的数据流入速率将增加发送更新记录的频率</li><li>不同键越多</li><li>通过配置cache.max.bytes.buffering以及commit.intrval.ms达到更新的设置</li></ol><blockquote><p>cache.max.bytes.buffering设置缓存缓冲大小</p></blockquote><p>设置该缓存用于删除具有相同键重复的更新记录。使用持久化存储时就可以显著提升性能</p><blockquote><p>commit.intrval.ms设置提交时间间隔</p></blockquote><p>提交间隔参数用来指定保存数据的频率，它会强制刷新，将最新的记录更新，并发送到下游</p><p>注意:默认的提交时间是30秒以及默认10M缓存，当然在上线之前，肯定要平衡大小和时间以及处理的线程数。这个是需要进行考量的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只有清晰的明白流和表，你才有可能明白聚合以及开窗&lt;/p&gt;
&lt;h1 id=&quot;知识要点&quot;&gt;&lt;a href=&quot;#知识要点&quot; class=&quot;headerlink&quot; title=&quot;知识要点&quot;&gt;&lt;/a&gt;知识要点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;流与表的关系&lt;/li&gt;
&lt;li&gt;记录流概念&lt;/l
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="数据表" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    
      <category term="遇见未来聚合和开窗" scheme="https://wangweijie.vip/tags/%E9%81%87%E8%A7%81%E6%9C%AA%E6%9D%A5%E8%81%9A%E5%90%88%E5%92%8C%E5%BC%80%E7%AA%97/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(连接能力)</title>
    <link href="https://wangweijie.vip/2019/12/30/2019-12-30-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E8%BF%9E%E6%8E%A5)/"/>
    <id>https://wangweijie.vip/2019/12/30/2019-12-30-kafkaStream晋阶之路(连接)/</id>
    <published>2019-12-30T07:36:09.580Z</published>
    <updated>2019-12-30T07:41:58.295Z</updated>
    
    <content type="html"><![CDATA[<p>连接以为可以观测时间,有了时间,我们才会具有洞察力.</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>连接的目的,增加洞察力</li><li>时间戳的定义以及分类</li></ol><h2 id="连接的目的"><a href="#连接的目的" class="headerlink" title="连接的目的"></a>连接的目的</h2><p>在前期我们通过给定谓词(也就是加入筛选条件)将流分为了2类，比如钥匙类和小五金类</p><p><img src="/images/resources/FAD029DB2ADEB215979E02FB75036856.jpg" alt="IMAGE"></p><p>如何让这2个不同的流连接在一起,能够观察增加需求能力。</p><h2 id="连接的要求"><a href="#连接的要求" class="headerlink" title="连接的要求"></a>连接的要求</h2><ol><li>2个流以上</li><li>有一个相同的key,作为连接的条件</li></ol><blockquote><p>前期code如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class JoinStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(JoinStream.class);</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">//初次屏蔽处理器</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">//定义谓词,以及选择key键</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//获得分流的集合,并且在之前选择相同的key值</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[]  branchesStream =</span><br><span class="line">PurchaseRecordStream.selectKey((k,v)-&gt; v.getFirstName()+v.getLastName())</span><br><span class="line">.branch(isOne,isTwo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何建立连接"><a href="#如何建立连接" class="headerlink" title="如何建立连接"></a>如何建立连接</h2><ol><li>连接的记录,需要创建一个ValueJoiner&lt;V1,V2,R&gt;对象.V1和V2代表着接收的2个连接对象,他们应该有相同的key.类型可以不同。R代表着可以选择组合后返回的新的对象</li></ol><h3 id="新的合并对象设计"><a href="#新的合并对象设计" class="headerlink" title="新的合并对象设计"></a>新的合并对象设计</h3><blockquote><p>对象设计如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class CorrelatedPurchase &#123;</span><br><span class="line"></span><br><span class="line">     private  Date  firstDate;</span><br><span class="line">     private  Date  seconDate;</span><br><span class="line">     private  List&lt;String&gt; purchaseListItem;</span><br><span class="line">     private  double  totalAmount;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ValueJoiner设计代码如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseJoiner  implements ValueJoiner&lt;PurchaseRecord, PurchaseRecord, CorrelatedPurchase&gt; &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CorrelatedPurchase apply(PurchaseRecord value1, PurchaseRecord value2) &#123;</span><br><span class="line">Date date1 = </span><br><span class="line">value1 != null ? value1.getPurchaseDate():null;</span><br><span class="line">Date date2 =</span><br><span class="line">value2 != null ? value2.getPurchaseDate():null;</span><br><span class="line"></span><br><span class="line">String purchaseName1 = </span><br><span class="line">value1 != null ? value1.getItemPurchased():null;</span><br><span class="line">String purchaseName2 = </span><br><span class="line">value2 != null ? value2.getItemPurchased():null;</span><br><span class="line">List&lt;String&gt; purchasedItem =  new ArrayList&lt;String&gt;();</span><br><span class="line">if (purchaseName1 != null) &#123;</span><br><span class="line">purchasedItem.add(purchaseName1);</span><br><span class="line">&#125;</span><br><span class="line">if (purchaseName2 != null) &#123;</span><br><span class="line">purchasedItem.add(purchaseName2);</span><br><span class="line">&#125;</span><br><span class="line">Double  price1 = value1 !=null ? value1.getPrice():0.0;</span><br><span class="line">Double  price2 = value2 !=null ? value2.getPrice():0.0;</span><br><span class="line"></span><br><span class="line">return ActionUtil.getNewFace(date1, date2, purchasedItem, price1+price2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现连接"><a href="#实现连接" class="headerlink" title="实现连接"></a>实现连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">public class JoinStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(JoinStream.class);</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">//初次屏蔽处理器</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">//定义谓词,以及选择key键</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//获得分流的集合,并且在之前选择相同的key值</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[]  branchesStream =</span><br><span class="line">PurchaseRecordStream.selectKey((k,v)-&gt; v.getFirstName()+v.getLastName())</span><br><span class="line">.branch(isOne,isTwo);</span><br><span class="line"></span><br><span class="line">// 连接流</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;   stream1 = branchesStream[0];</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;   stream2 = branchesStream[1];</span><br><span class="line">/**</span><br><span class="line"> * 1.设置时间窗口</span><br><span class="line"> * 2.构建连接器</span><br><span class="line"> * 3.调用join产生连接.joined分别代表着key值序列化器,以及2个流value值的序列化器</span><br><span class="line"> */</span><br><span class="line">JoinWindows  f15sWindow = JoinWindows.of(60*1000);</span><br><span class="line">ValueJoiner&lt;PurchaseRecord, PurchaseRecord, CorrelatedPurchase&gt;  joiner = new PurchaseJoiner();</span><br><span class="line">KStream&lt;String, CorrelatedPurchase&gt; joinedKStream = </span><br><span class="line">stream1.join(stream2, joiner,f15sWindow,Joined.with(stringSerde, PurchaseRecordSerde, PurchaseRecordSerde));</span><br><span class="line"></span><br><span class="line">joinedKStream.print(Printed.&lt;String, CorrelatedPurchase&gt;toSysOut().withLabel(&quot;joinedStream&quot;));</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">         * 开起流</span><br><span class="line">         */</span><br><span class="line">    // 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 代码测试</p></blockquote><p>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:18:12 CST 2019, seconDate=Mon Dec 30 11:18:21 CST 2019, purchaseListItem=[小小锅, 小小锅], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:18:45 CST 2019, seconDate=Mon Dec 30 11:18:21 CST 2019, purchaseListItem=[小小锅1, 小小锅], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:19:30 CST 2019, seconDate=Mon Dec 30 11:19:58 CST 2019, purchaseListItem=[榔头, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:19:46 CST 2019, seconDate=Mon Dec 30 11:19:58 CST 2019, purchaseListItem=[打榔头, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:21:12 CST 2019, seconDate=Mon Dec 30 11:20:57 CST 2019, purchaseListItem=[锤子1, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:31:31 CST 2019, seconDate=Mon Dec 30 11:31:09 CST 2019, purchaseListItem=[锤子4, 锤子2], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:31:31 CST 2019, seconDate=Mon Dec 30 11:31:17 CST 2019, purchaseListItem=[锤子4, 锤子3], totalAmount=40.0]</p><p><strong>只要符合交易时间,都会出发对应的链接操作.只要满足连接操作,可用foreachAction或者发送主题信息做对应的逻辑动作</strong></p><h2 id="连接的进阶"><a href="#连接的进阶" class="headerlink" title="连接的进阶"></a>连接的进阶</h2><h3 id="记录的先后顺序"><a href="#记录的先后顺序" class="headerlink" title="记录的先后顺序"></a>记录的先后顺序</h3><p>从上面结果可以看到，数据的时间并没有关注先来后到,只要满足1分钟之内及产生逻辑</p><p>如何要指定顺序:</p><p>需要使用 JoinWindows.after 或者  JoinWindows.before</p><p>分别代表着  streamA.join(streamB)  B的记录时间戳比A的记录时间滞后或者是提前.</p><h3 id="连接的前提首要条件"><a href="#连接的前提首要条件" class="headerlink" title="连接的前提首要条件"></a>连接的前提首要条件</h3><p>在Stream中执行连接操作,必要要保证数据具有相同数量的分区,按键分区且键的类型相同<br>通过selectKey出发了重新分区的要求。这个是被自动处理的.这个动作我们归纳为协同分区</p><h3 id="连接的动作"><a href="#连接的动作" class="headerlink" title="连接的动作"></a>连接的动作</h3><ol><li>join 等同于 innerjoin</li><li>outerJoin 等同于左右连接都满足</li><li>leftJoin  只需要左连接</li></ol><h2 id="kafkaStreams中时间戳"><a href="#kafkaStreams中时间戳" class="headerlink" title="kafkaStreams中时间戳"></a>kafkaStreams中时间戳</h2><p>时间戳的作用有3点:</p><ol><li>连接流</li><li>更新变更日志</li><li>决定方法合适被触发</li></ol><p>时间戳被kafkaStreams分为了三类</p><blockquote><p>事件发生时间</p></blockquote><p>特指事件发生时候的时间,通常设置在内置对象中,当然也可以考虑创建生产者的时间为事件时间</p><blockquote><p>摄取时间</p></blockquote><p>特指数据首次进入数据处理管道时设置的时间戳。可以考虑日志追加时间LogAppendTime作为摄取时间</p><blockquote><p>处理时间</p></blockquote><p>特指数据或者记录首次开始流经处理管道时设置的时间戳。</p><h3 id="处理不同的时间语义"><a href="#处理不同的时间语义" class="headerlink" title="处理不同的时间语义"></a>处理不同的时间语义</h3><ol><li>时间戳提取器 TimeStampExtractor接口</li><li>kafkaStreams自带一个处理时间语义WallclockTimestampExtractor本质是通过调用系统当前时间,以毫秒数返回当前时间</li></ol><h3 id="自定义时间戳"><a href="#自定义时间戳" class="headerlink" title="自定义时间戳"></a>自定义时间戳</h3><blockquote><p>代码示例如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class TransactionTimestampExtractor  implements  TimestampExtractor&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public long extract(ConsumerRecord&lt;Object, Object&gt; record, long previousTimestamp) &#123;</span><br><span class="line">// 获取发到kafka中的数据对象</span><br><span class="line">PurchaseRecord   ptRecord  = (PurchaseRecord) record.value();</span><br><span class="line">//返回数据本省所内置的时间</span><br><span class="line">return ptRecord.getPurchaseDate().getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ol><li>一种是在流程序中统一添加</li></ol><p><code>props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, TransactionTimestampExtractor.class);</code></p><ol start="2"><li>一种是在Consumed中配置</li></ol><p><code>Consumed.with(Serdes.1,Serdes.2).withTimestampExtractor(new TransactionTimestampExtractor());</code></p><h1 id="梳理当前的DAG"><a href="#梳理当前的DAG" class="headerlink" title="梳理当前的DAG"></a>梳理当前的DAG</h1><p><img src="/images/resources/C5116DD7C25D8F0ACE6E6B75C19FD157.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;连接以为可以观测时间,有了时间,我们才会具有洞察力.&lt;/p&gt;
&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;连接的目的,增加洞察力&lt;/li&gt;
&lt;li&gt;时间戳的定
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="连接形态" scheme="https://wangweijie.vip/tags/%E8%BF%9E%E6%8E%A5%E5%BD%A2%E6%80%81/"/>
    
      <category term="洞察力" scheme="https://wangweijie.vip/tags/%E6%B4%9E%E5%AF%9F%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(数据状态)</title>
    <link href="https://wangweijie.vip/2019/12/26/2019-12-26-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E7%8A%B6%E6%80%81)/"/>
    <id>https://wangweijie.vip/2019/12/26/2019-12-26-kafkaStream晋阶之路(状态)/</id>
    <published>2019-12-26T07:23:52.884Z</published>
    <updated>2019-12-26T07:29:19.782Z</updated>
    
    <content type="html"><![CDATA[<p>数据本来平淡无奇,一旦有了思想,数据变成为了有想法的一种境界状态</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>状态在流中的重要性</li><li>状态存储阅读历史,展望未来</li><li>分区一致.数据正确</li><li>状态存储的选择前置条件</li><li>使用状态存储</li><li>代码示例</li></ol><h2 id="状态在流中的重要性"><a href="#状态在流中的重要性" class="headerlink" title="状态在流中的重要性"></a>状态在流中的重要性</h2><ol><li>什么是状态？</li></ol><p>状态是人赋予的主观意识判断。本身数据是无状态的。举个例子:股票的买卖交易，每天的交易买入卖出是一件很正常的事情。<br>比如:9点30分买入1000只股票。10点买入1000只股票。 这个数据流现在无状态的。</p><p><strong>但是如果在10点30分的时候如果该只股票出现了重大利好重组交易,数据从无变为了有状态。而这时候我们的主观意识已经在判断,是否前面这个买卖交易是否正常,这也可以说明这个是我们的价值观</strong></p><ol start="2"><li>流是否需要状态?</li></ol><p>一个事件本身产生的流没有特别的特殊性,但是如果产生一些额外的上下文,那么可能会错过一些关键的机会，甚至于你可能会以全新的视角来看待这个事情.</p><p>很多时候流式处理意味着:彼此之间没有关联。源源不断的数据,当发生时就一定要加以时间处理。而状态的概念可能会产生静态的资源映像,比如对应到数据库中。</p><p>数据流的变化速度往往比数据表更新的更快更频繁。有些情况下,离散的数据已经携带了足够多的数据。但是通常情况下,数据流需要从某类存储的数据来加以丰富。</p><h3 id="将状态操作应用到kafka-Stream中"><a href="#将状态操作应用到kafka-Stream中" class="headerlink" title="将状态操作应用到kafka_Stream中"></a>将状态操作应用到kafka_Stream中</h3><p>在前期的奖励节点中.对于每次客户的消费累计的奖励点数未做任何要求,如果假定现在用户的每一次消费达到一点奖励点数,我们会附上额外的动作,也是将本来不带状态的值，变为有状态的意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line"></span><br><span class="line">private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>转变为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line"></span><br><span class="line">private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    //添加当前这笔消费的奖励点数</span><br><span class="line">    private  int currentRewardPoints;</span><br><span class="line">    //添加最后一次最后购买的时间</span><br><span class="line">    private int daysFromLastPurchase;</span><br><span class="line">    //累计的奖励总点数</span><br><span class="line">    private long totalRewardPoints;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意:设置奖励点的总数代码为:</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void addRewardPoints(int previousTotalPoints) &#123;</span><br><span class="line">    this.totalRewardPoints += previousTotalPoints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态存储阅读历史-展望未来"><a href="#状态存储阅读历史-展望未来" class="headerlink" title="状态存储阅读历史,展望未来"></a>状态存储阅读历史,展望未来</h2><h3 id="如何进行存储"><a href="#如何进行存储" class="headerlink" title="如何进行存储"></a>如何进行存储</h3><ol><li>在kafkaStream中提供了一个基本的有状态的函数 transformvalues()</li><li>提供一个值转换器，转换器接口为ValueTransformer&lt;V,R&gt;,设置状态储存</li></ol><blockquote><p>构建一个值转换器代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseRewardTransformer  implements  ValueTransformer&lt;PurchaseRecord, RewardAccumulator&gt;&#123;</span><br><span class="line">//声明一个状态存储变量</span><br><span class="line">private KeyValueStore&lt;String, Integer&gt;  stateStore;</span><br><span class="line">//声明一个状态存储的名字</span><br><span class="line">private final String storeName;</span><br><span class="line">//声明上下文容器</span><br><span class="line">private ProcessorContext context;</span><br><span class="line"></span><br><span class="line">public PurchaseRewardTransformer(String storeName) &#123;</span><br><span class="line"></span><br><span class="line">this.storeName = storeName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void init(ProcessorContext context) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">this.context  = context;</span><br><span class="line">stateStore = (KeyValueStore&lt;String, Integer&gt;) this.context.getStateStore(storeName);             </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 执行值转换时.会进入到transform方法中</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public RewardAccumulator transform(PurchaseRecord value) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//1. 执行和mapvalues一样的动作</span><br><span class="line">RewardAccumulator  reward = ActionUtil.getReward(value);</span><br><span class="line">System.out.println(reward.hashCode());</span><br><span class="line">//2.使用状态存储总的奖励点数 </span><br><span class="line">   Integer  x = stateStore.get(reward.getCustomerId());</span><br><span class="line">   if (x !=null) &#123;</span><br><span class="line">   System.out.println(&quot;进入条件判断&quot;);</span><br><span class="line">   System.out.println(x);</span><br><span class="line">   int total = x+reward.getCurrentRewardPoints();</span><br><span class="line">   System.out.println(total);</span><br><span class="line">   stateStore.put(reward.getCustomerId(), total);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">stateStore.put(reward.getCustomerId(), (int) reward.getCurrentRewardPoints());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;当前用户&quot;+reward.getCustomerId()+&quot;的奖励点数为&quot;+stateStore.get(reward.getCustomerId()));</span><br><span class="line">System.out.println(&quot;执行相信的逻辑操作&quot;);</span><br><span class="line">return reward;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public RewardAccumulator punctuate(long timestamp) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分区一致-数据正确"><a href="#分区一致-数据正确" class="headerlink" title="分区一致,数据正确"></a>分区一致,数据正确</h2><p><strong><em>在kafkaStreams中在没有指定分区的时候,是按照轮询进行分区。而分区中有着对应的StreamTask.每个Task中有自己不同状态存储.对于上面我们使用存储,有可能客户的交易信息不会在同一个分区中.那么这个时候只有指定到相同的分区进行解决</em></strong></p><h3 id="使用流分区器解决"><a href="#使用流分区器解决" class="headerlink" title="使用流分区器解决"></a>使用流分区器解决</h3><ol><li>通过kafkaStream中的through可以创建一个中间主题,达到无缝分区</li><li>通过自定义分区器,解决数据分配到不同地方的问题</li></ol><blockquote><p>自定义流分区器如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RewardsStreamPartitioner  implements StreamPartitioner&lt;String, PurchaseRecord&gt;&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据用户的姓氏进行匹配对应的分区</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public Integer partition(String key, PurchaseRecord value, int numPartitions) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return value.getFirstName().hashCode()%numPartitions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态存储的选择前置条件"><a href="#状态存储的选择前置条件" class="headerlink" title="状态存储的选择前置条件"></a>状态存储的选择前置条件</h2><ol><li>数据本地化</li><li>故障恢复和容错</li></ol><blockquote><p>数据本地化</p></blockquote><p><strong><em>数据本地化对性能至关重要,通过一个流式程序处理百万级以上的数据,即使很小的网络延迟也会产生巨大的影响</em></strong></p><p>流式程序尽管需要状态但是不是绝对的必要,但是应该设计在本地。应用程序的每个服务器和节点都应该有一个单独的数据存储</p><p>进程和线程之间不共享,即便一个进程失败,但不会影响其它的进程和线程</p><blockquote><p>故障恢复和容错</p></blockquote><p>在kafkaStreams中每个处理器都它的本地存储和一个用于备份状态存储的变更日志主题</p><h2 id="使用状态存储"><a href="#使用状态存储" class="headerlink" title="使用状态存储"></a>使用状态存储</h2><ol><li>kafka添加状态存储使用stores类静态工厂创建storesupplier实例.</li><li>用于定制存储的附加类使用Meterialized(计量类)以及StoreBuilder类,高阶推荐用前者,低阶推荐后者。</li><li>除了本身这2个类之外,还分别提供了persistentKeyValueStore和lruMap,persistentWindowStore,persistentSeesionStore</li></ol><h3 id="状态存储容错以及改变日志主题"><a href="#状态存储容错以及改变日志主题" class="headerlink" title="状态存储容错以及改变日志主题"></a>状态存储容错以及改变日志主题</h3><blockquote><p>状态存储容错</p></blockquote><ol><li>所有的stateStoreSupplier默认都启用了日志,日志即是一个主题,该主题的作用是变更日志用来被封存储中的值,提供容错</li></ol><blockquote><p>配置变更日志主题</p></blockquote><ol><li>用于状态的变更日志采用压缩策略的主题.可以使用withLoggingEnabled进行配置</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>注意:重写奖励类的equals方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">public class StoreStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(StoreStream.class);</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;Store-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">JsonSerializer&lt;RewardAccumulator&gt; rs = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;RewardAccumulator&gt; rds = new JsonDeserializer&lt;&gt;(RewardAccumulator.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">Serde&lt;RewardAccumulator&gt; RewardAccumulatorSerde = Serdes.serdeFrom(rs, rds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 加入状态处理器</span><br><span class="line">     */</span><br><span class="line">//状态名字</span><br><span class="line">String rewardsStateStoreName = &quot;rewardsPointsStore&quot;;</span><br><span class="line">//指定分区规则,集群环境下</span><br><span class="line">RewardsStreamPartitioner streamPartitioner = new RewardsStreamPartitioner();</span><br><span class="line">//选择存储状态的类型</span><br><span class="line">KeyValueBytesStoreSupplier storeSupplier = Stores.inMemoryKeyValueStore(rewardsStateStoreName);</span><br><span class="line">        StoreBuilder&lt;KeyValueStore&lt;String, Integer&gt;&gt; storeBuilder = Stores.keyValueStoreBuilder(storeSupplier, Serdes.String(), Serdes.Integer());</span><br><span class="line">        /**</span><br><span class="line">         * storeBuilder.withLoggingEnabled(config)  可以使用该方法进行日志主题的配置</span><br><span class="line">         */</span><br><span class="line">        //添加到拓扑中</span><br><span class="line">        streamsBuilder.addStateStore(storeBuilder);</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 将原本的流设计重新分区的方式,通过产生一个中间主题进行操作</span><br><span class="line">         * 因为现在只有一个分区。故不配置分区</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //KStream&lt;String, PurchaseRecord&gt; transByCustomerStream = PurchaseRecordStream.through( &quot;customer_transactions&quot;, Produced.with(stringSerde, PurchaseRecordSerde, streamPartitioner));</span><br><span class="line">        KStream&lt;String, PurchaseRecord&gt; transByCustomerStream = PurchaseRecordStream.through( &quot;customer_transactions&quot;, Produced.with(stringSerde, PurchaseRecordSerde));</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 转换为有状态的流</span><br><span class="line">         */</span><br><span class="line">        KStream&lt;String, RewardAccumulator&gt; statefulRewardAccumulator = transByCustomerStream.transformValues(() -&gt;  new PurchaseRewardTransformer(rewardsStateStoreName),</span><br><span class="line">                rewardsStateStoreName);</span><br><span class="line"></span><br><span class="line">        statefulRewardAccumulator.print(Printed.&lt;String, RewardAccumulator&gt;toSysOut().withLabel(&quot;rewards&quot;));</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 开起流</span><br><span class="line">         */</span><br><span class="line">    // 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码测试观察结果</p></blockquote><ol><li>启动zookeeper</li><li>启动kafka</li><li>启动流</li><li>模拟数据</li></ol><blockquote><p>数据结果如下:（包含服务器断掉重连,依旧保持先前的记录）</p></blockquote><p><img src="/images/resources/E86DFC6F43B455C49C75A323F6845BEA.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据本来平淡无奇,一旦有了思想,数据变成为了有想法的一种境界状态&lt;/p&gt;
&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;状态在流中的重要性&lt;/li&gt;
&lt;li&gt;状
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="主观意识形态" scheme="https://wangweijie.vip/tags/%E4%B8%BB%E8%A7%82%E6%84%8F%E8%AF%86%E5%BD%A2%E6%80%81/"/>
    
      <category term="数据形态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%BD%A2%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-4)</title>
    <link href="https://wangweijie.vip/2019/12/16/2019-12-16-%E5%BC%80%E5%8F%91kafka_Stream(3-4)/"/>
    <id>https://wangweijie.vip/2019/12/16/2019-12-16-开发kafka_Stream(3-4)/</id>
    <published>2019-12-16T08:37:49.250Z</published>
    <updated>2019-12-16T08:40:30.853Z</updated>
    
    <content type="html"><![CDATA[<p>kafka实时计算出版效果.</p><h1 id="springboot结合kafkaStream流推送消息Echart图形展示-3-4"><a href="#springboot结合kafkaStream流推送消息Echart图形展示-3-4" class="headerlink" title="springboot结合kafkaStream流推送消息Echart图形展示(3-4)"></a>springboot结合kafkaStream流推送消息Echart图形展示(3-4)</h1><ol><li>实现要求(学生名字,学生年龄,班级) (班级多少人,年龄分布人数,实时)</li><li>构建流式程序2个步骤(一个处理统计班级人数,一个统计年龄分布人数)</li><li>从studentMsg主题源获取数据,通过2个处理器处理输出到classCount和ageCount主题源中</li><li>Echarts采取使用南丁玫瑰图</li><li>存放数据采取使用ConcurrentSkipListMap&lt;&gt;();</li></ol><h2 id="构建DAG图"><a href="#构建DAG图" class="headerlink" title="构建DAG图"></a>构建DAG图</h2><p><img src="/images/resources/ABF98E88D5B754798D81B2A3E80E22E8.jpg" alt="IMAGE"></p><h2 id="构建一个普通的maven项目"><a href="#构建一个普通的maven项目" class="headerlink" title="构建一个普通的maven项目"></a>构建一个普通的maven项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h2><blockquote><p>在producer中随机录入数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function randomData()&#123;</span><br><span class="line">var x = 100;</span><br><span class="line">    var y = 0;</span><br><span class="line">    var z = 10;</span><br><span class="line">    var studentAge = (parseInt(Math.random() * (x - y + 1) + y)).toString();</span><br><span class="line">    var studentClassNo = &quot;00&quot;+parseInt(Math.random() * (z - y + 1) + z);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:&apos;$&#123;pageContext.request.contextPath&#125;/mock&apos;,</span><br><span class="line">type:&apos;post&apos;,</span><br><span class="line">dataType:&apos;json&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">studentName:&apos;小小王&apos;,</span><br><span class="line">studentAge:studentAge,</span><br><span class="line">studentClassNo:studentClassNo</span><br><span class="line">&#125;,</span><br><span class="line">success:function(resp)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  t = setInterval(&quot;randomData()&quot;, 1000);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="构建一个模块编写流式程序"><a href="#构建一个模块编写流式程序" class="headerlink" title="构建一个模块编写流式程序"></a>构建一个模块编写流式程序</h2><ol><li>项目结构</li><li>构建必要的序列化器</li><li>创建流式程序选择必要的序列器</li><li>流式程序设置必要的序列器</li></ol><blockquote><p>项目结构</p></blockquote><p><img src="/images/resources/16B7786B14984F744BD9C8B7EF5FA432.jpg" alt="IMAGE"></p><blockquote><p>必要的序列化器代码</p></blockquote><p>序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class StudentSer implements Closeable, AutoCloseable, Serializer&lt;Student&gt;&#123;</span><br><span class="line"></span><br><span class="line"> private static final Charset CHARSET = Charset.forName(&quot;UTF-8&quot;);</span><br><span class="line">    static private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public byte[] serialize(String s, Student person) &#123;</span><br><span class="line">        // Transform the Person object to String</span><br><span class="line">        String line = gson.toJson(person);</span><br><span class="line">        // Return the bytes from the String &apos;line&apos;</span><br><span class="line">        return line.getBytes(CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class StudentDser implements Closeable, AutoCloseable, Deserializer&lt;Student&gt;  &#123;</span><br><span class="line"></span><br><span class="line">private static final Charset CHARSET = Charset.forName(&quot;UTF-8&quot;);</span><br><span class="line">    static private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Student deserialize(String topic, byte[] bytes) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // Transform the bytes to String</span><br><span class="line">            String student = new String(bytes, CHARSET);</span><br><span class="line">            // Return the Person object created from the String &apos;person&apos;</span><br><span class="line">            return gson.fromJson(student, Student.class);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Error reading bytes&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>序列化组合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class StudentSerde implements Serde&lt;Student&gt;&#123;</span><br><span class="line">private StudentSer serializer = new StudentSer();</span><br><span class="line">    private StudentDser deserializer = new StudentDser();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">        serializer.configure(configs, isKey);</span><br><span class="line">        deserializer.configure(configs, isKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line">        serializer.close();</span><br><span class="line">        deserializer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Serializer&lt;Student&gt; serializer() &#123;</span><br><span class="line">        return serializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Deserializer&lt;Student&gt; deserializer() &#123;</span><br><span class="line">        return deserializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流式计算程序代码"><a href="#流式计算程序代码" class="headerlink" title="流式计算程序代码"></a>流式计算程序代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public class ClassCountStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(ClassCountStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;Count-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, &quot;exactly_once&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        // Here we set the Seder for the values that we are going to process.</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, StudentSerde.class);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">  StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">Serde&lt;Long&gt;  longSerde = Serdes.Long();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">/**</span><br><span class="line"> * 统计班级人数</span><br><span class="line"> */</span><br><span class="line">// 声明键值</span><br><span class="line">// 声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">//根据班级进行人数归类</span><br><span class="line">KeyValueMapper&lt;String, Student, String&gt; classKey0 = (key, student) -&gt; student.getStudentClassNo();</span><br><span class="line">KStream&lt;String, Student&gt; ClassCountStream = streamsBuilder.stream(&quot;studentMsg&quot;);</span><br><span class="line">KTable&lt;String, Long&gt;  ClassCounTable = ClassCountStream.selectKey(classKey0)</span><br><span class="line">.groupByKey()</span><br><span class="line">.count();</span><br><span class="line"></span><br><span class="line">//根据年龄筛选20-25岁的人均分布</span><br><span class="line">KeyValueMapper&lt;String, Student, String&gt; classKey1 = (key, student) -&gt; student.getStudentAge();</span><br><span class="line">KStream&lt;String, Student&gt; AgeCountStream = ClassCountStream;</span><br><span class="line">KTable&lt;String, Long&gt;     AgeCountTable = AgeCountStream.filter((key,student) -&gt; Integer.parseInt(student.getStudentAge()) &gt; 0)</span><br><span class="line">.selectKey(classKey1)</span><br><span class="line">.groupByKey()</span><br><span class="line">.count();</span><br><span class="line"></span><br><span class="line"> ClassCounTable.toStream().to(&quot;classCount&quot;, Produced.with(stringSerde, longSerde));</span><br><span class="line"> AgeCountTable.toStream().to(&quot;ageCount&quot;, Produced.with(stringSerde, longSerde));</span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>启动zookeeper</li><li>启动kafka</li><li>启动计算程序</li><li>启动消费者  (消费者序列化分别为String和Long)</li><li>启动生产者</li></ol><h2 id="通过websocket推送至前台"><a href="#通过websocket推送至前台" class="headerlink" title="通过websocket推送至前台"></a>通过websocket推送至前台</h2><ol><li>推送详见前期代码</li><li>消费监听数据源需要更改value值,以及去重判断</li></ol><blockquote><p>消费者代码如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KafkaConsumer &#123;</span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KafkaConsumer.class);</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Long&gt; rs2 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Object&gt; rs3 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static List&lt;ClassMsg&gt; rs = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Object&gt; rs6 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Long&gt; rs4 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static List&lt;String&gt; rs001 =new ArrayList&lt;&gt;();</span><br><span class="line">private static List&lt;Long&gt; rs002 = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">//@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">//public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">//System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">//try &#123;</span><br><span class="line">//WebSocketServer.sendInfo(record.value().toString(),&quot;all&quot;);</span><br><span class="line">//&#125; catch (IOException e) &#123;</span><br><span class="line">//// TODO Auto-generated catch block</span><br><span class="line">//e.printStackTrace();</span><br><span class="line">//&#125;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123; &quot;classCount&quot; &#125;)</span><br><span class="line">public void receiveClassCount(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">String classname = &quot;班级&quot; + record.key();</span><br><span class="line">Long classCountLong = (Long) record.value();</span><br><span class="line">rs2.put(classname, classCountLong);</span><br><span class="line">rs3.put(&quot;dataType&quot;, 1);</span><br><span class="line">rs3.put(&quot;data1&quot;, rs2.keySet());</span><br><span class="line">Set&lt;Map.Entry&lt;String, Long&gt;&gt; entryseSet = rs2.entrySet();</span><br><span class="line">for (Map.Entry&lt;String, Long&gt; entry : entryseSet) &#123;</span><br><span class="line">ClassMsg cms = new ClassMsg();</span><br><span class="line">cms.setName(entry.getKey());</span><br><span class="line">cms.setValue(entry.getValue());</span><br><span class="line">if (!rs.contains(cms)) &#123;</span><br><span class="line">rs.add(cms);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">rs.get(rs.indexOf(cms)).setValue(cms.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs3.put(&quot;data2&quot;, rs);</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(JSON.toJSONString(rs3), &quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123; &quot;ageCount&quot; &#125;)</span><br><span class="line">public void receiveClassCount1(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">rs001.clear();</span><br><span class="line">rs002.clear();</span><br><span class="line">String agename = &quot;年龄&quot; + record.key();</span><br><span class="line">Long classCountLong = (Long) record.value();</span><br><span class="line">rs6.put(&quot;dataType&quot;, 2);</span><br><span class="line">rs4.put(agename,classCountLong);</span><br><span class="line">Set&lt;Map.Entry&lt;String, Long&gt;&gt; entryseSet = rs4.entrySet();</span><br><span class="line">for (Map.Entry&lt;String, Long&gt; entry : entryseSet) &#123;</span><br><span class="line">rs001.add(entry.getKey());</span><br><span class="line">rs002.add(entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">rs6.put(&quot;data1&quot;,rs001 );</span><br><span class="line">rs6.put(&quot;data2&quot;, rs002);</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(JSON.toJSONString(rs6), &quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最终结果如下：</p></blockquote><p><img src="/images/resources/demo.gif" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kafka实时计算出版效果.&lt;/p&gt;
&lt;h1 id=&quot;springboot结合kafkaStream流推送消息Echart图形展示-3-4&quot;&gt;&lt;a href=&quot;#springboot结合kafkaStream流推送消息Echart图形展示-3-4&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="webscoket推送" scheme="https://wangweijie.vip/tags/webscoket%E6%8E%A8%E9%80%81/"/>
    
      <category term="群发消息" scheme="https://wangweijie.vip/tags/%E7%BE%A4%E5%8F%91%E6%B6%88%E6%81%AF/"/>
    
      <category term="图形实时展示" scheme="https://wangweijie.vip/tags/%E5%9B%BE%E5%BD%A2%E5%AE%9E%E6%97%B6%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-3)</title>
    <link href="https://wangweijie.vip/2019/12/06/2019-12-06-%E5%BC%80%E5%8F%91kafka_Stream(3-3)/"/>
    <id>https://wangweijie.vip/2019/12/06/2019-12-06-开发kafka_Stream(3-3)/</id>
    <published>2019-12-06T06:10:58.650Z</published>
    <updated>2019-12-06T06:15:49.848Z</updated>
    
    <content type="html"><![CDATA[<p>推送是必不可少的一个环节。做好推送,即将进入实时计算的体系中。</p><h1 id="springboot整合websocket推送数据消息"><a href="#springboot整合websocket推送数据消息" class="headerlink" title="springboot整合websocket推送数据消息"></a>springboot整合websocket推送数据消息</h1><ol><li>整合websocket</li><li>结合3-2进行消息的推送</li></ol><h2 id="springboot整合websocket"><a href="#springboot整合websocket" class="headerlink" title="springboot整合websocket"></a>springboot整合websocket</h2><blockquote><p>1.添加依赖文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>实例化websockt提供的对象</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebSocketConfig &#123;</span><br><span class="line">    @Bean  </span><br><span class="line">    public ServerEndpointExporter serverEndpointExporter() &#123;  </span><br><span class="line">        return new ServerEndpointExporter();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.构建服务端对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.websocket;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line">import javax.websocket.OnClose;</span><br><span class="line">import javax.websocket.OnError;</span><br><span class="line">import javax.websocket.OnMessage;</span><br><span class="line">import javax.websocket.OnOpen;</span><br><span class="line">import javax.websocket.Session;</span><br><span class="line">import javax.websocket.server.PathParam;</span><br><span class="line">import javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.wwj.consumer.action.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">@ServerEndpoint(&quot;/websocket/&#123;sid&#125;&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class WebSocketServer &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LogManager.getLogger(WebSocketServer.class);</span><br><span class="line">    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span><br><span class="line">    private static int onlineCount = 0;</span><br><span class="line">    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span><br><span class="line">    private static CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = new CopyOnWriteArraySet&lt;WebSocketServer&gt;();</span><br><span class="line"></span><br><span class="line">    //与某个客户端的连接会话，需要通过它来给客户端发送数据</span><br><span class="line">    private Session session;</span><br><span class="line"></span><br><span class="line">    //接收sid</span><br><span class="line">    private String sid=&quot;&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * 连接建立成功调用的方法*/</span><br><span class="line">    @OnOpen</span><br><span class="line">    public void onOpen(Session session,@PathParam(&quot;sid&quot;) String sid) &#123;</span><br><span class="line">        this.session = session;</span><br><span class="line">        webSocketSet.add(this);     //加入set中</span><br><span class="line">        addOnlineCount();           //在线数加1</span><br><span class="line">        LOG.info(&quot;有新窗口开始监听:&quot;+sid+&quot;,当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">        this.sid=sid;</span><br><span class="line">        try &#123;</span><br><span class="line">         sendMessage(&quot;连接成功&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.error(&quot;websocket IO异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接关闭调用的方法</span><br><span class="line">     */</span><br><span class="line">    @OnClose</span><br><span class="line">    public void onClose() &#123;</span><br><span class="line">        webSocketSet.remove(this);  //从set中删除</span><br><span class="line">        subOnlineCount();           //在线数减1</span><br><span class="line">        LOG.info(&quot;有一连接关闭！当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收到客户端消息后调用的方法</span><br><span class="line">     *</span><br><span class="line">     * @param message 客户端发送过来的消息*/</span><br><span class="line">    @OnMessage</span><br><span class="line">    public void onMessage(String message, Session session) &#123;</span><br><span class="line">    LOG.info(&quot;收到来自窗口&quot;+sid+&quot;的信息:&quot;+message);</span><br><span class="line">        //群发消息</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param session</span><br><span class="line"> * @param error</span><br><span class="line"> */</span><br><span class="line">    @OnError</span><br><span class="line">    public void onError(Session session, Throwable error) &#123;</span><br><span class="line">    LOG.error(&quot;发生错误&quot;);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">/**</span><br><span class="line"> * 实现服务器主动推送</span><br><span class="line"> */</span><br><span class="line">    public void sendMessage(String message) throws IOException &#123;</span><br><span class="line">        this.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 群发自定义消息</span><br><span class="line">     * */</span><br><span class="line">    public static void sendInfo(String message,@PathParam(&quot;sid&quot;) String sid) throws IOException &#123;</span><br><span class="line">    LOG.info(&quot;推送消息到窗口&quot;+sid+&quot;，推送内容:&quot;+message);</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">            //这里可以设定只推送给这个sid的，为null则全部推送</span><br><span class="line">            if(sid==null) &#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;else if(item.sid.equals(sid))&#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized int getOnlineCount() &#123;</span><br><span class="line">        return onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void addOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void subOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加入jsp支持,构建controlle,先跳转到需要建立连接的页面</p></blockquote><p>建立连接页面代码示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line"> var socket;  </span><br><span class="line">    if(typeof(WebSocket) == &quot;undefined&quot;) &#123;  </span><br><span class="line">        console.log(&quot;您的浏览器不支持WebSocket&quot;);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        console.log(&quot;您的浏览器支持WebSocket&quot;);  </span><br><span class="line">        //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  </span><br><span class="line">            //等同于socket = new WebSocket(&quot;ws://localhost:8083/checkcentersys/websocket/20&quot;);  </span><br><span class="line">            socket = new WebSocket(&quot;ws://localhost:10888/websocket/20&quot;);  </span><br><span class="line">            //打开事件  </span><br><span class="line">            socket.onopen = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket 已打开&quot;);  </span><br><span class="line">                //socket.send(&quot;这是来自客户端的消息&quot; + location.href + new Date());  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //获得消息事件  </span><br><span class="line">            socket.onmessage = function(msg) &#123;  </span><br><span class="line">                console.log(msg.data);  </span><br><span class="line">                //发现消息进入    开始处理前端触发逻辑</span><br><span class="line">            &#125;;  </span><br><span class="line">            //关闭事件  </span><br><span class="line">            socket.onclose = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket已关闭&quot;);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //发生了错误事件  </span><br><span class="line">            socket.onerror = function() &#123;  </span><br><span class="line">                alert(&quot;Socket发生了错误&quot;);  </span><br><span class="line">                //此时可以尝试刷新页面</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">我是首页</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong><em>测试通过</em></strong></p><h2 id="结合3-2进行消息的推送"><a href="#结合3-2进行消息的推送" class="headerlink" title="结合3-2进行消息的推送"></a>结合3-2进行消息的推送</h2><ol><li>写一个api进行消息推送</li><li>实验kafka接收到消息后进行推送</li></ol><h3 id="写一个restController"><a href="#写一个restController" class="headerlink" title="写一个restController"></a>写一个restController</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class PushController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/socket/push/&#123;cid&#125;&quot;)</span><br><span class="line">public void pushToWeb(@PathVariable String cid,String message) &#123;  </span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(message,cid);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>*如图所示,统一接收到推送消息</strong></p><p><img src="/images/resources/E347103244A1C7F9FA0B07FB4F6ED096.jpg" alt="IMAGE"></p><h3 id="消费者接收到消息后-调用发送消息"><a href="#消费者接收到消息后-调用发送消息" class="headerlink" title="消费者接收到消息后,调用发送消息"></a>消费者接收到消息后,调用发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(record.value.toString(),&quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/4A43B37A99094065B179770AF9CA753D.jpg" alt="IMAGE"></p><p><strong><em>代码均已测试</em></strong></p><p><strong><em>单机单例未见zookeeper和kafka出现异常</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推送是必不可少的一个环节。做好推送,即将进入实时计算的体系中。&lt;/p&gt;
&lt;h1 id=&quot;springboot整合websocket推送数据消息&quot;&gt;&lt;a href=&quot;#springboot整合websocket推送数据消息&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="webscoket推送" scheme="https://wangweijie.vip/tags/webscoket%E6%8E%A8%E9%80%81/"/>
    
      <category term="群发消息" scheme="https://wangweijie.vip/tags/%E7%BE%A4%E5%8F%91%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-2)</title>
    <link href="https://wangweijie.vip/2019/12/05/2019-12-05-%E5%BC%80%E5%8F%91kafka_Stream(3-2)/"/>
    <id>https://wangweijie.vip/2019/12/05/2019-12-05-开发kafka_Stream(3-2)/</id>
    <published>2019-12-05T07:32:25.674Z</published>
    <updated>2019-12-05T07:36:04.667Z</updated>
    
    <content type="html"><![CDATA[<p>第一步必不可少,理解熟练是必要!</p><h1 id="springboot整合kafka发送自定义消息序列"><a href="#springboot整合kafka发送自定义消息序列" class="headerlink" title="springboot整合kafka发送自定义消息序列"></a>springboot整合kafka发送自定义消息序列</h1><ol><li>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</li><li>构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者</li><li>使用spring提供的kafka对象编写生产者和消费者代码</li><li>模拟数据测试代码</li><li>操作步骤</li></ol><h2 id="结合分层构建的springboot项目-分别构建生产者模块和消费者模块"><a href="#结合分层构建的springboot项目-分别构建生产者模块和消费者模块" class="headerlink" title="结合分层构建的springboot项目,分别构建生产者模块和消费者模块"></a>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</h2><p>图示:如下</p><p><img src="/images/resources/5586430F8F32CD2B4B00D8E66D023F95.jpg" alt="IMAGE"></p><p>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</p><blockquote><p>父类引入新的依赖文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--kafka依赖配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--fastjson依赖配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2.4&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 在2个模块中构建启动文件以及设置不同的端口和log4j2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//在pom.xml中指定启动文件</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.producer.WebApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><p>启动文件示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &quot;com.wwj&quot;)</span><br><span class="line">public class WebApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(WebApplication.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意:appliacation.yml文件和log4j2文件请参照前面3-1中配置按需所取</em></strong></p><h2 id="构建自定的数据模型-使用jsonObject进行数据的转换-并配置kafka生产者和消费者"><a href="#构建自定的数据模型-使用jsonObject进行数据的转换-并配置kafka生产者和消费者" class="headerlink" title="构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者"></a>构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者</h2><p><strong><em>前面提到过,kafka在发送消息的时候需要进行序列化操作,把对象转换字节的,在接收消息的时候需要将字节反序列化成对象,除此之外在kafka中需要按照2个接口进行序列化对象的实现</em></strong></p><blockquote><p>在pojo模块中构建序列化器以及数据模型</p></blockquote><p>1.模型类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">private String  studentName;</span><br><span class="line">private String  studentAge;</span><br><span class="line">private String  studentClassNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class JsonSerializer   implements  Serializer&lt;JSONObject&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, JSONObject data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return JSON.toJSONBytes(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class JsonDeserializer  implements  Deserializer&lt;JSONObject&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public JSONObject deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return JSON.parseObject(data, JSONObject.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置生产者和消费者并引入模型和序列化器(基本配置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#生产者</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">    producer:</span><br><span class="line">      key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">      value-serializer: com.wwj.util.JsonSerializer</span><br><span class="line">      batch-size: 65536</span><br><span class="line">      buffer-memory: 524288</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#消费者</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: 0</span><br><span class="line">      enable-auto-commit: true</span><br><span class="line">      auto-commit-interval: 1000</span><br><span class="line">      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">      value-deserializer: com.wwj.util.JsonDeserializer</span><br></pre></td></tr></table></figure><h2 id="使用spring提供的kafka对象编写生产者和消费者代码"><a href="#使用spring提供的kafka对象编写生产者和消费者代码" class="headerlink" title="使用spring提供的kafka对象编写生产者和消费者代码"></a>使用spring提供的kafka对象编写生产者和消费者代码</h2><blockquote><p>生产者代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KfkaProducer &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KfkaProducer.class);</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  KafkaTemplate&lt;String,JSONObject&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">public void sendMsg(String topic,JSONObject msg) &#123;</span><br><span class="line">ListenableFuture&lt;SendResult&lt;String, JSONObject&gt;&gt; future = kafkaTemplate.send(topic, msg);</span><br><span class="line">future.addCallback(new  SuccessCallback&lt;Object&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onSuccess(Object result) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">LOG.info(&quot;消息发送成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,new FailureCallback() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onFailure(Throwable ex) &#123;</span><br><span class="line">LOG.info(&quot;消息发送失败&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KafkaConsumer &#123;</span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KafkaConsumer.class);</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟数据测试代码"><a href="#模拟数据测试代码" class="headerlink" title="模拟数据测试代码"></a>模拟数据测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class MockController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private  KfkaProducer  producer;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;mock&quot;)</span><br><span class="line">public void sendMock() &#123;</span><br><span class="line">Student  student =  new Student();</span><br><span class="line">student.setStudentName(&quot;小王&quot;);</span><br><span class="line">student.setStudentClassNo(&quot;001&quot;);</span><br><span class="line">student.setStudentAge(&quot;32&quot;);</span><br><span class="line">producer.sendMsg(&quot;studentMsg&quot;,(JSONObject)JSONObject.toJSON(student));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>启动zookeeper</li><li>启动kafka</li><li>创建主题(studentMsg)</li><li>启动消费者</li><li>启动生产者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topic = studentMsg, offset = 0, value = &#123;&quot;studentAge&quot;:&quot;32&quot;,&quot;studentClassNo&quot;:&quot;001&quot;,&quot;studentName&quot;:&quot;小王&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/715327AF7804A32EC11127418DCD4CE5.jpg" alt="IMAGE"></p><p>Ok!代码通过测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一步必不可少,理解熟练是必要!&lt;/p&gt;
&lt;h1 id=&quot;springboot整合kafka发送自定义消息序列&quot;&gt;&lt;a href=&quot;#springboot整合kafka发送自定义消息序列&quot; class=&quot;headerlink&quot; title=&quot;springboot整合kafk
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="自定义数据序列化传输" scheme="https://wangweijie.vip/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96%E4%BC%A0%E8%BE%93/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-1)</title>
    <link href="https://wangweijie.vip/2019/12/04/2019-12-04-%E5%BC%80%E5%8F%91Kafka_Stream(3-1)/"/>
    <id>https://wangweijie.vip/2019/12/04/2019-12-04-开发Kafka_Stream(3-1)/</id>
    <published>2019-12-04T07:39:30.057Z</published>
    <updated>2019-12-04T09:40:49.539Z</updated>
    
    <content type="html"><![CDATA[<p>前期先利用springboot整合热身,不是什么坏事情。</p><h1 id="kafkaStream流式计算版本实现1-0"><a href="#kafkaStream流式计算版本实现1-0" class="headerlink" title="kafkaStream流式计算版本实现1.0"></a>kafkaStream流式计算版本实现1.0</h1><ol><li>springboot分模块整合(3-1)</li><li>springboot整合kafka发送自定义消息序列(3-2)</li><li>springboot整合websocket推送数据消息(3-3)</li><li>springboot结合kafkaStream流推送消息Echart图形展示(3-4)</li></ol><h2 id="springboot分模块整合"><a href="#springboot分模块整合" class="headerlink" title="springboot分模块整合"></a>springboot分模块整合</h2><ol><li>先更新下eclipse</li><li>可在<a href="https://spring.io/tools3/sts/all" target="_blank" rel="noopener">springboot插件下载</a>进行对应版本的eclipse下载</li><li>构建springboot项目</li></ol><p>目录结构如下:</p><p><img src="/images/resources/64012647E02BB4C9E8FDB144CEA89EC6.jpg" alt="IMAGE"></p><h3 id="搭建springboot并整合"><a href="#搭建springboot并整合" class="headerlink" title="搭建springboot并整合"></a>搭建springboot并整合</h3><p><strong>注意事项:</strong></p><ol><li>勾选需要的技术内容(mysql+web+mybatis)</li><li>分层结构</li><li>采用yml方式进行配置可能需要安装yml插件</li></ol><blockquote><p> 使用easyui</p></blockquote><p><strong><em>注意事项:</em></strong></p><ol><li>配置jsp支持</li><li>添加静态资源文件</li><li>引入对应的所需文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置支持jsp页面 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">          &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/37ED589AE4C2730AC283B47FF490B744.jpg" alt="IMAGE"></p><p><img src="/images/resources/58FCDE7336F2DBD1552C5B387A76973B.jpg" alt="IMAGE"></p><p>直接引入static下的文件如下<code>&lt;script type=&quot;text/javascript&quot; src=&quot;/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><blockquote><p> 使用druid数据源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- druid数据池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>yml展示请参照全文展示</em></strong></p><p><code>通过访问ip+端口/druid——即可进入druid控制台</code></p><blockquote><p> 使用分页插件和mybatis</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>yml展示请参照全文展示</em></strong></p><blockquote><p> 使用log4j2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>简单的lo4j2.xml配置文件如下</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- 文件输出格式 --&gt;</span><br><span class="line">        &lt;property name=&quot;PATTERN&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; |-%-5level [%thread] %c [%L] -| %msg%n&lt;/property&gt;</span><br><span class="line">        &lt;Property name=&quot;instance&quot;&gt;spring-boot-log4j2-log&lt;/Property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;CONSOLE&quot; target=&quot;system_out&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;$&#123;PATTERN&#125;&quot;/&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;!-- root logger 配置 --&gt;</span><br><span class="line">        &lt;root level=&quot;info&quot;&gt;</span><br><span class="line">            &lt;appenderref ref=&quot;CONSOLE&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/loggers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 使用swagger2文档生成</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>通过设置初始化信息</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.wwj.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @Description: 构建 api文档的信息</span><br><span class="line">     */</span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                // 设置页面标题</span><br><span class="line">                .title(&quot;使用swagger2构建api接口文档&quot;)</span><br><span class="line">                // 描述</span><br><span class="line">                .description(&quot;欢迎访问接口文档，这里是描述信息&quot;)</span><br><span class="line">                // 定义版本号</span><br><span class="line">                .version(&quot;1.0&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心控制文件展示"><a href="#核心控制文件展示" class="headerlink" title="核心控制文件展示"></a>核心控制文件展示</h2><blockquote><p>根节点pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;KafkaFather&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;KafkaFather&lt;/name&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;description&gt;kafkaDemo2&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- log4j. --&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- druid数据池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 设置支持jsp页面 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- swagger2 配置 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;service&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pojo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module&gt;pojo&lt;/module&gt;</span><br><span class="line">&lt;module&gt;mapper&lt;/module&gt;</span><br><span class="line">&lt;module&gt;service&lt;/module&gt;</span><br><span class="line">&lt;module&gt;web&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>web节点pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;KafkaFather&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line">  &lt;artifactId&gt;web&lt;/artifactId&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;service&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.web.WebApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其余节点之间相互依赖管理</p></blockquote><blockquote><p>关键文件（启动文件以及application.yml文件）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &quot;com.wwj&quot;)</span><br><span class="line">@MapperScan(basePackages = &quot;com.wwj.mapper&quot;)</span><br><span class="line">public class WebApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(WebApplication.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#端口号</span><br><span class="line">server:</span><br><span class="line">  port: 10086</span><br><span class="line">#配置druid数据源</span><br><span class="line">spring:</span><br><span class="line">  mvc:  </span><br><span class="line">        view:  </span><br><span class="line">            prefix: /WEB-INF/views/  </span><br><span class="line">            suffix: .jsp</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/crmpro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    druid:</span><br><span class="line">      #初始化大小</span><br><span class="line">      initialSize: 5</span><br><span class="line">      #最小值</span><br><span class="line">      minIdle: 5</span><br><span class="line">      #最大值</span><br><span class="line">      maxActive: 20</span><br><span class="line">      #最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms</span><br><span class="line">      maxWait: 60000</span><br><span class="line">      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span><br><span class="line">      timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">      #配置一个连接在池中最小生存的时间</span><br><span class="line">      minEvictableIdleTimeMillis: 300000</span><br><span class="line">      validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">      testWhileIdle: true</span><br><span class="line">      testOnBorrow: false</span><br><span class="line">      testOnReturn: false</span><br><span class="line">      poolPreparedStatements: true</span><br><span class="line">      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，</span><br><span class="line">      #&apos;wall&apos;用于防火墙，SpringBoot中没有log4j，我改成了log4j2</span><br><span class="line">      filters: stat,wall,log4j2</span><br><span class="line">      #最大PSCache连接</span><br><span class="line">      maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">      useGlobalDataSourceStat: true</span><br><span class="line">      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line">      # 配置StatFilter</span><br><span class="line">      web-stat-filter:</span><br><span class="line">        #默认为false，设置为true启动</span><br><span class="line">        enabled: true</span><br><span class="line">        url-pattern: &quot;/*&quot;</span><br><span class="line">        exclusions: &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br><span class="line">      #配置StatViewServlet</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        url-pattern: &quot;/druid/*&quot;</span><br><span class="line">        #允许那些ip</span><br><span class="line">        allow: 127.0.0.1</span><br><span class="line">        login-username: admin</span><br><span class="line">        login-password: 123456</span><br><span class="line">        #禁止那些ip</span><br><span class="line">        deny: 192.168.1.102</span><br><span class="line">        #是否可以重置</span><br><span class="line">        reset-enable: true</span><br><span class="line">        #启用</span><br><span class="line">        enabled: true</span><br><span class="line">#设置mybatis</span><br><span class="line">mybatis:</span><br><span class="line">  #mapper.xml所在位置</span><br><span class="line">  mapper-locations: classpath*:Mapper/*.xml</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">#设置pagehelper</span><br><span class="line">pagehelper:</span><br><span class="line">    helperDialect: mysql</span><br><span class="line">    reasonable: true</span><br><span class="line">    supportMethodsArguments: true</span><br><span class="line">    params: count=countSql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前期先利用springboot整合热身,不是什么坏事情。&lt;/p&gt;
&lt;h1 id=&quot;kafkaStream流式计算版本实现1-0&quot;&gt;&lt;a href=&quot;#kafkaStream流式计算版本实现1-0&quot; class=&quot;headerlink&quot; title=&quot;kafkaStream流
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="springboot分模块整合" scheme="https://wangweijie.vip/tags/springboot%E5%88%86%E6%A8%A1%E5%9D%97%E6%95%B4%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams2</title>
    <link href="https://wangweijie.vip/2019/12/02/2019-12-02-%E5%BC%80%E5%8F%91kafka_Streams2/"/>
    <id>https://wangweijie.vip/2019/12/02/2019-12-02-开发kafka_Streams2/</id>
    <published>2019-12-02T09:55:55.315Z</published>
    <updated>2019-12-02T09:58:40.618Z</updated>
    
    <content type="html"><![CDATA[<p>熟知kafka提供的高级算子,以及熟练使用我们常用的算子是不可或缺的操作。</p><h1 id="模拟数据进行流拓扑的设计"><a href="#模拟数据进行流拓扑的设计" class="headerlink" title="模拟数据进行流拓扑的设计"></a>模拟数据进行流拓扑的设计</h1><ol><li>根据一个模拟的购物数据进行流的设计</li><li>设计规则以及如何将流切分为多个流(再分流)</li></ol><h2 id="根据一个模拟的购物数据进行流的设计"><a href="#根据一个模拟的购物数据进行流的设计" class="headerlink" title="根据一个模拟的购物数据进行流的设计"></a>根据一个模拟的购物数据进行流的设计</h2><p><img src="/images/resources/DD971F533A1FB5464156F24B5713DC14.jpg" alt="IMAGE"></p><ol><li>通过屏蔽处理器处理屏蔽卡号问题</li><li>提取购买的物品以及邮编,确定购买模式</li><li>获取会员号,以及金额.根据金额确定奖励</li><li>获取所有完成的数据,以备后续进行特定的分析</li></ol><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><blockquote><p>1.模拟数据对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseRecord &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户姓名</span><br><span class="line">     */</span><br><span class="line">private String firstName;</span><br><span class="line">private String lastName;</span><br><span class="line">//用户信用卡编号</span><br><span class="line">private String creditCardNumber;</span><br><span class="line">//用户购买物品</span><br><span class="line">    private String itemPurchased;</span><br><span class="line">    //购物物品数量</span><br><span class="line">    private int  quantity;</span><br><span class="line">    //物品单价</span><br><span class="line">    private double price;</span><br><span class="line">    //购买日期</span><br><span class="line">    private  Date  purchaseDate;</span><br><span class="line">    //用户会员卡编号</span><br><span class="line">    private  String zipCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">PurchaseRecord  record = new PurchaseRecord();</span><br><span class="line">record.setFirstName(&quot;王&quot;);</span><br><span class="line">record.setLastName(&quot;伟杰&quot;);</span><br><span class="line">record.setCreditCardNumber(&quot;1000-5000-1987-0215&quot;);</span><br><span class="line">record.setItemPurchased(&quot;福特钥匙扣&quot;);</span><br><span class="line">record.setQuantity(1);</span><br><span class="line">record.setPrice(28.00);</span><br><span class="line">record.setPurchaseDate(new Date());</span><br><span class="line">record.setZipCode(&quot;100187&quot;);</span><br><span class="line">Gson  g = new Gson();</span><br><span class="line">System.out.println(g.toJson(record));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>数据模拟效果如下:</em></strong><code>{&quot;firstName&quot;:&quot;王&quot;,&quot;lastName&quot;:&quot;伟杰&quot;,&quot;creditCardNumber&quot;:&quot;1000-5000-1987-0215&quot;,&quot;itemPurchased&quot;:&quot;福特钥匙扣&quot;,&quot;quantity&quot;:1,&quot;price&quot;:28.0,&quot;purchaseDate&quot;:&quot;Nov 19, 2019 4:55:58 PM&quot;,&quot;zipCode&quot;:&quot;100187&quot;}</code></p><blockquote><p> 2.构建通用的序列化器</p></blockquote><p><strong>说明:kafka以字节的方式传输数据,在传输数据的时候需要将对象转换为json,发送到对应的主题时候,需要转换成字节的数组,其次在消费的时候需要将主题中的字节数组转换成json,其次在转为对应的对象类型.当然上一节已经提到过.Kafka默认对一些类型进行了支持,比如String,Long,Integer等</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通用的序列化操作</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public class JsonSerializer&lt;T&gt;  implements  Serializer&lt;T&gt;&#123;</span><br><span class="line">private  Gson  g = new Gson();</span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, T data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return g.toJson(data).getBytes(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通用的反序列化操作</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public class JsonDeserializer&lt;T&gt; implements Deserializer&lt;T&gt; &#123;</span><br><span class="line">private  Gson  g = new Gson();</span><br><span class="line">private  Class&lt;T&gt;  deserializedClass;</span><br><span class="line">public JsonDeserializer(Class&lt;T&gt; deserializedClass) &#123;</span><br><span class="line">super();</span><br><span class="line">this.deserializedClass = deserializedClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public T deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return g.fromJson(new String(data), deserializedClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 3.编写对应的规则</p></blockquote><p>1.处理信用卡的规则</p><p>2.提取购买的物品,以及邮编(购买模式的规则)</p><p>3.提取会员号以及话费的金额(奖励机制的规则)</p><p><strong><em>构建一个工具类,以及规则所产出的对应的实体</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class PurchasePattern &#123;</span><br><span class="line">    private String zipCode;</span><br><span class="line">    private String item;</span><br><span class="line">    private Date date;</span><br><span class="line">    private double amount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line">  private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>工具类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class ActionUtil &#123;</span><br><span class="line">private  final  static  String MARK  = &quot;xxxx-xxxx-xxxx&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 屏蔽信用卡号</span><br><span class="line"> * @param pr  需要被屏蔽的信息记录</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static  PurchaseRecord  mask(PurchaseRecord  pr)&#123;</span><br><span class="line">String[] parts = pr.getCreditCardNumber().split(&quot;-&quot;);</span><br><span class="line">pr.setCreditCardNumber(MARK+&quot;-&quot;+parts[3]);</span><br><span class="line">return pr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 提取部分数据</span><br><span class="line"> * @param pr  需要提取的记录信息</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static  PurchasePattern  getSomeOne(PurchaseRecord  pr)&#123;</span><br><span class="line">PurchasePattern  pp = new PurchasePattern();</span><br><span class="line">pp.setZipCode(pr.getZipCode());</span><br><span class="line">pp.setDate(pr.getPurchaseDate());</span><br><span class="line">pp.setItem(pr.getItemPurchased());</span><br><span class="line">pp.setAmount(pr.getPrice()*pr.getQuantity());</span><br><span class="line">return pp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static  RewardAccumulator  getReward(PurchaseRecord  pr)&#123;</span><br><span class="line">RewardAccumulator  ra = new RewardAccumulator();</span><br><span class="line">ra.setCustomerId(pr.getFirstName()+pr.getLastName());</span><br><span class="line">ra.setPurchaseTotal(pr.getPrice()*pr.getQuantity());</span><br><span class="line">return ra;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>测试结果数据如下:</em></strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &#123;&quot;firstName&quot;:&quot;王&quot;,&quot;lastName&quot;:&quot;伟杰&quot;,&quot;creditCardNumber&quot;:&quot;xxxx-xxxx-xxxx-0215&quot;,&quot;itemPurchased&quot;:&quot;福特钥匙扣&quot;,&quot;quantity&quot;:1,&quot;price&quot;:28.0,&quot;purchaseDate&quot;:&quot;Nov 20, 2019 5:07:13 PM&quot;,&quot;zipCode&quot;:&quot;100187&quot;&#125;</span><br><span class="line">&#123;&quot;zipCode&quot;:&quot;100187&quot;,&quot;item&quot;:&quot;福特钥匙扣&quot;,&quot;date&quot;:&quot;Nov 20, 2019 5:07:13 PM&quot;,&quot;amount&quot;:28.0&#125;</span><br><span class="line">&#123;&quot;customerId&quot;:&quot;王伟杰&quot;,&quot;purchaseTotal&quot;:28.0&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>根据拓扑创建一个流式应用程式</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">public class FirstStream &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(FirstStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;FirstZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">JsonSerializer&lt;PurchasePattern&gt; pps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchasePattern&gt; ppds = new JsonDeserializer&lt;&gt;(PurchasePattern.class);</span><br><span class="line">JsonSerializer&lt;RewardAccumulator&gt; rs = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;RewardAccumulator&gt; rds = new JsonDeserializer&lt;&gt;(RewardAccumulator.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">Serde&lt;PurchasePattern&gt; PurchasePatternSerde = Serdes.serdeFrom(pps, ppds);</span><br><span class="line">Serde&lt;RewardAccumulator&gt; RewardAccumulatorSerde = Serdes.serdeFrom(rs, rds);</span><br><span class="line"></span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line">/**</span><br><span class="line"> * 因为机器缘由，我们可以通过打印来替代 这一步等于处理完数据后发送给对应的主题,后续配置消费者消费即可</span><br><span class="line"> * PurchaseRecordStream.to(&quot;Purchase&quot;, Produced.with(stringSerde,</span><br><span class="line"> * PurchaseRecordSerde));</span><br><span class="line"> */</span><br><span class="line">PurchaseRecordStream.print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;PurchaseRecord&quot;));</span><br><span class="line"></span><br><span class="line">// 同理如下</span><br><span class="line">KStream&lt;String, PurchasePattern&gt; PurchasePatternStream = PurchaseRecordStream</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.getSomeOne(pr));</span><br><span class="line">PurchasePatternStream.print(Printed.&lt;String, PurchasePattern&gt;toSysOut().withLabel(&quot;PurchasePattern&quot;));</span><br><span class="line"></span><br><span class="line">KStream&lt;String, RewardAccumulator&gt; RewardAccumulatorStream = PurchaseRecordStream</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.getReward(pr));</span><br><span class="line">RewardAccumulatorStream.print(Printed.&lt;String, RewardAccumulator&gt;toSysOut().withLabel(&quot;RewardAccumulator&quot;));</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.配置生产者以及模拟数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">PurchaseRecord  record = new PurchaseRecord();</span><br><span class="line">record.setFirstName(&quot;王&quot;);</span><br><span class="line">record.setLastName(&quot;伟杰&quot;);</span><br><span class="line">record.setCreditCardNumber(&quot;1000-5000-1987-0215&quot;);</span><br><span class="line">record.setItemPurchased(&quot;福特钥匙扣&quot;);</span><br><span class="line">record.setQuantity(1);</span><br><span class="line">record.setPrice(28.00);</span><br><span class="line">record.setPurchaseDate(new Date());</span><br><span class="line">record.setZipCode(&quot;100187&quot;);</span><br><span class="line"></span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, PurchaseRecord&gt; kp =  new KafkaProducer&lt;String,PurchaseRecord&gt;(properties,new StringSerializer(),new JsonSerializer&lt;PurchaseRecord&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, PurchaseRecord&gt;(&quot;transactions&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>6.测试</p></blockquote><ol><li>启动zookeeper和kafka</li><li>创建一个transactions的主题</li><li>启动流程序</li><li>生产者发送消息</li></ol><blockquote><p>7.结果如下，对象要重写toString方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[PurchaseRecord]: null, PurchaseRecord [firstName=徐, lastName=小二, creditCardNumber=xxxx-xxxx-xxxx-0213, itemPurchased=福特钥匙扣, quantity=1, price=28.0, purchaseDate=Wed Nov 20 18:18:35 CST 2019, zipCode=100187]</span><br><span class="line">[PurchasePattern]: null, PurchasePattern [zipCode=100187, item=福特钥匙扣, date=Wed Nov 20 18:18:35 CST 2019, amount=28.0]</span><br><span class="line">[RewardAccumulator]: null, RewardAccumulator [customerId=徐小二, purchaseTotal=28.0]</span><br></pre></td></tr></table></figure><h2 id="如何将流切分为多个流-再分流"><a href="#如何将流切分为多个流-再分流" class="headerlink" title="如何将流切分为多个流(再分流)"></a>如何将流切分为多个流(再分流)</h2><p><strong><em>截止到现在,数据流的分配已经实现。接下我们需要细化一些规则</em></strong></p><ol><li>一定金额下面的信息我们需要进行过滤，小额交易可能对我们起不到任何帮助</li><li>在进入拓扑,默认没有对应的key值进行分类,这是需要我们为数据生成一个key值,以便做好新的归类</li><li>可能有一些的新的信息，接下来我们需要进行对应的分流到新的主题中</li><li>把一些需要的记录写入kafka之外</li></ol><blockquote><p>1.为模型添加一个Department字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//用户购买物品的种类</span><br><span class="line">    private String departMent;</span><br></pre></td></tr></table></figure><blockquote><p>2.过滤小额交易物品以及选择时间作为key值已方便归类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class SecondStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(SecondStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;FirstZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 过滤小额操作以及选择特定的字段作为key</span><br><span class="line">    */</span><br><span class="line">//声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">KeyValueMapper&lt;String, PurchaseRecord, Long&gt;  PurchaseRecordAsDateKey = </span><br><span class="line">(key,PurchaseRecord) -&gt; PurchaseRecord.getPurchaseDate().getTime();</span><br><span class="line">//过滤小额交易的操作进入对应的流并选择特定的条件作为key值  使用filter可以进行条件进行过滤</span><br><span class="line">KStream&lt;Long,PurchaseRecord&gt;  filteredKStream = </span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt; purchaseRecord.getPrice()&gt;5.00)</span><br><span class="line">.selectKey(PurchaseRecordAsDateKey);</span><br><span class="line">filteredKStream.print(Printed.&lt;Long, PurchaseRecord&gt;toSysOut().withLabel(&quot;purchases&quot;));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分流</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 分流的操作  分流可以根据数据特定的条件进行分流 需要使用到特定的谓词条件 Predicate</span><br><span class="line"> */</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//返回分流的数组</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[] kstreamByDepart = </span><br><span class="line">PurchaseRecordStream.branch(isOne,isTwo);</span><br><span class="line">kstreamByDepart[0].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;钥匙类&quot;));</span><br><span class="line">kstreamByDepart[1].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;小五金&quot;));</span><br></pre></td></tr></table></figure><blockquote><p> 使用foreach操作将记录写入kafka之外</p></blockquote><p><strong><em>假定会员编码为xxxx-xxxx-xxxx-0000为恶意会员码</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//会员编码为恶意编码</span><br><span class="line">ForeachAction&lt;String, PurchaseRecord&gt; purchaseRecordForeachAction =</span><br><span class="line">(key,purchaseRecord) -&gt; System.out.println(&quot;做额外的操作&quot;);</span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt;purchaseRecord.getZipCode().equals(&quot;xxxx-xxxx-xxxx-0000&quot;) )</span><br><span class="line">.foreach(purchaseRecordForeachAction);</span><br></pre></td></tr></table></figure><blockquote><p> 测试代码是否通过</p></blockquote><ol><li>启动zookeeper和kafka</li><li>启动流程序</li><li>生产者输送信息到transactions的主题</li></ol><blockquote><p>测试结果如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[purchases]: 1575279440000, PurchaseRecord [firstName=徐, lastName=小四, creditCardNumber=xxxx-xxxx-xxxx-0001, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:37:20 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小四, creditCardNumber=xxxx-xxxx-xxxx-0001, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:37:20 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575279951000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:45:51 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:45:51 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280227000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:50:27 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:50:27 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280293000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:51:33 CST 2019, zipCode=000000]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:51:33 CST 2019, zipCode=000000]</span><br><span class="line">做额外的操作</span><br><span class="line">[purchases]: 1575280333000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=汤勺, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:13 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=汤勺, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:13 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280351000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:31 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:31 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=5.0, purchaseDate=Mon Dec 02 17:52:42 CST 2019, zipCode=100187]</span><br></pre></td></tr></table></figure><blockquote><p>完整代码示例如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.streams;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.common.serialization.Serde;</span><br><span class="line">import org.apache.kafka.common.serialization.Serdes;</span><br><span class="line">import org.apache.kafka.streams.Consumed;</span><br><span class="line">import org.apache.kafka.streams.KafkaStreams;</span><br><span class="line">import org.apache.kafka.streams.StreamsBuilder;</span><br><span class="line">import org.apache.kafka.streams.StreamsConfig;</span><br><span class="line">import org.apache.kafka.streams.kstream.ForeachAction;</span><br><span class="line">import org.apache.kafka.streams.kstream.KStream;</span><br><span class="line">import org.apache.kafka.streams.kstream.KeyValueMapper;</span><br><span class="line">import org.apache.kafka.streams.kstream.Predicate;</span><br><span class="line">import org.apache.kafka.streams.kstream.Printed;</span><br><span class="line">import org.apache.kafka.streams.processor.WallclockTimestampExtractor;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import com.wwj.model.PurchaseRecord;</span><br><span class="line">import com.wwj.serde.JsonDeserializer;</span><br><span class="line">import com.wwj.serde.JsonSerializer;</span><br><span class="line">import com.wwj.util.ActionUtil;</span><br><span class="line"></span><br><span class="line">public class SecondStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(SecondStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 过滤小额操作以及选择特定的字段作为key</span><br><span class="line">    */</span><br><span class="line">//声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">KeyValueMapper&lt;String, PurchaseRecord, Long&gt;  PurchaseRecordAsDateKey = </span><br><span class="line">(key,PurchaseRecord) -&gt; PurchaseRecord.getPurchaseDate().getTime();</span><br><span class="line">//过滤小额交易的操作进入对应的流并选择特定的条件作为key值  使用filter可以进行条件进行过滤</span><br><span class="line">KStream&lt;Long,PurchaseRecord&gt;  filteredKStream = </span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt; purchaseRecord.getPrice()&gt;5.00)</span><br><span class="line">.selectKey(PurchaseRecordAsDateKey);</span><br><span class="line">filteredKStream.print(Printed.&lt;Long, PurchaseRecord&gt;toSysOut().withLabel(&quot;purchases&quot;));</span><br><span class="line">/**</span><br><span class="line"> * 分流的操作  分流可以根据数据特定的条件进行分流 需要使用到特定的谓词条件 Predicate</span><br><span class="line"> */</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//返回分流的数组</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[] kstreamByDepart = </span><br><span class="line">PurchaseRecordStream.branch(isOne,isTwo);</span><br><span class="line">kstreamByDepart[0].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;钥匙类&quot;));</span><br><span class="line">kstreamByDepart[1].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;小五金&quot;));</span><br><span class="line">//会员编码为恶意编码</span><br><span class="line">ForeachAction&lt;String, PurchaseRecord&gt; purchaseRecordForeachAction =</span><br><span class="line">(key,purchaseRecord) -&gt; System.out.println(&quot;做额外的操作&quot;);</span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt;purchaseRecord.getZipCode().equals(&quot;xxxx-xxxx-xxxx-0000&quot;) )</span><br><span class="line">.foreach(purchaseRecordForeachAction);</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熟知kafka提供的高级算子,以及熟练使用我们常用的算子是不可或缺的操作。&lt;/p&gt;
&lt;h1 id=&quot;模拟数据进行流拓扑的设计&quot;&gt;&lt;a href=&quot;#模拟数据进行流拓扑的设计&quot; class=&quot;headerlink&quot; title=&quot;模拟数据进行流拓扑的设计&quot;&gt;&lt;/a&gt;模拟数据进
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="自定义序列器" scheme="https://wangweijie.vip/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%99%A8/"/>
    
      <category term="必要的算子" scheme="https://wangweijie.vip/tags/%E5%BF%85%E8%A6%81%E7%9A%84%E7%AE%97%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams1</title>
    <link href="https://wangweijie.vip/2019/11/14/2019-11-14-%E5%BC%80%E5%8F%91kafka_Streams1/"/>
    <id>https://wangweijie.vip/2019/11/14/2019-11-14-开发kafka_Streams1/</id>
    <published>2019-11-14T09:35:55.100Z</published>
    <updated>2019-11-14T09:41:15.627Z</updated>
    
    <content type="html"><![CDATA[<p>自定义数据类型,利用kafka进行数据传递,以及如何去定义流拓扑。什么是流,我们需要有一个初步认识</p><h1 id="从零到有的kafka进阶"><a href="#从零到有的kafka进阶" class="headerlink" title="从零到有的kafka进阶"></a>从零到有的kafka进阶</h1><ol><li>环境的准备</li><li>利用kafkaStreams实现helloworld-HELLOWORLD</li><li>利用kafka自定义序列化器以及构建生产者和消费者</li></ol><h2 id="环境的准备"><a href="#环境的准备" class="headerlink" title="环境的准备"></a>环境的准备</h2><ol><li>jdk1.8</li><li>maven构建普通项目</li><li>引入关联的jar包</li><li>引入log4j</li></ol><p><a href="https://blog.csdn.net/cyxinda/article/details/78254155" target="_blank" rel="noopener">关于log4j的使用可参考</a></p><blockquote><p>pom.xml如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p>lo4j配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"># stdout Appender</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span><br></pre></td></tr></table></figure><h2 id="利用kafkaStreams实现helloworld-HELLOWORLD"><a href="#利用kafkaStreams实现helloworld-HELLOWORLD" class="headerlink" title="利用kafkaStreams实现helloworld-HELLOWORLD"></a>利用kafkaStreams实现helloworld-HELLOWORLD</h2><h3 id="流式处理API-DSL"><a href="#流式处理API-DSL" class="headerlink" title="流式处理API(DSL)"></a>流式处理API(DSL)</h3><ol><li>高级API的核心是KStream对象(该对象代表流/值记录)</li><li>DSL方法都返回了一个KStream对象的引用</li><li>返回的KStream对象是一个新的实例。而不是最初的实例</li></ol><h3 id="构建一个简单的流向图"><a href="#构建一个简单的流向图" class="headerlink" title="构建一个简单的流向图"></a>构建一个简单的流向图</h3><p><img src="/images/resources/45DADE973B6CF2518094F24DC98B78A0.jpg" alt="IMAGE"></p><blockquote><p>类似的步骤</p></blockquote><ol><li>定义配置项</li><li>创建自定义或预定义的Serde实例</li><li>创建处理器拓扑</li><li>创建和启动KStream</li></ol><p><strong><em>补充说明:kafka流在进行处理的时候,数据会进行序列化和反序列化操作。在kafka流中，默认提供了一个Serdes类来构建Serde对象。而默认提供以下类型作为支撑1.String 2.byte数组 3.Long 4.Integer 5.Double</em></strong></p><p><a href="https://www.cnblogs.com/baxianhua/p/10271830.html" target="_blank" rel="noopener">关于序列化的原理和认知</a></p><blockquote><p>代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.kafka;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.common.serialization.Serde;</span><br><span class="line">import org.apache.kafka.common.serialization.Serdes;</span><br><span class="line">import org.apache.kafka.streams.Consumed;</span><br><span class="line">import org.apache.kafka.streams.KafkaStreams;</span><br><span class="line">import org.apache.kafka.streams.StreamsBuilder;</span><br><span class="line">import org.apache.kafka.streams.StreamsConfig;</span><br><span class="line">import org.apache.kafka.streams.kstream.KStream;</span><br><span class="line">import org.apache.kafka.streams.kstream.Produced;</span><br><span class="line">import org.apache.kafka.streams.kstream.ValueMapper;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">public class KafkaStreamsHelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  public final static  Logger   LOG  = LoggerFactory.getLogger(KafkaStreamsHelloWorld.class);</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">//配置基本属性</span><br><span class="line">  Properties  props = new Properties();</span><br><span class="line">  //每个流式程序有特定的id和节点(必选)</span><br><span class="line">  props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;helloworl_app_id&quot;);</span><br><span class="line">  props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">  StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">  Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">  //1.构建流的创建者实例</span><br><span class="line">  StreamsBuilder  builder = new StreamsBuilder();</span><br><span class="line">  // 1.1 接收源数据产生的处理器流</span><br><span class="line">  KStream&lt;String,String&gt; simpleFirstStream = builder.stream(&quot;src-topic&quot;, Consumed.with(stringSerde, stringSerde));</span><br><span class="line">  //1.2 将数据全部转化为大写 V代表接收值的类型,VR代表</span><br><span class="line">  KStream&lt;String, String&gt; upperCaseStream = simpleFirstStream.mapValues(new ValueMapper&lt;String, String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String apply(String value) &#123;</span><br><span class="line"></span><br><span class="line">return value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">  //1.3 将处理后的值送到输出主题中</span><br><span class="line">  upperCaseStream.through(&quot;out-topic&quot;, Produced.with(stringSerde, stringSerde));</span><br><span class="line">  </span><br><span class="line">  //2. 构建流容器</span><br><span class="line">  KafkaStreams  kafkaStreams = new KafkaStreams(builder.build(), streamsConfig);</span><br><span class="line">  </span><br><span class="line">  //3.启动流式程序</span><br><span class="line">  kafkaStreams.start();</span><br><span class="line">  Thread.sleep(60000);</span><br><span class="line">  LOG.info(&quot;流式程序结束&quot;);</span><br><span class="line">  kafkaStreams.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>操作步骤</p></blockquote><ol><li>启动zookeeper和kafka</li><li>创建2个主题，一个src-topic 和 out-topic</li><li>建立一个生产者和消费者</li><li>启动流式就计算程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span><br><span class="line">bin/kafka-server-start.sh config/server.properties</span><br><span class="line">bin/kafka-topics.sh --create --topic src-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class="line">bin/kafka-topics.sh --create --topic out-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class="line">bin/kafka-console-producer.sh --topic src-topic --broker-list localhost:9092</span><br><span class="line">bin/kafka-console-consumer.sh --topic out-topic --bootstrap-server localhost:9092 --from-beginning</span><br></pre></td></tr></table></figure><blockquote><p>最终结果如下:</p></blockquote><p><img src="/images/resources/A76B1B9A1C77F7FFAAD40CA298FDDCC0.jpg" alt="IMAGE"></p><p><img src="/images/resources/EA2F83FE2A5A245B3E5A2F76B851F30C.jpg" alt="IMAGE"></p><h2 id="利用kafka自定义序列化器以及构建生产者和消费者"><a href="#利用kafka自定义序列化器以及构建生产者和消费者" class="headerlink" title="利用kafka自定义序列化器以及构建生产者和消费者"></a>利用kafka自定义序列化器以及构建生产者和消费者</h2><h3 id="创建数据对象"><a href="#创建数据对象" class="headerlink" title="创建数据对象"></a>创建数据对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试数据模型</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class OrderMsg &#123;</span><br><span class="line">    //消费卡号</span><br><span class="line">private String cardNumber;</span><br><span class="line">//消费人</span><br><span class="line">private String  personName;</span><br><span class="line">//消费金额</span><br><span class="line">private  Double  money;</span><br><span class="line">public String getCardNumber() &#123;</span><br><span class="line">return cardNumber;</span><br><span class="line">&#125;</span><br><span class="line">public void setCardNumber(String cardNumber) &#123;</span><br><span class="line">this.cardNumber = cardNumber;</span><br><span class="line">&#125;</span><br><span class="line">public String getPersonName() &#123;</span><br><span class="line">return personName;</span><br><span class="line">&#125;</span><br><span class="line">public void setPersonName(String personName) &#123;</span><br><span class="line">this.personName = personName;</span><br><span class="line">&#125;</span><br><span class="line">public Double getMoney() &#123;</span><br><span class="line">return money;</span><br><span class="line">&#125;</span><br><span class="line">public void setMoney(Double money) &#123;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">public OrderMsg(String cardNumber, String personName, Double money) &#123;</span><br><span class="line">super();</span><br><span class="line">this.cardNumber = cardNumber;</span><br><span class="line">this.personName = personName;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">public OrderMsg() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;OrderMsg [cardNumber=&quot; + cardNumber + &quot;, personName=&quot; + personName + &quot;, money=&quot; + money + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建序列化器"><a href="#创建序列化器" class="headerlink" title="创建序列化器"></a>创建序列化器</h3><p>1.使用序列化器（可选则用GSON）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.序列化器和反序列化器的代码如下(kafka在传递数据的时候,会将数据转换为字节,然后消费的时候将字节转换为具体的对象)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//自定义序列化器</span><br><span class="line">public class JsonSer&lt;T&gt; implements Serializer&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">private  Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, T data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return gson.toJson(data).getBytes(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//自定义反序列化器</span><br><span class="line">public class JsonDser&lt;T&gt; implements Deserializer&lt;T&gt;&#123;</span><br><span class="line">private Gson gson = new Gson();</span><br><span class="line">private Class&lt;T&gt;  deserClass;</span><br><span class="line"></span><br><span class="line">public  JsonDser(Class&lt;T&gt; deserClass)&#123;</span><br><span class="line">this.deserClass = deserClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public JsonDser() &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public T deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">return gson.fromJson(new String(data), deserClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        properties.put(&quot;value.serializer&quot;, new JsonSer&lt;OrderMsg&gt;().getClass());</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">        System.out.println(new JsonSer&lt;OrderMsg&gt;().getClass());</span><br><span class="line">       KafkaProducer&lt;String, OrderMsg&gt; kp =  new KafkaProducer&lt;String,OrderMsg&gt;(properties);</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, OrderMsg&gt;(&quot;test-topic&quot;, new OrderMsg(&quot;005&quot;, &quot;zzz&quot;, 100.1)));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TestConsumer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;simple-consumer-example1&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;3000&quot;);</span><br><span class="line">        KafkaConsumer&lt;String,OrderMsg&gt; ks = new KafkaConsumer&lt;String,OrderMsg&gt;(properties,new StringDeserializer(),new JsonDser&lt;&gt;(OrderMsg.class));</span><br><span class="line">        ks.subscribe(Collections.singletonList(&quot;test-topic&quot;));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">         ConsumerRecords&lt;String, OrderMsg&gt; records = ks.poll(1000);</span><br><span class="line">         for (ConsumerRecord&lt;String, OrderMsg&gt; record : records) &#123;</span><br><span class="line">                     String message = String.format(&quot;Consumed: key = %s value = %s with offset = %d &quot;,</span><br><span class="line">                             record.key(), record.value().toString(), record.offset());</span><br><span class="line">                     System.out.println(message);</span><br><span class="line">                 &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>所有代码均通过测试</em></strong></p><p><a href="https://blog.csdn.net/supreme000/article/details/97794999" target="_blank" rel="noopener">后期参考springboot整合kafka并自定义序列化器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自定义数据类型,利用kafka进行数据传递,以及如何去定义流拓扑。什么是流,我们需要有一个初步认识&lt;/p&gt;
&lt;h1 id=&quot;从零到有的kafka进阶&quot;&gt;&lt;a href=&quot;#从零到有的kafka进阶&quot; class=&quot;headerlink&quot; title=&quot;从零到有的kafka进
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="自定义序列器" scheme="https://wangweijie.vip/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%99%A8/"/>
    
      <category term="构建生产和消费对象" scheme="https://wangweijie.vip/tags/%E6%9E%84%E5%BB%BA%E7%94%9F%E4%BA%A7%E5%92%8C%E6%B6%88%E8%B4%B9%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>kafka快速上手</title>
    <link href="https://wangweijie.vip/2019/11/06/2019-11-06-Kafka%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://wangweijie.vip/2019/11/06/2019-11-06-Kafka快速上手/</id>
    <published>2019-11-06T08:04:33.932Z</published>
    <updated>2019-11-06T08:09:23.658Z</updated>
    
    <content type="html"><![CDATA[<p>kafkaStreams运行在kafka之上。没有kafka理论先行,很难始于足下。</p><h1 id="kafka的上门之路"><a href="#kafka的上门之路" class="headerlink" title="kafka的上门之路"></a>kafka的上门之路</h1><ol><li>kafka架构</li><li>生产者和消费者</li><li>kafka的安装和运行</li></ol><h2 id="kafka架构"><a href="#kafka架构" class="headerlink" title="kafka架构"></a>kafka架构</h2><ol><li>kafkaStreams是运行在kafka之上的一个库</li></ol><blockquote><p> 示例</p></blockquote><p>比如现在某个公司有3个系统。销售系统，营销系统，审计系统。系统之间数据可以相互共享获取</p><p><img src="/images/resources/5D24E3A3EB5713510C8B5A8B147A1A45.jpg" alt="IMAGE"></p><p>如果随着系统越来越多，数据相互之间都需要共享。这个时候可以使用kafka来做为数据中台。它满足几点要求</p><ol><li>数据中心是无状态的</li><li>以一种方式接受交易数据并存储,消费程序可以根据自己的需要从数据中心提取信息。</li><li>数据中心只知道交易数据要保存多久。以及什么时候切分和删除这些数据</li></ol><h3 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h3><p><strong><em>一个具有容错能力，健壮的发布/订阅系统,一个节点称为一个代理。多个代理组成一个集群。</em></strong></p><p><strong><em>kafka将生产者写入的消息存储在kafka的主题中,消费者订阅kafka主题。与kafka通信查看主体是否有可用的信息*</em></strong></p><p><img src="/images/resources/EB8E5ACE4A58BA66A0CCB14B876517D4.jpg" alt="IMAGE"></p><h3 id="kafka是一个消息代理"><a href="#kafka是一个消息代理" class="headerlink" title="kafka是一个消息代理"></a>kafka是一个消息代理</h3><ol><li>kafka是一个中介,将进行交换或交易但是不一定相互了解的两部分汇聚一起。</li><li>kafka将消息存储在主题中,从主题检索消息.本身不会和消费者和订阅者保持任何状态.仅作为一个消息中心</li><li>kafka底层技术用的是日志,不断追加输入记录文件。</li><li>主题的消息负载,kafka使用分区。</li></ol><h3 id="kafka是一个日志"><a href="#kafka是一个日志" class="headerlink" title="kafka是一个日志"></a>kafka是一个日志</h3><ol><li>日志用于记录应用程序正在做什么,如果程序出现问题。首先检查的是应用程序日志。</li><li>在kafka设计理念中，日志是一种只能追加的，完全按照时间顺序排列的记录序列</li><li>日志是具有强大含义的简单数据抽象.如果记录时间有序。解决冲突或者确定哪个数据更新到不同的机器就更加的明确</li><li>kafka的日志是按照主题名称分隔日志的,如果日志在一个集群中有多个副本。如果一台服务器宕机。从故障中回复是分布式提交日志具有的。</li></ol><p><strong><em>这也分布式应用程序和数据一致性的基本要求</em></strong></p><h3 id="kafka日志工作原理"><a href="#kafka日志工作原理" class="headerlink" title="kafka日志工作原理"></a>kafka日志工作原理</h3><ol><li>kafka将每个主题映射到指定日志路径的下一个子目录。子目录数和主题对应的分区数相同。</li><li>每个目录里面存放都是追加传入消息的日志文件</li><li>一旦日志文件达到某个规模，日志文件就会被切分。消息会追加到一个新的日志文件中.</li></ol><p><strong><em>比如： /logs/topicA_0 logs是消息存储的根目录,目录下代表着主题的分区,下划线后面紧跟分区编号</em></strong></p><h3 id="kafka和分区"><a href="#kafka和分区" class="headerlink" title="kafka和分区"></a>kafka和分区</h3><ol><li>分区能够保证同一个键的数据按序发送给同一个消费者</li><li>kafka将每个传入的消息追加到日志末尾,消息都严格按照时间排列.不保证跨分区有序，但能保证每个分区消息有序</li></ol><h3 id="分区无键和有键的方式"><a href="#分区无键和有键的方式" class="headerlink" title="分区无键和有键的方式"></a>分区无键和有键的方式</h3><ol><li><p>键为空,生产者按照轮询的方式选择分区写入记录</p></li><li><p>键不为空,则按照 hascode.(key) % number of partitions</p></li></ol><h3 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseKeyPartitioner extends DefaultPartitioner &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) &#123;</span><br><span class="line">        Object newKey = null;</span><br><span class="line">        if (key != null) &#123;</span><br><span class="line">            PurchaseKey purchaseKey = (PurchaseKey) key;</span><br><span class="line">            newKey = purchaseKey.getCustomerId();</span><br><span class="line">            keyBytes = ((String) newKey).getBytes();</span><br><span class="line">        &#125;</span><br><span class="line">        return super.partition(topic, newKey, keyBytes, value, valueBytes, cluster);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在生产者配置上设置<code>properties.put(&quot;partitioner.class&quot;, PurchaseKeyPartitioner.class.getName());</code></p><h3 id="分布式日志"><a href="#分布式日志" class="headerlink" title="分布式日志"></a>分布式日志</h3><p><strong><em>kafka提供了数据冗余,数据被写入到一个节点的时候,数据会被复制到一台或者多台机器上</em></strong></p><p><strong>其次选择zookeeper作为代理控制器目的在于:</strong></p><ol><li>集群成员</li><li>主题配置</li><li>访问控制</li></ol><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><ol><li>传统的日志删除通过设置log.roll.ms会对日志进行切分</li><li>通过设置log.retention.ms会设置日志的保留时间</li><li>日志压缩通过这只log.cleanup.policy = compact可以设置日志压缩</li></ol><p><strong><em>注意:如果消息是独立的.就可以用日志删除.如果是需要对消息又更新最新点上面的操作，就可以使用日志压缩</em></strong></p><h2 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = new Properties();</span><br><span class="line">        //服务器引导可以有多个逗号之间隔开</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        //转换为正确的字节数组需要提供正确的序列化器</span><br><span class="line">        properties.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        properties.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        //是否应答 all代表领导和追随者确认后应答  1代表只需要领导者应答  0无需做任何等待</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        //消息发送失败，尝试的次数</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        //日志压缩类型</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">        //指定自定义的分区器</span><br><span class="line">        properties.put(&quot;partitioner.class&quot;, PurchaseKeyPartitioner.class.getName());</span><br><span class="line"></span><br><span class="line">        PurchaseKey key = new PurchaseKey(&quot;12334568&quot;, new Date());</span><br><span class="line"></span><br><span class="line">        try(Producer&lt;PurchaseKey, String&gt; producer = new KafkaProducer&lt;&gt;(properties)) &#123;</span><br><span class="line">            ProducerRecord&lt;PurchaseKey, String&gt; record = new ProducerRecord&lt;&gt;(&quot;some-topic&quot;, key, &quot;对应的json数据&quot;);</span><br><span class="line"></span><br><span class="line">            Callback callback = (metadata, exception) -&gt; &#123;</span><br><span class="line">                if (exception != null) &#123;</span><br><span class="line">                    exception.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Future&lt;RecordMetadata&gt; sendFuture = producer.send(record, callback);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="生产者可指定分区和时间戳以及指定分区"><a href="#生产者可指定分区和时间戳以及指定分区" class="headerlink" title="生产者可指定分区和时间戳以及指定分区"></a>生产者可指定分区和时间戳以及指定分区</h3><blockquote><p>指定分区和时间戳</p></blockquote><ol><li>构造器重载有4个方法，可以指定分区和时间戳</li><li>分区位置平均可以考虑   AtomicInteger count = new AtomicInteger(0);</li><li><a href="https://www.cnblogs.com/zhaoyan001/p/8885360.html" target="_blank" rel="noopener">AtomicInteger类的理解与使用</a></li></ol><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p><strong><em>首先生产者是无状态的,但是消费者需要周期性的提交从代理中消费过的消息的偏移量来管理一些状态。</em></strong></p><blockquote><p>消费者提交一个偏移量有以下含义</p></blockquote><ol><li>意味着消费者完全处理了消息</li><li>也表示发生故障或者重启时该消费者消费的起始位置</li></ol><p>如果创建了消费者发生了某些故障，并且最后的提交的偏移量不可用。消费者从何处开始消费取决于具体的配置</p><ol><li>earliest从最早可用的偏移量检索消息</li><li>latest本质从消费者加入集群的时间点开始消费消息</li><li>none代理将会向消费者抛出异常</li></ol><p><strong><em>同样消费者可以自动提交偏移量,以及手动提交偏移量</em></strong></p><blockquote><p>消费者代码示例 （引用书中代码）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadedConsumerExample &#123;</span><br><span class="line"></span><br><span class="line">    private volatile boolean doneConsuming = false;</span><br><span class="line">    private int numberPartitions;</span><br><span class="line">    private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    public ThreadedConsumerExample(int numberPartitions) &#123;</span><br><span class="line">        this.numberPartitions = numberPartitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void startConsuming() &#123;</span><br><span class="line">        executorService = Executors.newFixedThreadPool(numberPartitions);</span><br><span class="line">        Properties properties = getConsumerProps();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; numberPartitions; i++) &#123;</span><br><span class="line">            Runnable consumerThread = getConsumerThread(properties);</span><br><span class="line">            executorService.submit(consumerThread);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Runnable getConsumerThread(Properties properties) &#123;</span><br><span class="line">        return () -&gt; &#123;</span><br><span class="line">            Consumer&lt;String, String&gt; consumer = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                consumer = new KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">                consumer.subscribe(Collections.singletonList(&quot;test-topic&quot;));</span><br><span class="line">                while (!doneConsuming) &#123;</span><br><span class="line">                    ConsumerRecords&lt;String, String&gt; records = consumer.poll(5000);</span><br><span class="line">                    for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                        String message = String.format(&quot;Consumed: key = %s value = %s with offset = %d partition = %d&quot;,</span><br><span class="line">                                record.key(), record.value(), record.offset(), record.partition());</span><br><span class="line">                        System.out.println(message);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (consumer != null) &#123;</span><br><span class="line">                    consumer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stopConsuming() throws InterruptedException &#123;</span><br><span class="line">        doneConsuming = true;</span><br><span class="line">        executorService.awaitTermination(10000, TimeUnit.MILLISECONDS);</span><br><span class="line">        executorService.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Properties getConsumerProps() &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;simple-consumer-example&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;3000&quot;);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        return properties;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Change the constructor arg to match the actual number of partitions</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        ThreadedConsumerExample consumerExample = new ThreadedConsumerExample(2);</span><br><span class="line">        consumerExample.startConsuming();</span><br><span class="line">        Thread.sleep(60000); //Run for one minute</span><br><span class="line">        consumerExample.stopConsuming();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhaoyan001/p/7049627.html" target="_blank" rel="noopener">Java ExecutorService四种线程池的例子与说明</a></p><p><a href="https://www.cnblogs.com/laowen-zjw/p/6735790.html" target="_blank" rel="noopener">深入理解volatile</a></p><h2 id="kafka的安装和运行"><a href="#kafka的安装和运行" class="headerlink" title="kafka的安装和运行"></a>kafka的安装和运行</h2><ol><li>kafka选择版本  2.12-1.1.0</li><li>默认情况下kafka使用9092端口,zookeeper使用2181端口</li><li>kafka的配置在config的server.properties中-日志配置在log.dirs</li><li>zookeeper在zookeeper.properties中-日志在dataDir中</li></ol><p><img src="/images/resources/B1DC2D0DFA2D61967B6D597DC75C49CF.jpg" alt="IMAGE"></p><p><img src="/images/resources/34AC239F1ED17CB9B958E177A5936CB4.jpg" alt="IMAGE"></p><blockquote><p>操作步骤</p></blockquote><p>1.先启动zookeeper</p><p><code>kafka_2.12-1.1.0 % bin/zookeeper-server-start.sh config/zookeeper.properties</code></p><p><img src="/images/resources/881EF42C2D53CE9A48DD7A8AADCDF204.jpg" alt="IMAGE"></p><p>2.启动kafka</p><p><code>bin/kafka-server-start.sh config/server.properties</code></p><p><img src="/images/resources/F3632FB81EB66E53E00DD4049FC4AD17.jpg" alt="IMAGE"></p><p>3.创建一个主题供生产和消费进行操作</p><p><code>bin/kafka-topics.sh --create --topic first-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</code></p><p>replication-factor 副本设置为1表示不复制。实际中副本因子为奇数以上以便发生故障时保证数据可用性</p><p>partitions 指定主题将用到的分区数。如果需要更高的负载，需要更多的分区。</p><p><img src="/images/resources/08AD7C866BE62196DCF1F0B68A0DDCB6.jpg" alt="IMAGE"></p><p>4.通过生产者控制台发送消息</p><p><code>bin/kafka-console-producer.sh --topic first-topic --broker-list localhost：9092</code></p><p><img src="/images/resources/1742EB88961C0D8758186030DC5CFCAA.jpg" alt="IMAGE"></p><p>5.通过消费者控制台接收消息</p><p><code>bin/kafka-console-consumer.sh --topic first-topic --bootstrap-server localhost:9092 --from-beginning</code></p><p>from-beginning 消费者为从头接受消息,但没有提交偏移量</p><p><img src="/images/resources/F5E081E30448527A6AA81BE05F396476.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kafkaStreams运行在kafka之上。没有kafka理论先行,很难始于足下。&lt;/p&gt;
&lt;h1 id=&quot;kafka的上门之路&quot;&gt;&lt;a href=&quot;#kafka的上门之路&quot; class=&quot;headerlink&quot; title=&quot;kafka的上门之路&quot;&gt;&lt;/a&gt;kafka的
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="应用场景" scheme="https://wangweijie.vip/tags/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="消息队列" scheme="https://wangweijie.vip/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="生产者和消费者" scheme="https://wangweijie.vip/tags/%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    
      <category term="日志" scheme="https://wangweijie.vip/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>kafkaStreams初识</title>
    <link href="https://wangweijie.vip/2019/11/04/2019-11-04-KafkaStreams%E5%88%9D%E8%AF%86/"/>
    <id>https://wangweijie.vip/2019/11/04/2019-11-04-KafkaStreams初识/</id>
    <published>2019-11-04T07:24:51.956Z</published>
    <updated>2019-11-04T07:29:27.645Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用好流式处理.流式处理从成本和人力该如何考虑,以及应用场景.</p><h1 id="数据以及kafkaStreams的理念"><a href="#数据以及kafkaStreams的理念" class="headerlink" title="数据以及kafkaStreams的理念"></a>数据以及kafkaStreams的理念</h1><ol><li>数据的发展如何改变程序设计的</li><li>流式处理工作以及应用场景</li><li>kafkaStreams的简介以及解决问题</li></ol><hr><h2 id="数据的发展如何改变程序设计的"><a href="#数据的发展如何改变程序设计的" class="headerlink" title="数据的发展如何改变程序设计的"></a>数据的发展如何改变程序设计的</h2><p><strong><em>在现在的世界中,每天的数据越来越多。如何有有效的利用这些数据,就是我们当下需要考虑的点</em></strong></p><p><strong><em>现在有2种方式处理数据,一种是我们进行批量处理数据(批处理)这些数据都是离线的,第二种就是数据在到达的时候就需要进行处理。</em></strong></p><p><strong><em>kafkaStream是一个对记录的每个时间进行处理的库,基于每个时间就意味着数据一旦到达,就能够被及时处理.不需要将数据分成小批量的</em></strong></p><h3 id="MapReduce范式-补充"><a href="#MapReduce范式-补充" class="headerlink" title="MapReduce范式(补充)"></a>MapReduce范式(补充)</h3><p><strong>map会对每个记录产生一个键值对.而reduce基于每个键合并,处理中间结果</strong></p><p><strong><em>对于TB级别以上的数据有几个概念让我们更好的处理数据</em></strong></p><ol><li>一个集群中分发的数据达到易于处理的规模</li><li>使用键值对讲分布式的数据分组</li><li>利用副本备份机制容忍故障的产生，而不是避免故障</li></ol><p><strong>也就是通过计算机集群中的分散负载,就可以将数据转化为可管理的数量</strong></p><p><strong>其次如何将分布在不同机器上的数据进行汇总也就是分区</strong></p><p><strong><em>分区意味着分组.使用相同的散列码的键进行分组。</em></strong></p><blockquote><p> 公式如下:  partition = key.hashCode()% numberOfPartitions</p></blockquote><p><strong><em>补充:通过使用复制来接受故障。通过复制不同服务器上的数据块,不必担心磁盘故障导致停产.数据复制能够对于分布式的应用提供容错能力至关重要</em></strong></p><h3 id="离线计算的瓶颈"><a href="#离线计算的瓶颈" class="headerlink" title="离线计算的瓶颈"></a>离线计算的瓶颈</h3><ol><li>离线计算首先需要收集大量的数据，批处理的离线计算适合根据根据用户大量的习惯来决定未来可能会发生的事情</li><li>如果用户的习惯是偶然性，那就无法判断资源价值的有效利用</li></ol><blockquote><p> 面对的问题</p></blockquote><ol><li>当前实时的趋势是什么？</li><li>最近一个周期时间段的特征是什么？</li><li>用户如何利用最新的发布的特性的？</li></ol><h2 id="流式处理工作以及应用场景"><a href="#流式处理工作以及应用场景" class="headerlink" title="流式处理工作以及应用场景"></a>流式处理工作以及应用场景</h2><ol><li>定义:流式处理是利用连续计算处理无线数据流的能力,数据是流动的,所以无需收集以及存储数据。</li></ol><blockquote><p> 流式数据的应用场景</p></blockquote><ol><li>信用卡诈骗:根据实时的消费记录,以及对比用户前期的消费习惯和地点,可能信用卡被盗刷.提醒信用卡的拥有者</li><li>入侵检测:实时监控异常行为.</li><li>大型自行车比赛:通过实时传输的数据,监测位置。以及比赛可能会遇到的问题。</li><li>金融业:根据实时买入卖出，提供决策能力</li></ol><p><strong><em>场景:数据到达时需要被立即报告处理,那么可以选择流式处理</em></strong></p><p><strong><em>如果需要对许菊进行深入分析.或者为了编制一个大的数据仓库以备后期分析,那么这个时候需要离线计算</em></strong></p><h2 id="kafkaStreams的简介以及解决问题"><a href="#kafkaStreams的简介以及解决问题" class="headerlink" title="kafkaStreams的简介以及解决问题"></a>kafkaStreams的简介以及解决问题</h2><p><strong><em>假定有一个实时销售系统,我们要根据实时的数据对每个客户甚至于公司的团队制定决策</em></strong></p><blockquote><p>需求分解：有向无环图</p></blockquote><p>购买记录 —-&gt; 屏蔽信息</p><p>屏蔽信息 —-&gt; 存储</p><pre><code>----&gt; 奖励----&gt; 模式</code></pre><blockquote><p>分析节点</p></blockquote><p>源节点 —&gt;  每条销售信息记录</p><p>信用卡屏蔽节点 —-&gt; 将源节点的信息中卡号进行屏蔽</p><p>模式节点  —-&gt; 检索相关的物品，日期，邮政编码组装为一个新的对象</p><p>奖励节点 —-&gt; 抽取客户的ID和实时的消费金额</p><p>存储节点 —-&gt; 存储到相信的关系或者非关系数据中进行分析</p><blockquote><p> 注意:至始至终,这种有向无环图,我们都以深度优先的方式进行遍历以及处理数据。深度优先和广度优先可以参考</p></blockquote><p><a href="https://www.jianshu.com/p/bff70b786bb6" target="_blank" rel="noopener">深度和广度优先</a></p><p><a href="https://blog.csdn.net/weixin_42289193/article/details/81741756" target="_blank" rel="noopener">Java实现深度优先遍历和广度优先遍历</a></p><p><strong><em>总结:数据交由了节点和处理器来进行共同的维护。节点即是需求规则，最终会将节点数据传输到对应的主题中,而处理器则存在在kafkaStream流上。处理器所处理的数据产生出来都是一个新的对象</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何使用好流式处理.流式处理从成本和人力该如何考虑,以及应用场景.&lt;/p&gt;
&lt;h1 id=&quot;数据以及kafkaStreams的理念&quot;&gt;&lt;a href=&quot;#数据以及kafkaStreams的理念&quot; class=&quot;headerlink&quot; title=&quot;数据以及kafkaStre
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="应用场景" scheme="https://wangweijie.vip/tags/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli链路管理</title>
    <link href="https://wangweijie.vip/2019/10/11/2019-10-11-SpringAli%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>https://wangweijie.vip/2019/10/11/2019-10-11-SpringAli链路追踪/</id>
    <published>2019-10-11T11:41:42.291Z</published>
    <updated>2019-10-11T11:48:40.638Z</updated>
    
    <content type="html"><![CDATA[<p>链路追踪虽然是运维做的事情,但是我们作为开发的应该走一走</p><h1 id="springAli链路追踪"><a href="#springAli链路追踪" class="headerlink" title="springAli链路追踪"></a>springAli链路追踪</h1><ol><li>什么是链路追踪</li><li>链路追踪解决方案</li><li>如何使用skywalking</li></ol><h2 id="什么是链路追踪"><a href="#什么是链路追踪" class="headerlink" title="什么是链路追踪"></a>什么是链路追踪</h2><p><strong>微服务架构是通过业务来划分服务的，使用REST调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂</strong></p><p>情况如下:</p><p><img src="/images/resources/41E79BF5E865358EFDAB61D562CF9A83.jpg" alt="IMAGE"></p><p><strong><em>当然服务肯定不止这几个,或许会有上百个,有没有可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题，这就是所谓的 APM（应用性能管理）。</em></strong></p><h2 id="链路追踪解决方案"><a href="#链路追踪解决方案" class="headerlink" title="链路追踪解决方案"></a>链路追踪解决方案</h2><blockquote><p>SkyWalking</p></blockquote><ol><li>多种监控手段，语言探针和服务网格(Service Mesh)</li><li>多语言自动探针，Java，.NET Core 和 Node.JS</li><li>轻量高效，不需要大数据</li><li>模块化，UI、存储、集群管理多种机制可选</li><li>支持告警</li><li>优秀的可视化方案</li></ol><h2 id="如何使用skywalking"><a href="#如何使用skywalking" class="headerlink" title="如何使用skywalking"></a>如何使用skywalking</h2><blockquote><p>1.安装docker,使用docker-compose执行编排文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.3&apos;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: wutang/elasticsearch-shanghai-zone:6.3.2</span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    environment:</span><br><span class="line">      cluster.name: elasticsearch</span><br></pre></td></tr></table></figure><p><strong>docker-compose up -d(启动并后台运行)</strong></p><p><strong>docker-compose stop(停止)</strong></p><p><strong>访问localhost:9200</strong></p><p><img src="/images/resources/7831D1922AF79282124159B6BDB5D34B.jpg" alt="IMAGE"></p><blockquote><p>2.下载skywalking,修改配置文件config下application.yml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    nameSpace: $&#123;SW_NAMESPACE:&quot;&quot;&#125;</span><br><span class="line">    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span><br><span class="line">    user: $&#123;SW_ES_USER:&quot;&quot;&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span><br><span class="line">    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span><br><span class="line">    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span><br><span class="line">    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span><br><span class="line">    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:2000&#125; # Execute the bulk every 2000 requests</span><br><span class="line">    bulkSize: $&#123;SW_STORAGE_ES_BULK_SIZE:20&#125; # flush the bulk every 20mb</span><br><span class="line">    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests</span><br><span class="line">    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requests</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">    segmentQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span><br><span class="line"># h2:</span><br><span class="line">#    driver: $&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span><br><span class="line">#    url: $&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125;</span><br><span class="line">#    user: $&#123;SW_STORAGE_H2_USER:sa&#125;</span><br><span class="line">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">#  mysql:</span><br><span class="line">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.切换并启动</p></blockquote><p><code>cd  /Users/Yun/apache-skywalking-apm-bin/bin</code></p><p><strong>执行./startup.sh访问默认端口<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></strong></p><p><img src="/images/resources/4BE1B5B001F480B7DDB449B0D69395E1.jpg" alt="IMAGE"></p><blockquote><p>4.在idea中部署探针</p></blockquote><p><img src="/images/resources/CDDF1E3DC69265A087952CC9D6E1C26D.jpg" alt="IMAGE"></p><p><strong>增加vm参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:/Users/Yun/mycloud/clouddependencies/spring-cloud-external-skywalking/agent/skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=provider</span><br><span class="line">-Dskywalking.collector.backend_service=localhost:11800</span><br></pre></td></tr></table></figure><p><img src="/images/resources/D801AE88ACBD960F7F1DF5DD0F7DD351.jpg" alt="IMAGE"></p><blockquote><p>5.启动项目</p></blockquote><p><img src="/images/resources/3261DF83D683C675E032BDD8AC657332.jpg" alt="IMAGE"></p><p><img src="/images/resources/7848EF174875CDF2089B18610220AFF2.jpg" alt="IMAGE"></p><p><img src="/images/resources/3D92D119B33233BA296FD08BF72A7092.jpg" alt="IMAGE"></p><p>其余服务同理设置</p><ol><li>Avg SLA： 服务可用性（主要是通过请求成功与失败次数来计算）</li><li>CPM： 每分钟调用次数</li><li>Avg Response Time： 平均响应时间</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链路追踪虽然是运维做的事情,但是我们作为开发的应该走一走&lt;/p&gt;
&lt;h1 id=&quot;springAli链路追踪&quot;&gt;&lt;a href=&quot;#springAli链路追踪&quot; class=&quot;headerlink&quot; title=&quot;springAli链路追踪&quot;&gt;&lt;/a&gt;springAli链路
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="https://wangweijie.vip/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="https://wangweijie.vip/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="https://wangweijie.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="https://wangweijie.vip/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="链路追踪" scheme="https://wangweijie.vip/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
      <category term="应用性能管理" scheme="https://wangweijie.vip/tags/%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli统一资源管理</title>
    <link href="https://wangweijie.vip/2019/10/10/2019-10-10-SpringAli%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE/"/>
    <id>https://wangweijie.vip/2019/10/10/2019-10-10-SpringAli资源统一配置/</id>
    <published>2019-10-10T08:13:11.891Z</published>
    <updated>2019-10-10T08:20:02.597Z</updated>
    
    <content type="html"><![CDATA[<p>如何做到资源的统一高效管理,nacos-config是一个不错的选择</p><h1 id="springAli资源管理"><a href="#springAli资源管理" class="headerlink" title="springAli资源管理"></a>springAli资源管理</h1><ol><li>统一资源管理的应用场景</li><li>实际操作(代码示例)</li></ol><h2 id="统一资源管理的应用场景"><a href="#统一资源管理的应用场景" class="headerlink" title="统一资源管理的应用场景"></a>统一资源管理的应用场景</h2><blockquote><p>场景说明</p></blockquote><p><strong><em>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。</em></strong></p><p><strong>也就是配置文件众多,你不可能每次更改后然后在打包为jar包运行,是否有一种方式可以通过读取远端的配置文件,随时可以更改端口或者服务名等一系列的动作</strong></p><blockquote><p>解决方案</p></blockquote><p><strong>解决方案:使用nacos config:使用 Spring Cloud Alibaba Nacos Config，可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置</strong></p><blockquote><p>作用原理</p></blockquote><p><strong>作用:在特殊的 bootstrap 阶段，配置被加载到Spring环境中。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时需要运行的所有内容。</strong></p><h2 id="实际操作-代码示例"><a href="#实际操作-代码示例" class="headerlink" title="实际操作(代码示例)"></a>实际操作(代码示例)</h2><blockquote><p>1.启动nacos服务(添加配置文件,不限于消费者或者服务者的配置文件)</p></blockquote><p><img src="/images/resources/297CBE5567F5EABD2F10368D39EE8F68.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: nacos-provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">        # 当前应用被sentinel监控的端口</span><br><span class="line">        port: 8720</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br><span class="line">#sentinel</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br><span class="line">#cus attr</span><br><span class="line">user:</span><br><span class="line">  uname: wwj</span><br><span class="line">  age: 32</span><br></pre></td></tr></table></figure><blockquote><p>2.替换yml文件,新建读取属性文件bootstrap.properties</p></blockquote><p><img src="/images/resources/1B9B4E7D810AA8390124933A02687D0B.jpg" alt="IMAGE"></p><p><strong><em>注意：Spring Boot 配置文件的加载顺序，依次为 bootstrap.properties -&gt; bootstrap.yml -&gt; application.properties -&gt; application.yml ，其中 bootstrap.properties 配置为最高优先级</em></strong></p><blockquote><p>3.新建一个controller用来作为数据可实时配置更新</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class Tcontroller &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注入配置文件上下文</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private ConfigurableApplicationContext applicationContext;</span><br><span class="line">    /**</span><br><span class="line">     * 从上下文中读取配置</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(value = &quot;/hi&quot;)</span><br><span class="line">    public String getNameFromNacosConfig() &#123;</span><br><span class="line">        return &quot;Hello &quot; + applicationContext.getEnvironment().getProperty(&quot;user.uname&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.pom.xml中添加nacos-config的依赖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>5.启动服务</p></blockquote><p><img src="/images/resources/2508FD533F31AF266A9091D8F8F18ABC.jpg" alt="IMAGE"></p><p>更改配置文件再次访问</p><p><img src="/images/resources/91C38ED995B1844042B51A205E651532.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何做到资源的统一高效管理,nacos-config是一个不错的选择&lt;/p&gt;
&lt;h1 id=&quot;springAli资源管理&quot;&gt;&lt;a href=&quot;#springAli资源管理&quot; class=&quot;headerlink&quot; title=&quot;springAli资源管理&quot;&gt;&lt;/a&gt;sprin
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="https://wangweijie.vip/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="https://wangweijie.vip/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="https://wangweijie.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="https://wangweijie.vip/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="统一注册配置" scheme="https://wangweijie.vip/tags/%E7%BB%9F%E4%B8%80%E6%B3%A8%E5%86%8C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli统一网关</title>
    <link href="https://wangweijie.vip/2019/10/09/2019-10-09-SpringAli%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3/"/>
    <id>https://wangweijie.vip/2019/10/09/2019-10-09-SpringAli统一网关/</id>
    <published>2019-10-09T00:24:51.541Z</published>
    <updated>2019-10-09T09:06:02.019Z</updated>
    
    <content type="html"><![CDATA[<p>统一路由网关,看得直接明白.</p><h1 id="springAlibaba路由网关"><a href="#springAlibaba路由网关" class="headerlink" title="springAlibaba路由网关"></a>springAlibaba路由网关</h1><ol><li>什么是spring网关</li><li>网关的功能特征</li><li>实际操作</li><li>网关全局过滤</li></ol><h2 id="什么是spring网关"><a href="#什么是spring网关" class="headerlink" title="什么是spring网关"></a>什么是spring网关</h2><p><strong>为微服务架构提供一种简单而有效的统一的 API 路由管理方式,不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</strong></p><p><img src="/images/resources/0DD38B2B0D318D09248FDA807FAB03EA.jpg" alt="IMAGE"></p><h2 id="网关的功能特征"><a href="#网关的功能特征" class="headerlink" title="网关的功能特征"></a>网关的功能特征</h2><ol><li>Predicates 和 Filters 作用于特定路由</li><li>集成 Hystrix 断路器</li><li>集成 Spring Cloud DiscoveryClient</li><li>易于编写的 Predicates 和 Filters</li><li>限流和路径重写 </li></ol><p><img src="/images/resources/F7D7BA5F09A9AB963804D95913B5357A.jpg" alt="IMAGE"></p><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><blockquote><p>新建项目pom.xml如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-alibaba-gateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Commons Begin --&gt;</span><br><span class="line">        &lt;!--需要过滤器--&gt;</span><br><span class="line">        &lt;dependency&gt;GatewayApplication</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.8&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Commons Begin --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.gateway.GatewayApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><strong><em>注意:Spring Cloud Gateway 不使用 Web 作为服务器，而是 使用 WebFlux 作为服务器，Gateway 项目已经依赖了 starter-webflux，所以这里 千万不要依赖 starter-web,由于过滤器等功能依然需要 Servlet 支持，故这里还需要依赖 javax.servlet:javax.servlet-api</em></strong></p><blockquote><p>构建启动项目类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class GatewayApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>applcation.yml配置文件如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 应用名称</span><br><span class="line">    name: spring-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    # 使用 Naoos 作为服务注册发现</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    # 使用 Sentinel 作为熔断器</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        port: 8721</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">    # 路由网关配置</span><br><span class="line">    gateway:</span><br><span class="line">      # 设置与服务注册发现组件结合，这样可以采用服务名的路由策略</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true</span><br><span class="line">      # 配置路由规则</span><br><span class="line">      routes:</span><br><span class="line">        # 采用自定义路由 ID（有固定用法，不同的 id 有不同的功能，详见：https://cloud.spring.io/spring-cloud-gateway/2.0.x/single/spring-cloud-gateway.html#gateway-route-filters）</span><br><span class="line">        - id: NACOS-CONSUMER</span><br><span class="line">          # 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名</span><br><span class="line">          uri: lb://consumer</span><br><span class="line">          # Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法</span><br><span class="line">          predicates:</span><br><span class="line">            # Method 方法谓词，这里是匹配 GET 和 POST 请求</span><br><span class="line">            - Method=GET,POST</span><br><span class="line">        - id: NACOS-CONSUMER-FEIGN</span><br><span class="line">          uri: lb://consumer-feign</span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET,POST</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置日志级别，方别调试</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework.cloud.gateway: debug</span><br></pre></td></tr></table></figure><blockquote><p>依次启动服务提供者,2个消费者,以及网关</p></blockquote><p><img src="/images/resources/7BD97999D72D3EAE6A1DA72EC1C84CB3.jpg" alt="IMAGE"></p><p><img src="/images/resources/7CC14B640A7A4AB853452B17BE9EF304.jpg" alt="IMAGE"></p><h2 id="网关全局过滤"><a href="#网关全局过滤" class="headerlink" title="网关全局过滤"></a>网关全局过滤</h2><p><strong>全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP 访问限制等等.</strong></p><blockquote><p> 构建一个filter</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.gateway.filter;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AuthFilter implements GlobalFilter, Ordered &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line">        if (token == null || token.isEmpty()) &#123;</span><br><span class="line">            ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">            // 封装错误信息</span><br><span class="line">            Map&lt;String, Object&gt; responseData = Maps.newHashMap();</span><br><span class="line">            responseData.put(&quot;code&quot;, 401);</span><br><span class="line">            responseData.put(&quot;message&quot;, &quot;非法请求&quot;);</span><br><span class="line">            responseData.put(&quot;cause&quot;, &quot;Token is empty&quot;);</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                // 将信息转换为 JSON</span><br><span class="line">                ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">                byte[] data = objectMapper.writeValueAsBytes(responseData);</span><br><span class="line"></span><br><span class="line">                // 输出错误信息到页面</span><br><span class="line">                DataBuffer buffer = response.bufferFactory().wrap(data);</span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                response.getHeaders().add(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">                return response.writeWith(Mono.just(buffer));</span><br><span class="line">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">                log.error(&quot;&#123;&#125;&quot;, e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        //顺序，多个filter的时候使用</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/906FEB9A5DD08998F367BC0DDBACC134.jpg" alt="IMAGE"></p><p><img src="/images/resources/358B6EA3C7792B3F92A4AAC6D18B7D7A.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;统一路由网关,看得直接明白.&lt;/p&gt;
&lt;h1 id=&quot;springAlibaba路由网关&quot;&gt;&lt;a href=&quot;#springAlibaba路由网关&quot; class=&quot;headerlink&quot; title=&quot;springAlibaba路由网关&quot;&gt;&lt;/a&gt;springAlibaba
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="https://wangweijie.vip/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="https://wangweijie.vip/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="https://wangweijie.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="https://wangweijie.vip/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="统一认证" scheme="https://wangweijie.vip/tags/%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81/"/>
    
      <category term="统一网关" scheme="https://wangweijie.vip/tags/%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
</feed>
