<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael_Wang</title>
  
  <subtitle>JavaAndKafka_Streams</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangweijie.vip/"/>
  <updated>2020-09-11T11:07:29.508Z</updated>
  <id>https://wangweijie.vip/</id>
  
  <author>
    <name>Michael_Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据分组和聚合操作</title>
    <link href="https://wangweijie.vip/2020/09/11/2020-09-11-%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84%E5%92%8C%E8%81%9A%E5%90%88/"/>
    <id>https://wangweijie.vip/2020/09/11/2020-09-11-数据分组和聚合/</id>
    <published>2020-09-11T09:51:34.633Z</published>
    <updated>2020-09-11T11:07:29.508Z</updated>
    
    <content type="html"><![CDATA[<p>通过将数据进行分组以及聚合,能够更加能够看到数据的重要性,越来越接近我的想法了.</p><h1 id="数据聚合和分组操作"><a href="#数据聚合和分组操作" class="headerlink" title="数据聚合和分组操作"></a>数据聚合和分组操作</h1><p>​    <strong>对数据及进行分类，在每一组数据应用聚合函数或者转换函数,这是非常重要的一个部分.一般在数据载入,合并,准备数据集之后,可能需要计算分组统计或者数据透视表用于报告或可视化的目的。pandas提供一个灵活的groupby接口,允许一种自然的方式对数据集进行切片,切块和总结。</strong></p><p>​    <strong>我们可以通过pandas对象或者Numpy数据执行复杂的组操作</strong></p><pre><code>1. 使用一个或者多个键将pandas对象拆分为多块  2. 计算组汇总统计信息以及应用组内变化或其他操作        3. 计算数据透视表和交叉表            4. 执行分位数分析以及其他统计组分析</code></pre><h2 id="GroupBy机制"><a href="#GroupBy机制" class="headerlink" title="GroupBy机制"></a>GroupBy机制</h2><p><em>一般聚合操作中所有的动作为拆分-应用-联合,数据包含在pandas对象中,可以是不同的数据结构.之后可以根据一个或者多个键分离到各组中,可以沿着行或者列</em>.分组操作后，一个函数就可以应用到各个组中,产生新的值。<br><strong>注意:axis=0 代表着以行为单位从上至下计算,axis=1代表着以列为单位从左至右计算</strong></p><blockquote><p>分组键</p></blockquote><p>分组键可以是多种形式的,不一定是完全相同的类型:</p><ol><li>与需要分组的轴长度一致的值列表或者值数组</li><li>DataFrame的列名的值</li><li>可以将分组轴向上的值和分组名称相匹配的字典或者Series</li><li>可以在轴索引或者索引中单个标签上调用的函数</li></ol><blockquote><p>示例说明</p></blockquote><p><img src="/images/resources/20200911/image-20200909103353013.png" alt="image-20200909103353013"></p><p><img src="/images/resources/20200911/image-20200909104105962.png" alt="image-20200909104105962"></p><p><img src="/images/resources/20200911/image-20200909105648809.png" alt="image-20200909105648809"></p><h2 id="遍历分组对象"><a href="#遍历分组对象" class="headerlink" title="遍历分组对象"></a>遍历分组对象</h2><p><strong>group对象支持迭代</strong><br><img src="/images/resources/20200911/image-20200909111834130.png" alt="image-20200909111834130"></p><p><img src="/images/resources/20200911/image-20200909144033641.png" alt="image-20200909144033641"></p><h2 id="选择一列或者所有列的子集"><a href="#选择一列或者所有列的子集" class="headerlink" title="选择一列或者所有列的子集"></a>选择一列或者所有列的子集</h2><p><img src="/images/resources/20200911/image-20200909145559991.png" alt="image-20200909145559991"></p><h2 id="使用字典和Serise进行分组"><a href="#使用字典和Serise进行分组" class="headerlink" title="使用字典和Serise进行分组"></a>使用字典和Serise进行分组</h2><p><img src="/images/resources/20200911/image-20200909150813382.png" alt="image-20200909150813382"></p><h2 id="使用函数分组"><a href="#使用函数分组" class="headerlink" title="使用函数分组"></a>使用函数分组</h2><p><img src="/images/resources/20200911/image-20200909152030886.png" alt="image-20200909152030886"></p><h2 id="根据索引层级进行分组"><a href="#根据索引层级进行分组" class="headerlink" title="根据索引层级进行分组"></a>根据索引层级进行分组</h2><p><img src="/images/resources/20200911/image-20200909152936829.png" alt="image-20200909152936829"></p><h1 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h1><p><strong>聚合是指所有根据数组产生标量值的数据转换过程，也就是类似统计函数一样.</strong></p><p><img src="/images/resources/20200911/image-20200910101011063.png" alt="image-20200910101011063"></p><h2 id="逐列以及多函数应用"><a href="#逐列以及多函数应用" class="headerlink" title="逐列以及多函数应用"></a>逐列以及多函数应用</h2><p><img src="/images/resources/20200911/image-20200910102227086.png" alt="image-20200910102227086"></p><blockquote><p>不同的操作方式0</p></blockquote><p><img src="/images/resources/20200911/image-20200910110002305.png" alt="image-20200910110002305"></p><blockquote><p>不同的操作方式1</p></blockquote><p><img src="/images/resources/20200911/image-20200910112800591.png" alt="image-20200910112800591"></p><h2 id="返回不带行索引的聚合数据"><a href="#返回不带行索引的聚合数据" class="headerlink" title="返回不带行索引的聚合数据"></a>返回不带行索引的聚合数据</h2><p><img src="/images/resources/20200911/image-20200910113311844.png" alt="image-20200910113311844"></p><h1 id="apply应用-通用拆分-应用-联合"><a href="#apply应用-通用拆分-应用-联合" class="headerlink" title="apply应用:通用拆分-应用-联合"></a>apply应用:通用拆分-应用-联合</h1><p><img src="/images/resources/20200911/image-20200910120817368.png" alt="image-20200910120817368"></p><p><img src="/images/resources/20200911/image-20200910121023235.png" alt="image-20200910121023235"></p><h2 id="压缩分组键"><a href="#压缩分组键" class="headerlink" title="压缩分组键"></a>压缩分组键</h2><p><img src="/images/resources/20200911/image-20200910121328100.png" alt="image-20200910121328100"></p><h2 id="分位数以及桶分析"><a href="#分位数以及桶分析" class="headerlink" title="分位数以及桶分析"></a>分位数以及桶分析</h2><p><img src="/images/resources/20200911/image-20200910122422983.png" alt="image-20200910122422983"></p><blockquote><p>根据分位数</p></blockquote><p><img src="/images/resources/20200911/image-20200910122807996.png" alt="image-20200910122807996"></p><h1 id="使用指定分组值填充缺失值"><a href="#使用指定分组值填充缺失值" class="headerlink" title="使用指定分组值填充缺失值"></a>使用指定分组值填充缺失值</h1><p><strong>在清除缺失值，有时候可以用dropna去除缺失值,有时候可能需要进行修正.fillna是一个可以填充缺失值的方法</strong><br><img src="/images/resources/20200911/image-20200910123245007.png" alt="image-20200910123245007"></p><blockquote><p>其他示例</p></blockquote><p><img src="/images/resources/20200911/image-20200911103318344.png" alt="image-20200911103318344"></p><h1 id="随机采样和排列"><a href="#随机采样和排列" class="headerlink" title="随机采样和排列"></a>随机采样和排列</h1><p><strong>在Series中有sample方法可以帮助我们进行随机采样</strong><br><img src="/images/resources/20200911/image-20200911131223808.png" alt="image-20200911131223808"></p><p><img src="/images/resources/20200911/image-20200911131647332.png" alt="image-20200911131647332"></p><h1 id="分组加权平均和相关性"><a href="#分组加权平均和相关性" class="headerlink" title="分组加权平均和相关性"></a>分组加权平均和相关性</h1><p><a href="https://jingyan.baidu.com/article/d2b1d1029a99a45c7f37d442.html" target="_blank" rel="noopener">加权平均连接</a><br><img src="/images/resources/20200911/image-20200911132440209.png" alt="image-20200911132440209"></p><blockquote><p>相关示例</p></blockquote><p><img src="/images/resources/20200911/image-20200911135445793.png" alt="image-20200911135445793"></p><p><img src="/images/resources/20200911/image-20200911135500821.png" alt="image-20200911135500821"></p><p><img src="/images/resources/20200911/image-20200911135656979.png" alt="image-20200911135656979"></p><h1 id="逐组线性回归-了解"><a href="#逐组线性回归-了解" class="headerlink" title="逐组线性回归(了解)"></a>逐组线性回归(了解)</h1><p><img src="/images/resources/20200911/image-20200911140808291.png" alt="image-20200911140808291"></p><h1 id="数据透视表和数据交叉表"><a href="#数据透视表和数据交叉表" class="headerlink" title="数据透视表和数据交叉表"></a>数据透视表和数据交叉表</h1><p><img src="/images/resources/20200911/image-20200911141427551.png" alt="image-20200911141427551"></p><p><strong>交叉表是用于统计分组频率的特殊透视表</strong><br><img src="/images/resources/20200911/image-20200911141622302.png" alt="image-20200911141622302"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过将数据进行分组以及聚合,能够更加能够看到数据的重要性,越来越接近我的想法了.&lt;/p&gt;
&lt;h1 id=&quot;数据聚合和分组操作&quot;&gt;&lt;a href=&quot;#数据聚合和分组操作&quot; class=&quot;headerlink&quot; title=&quot;数据聚合和分组操作&quot;&gt;&lt;/a&gt;数据聚合和分组操作&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据处理" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据制图</title>
    <link href="https://wangweijie.vip/2020/08/26/2020-08-26-%E6%95%B0%E6%8D%AE%E5%88%B6%E5%9B%BE/"/>
    <id>https://wangweijie.vip/2020/08/26/2020-08-26-数据制图/</id>
    <published>2020-08-26T07:00:25.252Z</published>
    <updated>2020-08-26T07:12:06.406Z</updated>
    
    <content type="html"><![CDATA[<p>通过将数据进行可视化操作,数据就变得越来越美丽了</p><h1 id="绘图与可视化"><a href="#绘图与可视化" class="headerlink" title="绘图与可视化"></a>绘图与可视化</h1><ol><li>python提供了很多可以制作静态或者动态的可视化文件的库</li><li>python中提供了一个库叫做matplotlib库</li><li>可视化数据能够直观的展现数据分析的结果</li></ol><h1 id="简明的matplotlib入门"><a href="#简明的matplotlib入门" class="headerlink" title="简明的matplotlib入门"></a>简明的matplotlib入门</h1><p><img src="/images/resources/20200826/image-20200810154643872.png" alt="image-20200810154643872"></p><h2 id="图片与子图"><a href="#图片与子图" class="headerlink" title="图片与子图"></a>图片与子图</h2><p><strong>matplotlib绘制的图片位于Figure对象中,使用plt.figure生成一个新的图片</strong></p><p><strong>通常是不能用新的空白图片进行绘图的,需要使用add_subplot创建一个或者多个子图</strong></p><p><strong><em>说明:也就是Figure对象中可以允许有多个子图</em></strong></p><p><img src="/images/resources/20200826/image-20200826085630754.png" alt="image-20200826085630754"></p><h2 id="制图的补充说明"><a href="#制图的补充说明" class="headerlink" title="制图的补充说明"></a>制图的补充说明</h2><p><img src="/images/resources/20200826/image-20200826091725105.png" alt="image-20200826091725105"></p><p><img src="/images/resources/20200826/image-20200826091746370.png" alt="image-20200826091746370"></p><h2 id="获取制图对象"><a href="#获取制图对象" class="headerlink" title="获取制图对象"></a>获取制图对象</h2><p><img src="/images/resources/20200826/image-20200826092309660.png" alt="image-20200826092309660"></p><p><strong>这个时候就可以通过索引方便的获取制图对象</strong>、</p><h2 id="调整子图之间的间距"><a href="#调整子图之间的间距" class="headerlink" title="调整子图之间的间距"></a>调整子图之间的间距</h2><p><img src="/images/resources/20200826/image-20200826093403567.png" alt="image-20200826093403567"></p><h1 id="颜色-标记和线类型"><a href="#颜色-标记和线类型" class="headerlink" title="颜色,标记和线类型"></a>颜色,标记和线类型</h1><p><strong>matplotlib的主函数plot接收带有x和y轴的数组。以及一些可选的字符串缩写参数来指明颜色和线类型</strong></p><p><img src="/images/resources/20200826/image-20200826095950780.png" alt="image-20200826095950780"></p><p><a href="https://blog.csdn.net/weixin_40683253/article/details/87375020" target="_blank" rel="noopener">参考文章</a></p><p><img src="/images/resources/20200826/image-20200826100940107.png" alt="image-20200826100940107"></p><h1 id="刻度-标签和图例"><a href="#刻度-标签和图例" class="headerlink" title="刻度,标签和图例"></a>刻度,标签和图例</h1><p><strong>在pyplot接口设计为交互式使用,包含了像xlim,xticks和xticklabels等方法,分别控制了绘图范围,刻度位置以及刻度标签</strong></p><h2 id="设置标题-轴标签-刻度和刻度标签"><a href="#设置标题-轴标签-刻度和刻度标签" class="headerlink" title="设置标题,轴标签,刻度和刻度标签"></a>设置标题,轴标签,刻度和刻度标签</h2><p><img src="/images/resources/20200826/image-20200826102724278.png" alt="image-20200826102724278"></p><h2 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h2><p><img src="/images/resources/20200826/image-20200826103050299.png" alt="image-20200826103050299"></p><h2 id="注释与子图加工"><a href="#注释与子图加工" class="headerlink" title="注释与子图加工"></a>注释与子图加工</h2><p><strong>在plt中使用text,arrow和annote方法用来添加注释和文本</strong></p><p><strong><em>text方式用于给定坐标x和y并绘制对应的说明</em></strong></p><p><img src="/images/resources/20200826/image-20200826103838031.png" alt="image-20200826103838031"></p><h3 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h3><p><strong><em>注释可以同时绘制文本和箭头,示例中展现标普500指数从2007年以来的收盘价。并标注2008到2009金融危机的重要日期</em></strong><br><img src="/images/resources/20200826/image-20200826105956949.png" alt="image-20200826105956949"></p><p><img src="/images/resources/20200826/image-20200826112613289.png" alt="image-20200826112613289"></p><p><strong><em>除此之外还可以绘制多种常见的图形对象</em></strong></p><p><img src="/images/resources/20200826/image-20200826113153981.png" alt="image-20200826113153981"></p><h3 id="图片保存到文件"><a href="#图片保存到文件" class="headerlink" title="图片保存到文件"></a>图片保存到文件</h3><p><img src="/images/resources/20200826/image-20200826113608529.png" alt="image-20200826113608529"></p><h1 id="使用pandas和seaborn进行绘图"><a href="#使用pandas和seaborn进行绘图" class="headerlink" title="使用pandas和seaborn进行绘图"></a>使用pandas和seaborn进行绘图</h1><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p><strong><em>Series和DateFrame都有一个plot的属性。默认情况下绘制的是折线图</em></strong></p><p><img src="/images/resources/20200826/image-20200826114325983.png" alt="image-20200826114325983"></p><p><img src="/images/resources/20200826/image-20200826114644795.png" alt="image-20200826114644795"></p><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p><strong><em>bar()和barh()方法分别绘制垂直和水平的柱状图,Series和DataFrame索引将会被用作x的刻度或者是y的刻度</em></strong></p><p><img src="/images/resources/20200826/image-20200826115817852.png" alt="image-20200826115817852"></p><blockquote><p>DataFrame<img src="/images/resources/20200826/image-20200826120310342.png" alt="image-20200826120310342"></p></blockquote><p><img src="/images/resources/20200826/image-20200826120426030.png" alt="image-20200826120426030"></p><h2 id="相关示例-1"><a href="#相关示例-1" class="headerlink" title="相关示例"></a>相关示例</h2><p><strong>* 根据星期日期和派对规模形成交叉表*</strong></p><p><img src="/images/resources/20200826/image-20200826133823949.png" alt="image-20200826133823949"></p><p><img src="/images/resources/20200826/image-20200826134015163.png" alt="image-20200826134015163"></p><h2 id="使用seaborn进行制图"><a href="#使用seaborn进行制图" class="headerlink" title="使用seaborn进行制图"></a>使用seaborn进行制图</h2><p><img src="/images/resources/20200826/image-20200826141421493.png" alt="image-20200826141421493"></p><p><img src="/images/resources/20200826/image-20200826141545447.png" alt="image-20200826141545447"></p><h2 id="直方图和密度图"><a href="#直方图和密度图" class="headerlink" title="直方图和密度图"></a>直方图和密度图</h2><blockquote><p>直方图</p></blockquote><p>直方图是一种条形图,用于给出值频率的离散显示,数据点被分成离散的,均匀间隔的箱，并且绘制每个箱中数据点的数量</p><p><img src="/images/resources/20200826/image-20200826142521912.png" alt="image-20200826142521912"></p><blockquote><p>密度图</p></blockquote><p>密度图是一种与直方图相关的图形列表。通过计算可能产生的观测数据的连续概率分布</p><p><img src="/images/resources/20200826/image-20200826142728790.png" alt="image-20200826142728790"></p><blockquote><p>一次性绘制直方图和密度图</p></blockquote><p><img src="/images/resources/20200826/image-20200826143450683.png" alt="image-20200826143450683"></p><h2 id="散点图和点图"><a href="#散点图和点图" class="headerlink" title="散点图和点图"></a>散点图和点图</h2><p>散点图和点图可以用于检验两个一维数据序列之间的关系</p><p><img src="/images/resources/20200826/image-20200826144446267.png" alt="image-20200826144446267"></p><p><img src="/images/resources/20200826/image-20200826145006195.png" alt="image-20200826145006195"></p><p><a href="https://www.jianshu.com/p/c50cb4f1029f" target="_blank" rel="noopener">参考文章</a></p><h2 id="分面网格和分类数据"><a href="#分面网格和分类数据" class="headerlink" title="分面网格和分类数据"></a>分面网格和分类数据</h2><p><img src="/images/resources/20200826/image-20200826145713054.png" alt="image-20200826145713054"></p><p><img src="/images/resources/20200826/image-20200826145733211.png" alt="image-20200826145733211"></p><p><img src="/images/resources/20200826/image-20200826145748186.png" alt="image-20200826145748186"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过将数据进行可视化操作,数据就变得越来越美丽了&lt;/p&gt;
&lt;h1 id=&quot;绘图与可视化&quot;&gt;&lt;a href=&quot;#绘图与可视化&quot; class=&quot;headerlink&quot; title=&quot;绘图与可视化&quot;&gt;&lt;/a&gt;绘图与可视化&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;python提供了很多可以制作静
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据处理" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重塑" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A1%91/"/>
    
      <category term="数据展现" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%B1%95%E7%8E%B0/"/>
    
      <category term="可视化操作" scheme="https://wangweijie.vip/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据规整之连接,联合与重塑</title>
    <link href="https://wangweijie.vip/2020/07/24/2020-07-23-%E6%95%B0%E6%8D%AE%E8%A7%84%E6%95%B4%E4%B9%8B%E8%BF%9E%E6%8E%A5%E8%81%94%E5%90%88%E9%87%8D%E5%A1%91/"/>
    <id>https://wangweijie.vip/2020/07/24/2020-07-23-数据规整之连接联合重塑/</id>
    <published>2020-07-24T15:26:36.000Z</published>
    <updated>2020-07-24T15:31:56.260Z</updated>
    
    <content type="html"><![CDATA[<p>这章可以在以后的数据分析案例中,慢慢的体会。但最终的目的就是为了组装自己想要的数据</p><h1 id="数据规整之连接-联合与重塑"><a href="#数据规整之连接-联合与重塑" class="headerlink" title="数据规整之连接,联合与重塑"></a>数据规整之连接,联合与重塑</h1><p><strong>首先数据可能分布在多个文件或者数据库中,或以某种不易于分析的格式进行排列。而现在我们要做的就是如何连接,联合与重塑</strong></p><h2 id="分层索引"><a href="#分层索引" class="headerlink" title="分层索引"></a>分层索引</h2><p><em>分层索引是pandas的重要特性,允许在一个轴向上拥有多个索引层级。分层索引提供了一种在更低维度的形式中处理更高维度数据的方式</em><br><img src="/images/resources/20200723/image-20200723215507558.png" alt="image-20200723215507558"></p><h3 id="筛选数据子集"><a href="#筛选数据子集" class="headerlink" title="筛选数据子集"></a>筛选数据子集</h3><p><img src="/images/resources/20200723/image-20200723220913394.png" alt="image-20200723220913394"></p><h4 id="DataFrame中分层索引"><a href="#DataFrame中分层索引" class="headerlink" title="DataFrame中分层索引"></a>DataFrame中分层索引</h4><p><img src="/images/resources/20200723/image-20200723221921025.png" alt="image-20200723221921025"></p><h3 id="重排序和层级排序"><a href="#重排序和层级排序" class="headerlink" title="重排序和层级排序"></a>重排序和层级排序</h3><p><strong>有时需要重新排列轴上的层级顺序，或者按照特定的层级对数据进行排序。使用swaplevel接收两个层级序号或者层级名称。返回一个层级变更的新对象，但是数据是不变的</strong><br><img src="/images/resources/20200723/image-20200723222834966.png" alt="image-20200723222834966"></p><h4 id="按层级进行汇总统计"><a href="#按层级进行汇总统计" class="headerlink" title="按层级进行汇总统计"></a>按层级进行汇总统计</h4><p><strong>DataFrame和Series有一个level选项。可以在某个特定的轴上面进行聚合</strong></p><p><img src="/images/resources/20200723/image-20200723223607440.png" alt="image-20200723223607440"></p><h3 id="使用DataFrame的列进行索引"><a href="#使用DataFrame的列进行索引" class="headerlink" title="使用DataFrame的列进行索引"></a>使用DataFrame的列进行索引</h3><p><img src="/images/resources/20200723/image-20200723224502583.png" alt="image-20200723224502583"></p><h2 id="联合与合并数据集"><a href="#联合与合并数据集" class="headerlink" title="联合与合并数据集"></a>联合与合并数据集</h2><ol><li>pandas.merge可以根据一个或者多个键进行连接。</li><li>pandas.concat是对象在轴向上进行黏合或堆叠</li><li>combine_first允许将重叠的数据拼接在一起。以使用一个对象中的值填充另一个对象中的缺失值</li></ol><h3 id="数据风格的连接"><a href="#数据风格的连接" class="headerlink" title="数据风格的连接"></a>数据风格的连接</h3><p><img src="/images/resources/20200723/image-20200723230135407.png" alt="image-20200723230135407"></p><h4 id="左右连接以及outer并集"><a href="#左右连接以及outer并集" class="headerlink" title="左右连接以及outer并集"></a>左右连接以及outer并集</h4><p><img src="/images/resources/20200723/image-20200723230934131.png" alt="image-20200723230934131"></p><blockquote><p>注意事项</p></blockquote><p><strong>多对多连接是行的笛卡尔积，使用多个键进行合并时传入一个列名的列表即可，在处理重叠的列名的时候可以使用suffixes进行重新命名</strong></p><h4 id="根据索引合并"><a href="#根据索引合并" class="headerlink" title="根据索引合并"></a>根据索引合并</h4><p><img src="/images/resources/20200723/image-20200723232316630.png" alt="image-20200723232316630"></p><h3 id="沿轴向连接"><a href="#沿轴向连接" class="headerlink" title="沿轴向连接"></a>沿轴向连接</h3><p>一个是通过Numpy的concatenate函数，也可以使用pandas的concat函数</p><p><img src="/images/resources/20200723/image-20200723234200939.png" alt="image-20200723234200939"></p><h3 id="联合重叠数据"><a href="#联合重叠数据" class="headerlink" title="联合重叠数据"></a>联合重叠数据</h3><p><strong>可以理解为填补Series或者DataFrame的缺失值,使用Combine_first</strong></p><p><img src="/images/resources/20200723/image-20200723234742072.png" alt="image-20200723234742072"></p><h2 id="重塑和透视"><a href="#重塑和透视" class="headerlink" title="重塑和透视"></a>重塑和透视</h2><p><strong>多层索引在DataFrame中提供一种一致性的方式用于重排列数据。</strong></p><ul><li>statck简单的说就是转为低维度多层级的Series(堆叠)  也可以叫做列中的数据透视到行</li><li>unstack简单的说就转为层级感强烈的DataFrame(拆堆) 也可以叫做行中的数据透视到列</li></ul><h3 id="长变宽"><a href="#长变宽" class="headerlink" title="长变宽"></a>长变宽</h3><p><img src="/images/resources/20200723/image-20200724225834544.png" alt="image-20200724225834544"></p><p><img src="/images/resources/20200723/image-20200724225904151.png" alt="image-20200724225904151"></p><p><img src="/images/resources/20200723/image-20200724230400324.png" alt="image-20200724230400324"></p><h3 id="宽变长"><a href="#宽变长" class="headerlink" title="宽变长"></a>宽变长</h3><p><strong>pivot方法的反操作是pandas.melt,需要注意的是，需要配置key哪些列是分组指标</strong><br><img src="/images/resources/20200723/image-20200724232356680.png" alt="image-20200724232356680"></p><p><img src="/images/resources/20200723/image-20200724232422708.png" alt="image-20200724232422708"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这章可以在以后的数据分析案例中,慢慢的体会。但最终的目的就是为了组装自己想要的数据&lt;/p&gt;
&lt;h1 id=&quot;数据规整之连接-联合与重塑&quot;&gt;&lt;a href=&quot;#数据规整之连接-联合与重塑&quot; class=&quot;headerlink&quot; title=&quot;数据规整之连接,联合与重塑&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据处理" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重塑" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A1%91/"/>
    
      <category term="层级拆分" scheme="https://wangweijie.vip/tags/%E5%B1%82%E7%BA%A7%E6%8B%86%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之清洗与准备2</title>
    <link href="https://wangweijie.vip/2020/07/23/2020-07-22-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%B8%85%E6%B4%97%E4%B8%8E%E5%87%86%E5%A4%872/"/>
    <id>https://wangweijie.vip/2020/07/23/2020-07-22-数据分析之清洗与准备2/</id>
    <published>2020-07-22T16:07:00.000Z</published>
    <updated>2020-07-22T16:11:37.808Z</updated>
    
    <content type="html"><![CDATA[<p>继续刚.</p><h1 id="数据清洗与准备2"><a href="#数据清洗与准备2" class="headerlink" title="数据清洗与准备2"></a>数据清洗与准备2</h1><p><strong>python在字符串和文本操作上具有很大的便利性,字符串对象是大部分的文本操作简单化,对于复杂的模式匹配和文本操作。正则表达式是可能需要的。pandas允许将字符串和正则表达式应用到整个数据数组上。同时也能处理数据缺失带来的问题</strong></p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="字符串对象方法"><a href="#字符串对象方法" class="headerlink" title="字符串对象方法"></a>字符串对象方法</h3><p><img src="/images/resources/20200722/image-20200722224044234.png" alt="image-20200722224044234"></p><h3 id="查找和定位字符串"><a href="#查找和定位字符串" class="headerlink" title="查找和定位字符串"></a>查找和定位字符串</h3><p><img src="/images/resources/20200722/image-20200722224326066.png" alt="image-20200722224326066"></p><p><em>index和find方法的区别在于,使用index方法没有找到时会抛出一个异常</em></p><h3 id="计数和替换字符串"><a href="#计数和替换字符串" class="headerlink" title="计数和替换字符串"></a>计数和替换字符串</h3><p><img src="/images/resources/20200722/image-20200722224612390.png" alt="image-20200722224612390"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong>python中提供了re模块进行正则表达式的使用，一般单个表达式称作为regex</strong><br><em>re模块主要有三个主题:匹配，替代，拆分</em><br><img src="/images/resources/20200722/image-20200722225807394.png" alt="image-20200722225807394"></p><h3 id="match和search和findall"><a href="#match和search和findall" class="headerlink" title="match和search和findall"></a>match和search和findall</h3><p><img src="/images/resources/20200722/image-20200722231848760.png" alt="image-20200722231848760"></p><h3 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h3><p>​    假设将每个地址分为三个部分.可以使用括号模式包起来<br><img src="/images/resources/20200722/image-20200722233042459.png" alt="image-20200722233042459"></p><h2 id="pandas中向量化字符串函数"><a href="#pandas中向量化字符串函数" class="headerlink" title="pandas中向量化字符串函数"></a>pandas中向量化字符串函数</h2><p><img src="/images/resources/20200722/image-20200722234500724.png" alt="image-20200722234500724"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续刚.&lt;/p&gt;
&lt;h1 id=&quot;数据清洗与准备2&quot;&gt;&lt;a href=&quot;#数据清洗与准备2&quot; class=&quot;headerlink&quot; title=&quot;数据清洗与准备2&quot;&gt;&lt;/a&gt;数据清洗与准备2&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;python在字符串和文本操作上具有很大的便利性,字
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据处理" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据清洗" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之清洗与准备1</title>
    <link href="https://wangweijie.vip/2020/07/02/2020-07-02-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%B8%85%E6%B4%97%E4%B8%8E%E5%87%86%E5%A4%871/"/>
    <id>https://wangweijie.vip/2020/07/02/2020-07-02-数据分析之清洗与准备1/</id>
    <published>2020-07-02T03:32:38.000Z</published>
    <updated>2020-07-02T03:24:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据清洗也是我们的首要准备的，不完美的数据永远都是不完美的</p><h1 id="数据清洗与准备1"><a href="#数据清洗与准备1" class="headerlink" title="数据清洗与准备1"></a>数据清洗与准备1</h1><ol><li>数据分析和建模的过程中,大量的时间都花在了数据准备上</li><li>pandas和内置的python工具提供了一个高级,灵活和快速的工具集</li><li>着重关注于如何处理缺失值,重复值,字符串操作和其他分析数据转换工具</li></ol><h2 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h2><p>​    <strong>pandas对象的所有描述性统计信息默认情况下是排除缺失值的</strong></p><p>​    <em>pandas对象中表现缺失值的方式对大部分用户来说还是OK的。对于数值型数据,pandas使用浮点值NaN。一般称作为容易检测到的标识值</em></p><p><img src="/images/resources/20200702/image-20200628095655706.png" alt="image-20200628095655706"></p><ul><li><input disabled type="checkbox"> 注意:在统计应用学中,NA数据可以是不存在的数据或者是存在但不可观察的数据</li><li><input disabled type="checkbox"> python内建的None值在对象数组中也被当做NA处理</li></ul><h3 id="过滤缺失值"><a href="#过滤缺失值" class="headerlink" title="过滤缺失值"></a>过滤缺失值</h3><p>​    <code>使用pandas.isnull和布尔值索引手动的过滤缺失值,但dropna在过滤缺失值非常有用.在Series上使用dropna,它会返回Series中所有的费控数据与其索引值</code></p><h4 id="处理Series"><a href="#处理Series" class="headerlink" title="处理Series"></a>处理Series</h4><p><img src="/images/resources/20200702/image-20200628100907257.png" alt="image-20200628100907257"></p><h4 id="处理DateFrame"><a href="#处理DateFrame" class="headerlink" title="处理DateFrame"></a>处理DateFrame</h4><p>​    <em>处理DataFrame对象时,有可能需要删除全部为NA或者包含有NA的行或者列。dropna默认情况下会删除包含缺失值的行</em></p><p><img src="/images/resources/20200702/image-20200628101856142.png" alt="image-20200628101856142"></p><p><img src="/images/resources/20200702/image-20200628102416009.png" alt="image-20200628102416009"></p><p><em>过滤DataFrame的行的相关方法涉及时间序列数据。如果要保留一定数量的观察值的行。可以用thresh参数表示</em></p><p><img src="/images/resources/20200702/image-20200628103220183.png" alt="image-20200628103220183"></p><h3 id="补全缺失值"><a href="#补全缺失值" class="headerlink" title="补全缺失值"></a>补全缺失值</h3><p><strong>有时候我们可能需要多种方式补全数据,而不是单纯的过滤缺失值。我们可以使用fillna的方法补全缺失值,调用该方法时可以使用一个常数替代缺失值</strong></p><blockquote><p>fillna的基本操作</p></blockquote><p><img src="/images/resources/20200702/image-20200628104124802.png" alt="image-20200628104124802"></p><blockquote><p>额外操作</p></blockquote><p><img src="/images/resources/20200702/image-20200628104328888.png" alt="image-20200628104328888"></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200628104805642.png" alt="image-20200628104805642"></p><blockquote><p>Series填充(mean()平均值  median()中位数  max()最大值  min()最小值  sum()求和  std()标准差)</p></blockquote><p><img src="/images/resources/20200702/image-20200628105121830.png" alt="image-20200628105121830"></p><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="删除重复值"><a href="#删除重复值" class="headerlink" title="删除重复值"></a>删除重复值</h3><p>​    由于各种原因,DataFrame中会出现重复的行<br><img src="/images/resources/20200702/image-20200628110828906.png" alt="image-20200628110828906"></p><p>​    默认方法都是按照对列进行操作。可以指定数据的任何子集检测是否有重复</p><p><img src="/images/resources/20200702/image-20200628111504426.png" alt="image-20200628111504426"></p><h3 id="使用函数或映射进行数据转换"><a href="#使用函数或映射进行数据转换" class="headerlink" title="使用函数或映射进行数据转换"></a>使用函数或映射进行数据转换</h3><p><img src="/images/resources/20200702/image-20200628151456173.png" alt="image-20200628151456173"></p><p>​    <strong>Series的map方法接受一个函数或者一个包含映射关系的字典型对象</strong><br><img src="/images/resources/20200702/image-20200628152430269.png" alt="image-20200628152430269"></p><p><img src="/images/resources/20200702/image-20200628152452113.png" alt="image-20200628152452113"></p><h4 id="函数级操作"><a href="#函数级操作" class="headerlink" title="函数级操作"></a>函数级操作</h4><p><img src="/images/resources/20200702/image-20200628152746941.png" alt="image-20200628152746941"></p><h3 id="替代值"><a href="#替代值" class="headerlink" title="替代值"></a>替代值</h3><p><em>使用fillna填充缺失值,map可以用来修改一个对象中的子集的值。但是replace提供了更为简单的灵活的实现。对于Series使用map，对于DataFrame来说使用apply或者applymap</em></p><p><img src="/images/resources/20200702/image-20200628153834551.png" alt="image-20200628153834551"></p><h3 id="重命名轴索引"><a href="#重命名轴索引" class="headerlink" title="重命名轴索引"></a>重命名轴索引</h3><p><img src="/images/resources/20200702/image-20200628154824525.png" alt="image-20200628154824525"></p><blockquote><p>创建数据集转换后的版本,使用rename</p></blockquote><p><img src="/images/resources/20200702/image-20200628155604660.png" alt="image-20200628155604660"></p><h3 id="离散化和分箱"><a href="#离散化和分箱" class="headerlink" title="离散化和分箱"></a>离散化和分箱</h3><p>​    <strong>连续值经常需要离散化或者分离成‘箱子’进行分析。</strong></p><p>​    <em>现架设某项研究中一组人群的数据,你想将他们分组，放入离散的年龄框中</em></p><p><img src="/images/resources/20200702/image-20200628160547911.png" alt="image-20200628160547911"></p><p><strong>注意：pandas返回的对象是一个特殊的categorical对象，输出了描述由pandas.cut计算出的箱。里面指定了不同类别的名称以及codes属性中的ages</strong></p><p><img src="/images/resources/20200702/image-20200628161337302.png" alt="image-20200628161337302"></p><h4 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h4><p>​    pandas一般根据数据中的最大值和最小值计算出等长的箱</p><p><img src="/images/resources/20200702/image-20200702085505464.png" alt="image-20200702085505464"></p><p>​    使用qcut可以定义等长的箱以及自定义分位数</p><p><img src="/images/resources/20200702/image-20200702090658882.png" alt="image-20200702090658882"></p><h3 id="检测和过滤异常值"><a href="#检测和过滤异常值" class="headerlink" title="检测和过滤异常值"></a>检测和过滤异常值</h3><p>​    过滤和转换异常值一般是应用数组。比如</p><p><img src="/images/resources/20200702/image-20200702093806332.png" alt="image-20200702093806332"></p><p><img src="/images/resources/20200702/image-20200702093902391.png" alt="image-20200702093902391"></p><h2 id="置换和随机抽样"><a href="#置换和随机抽样" class="headerlink" title="置换和随机抽样"></a>置换和随机抽样</h2><p>​    使用np.random中的permutation可以对DataFrame中的Series或行进行置换（随机排序）,调用该操作可以根据需要的轴长度产生一个表示新顺序的整数数组</p><p>​    <img src="/images/resources/20200702/image-20200702095420315.png" alt="image-20200702095420315"></p><p><img src="/images/resources/20200702/image-20200702095441480.png" alt="image-20200702095441480"></p><h2 id="计算指标-虚拟变量"><a href="#计算指标-虚拟变量" class="headerlink" title="计算指标/虚拟变量"></a>计算指标/虚拟变量</h2><p>​    <strong>将分类变量转换为虚拟或者指标矩阵是另一种转换操作,如果DataFrame中的一列有K个不同的值,则可以衍生一个K列的值为1和0的矩阵或DataFrame，在pandas中有一个get_dummies函数可以实现</strong><br><img src="/images/resources/20200702/image-20200702101538216.png" alt="image-20200702101538216"></p><p><img src="/images/resources/20200702/image-20200702101706084.png" alt="image-20200702101706084"></p><h3 id="处理一行属于多类别的数据"><a href="#处理一行属于多类别的数据" class="headerlink" title="处理一行属于多类别的数据"></a>处理一行属于多类别的数据</h3><p><img src="/images/resources/20200702/image-20200702105633116.png" alt="image-20200702105633116"></p><p><img src="/images/resources/20200702/image-20200702105654240.png" alt="image-20200702105654240"></p><p><img src="/images/resources/20200702/image-20200702105719768.png" alt="image-20200702105719768"></p><p><img src="/images/resources/20200702/image-20200702105740651.png" alt="image-20200702105740651"></p><h3 id="与cut等离散化函数结合使用"><a href="#与cut等离散化函数结合使用" class="headerlink" title="与cut等离散化函数结合使用"></a>与cut等离散化函数结合使用</h3><p><img src="/images/resources/20200702/image-20200702110242568.png" alt="image-20200702110242568"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据清洗也是我们的首要准备的，不完美的数据永远都是不完美的&lt;/p&gt;
&lt;h1 id=&quot;数据清洗与准备1&quot;&gt;&lt;a href=&quot;#数据清洗与准备1&quot; class=&quot;headerlink&quot; title=&quot;数据清洗与准备1&quot;&gt;&lt;/a&gt;数据清洗与准备1&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;数据分
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据处理" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据清洗" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Excel与WebApis交互</title>
    <link href="https://wangweijie.vip/2020/03/16/2020-03-16-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%AF%BB%E5%8F%96Excel%E4%B8%8EWebApis%E4%BA%A4%E4%BA%92/"/>
    <id>https://wangweijie.vip/2020/03/16/2020-03-16-数据分析之读取Excel与WebApis交互/</id>
    <published>2020-03-16T14:02:52.494Z</published>
    <updated>2020-03-16T14:19:29.048Z</updated>
    
    <content type="html"><![CDATA[<p>其实你会发现转来转去二维数组就在我们身边，json数组放对象，<br>table就是活生生的二维空间。真的是答案就在我们的身边。<br>继续前行，数据清洗和准备，我来了</p><h1 id="数据分析之读取Excel与WebApis交互"><a href="#数据分析之读取Excel与WebApis交互" class="headerlink" title="数据分析之读取Excel与WebApis交互"></a>数据分析之读取Excel与WebApis交互</h1><ol><li>读取Excel操作</li><li>WebApis交互</li></ol><h1 id="读取Excel操作"><a href="#读取Excel操作" class="headerlink" title="读取Excel操作"></a>读取Excel操作</h1><p><em>pandas的ExcelFile和readExcel支持读取和存储Excel</em></p><p><img src="/images/resources/97A2D506DDF9A0E90646C264192938BA.jpg" alt="IMAGE"></p><h2 id="数据写入Excel"><a href="#数据写入Excel" class="headerlink" title="数据写入Excel"></a>数据写入Excel</h2><p><img src="/images/resources/1F73A95B050B025C629BF77DAF21968B.jpg" alt="IMAGE"></p><h1 id="与webapi交互"><a href="#与webapi交互" class="headerlink" title="与webapi交互"></a>与webapi交互</h1><p><em>无论是国内还是国外,都可以找一些公共的api,并且尽量的根据逻辑转换为df或者series</em></p><p><strong>其实你会发现表格和json数据里面构建对象就是一个二维数组</strong></p><p><img src="/images/resources/84A3838F8D248D26CF90B353A25F031E.jpg" alt="IMAGE"></p><h1 id="数据库交互"><a href="#数据库交互" class="headerlink" title="数据库交互"></a>数据库交互</h1><p><em>有些数据来自与数据库,无论非关系还是关系数据库</em></p><p><img src="/images/resources/998D14BD15DEBC0E85FDB12FB987E96D.jpg" alt="IMAGE"></p><p><img src="/images/resources/9B24D703BB166BA5CA031E310757A21D.jpg" alt="IMAGE"></p><h2 id="转化为DataFrame的2种方式"><a href="#转化为DataFrame的2种方式" class="headerlink" title="转化为DataFrame的2种方式"></a>转化为DataFrame的2种方式</h2><p><img src="/images/resources/12D8976455DB3257FB7894E28C47E2F4.jpg" alt="IMAGE"></p><blockquote><p>安装源</p></blockquote><p><code>pip3  install sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p><img src="/images/resources/F8764BEC56E99389E8287C7B1E308F47.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实你会发现转来转去二维数组就在我们身边，json数组放对象，&lt;br&gt;table就是活生生的二维空间。真的是答案就在我们的身边。&lt;br&gt;继续前行，数据清洗和准备，我来了&lt;/p&gt;
&lt;h1 id=&quot;数据分析之读取Excel与WebApis交互&quot;&gt;&lt;a href=&quot;#数据分析之读
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据加载" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="数据处理" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Excel读取" scheme="https://wangweijie.vip/tags/Excel%E8%AF%BB%E5%8F%96/"/>
    
      <category term="mysql数据库读取" scheme="https://wangweijie.vip/tags/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之数据加载,存储与文件格式一</title>
    <link href="https://wangweijie.vip/2020/03/12/2020-03-12-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD,%E5%AD%98%E5%82%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%80/"/>
    <id>https://wangweijie.vip/2020/03/12/2020-03-12-数据分析之数据加载,存储与文件格式一/</id>
    <published>2020-03-12T09:51:23.602Z</published>
    <updated>2020-03-12T09:55:54.257Z</updated>
    
    <content type="html"><![CDATA[<p>越来越有意思了,坚持坚持</p><h1 id="数据加载-存储与文件格式"><a href="#数据加载-存储与文件格式" class="headerlink" title="数据加载,存储与文件格式"></a>数据加载,存储与文件格式</h1><ol><li>读写文本格式的数据</li></ol><h1 id="读写文本格式的数据"><a href="#读写文本格式的数据" class="headerlink" title="读写文本格式的数据"></a>读写文本格式的数据</h1><p><strong>利用pandas的数据输入和输出,输入和输出划分几个大类:读取文本文件,加载数据库中的数据,利用webapi操作网络资源</strong></p><p><em>pandas提供了一些用于将表格型数据读取为DataFrame对象的函数,其中readcsv和readtable是比较常用的</em></p><p><img src="/images/resources/23D189EEE4C6C444D185612801F3A4D3.jpg" alt="IMAGE"></p><h2 id="读取逗号分隔"><a href="#读取逗号分隔" class="headerlink" title="读取逗号分隔"></a>读取逗号分隔</h2><p><img src="/images/resources/357A130395CF4D4041DA632EBFDDFC63.jpg" alt="IMAGE"></p><h2 id="指定分隔符读取"><a href="#指定分隔符读取" class="headerlink" title="指定分隔符读取"></a>指定分隔符读取</h2><p><img src="/images/resources/E0E71DD5AF3431FC44948BB4DCE9CBC7.jpg" alt="IMAGE"></p><h2 id="针对无标题行的文件"><a href="#针对无标题行的文件" class="headerlink" title="针对无标题行的文件"></a>针对无标题行的文件</h2><p><img src="/images/resources/BBE50F2C8E1D1628662678FEBC588844.jpg" alt="IMAGE"></p><h2 id="多个列层次化索引"><a href="#多个列层次化索引" class="headerlink" title="多个列层次化索引"></a>多个列层次化索引</h2><p><img src="/images/resources/42A540AE135196981C90A3F4D16B5E12.jpg" alt="IMAGE"></p><h2 id="有些表格并未用特定的分隔符"><a href="#有些表格并未用特定的分隔符" class="headerlink" title="有些表格并未用特定的分隔符"></a>有些表格并未用特定的分隔符</h2><p><img src="/images/resources/D6D6005EE8006E6984971737006188B6.jpg" alt="IMAGE"></p><h2 id="跳过注释"><a href="#跳过注释" class="headerlink" title="跳过注释"></a>跳过注释</h2><p><img src="/images/resources/B448267808D01A37EBB5108B8E168F17.jpg" alt="IMAGE"></p><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><p><em>一般来说缺失值要么为空,要么没有.pandas会用一组经常出现的标记值进行识别.比如NA或者Null</em></p><p><img src="/images/resources/796A4385C946C618C0DBE10C16C85EBA.jpg" alt="IMAGE"></p><blockquote><p>通过na_value替换值</p></blockquote><p><img src="/images/resources/0B70D91BF50B5ED9C74C29061231C9F8.jpg" alt="IMAGE"></p><h1 id="逐块读取文本文件"><a href="#逐块读取文本文件" class="headerlink" title="逐块读取文本文件"></a>逐块读取文本文件</h1><p><em>在处理很大的文件时,找出大文件中参数以便后续处理.</em></p><p><img src="/images/resources/60D263B08F79D99C7C208D6EB3FB84F3.jpg" alt="IMAGE"></p><blockquote><p>通过nrows指定读取几行</p></blockquote><p><img src="/images/resources/41FED0784D2AD073C8AC69D0C6CC3687.jpg" alt="IMAGE"></p><blockquote><p>逐块读取</p></blockquote><p><img src="/images/resources/5AEECA7965A4633CDCAEE5AFD4D30DB5.jpg" alt="IMAGE"></p><h1 id="将数据学出到文本格式"><a href="#将数据学出到文本格式" class="headerlink" title="将数据学出到文本格式"></a>将数据学出到文本格式</h1><p><img src="/images/resources/F20041ABEE7C7CE345D535D84C844D0F.jpg" alt="IMAGE"></p><h2 id="弥补缺失值"><a href="#弥补缺失值" class="headerlink" title="弥补缺失值"></a>弥补缺失值</h2><p><img src="/images/resources/F92B1C8FE8C79CBDAFD81CBEF311BA86.jpg" alt="IMAGE"></p><h2 id="Series中使用"><a href="#Series中使用" class="headerlink" title="Series中使用"></a>Series中使用</h2><p><img src="/images/resources/1E06F16E7995F44712988C2BA06273B8.jpg" alt="IMAGE"></p><h1 id="处理分隔符格式"><a href="#处理分隔符格式" class="headerlink" title="处理分隔符格式"></a>处理分隔符格式</h1><p><img src="/images/resources/5627B5D9C1C3BA814BF586DD2DAF138F.jpg" alt="IMAGE"></p><h2 id="转化为符合要求的数据格式"><a href="#转化为符合要求的数据格式" class="headerlink" title="转化为符合要求的数据格式"></a>转化为符合要求的数据格式</h2><p><img src="/images/resources/2290E16C74C0D981CBB2D0B64BA75FAE.jpg" alt="IMAGE"></p><h1 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj = &quot;&quot;&quot;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Wes&quot;,</span><br><span class="line"> &quot;places_lived&quot;: [&quot;United States&quot;, &quot;Spain&quot;, &quot;Germany&quot;],</span><br><span class="line"> &quot;pet&quot;: null,</span><br><span class="line"> &quot;siblings&quot;: [&#123;&quot;name&quot;: &quot;Scott&quot;, &quot;age&quot;: 30, &quot;pets&quot;: [&quot;Zeus&quot;, &quot;Zuko&quot;]&#125;,</span><br><span class="line">              &#123;&quot;name&quot;: &quot;Katie&quot;, &quot;age&quot;: 38,</span><br><span class="line">               &quot;pets&quot;: [&quot;Sixes&quot;, &quot;Stache&quot;, &quot;Cisco&quot;]&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>json之间的转换</p></blockquote><p><img src="/images/resources/B4642409C5BDA4E662A1A0BB3A3211C3.jpg" alt="IMAGE"></p><p><em>向一个DataFrame传入一个字典列表</em></p><p><img src="/images/resources/C11761008907A190F414B36232E217F8.jpg" alt="IMAGE"></p><h2 id="特殊json"><a href="#特殊json" class="headerlink" title="特殊json"></a>特殊json</h2><p><em>假定json数组中每个对象是表格中的一行</em></p><p><img src="/images/resources/6EB53048023D8991EB7C054A8CCE7C4B.jpg" alt="IMAGE"></p><h1 id="web信息收集"><a href="#web信息收集" class="headerlink" title="web信息收集"></a>web信息收集</h1><p><em>安装所需要的库</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml -i http://pypi.douban.com/simple/</span><br><span class="line">pip3 install bs4 html5lib -i  https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><img src="/images/resources/21586CCA9869613663D9B3138DCDB1AE.jpg" alt="IMAGE"></p><blockquote><p>小例子看出现频率最高的</p></blockquote><p><img src="/images/resources/98A2A27DAEB73604AAB75DF9F5253846.jpg" alt="IMAGE"></p><h1 id="解析html"><a href="#解析html" class="headerlink" title="解析html"></a>解析html</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests -i  https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><blockquote><p>有待改进</p></blockquote><p><img src="/images/resources/B1FD16DD45E34A3F0D76FB729F453463.jpg" alt="IMAGE"></p><p><img src="/images/resources/B7E8395E04CD9E34F48A3FB6DA0F0437.jpg" alt="IMAGE"></p><blockquote><p>再次优化</p></blockquote><p><img src="/images/resources/5ED7ABACCA992D196669BBE9508A48DE.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;越来越有意思了,坚持坚持&lt;/p&gt;
&lt;h1 id=&quot;数据加载-存储与文件格式&quot;&gt;&lt;a href=&quot;#数据加载-存储与文件格式&quot; class=&quot;headerlink&quot; title=&quot;数据加载,存储与文件格式&quot;&gt;&lt;/a&gt;数据加载,存储与文件格式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;读写文本
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据加载" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="爬取数据" scheme="https://wangweijie.vip/tags/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    
      <category term="推导式转换" scheme="https://wangweijie.vip/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础三</title>
    <link href="https://wangweijie.vip/2020/03/11/2020-03-11-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://wangweijie.vip/2020/03/11/2020-03-11-数据分析之Pandas基础三/</id>
    <published>2020-03-11T10:29:02.482Z</published>
    <updated>2020-03-11T10:32:26.509Z</updated>
    
    <content type="html"><![CDATA[<p>协方差和相关系数非常的有意思,可以让你衍生出现在就想关心数据应该怎么组合</p><h1 id="pandas基础三"><a href="#pandas基础三" class="headerlink" title="pandas基础三"></a>pandas基础三</h1><ol><li>汇总和计算描述统计</li></ol><h1 id="汇总和计算描述统计"><a href="#汇总和计算描述统计" class="headerlink" title="汇总和计算描述统计"></a>汇总和计算描述统计</h1><p><em>pandas对象拥有一组常用的数学和统计方法,大部分是属于约简和汇总统计。用于从series提取单个值或者从DataFrame的行或者列中提取一个series,都是基于没有缺失数据假设构建的</em></p><h2 id="返回一个列的所有的和"><a href="#返回一个列的所有的和" class="headerlink" title="返回一个列的所有的和"></a>返回一个列的所有的和</h2><p><img src="/images/resources/397D5DE6F47AAA4469F869F9E2F2F680.jpg" alt="IMAGE"></p><h2 id="按照行进行求和运算"><a href="#按照行进行求和运算" class="headerlink" title="按照行进行求和运算"></a>按照行进行求和运算</h2><p><img src="/images/resources/502E320217EEDFE8D99CA0350862F280.jpg" alt="IMAGE"></p><h2 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h2><p><img src="/images/resources/72B6F078302860EDCAAF9DA90AC09A88.jpg" alt="IMAGE"></p><h1 id="间接统计和累计统计-以及多次汇总"><a href="#间接统计和累计统计-以及多次汇总" class="headerlink" title="间接统计和累计统计,以及多次汇总"></a>间接统计和累计统计,以及多次汇总</h1><p><img src="/images/resources/BD2EED97C03311D91A77FE78ADC85E4E.jpg" alt="IMAGE"></p><p><img src="/images/resources/64D422CBA1611CBDB6C16A3DD2E94B63.jpg" alt="IMAGE"></p><p><em>例如，两组数的集合{0,5,9,14}和{5,6,8,9}其平均值都是7，但第二个集合具有较小的标准差。标准差可以当作不确定性的一种测量。例如在物理科学中，做重复性测量时，测量数值集合的标准差代表这些测量的精确度。当要决定测量值是否符合预测值，测量值的标准差占有决定性重要角色：如果测量平均值与预测值相差太远（同时与标准差数值做比较），则认为测量值与预测值互相矛盾。这很容易理解，因为如果测量值都落在一定数值范围之外，可以合理推论预测值是否正确。标准差应用于投资上，可作为量度回报稳定性的指标。标准差数值越大，代表回报远离过去平均数值，回报较不稳定故风险越高。相反，标准差数值越小，代表回报较为稳定，风险亦较小</em></p><p><strong>计算均方差，要看样本量是等概率，还有概率的。如果没有概率，直接计算离差的平方=（样本金额-平均值）的平方，然后所以样本量的离差平方求和，再除以（样本个数-1），然后开根号，就是标准差。如果有概率的话，只需要在计算合计数时考虑加权平均，不用再除以个数-1，直接开根号。</strong></p><h2 id="对于非数值的统计"><a href="#对于非数值的统计" class="headerlink" title="对于非数值的统计"></a>对于非数值的统计</h2><p><img src="/images/resources/D53FACBC72803DCF6187EC2B7CED2994.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF9305827B4E7496535E25C6486F970C.jpg" alt="IMAGE"></p><h1 id="相关系数与协方差"><a href="#相关系数与协方差" class="headerlink" title="相关系数与协方差"></a>相关系数与协方差</h1><p><strong>1、协方差是一个用于测量投资组合中某一具体投资项目相对于另一投资项目风险的统计指标,通俗点就是投资组合中两个项目间收益率的相关程度,正数说明两个项目一个收益率上升,另一个也上升,收益率呈同方向变化.如果是负数,则一个上升另一个下降,表明收益率是反方向变化.协方差的绝对值越大,表示这两种资产收益率关系越密切；绝对值越小表明这两种资产收益率的关系越疏远.2、由于协方差比较难理解,所以将协方差除以两个投资方案投资收益率的标准差之积,得出一个与协方差具有相同性质却没有量化的数.这个数就是相关系数.计算公式为相关系数=协方差/两个项目标准差之积.</strong></p><p><img src="/images/resources/463511E3272F850757BE5223D5BFD9C1.jpg" alt="IMAGE"></p><p>关于相关系数可以参考如下2篇文章</p><p><a href="https://blog.csdn.net/qq_38788128/article/details/80662712" target="_blank" rel="noopener">协方差和相关系数</a></p><p><a href="https://www.cnblogs.com/ggzhangxiaochao/p/9100575.html" target="_blank" rel="noopener">计算相关系数</a></p><p><img src="/images/resources/08F110C7415F1511DBA885FC41F73175.jpg" alt="IMAGE"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实协方差和相关系数除了公式还要琢磨之外,更多的应该理解他们的作用。其实也是看待一件事物和另一件事物的紧密性,也可以叫做关联度.可以用到彩票,交易,产业发展组合</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;协方差和相关系数非常的有意思,可以让你衍生出现在就想关心数据应该怎么组合&lt;/p&gt;
&lt;h1 id=&quot;pandas基础三&quot;&gt;&lt;a href=&quot;#pandas基础三&quot; class=&quot;headerlink&quot; title=&quot;pandas基础三&quot;&gt;&lt;/a&gt;pandas基础三&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://wangweijie.vip/tags/Pandas/"/>
    
      <category term="汇总统计" scheme="https://wangweijie.vip/tags/%E6%B1%87%E6%80%BB%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="协方差和相关系数" scheme="https://wangweijie.vip/tags/%E5%8D%8F%E6%96%B9%E5%B7%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础二</title>
    <link href="https://wangweijie.vip/2020/03/06/2020-03-06-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://wangweijie.vip/2020/03/06/2020-03-06-数据分析之Pandas基础二/</id>
    <published>2020-03-06T10:11:33.343Z</published>
    <updated>2020-03-06T10:16:11.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas基础二"><a href="#pandas基础二" class="headerlink" title="pandas基础二"></a>pandas基础二</h1><ol><li>基本功能</li></ol><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><p><strong>介绍Series和DataFrame的数据的基本操作</strong></p><h2 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h2><p><strong>pandas对象的一个重要方法是reindex,其作用是创建一个新对象,它的数据符合新的索引</strong></p><p><em>索引会根据reindex进行重排.如果某个索引值不存在,引入缺失值</em></p><p><img src="/images/resources/9BDC0097F09DEA77D4E6CF2D0FA1B710.jpg" alt="IMAGE"></p><p><em>对于时间序列的有序数据,重新索引需要一些插值处理.method选项可以操作,ffill是使用前面的值填充，bfill是使用后面的值填充。</em></p><p><img src="/images/resources/C9E0944093E2CBE2E491AFFE621AE20E.jpg" alt="IMAGE"></p><p><em>如果使用dataFrame,reindex可以修改行索引和列.只传递一个序列时,会重新索引结果的行</em></p><p><img src="/images/resources/93FFF2D082F2D3890B63D0F7010B3D24.jpg" alt="IMAGE"></p><p><em>同样的可以用column重新索引</em></p><p><img src="/images/resources/0F000BE435E2EA1306B7D32A6C62808D.jpg" alt="IMAGE"></p><h2 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h2><p><em>丢弃某条轴上面的一个或多个项很简单,只要有一个索引数组和列表即可</em></p><blockquote><p>针对series</p></blockquote><p><img src="/images/resources/7353F34AF4358F5AC59CB1FB9F369DD9.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame</p></blockquote><p><img src="/images/resources/7A8C2C4FD804A1C7410452D34E7507A6.jpg" alt="IMAGE"></p><h2 id="索引-选取和过滤"><a href="#索引-选取和过滤" class="headerlink" title="索引,选取和过滤"></a>索引,选取和过滤</h2><p><em>Series索引的工作方式类似numpy的索引,不过Series索引不只是整数</em></p><p><img src="/images/resources/7351085614E730AFB16DE45308814F25.jpg" alt="IMAGE"></p><p><em>切片运算有一些不同,其尾部是包含的</em></p><p><img src="/images/resources/7A0331DEDD87362F3AEC3201C3EE9C01.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame进行索引就是获取一个或者多个列</p></blockquote><p><img src="/images/resources/7319D3EF1A4A8DE696F09B53389A590F.jpg" alt="IMAGE"></p><blockquote><p>通过布尔类型</p></blockquote><p><img src="/images/resources/22F4A8FE59FBCDEDF8B32AF6DF724996.jpg" alt="IMAGE"></p><h2 id="用loc和iloc进行选取"><a href="#用loc和iloc进行选取" class="headerlink" title="用loc和iloc进行选取"></a>用loc和iloc进行选取</h2><p><em>对于dataFrame的行的标签索引可以使用loc和iloc,从DataFrame选择行和列的子集</em></p><p><em>通过2个方法选择一行和多列</em></p><p><img src="/images/resources/894761833E06C016E74B82062734631E.jpg" alt="IMAGE"></p><blockquote><p>同样适用于一个标签或者多个标签的切片</p></blockquote><p><img src="/images/resources/6871D92ED768889804D363F2FEC2BF6B.jpg" alt="IMAGE"></p><h3 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h3><p><img src="/images/resources/B5ECFDA35DD96A84887265201CB4BB2B.jpg" alt="IMAGE"></p><h2 id="算术预算和数据对齐"><a href="#算术预算和数据对齐" class="headerlink" title="算术预算和数据对齐"></a>算术预算和数据对齐</h2><p><strong>pandas重要的功能可以对不同索引的对象进行算术运算.对象相加时,存在不同的索引对.结果的索引就是该索引对的并集.</strong></p><p><img src="/images/resources/768E050A7B25854EDF9B8845A27267C4.jpg" alt="IMAGE"></p><p><img src="/images/resources/2E2FD992E1E33DFD0E3161410BE581E4.jpg" alt="IMAGE"></p><p><em>注意:Dataframe相加,没有共用的列或者行标签.结果都会是空</em></p><h3 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h3><p><img src="/images/resources/CC2D1E9C2547EE128E311C6AF9367F17.jpg" alt="IMAGE"></p><p>现在出现了na值,我填充一个特殊值怎么做</p><p><img src="/images/resources/7D41E072E3FD6C92DC6331849927178C.jpg" alt="IMAGE"></p><h4 id="可用的方法"><a href="#可用的方法" class="headerlink" title="可用的方法"></a>可用的方法</h4><p><img src="/images/resources/48895A322DD3FB5F1045308877149C5A.jpg" alt="IMAGE"></p><h3 id="同理"><a href="#同理" class="headerlink" title="同理"></a>同理</h3><p><img src="/images/resources/C95328773A6D7823317007F7E36EDCE5.jpg" alt="IMAGE"></p><h2 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h2><p><em>先看一个二维数组和一维数组相加</em></p><p><img src="/images/resources/CF1037DF0C3A3A52A59EC87974E624DC.jpg" alt="IMAGE"></p><p><em>同理,2者相加也一样</em></p><p><img src="/images/resources/826D251964FBC4E8373EEBE0CF520901.jpg" alt="IMAGE"></p><blockquote><p> 如果某个索引值找不到,则形成并集</p></blockquote><p><img src="/images/resources/52B8A7FE27D199B9AE096E2FD8C84715.jpg" alt="IMAGE"></p><p><img src="/images/resources/5E495F1869604983BEDD4DF846A5A8D8.jpg" alt="IMAGE"></p><h2 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h2><p><em>Numpy的ufuncs也可以用于操作pandas对象</em></p><p><img src="/images/resources/DAD1B6459E2C11DB815B4F94E966E6E4.jpg" alt="IMAGE"></p><p><img src="/images/resources/C952B31738FE3A6228A48D0935B1B5AF.jpg" alt="IMAGE"></p><p><a href="https://www.cnblogs.com/rrttp/p/8028421.html" target="_blank" rel="noopener">附上重新对二维数组的理解</a></p><h2 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h2><p><em>根据条件对数据集进行排序也是一种重要的内置计算,对行和列索引进行排序可以使用sortindex,返回一个已排序的新对象</em></p><p><img src="/images/resources/A1CD6A6ECCD28CE0D359490DB5036DE6.jpg" alt="IMAGE"></p><p><img src="/images/resources/B3CD803CC76040FDFF17377BA92FF5C5.jpg" alt="IMAGE"></p><h3 id="升序或者降序"><a href="#升序或者降序" class="headerlink" title="升序或者降序"></a>升序或者降序</h3><p><img src="/images/resources/688E7830127A870F6F3CB52C85ACB0A5.jpg" alt="IMAGE"></p><h3 id="按值对series排列使用sortvalues"><a href="#按值对series排列使用sortvalues" class="headerlink" title="按值对series排列使用sortvalues"></a>按值对series排列使用sortvalues</h3><p><img src="/images/resources/3D1EBC84FE57EAE5C7BE86682DC2A961.jpg" alt="IMAGE"></p><h3 id="排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可"><a href="#排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可" class="headerlink" title="排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可"></a>排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可</h3><p><img src="/images/resources/10B0A26170E3C5E1756C1202A4E84A6F.jpg" alt="IMAGE"></p><h2 id="rank方法"><a href="#rank方法" class="headerlink" title="rank方法"></a>rank方法</h2><p><em>rank是通过为各组分配一个平均排名的方式破坏平级关系</em></p><p><img src="/images/resources/985131ED1CD51544359627ACB66474B1.jpg" alt="IMAGE"></p><blockquote><p>针对dataframe</p></blockquote><p><img src="/images/resources/E2ADE065F80F8E164F7F3A7B38F0B21D.jpg" alt="IMAGE"></p><p><img src="/images/resources/47F006D8E2560638A7017A96F8E4EBFB.jpg" alt="IMAGE"></p><p><img src="/images/resources/A62806819F26AADFC24D702AA9143EA9.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pandas基础二&quot;&gt;&lt;a href=&quot;#pandas基础二&quot; class=&quot;headerlink&quot; title=&quot;pandas基础二&quot;&gt;&lt;/a&gt;pandas基础二&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基本功能&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;基本功能&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://wangweijie.vip/tags/Pandas/"/>
    
      <category term="Series和DateFrame基本功能" scheme="https://wangweijie.vip/tags/Series%E5%92%8CDateFrame%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/"/>
    
      <category term="排序筛选和rank" scheme="https://wangweijie.vip/tags/%E6%8E%92%E5%BA%8F%E7%AD%9B%E9%80%89%E5%92%8Crank/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础一</title>
    <link href="https://wangweijie.vip/2020/03/04/2020-03-04-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://wangweijie.vip/2020/03/04/2020-03-04-数据分析之Pandas基础一/</id>
    <published>2020-03-04T08:07:47.340Z</published>
    <updated>2020-03-04T08:11:39.475Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析之路漫漫,贵在坚持.梅花香自苦寒来</p><h1 id="pandas基础一"><a href="#pandas基础一" class="headerlink" title="pandas基础一"></a>pandas基础一</h1><ol><li>pandas的数据结构说明</li><li>pandas的数据结构介绍</li></ol><h1 id="pandas的数据结构说明"><a href="#pandas的数据结构说明" class="headerlink" title="pandas的数据结构说明"></a>pandas的数据结构说明</h1><p><strong>pandas含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具</strong></p><p><em>pandas是基于Numpy数组构建的,特别是基于数组的函数和不适用for循环的数据处理</em></p><blockquote><p>特点</p></blockquote><ol><li>pandas是专门为处理表格和混杂数据设计的</li><li>而Numpy更适合处理统一的数值数组数据</li><li>用的最多的是使用Series 和 DataFrame</li></ol><p><em>注意:别忘记安装pandas库</em></p><p><img src="/images/resources/88CD09B313660A19B2FF379849FA20B2.jpg" alt="IMAGE"></p><h1 id="pandas数据结构介绍"><a href="#pandas数据结构介绍" class="headerlink" title="pandas数据结构介绍"></a>pandas数据结构介绍</h1><p><em>pandas主要有2个非常重要的数据结构,分别是Series和DataFrame,他们提供了一种可靠的易于使用的基础</em></p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><p><strong>Series类似于一维数组的对象,由一组数据以及一组与之相关的数据标签组成</strong></p><p><img src="/images/resources/A4142743805F1077B093A14B458BB029.jpg" alt="IMAGE"></p><h2 id="自定义索引"><a href="#自定义索引" class="headerlink" title="自定义索引"></a>自定义索引</h2><p><img src="/images/resources/6F6405959DB48E08CC1642CCC752CD57.jpg" alt="IMAGE"></p><h2 id="一些运算"><a href="#一些运算" class="headerlink" title="一些运算"></a>一些运算</h2><p><img src="/images/resources/7BE46C9893AB0FD3908A941678D102C2.jpg" alt="IMAGE"></p><h2 id="类比定长的有序字典"><a href="#类比定长的有序字典" class="headerlink" title="类比定长的有序字典"></a>类比定长的有序字典</h2><p><img src="/images/resources/3547579C9D9BA67EA5CF325065259CB7.jpg" alt="IMAGE"></p><h2 id="通过字典创建Series"><a href="#通过字典创建Series" class="headerlink" title="通过字典创建Series"></a>通过字典创建Series</h2><p><img src="/images/resources/7F502060F619168FD4C5F1427CEF9640.jpg" alt="IMAGE"></p><h2 id="检测缺失值"><a href="#检测缺失值" class="headerlink" title="检测缺失值"></a>检测缺失值</h2><p><img src="/images/resources/F697479E51D87F2756F7270FA876CA7B.jpg" alt="IMAGE"></p><h2 id="重要功能"><a href="#重要功能" class="headerlink" title="重要功能"></a>重要功能</h2><p><em>Series最重要的一个功能是会根据运算的索引标签自动对齐数据</em></p><p><img src="/images/resources/DB8A9349293AD3B3B65A44B7B558C9DE.jpg" alt="IMAGE"></p><p><em>Series对象本身和索引都有一个name属性,这个属性和pandas的其它关键功能非常密切</em></p><p><img src="/images/resources/A91A7465D6DD9BE1FA05F1CBA8C0070B.jpg" alt="IMAGE"></p><p><img src="/images/resources/FD5C2D5BBF43BB0341A628CBE34D8434.jpg" alt="IMAGE"></p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p><strong>DataFrame是一个表格型的数据结构,含有一组有序的列,每列可以是不同的值类型。</strong></p><p><strong>DataFrame既有行索引也有列索引.其中的数据是以一个或多个二维快存放的</strong></p><p><img src="/images/resources/FC8BE5DCDE41BD7B1F66E0523A4C009C.jpg" alt="IMAGE"></p><h2 id="通过head方法取前5行数据"><a href="#通过head方法取前5行数据" class="headerlink" title="通过head方法取前5行数据"></a>通过head方法取前5行数据</h2><p><img src="/images/resources/4FB1C62EBE27D09EA14245E2E3F9460F.jpg" alt="IMAGE"></p><h2 id="可以指定具体列进行排列"><a href="#可以指定具体列进行排列" class="headerlink" title="可以指定具体列进行排列"></a>可以指定具体列进行排列</h2><p><img src="/images/resources/7FA2BF24A53B211DE9BFDC215EDD2C8D.jpg" alt="IMAGE"></p><h2 id="如果传入列数据找不到产生缺失值"><a href="#如果传入列数据找不到产生缺失值" class="headerlink" title="如果传入列数据找不到产生缺失值"></a>如果传入列数据找不到产生缺失值</h2><p><img src="/images/resources/882E4D78E86BD8221CA1BB45D8936978.jpg" alt="IMAGE"></p><h2 id="通过字典表及或者属性方式可以获取一个series"><a href="#通过字典表及或者属性方式可以获取一个series" class="headerlink" title="通过字典表及或者属性方式可以获取一个series"></a>通过字典表及或者属性方式可以获取一个series</h2><p><img src="/images/resources/0B80E7821F7DA17AE427147A2A643072.jpg" alt="IMAGE"></p><h2 id="行值和列值得获取"><a href="#行值和列值得获取" class="headerlink" title="行值和列值得获取"></a>行值和列值得获取</h2><p><img src="/images/resources/2BD3FC96B668E81FEC2DF0BD6D91CF9B.jpg" alt="IMAGE"></p><p><img src="/images/resources/CCD83E6B1FF65BC80FE17989438CFF2F.jpg" alt="IMAGE"></p><p><img src="/images/resources/568D31C4F3DD6A95D43C1163ADDC30D1.jpg" alt="IMAGE"></p><h2 id="使用del删除列"><a href="#使用del删除列" class="headerlink" title="使用del删除列"></a>使用del删除列</h2><p><img src="/images/resources/19F16C6E44BC29A0C9F48CC33337C646.jpg" alt="IMAGE"></p><h2 id="处理另一种常见的数据-嵌套字典"><a href="#处理另一种常见的数据-嵌套字典" class="headerlink" title="处理另一种常见的数据(嵌套字典)"></a>处理另一种常见的数据(嵌套字典)</h2><p><em>嵌套字典转换为dataframe,外层字典的键作为列,内层键作为行索引</em></p><p><img src="/images/resources/0B783659837B4B45550DCD0A2D069CF4.jpg" alt="IMAGE"></p><blockquote><p>可以用T方法进行行和列的交换</p></blockquote><p><img src="/images/resources/165731CAF591EECFFA8792E7FB45B87C.jpg" alt="IMAGE"></p><p><img src="/images/resources/C520465EF26DA48624910E6EF27C9015.jpg" alt="IMAGE"></p><h2 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h2><p><strong>pandas的索引对象负责管理元数据,无论构建哪种类型,用到的任何数组和序列都会转换成一个Index</strong></p><p><em>注意:与集合不同,pandas的索引是可以包含重复的标签</em></p><h3 id="索引一些方法和属性"><a href="#索引一些方法和属性" class="headerlink" title="索引一些方法和属性"></a>索引一些方法和属性</h3><p><img src="/images/resources/0B23645E7219188A633CD06D6395594D.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据分析之路漫漫,贵在坚持.梅花香自苦寒来&lt;/p&gt;
&lt;h1 id=&quot;pandas基础一&quot;&gt;&lt;a href=&quot;#pandas基础一&quot; class=&quot;headerlink&quot; title=&quot;pandas基础一&quot;&gt;&lt;/a&gt;pandas基础一&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pandas的
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas初始" scheme="https://wangweijie.vip/tags/Pandas%E5%88%9D%E5%A7%8B/"/>
    
      <category term="Series和DateFrame" scheme="https://wangweijie.vip/tags/Series%E5%92%8CDateFrame/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础三</title>
    <link href="https://wangweijie.vip/2020/03/03/2020-03-03-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://wangweijie.vip/2020/03/03/2020-03-03-数据分析之python Numpy基础三/</id>
    <published>2020-03-03T13:23:33.855Z</published>
    <updated>2020-03-03T13:29:51.741Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy数组的基础就结束了,让我们进入更高级的pandas(盼达)学习。</p><h1 id="Numpy基础三"><a href="#Numpy基础三" class="headerlink" title="Numpy基础三"></a>Numpy基础三</h1><ol><li>线性代数</li><li>伪随机数生成</li><li>随机漫步示例</li></ol><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><p><em>Numpy提供了一个用于矩阵乘法的dot函数.</em></p><p><img src="/images/resources/362A8F715792CAFBF2B9F7A3B7E7E7E8.jpg" alt="IMAGE"></p><p><em>关于线性代数,现在熟知dot函数.后续分析中涉及到线性代数在回来补充</em></p><h1 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h1><p><strong>numpy.random模块对python内置的random进行了补充,增加了一些用于高效生成多种概率分布的样本值的函数</strong></p><p><img src="/images/resources/8EC7A1805DAF15F41E4036B717D10648.jpg" alt="IMAGE"></p><h2 id="随机数生成种子"><a href="#随机数生成种子" class="headerlink" title="随机数生成种子"></a>随机数生成种子</h2><p><em>通过np.random.seed(1234)更改随机数生成种子</em></p><p><img src="/images/resources/C54E2D7CAACE815DD007F54DCA1856D8.jpg" alt="IMAGE"></p><p><em>numpy.random的数据生成函数使用了全局的随机种子,要避免全局状态.可以使用numpy.random.RandomState</em></p><p><img src="/images/resources/D16BB939E186B4872430CE085155327B.jpg" alt="IMAGE"></p><p><img src="/images/resources/7A94C00607D582EEB9E6358C63557EBF.jpg" alt="IMAGE"></p><h1 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h1><p><a href="http://www.360doc.com/content/18/0103/13/48634131_718673400.shtml" target="_blank" rel="noopener">随机漫步理论</a></p><p><img src="/images/resources/34B14C90E36B18C003D482B8172E021F.jpg" alt="IMAGE"></p><p><img src="/images/resources/2D3973E5E0D27F6BAA0D59B25339CE61.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Numpy数组的基础就结束了,让我们进入更高级的pandas(盼达)学习。&lt;/p&gt;
&lt;h1 id=&quot;Numpy基础三&quot;&gt;&lt;a href=&quot;#Numpy基础三&quot; class=&quot;headerlink&quot; title=&quot;Numpy基础三&quot;&gt;&lt;/a&gt;Numpy基础三&lt;/h1&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://wangweijie.vip/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Numpy简单结束" scheme="https://wangweijie.vip/tags/Numpy%E7%AE%80%E5%8D%95%E7%BB%93%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础二</title>
    <link href="https://wangweijie.vip/2020/03/02/2020-03-02-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://wangweijie.vip/2020/03/02/2020-03-02-数据分析之python Numpy基础二/</id>
    <published>2020-03-02T14:41:27.052Z</published>
    <updated>2020-03-03T13:25:59.819Z</updated>
    
    <content type="html"><![CDATA[<p>打好基础,再接再厉</p><h1 id="Numpy基础二"><a href="#Numpy基础二" class="headerlink" title="Numpy基础二"></a>Numpy基础二</h1><ol><li>通用函数:快速的元素级数组函数</li><li>利用数组进行数据处理</li><li>用于数组的文件输入输出</li></ol><h1 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h1><p><em>通用函数是一种对ndarray中数据执行元素级运算的函数</em></p><p><strong>意味着这些函数都是简单的元素级的变体</strong></p><p><img src="/images/resources/B4C2E49F862549A0D05822F4B4154450.jpg" alt="IMAGE"></p><h2 id="返回浮点数数组的小数和整数部分"><a href="#返回浮点数数组的小数和整数部分" class="headerlink" title="返回浮点数数组的小数和整数部分"></a>返回浮点数数组的小数和整数部分</h2><p><img src="/images/resources/D12B9EED4A943291BD1F34DC02943C5C.jpg" alt="IMAGE"></p><h2 id="常用的一元函数和二元函数"><a href="#常用的一元函数和二元函数" class="headerlink" title="常用的一元函数和二元函数"></a>常用的一元函数和二元函数</h2><p><img src="/images/resources/AC90DE595FF8CCC057E1A4584C0341B2.jpg" alt="IMAGE"></p><p><img src="/images/resources/D3D9EE17516757B0B21171AD73BB5077.jpg" alt="IMAGE"></p><h1 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h1><p><em>Numpy数组可以将许多种数据处理任务表述为见解的数据表达式</em></p><p><em>用数组表达式代替循环的做法通常叫做矢量化</em></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>二维坐标系中,X轴可以取三个值1,2,3, Y轴可以取三个值7,8, 请问可以获得多少个点的坐标?<br>显而易见是6个:(1,7)(2,7)(3,7)(1,8)(2,8)(3,8)</p><p><img src="/images/resources/84E2DDE622F52D2721B12CF82DE9C42A.jpg" alt="IMAGE"></p><blockquote><p>同理</p></blockquote><p><img src="/images/resources/72CD7C9AF8509AA0B9E0A147EEED3836.jpg" alt="IMAGE"></p><h2 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h2><p><strong>np.where函数是三元表达式矢量化版本</strong></p><blockquote><p>示例1</p></blockquote><p><img src="/images/resources/1DD93E080A4DBB84A77416995B838C9B.jpg" alt="IMAGE"></p><p><strong>np.where第二个和第三个参数不必是数组.where通常用于根据另一数组产生一个新的数组</strong></p><blockquote><p>示例2</p></blockquote><p><img src="/images/resources/97D6AD816E15EEDFEBC2D8EF91418D2D.jpg" alt="IMAGE"></p><p><img src="/images/resources/18EF14277B0F5735712190CD90FE852A.jpg" alt="IMAGE"></p><h2 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h2><p><strong>通过数组上的一组数学函数对整个数组或者某个轴向的数据进行统计计算</strong></p><p><img src="/images/resources/45DD2579270F072E6CFBA4C0FB2412D1.jpg" alt="IMAGE"></p><h3 id="累加函数"><a href="#累加函数" class="headerlink" title="累加函数"></a>累加函数</h3><p><img src="/images/resources/AC380099DCBAB4226AD87CA4755D79F8.jpg" alt="IMAGE"></p><h3 id="用于布尔类型数组的方法"><a href="#用于布尔类型数组的方法" class="headerlink" title="用于布尔类型数组的方法"></a>用于布尔类型数组的方法</h3><p><img src="/images/resources/E6720DC66940B94A9A11EB0AD5599BC1.jpg" alt="IMAGE"></p><h2 id="np数组的排序"><a href="#np数组的排序" class="headerlink" title="np数组的排序"></a>np数组的排序</h2><p><em>和python内置的列表类型一样,Numpy也可以通过sort方法进行排序</em></p><p><img src="/images/resources/1A281F79633FC71DD7AE70E52774823C.jpg" alt="IMAGE"></p><h3 id="多维数组以及定位"><a href="#多维数组以及定位" class="headerlink" title="多维数组以及定位"></a>多维数组以及定位</h3><p><img src="/images/resources/A5A27EF88BC7B537965014B0DF17F999.jpg" alt="IMAGE"></p><h2 id="唯一化以及其他集合逻辑"><a href="#唯一化以及其他集合逻辑" class="headerlink" title="唯一化以及其他集合逻辑"></a>唯一化以及其他集合逻辑</h2><p><em>通过unique用于找出数组中唯一值,并返回已排序的结果</em></p><p><img src="/images/resources/E2DE6434620F241B300CDE577C7DD4F6.jpg" alt="IMAGE"></p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p><em>通过np.in1d用于测试一个数组中的值在另一数组中的成员资格,返回布尔类型数组</em></p><p><img src="/images/resources/4C5DD070851221955F8E20569F9EA4DA.jpg" alt="IMAGE"></p><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><p><em>np.save和np.load是读写磁盘数组数据的2个主要函数,保存的扩展名为.npy</em></p><p><img src="/images/resources/73478F71A9C34879AD93B344FED9A451.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打好基础,再接再厉&lt;/p&gt;
&lt;h1 id=&quot;Numpy基础二&quot;&gt;&lt;a href=&quot;#Numpy基础二&quot; class=&quot;headerlink&quot; title=&quot;Numpy基础二&quot;&gt;&lt;/a&gt;Numpy基础二&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通用函数:快速的元素级数组函数&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://wangweijie.vip/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="文件的输入输出读写" scheme="https://wangweijie.vip/tags/%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础一</title>
    <link href="https://wangweijie.vip/2020/02/28/2020-02-28-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://wangweijie.vip/2020/02/28/2020-02-28-数据分析之python Numpy基础一/</id>
    <published>2020-02-28T11:04:41.920Z</published>
    <updated>2020-02-28T11:18:27.626Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy可以好好补补数学.捡起了儿时的快乐</p><h1 id="数组和矢量计算"><a href="#数组和矢量计算" class="headerlink" title="数组和矢量计算"></a>数组和矢量计算</h1><ol><li>Numpy介绍</li><li>Numpy中ndarray:一种多维数组对象</li></ol><p><strong>备注:矢量（vector）是一种既有大小又有方向的量，又称为向量。一般来说，在物理学中称作矢量，例如速度、加速度、力等等就是这样的量。舍弃实际含义，就抽象为数学中的概念──向量。在计算机中，矢量图可以无限放大永不变形.</strong></p><h1 id="Numpy的功能"><a href="#Numpy的功能" class="headerlink" title="Numpy的功能"></a>Numpy的功能</h1><ol><li>ndarray,一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组</li><li>用于对整组数据进行快速运算的标准数学函数(无需编写循环)</li><li>用于读写磁盘数据的工具以及用于操作内容映射文件的工具</li><li>线性代数,随机数生成以及傅里叶变换功能</li></ol><h2 id="主要的功能"><a href="#主要的功能" class="headerlink" title="主要的功能"></a>主要的功能</h2><ol><li>用于数据整理和清算,子集构造和过滤,转换等快速的矢量化数据运算</li><li>常用的数组算法,如排序,唯一化,集合运算等</li><li>高效的描述统计和数据聚合/摘要运算</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li><li>将条件逻辑表述为数组表达式</li><li>数据的分组运算(聚合,转换,函数应用等)</li></ol><h2 id="Numpy的优势"><a href="#Numpy的优势" class="headerlink" title="Numpy的优势"></a>Numpy的优势</h2><ol><li>Numpy是在一个连续的内存块中存储数据,独立于其他的python内置对象</li><li>Numpy可以在整个数组上执行复杂的计算,而不需要python的for循环</li></ol><p><img src="/images/resources/814B5A8180B8A56781164924BAC0F297.jpg" alt="IMAGE"></p><h1 id="Numpy中的ndarray"><a href="#Numpy中的ndarray" class="headerlink" title="Numpy中的ndarray"></a>Numpy中的ndarray</h1><p>一种多维数组对象,关于多维数组可以参考</p><p><a href="https://baijiahao.baidu.com/s?id=1637508222888888267&wfr=spider&for=pc" target="_blank" rel="noopener">关于多维数组解释好的文章</a></p><h2 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h2><p><img src="/images/resources/C2EE448D7BFAA4DFFA9C5A0589E0B7E1.jpg" alt="IMAGE"></p><h2 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h2><p>ndarray是一个通用的同构数据多位容器,所有元素必须是相同类型的,每个数组都一个shape(一个表示各维度大小的元组)和一个dtype(用于描述数组数据类型的对象)</p><p><img src="/images/resources/AE989534ADFEE5AAC55436657FD517D3.jpg" alt="IMAGE"></p><h1 id="创建ndarray-从零开始"><a href="#创建ndarray-从零开始" class="headerlink" title="创建ndarray(从零开始)"></a>创建ndarray(从零开始)</h1><p><em>创建数组最简单的方法就是使用array函数</em></p><p><img src="/images/resources/CA0831578007D96B95C5182AC5B58DE2.jpg" alt="IMAGE"></p><p><img src="/images/resources/77015D7A890D3AA4D4D28693444D72A8.jpg" alt="IMAGE"></p><h2 id="通过其他方式创建数组"><a href="#通过其他方式创建数组" class="headerlink" title="通过其他方式创建数组"></a>通过其他方式创建数组</h2><p><strong>在np.array可以通过zeros和ones创建指定长度和形状的全0或者全1数组</strong></p><p><img src="/images/resources/AA5CB582A14C4BBF37EF5446224B45AE.jpg" alt="IMAGE"></p><h1 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h1><p><em>dtype是一个特殊的对象,讲一块内容解释为特定数据类型所需的信息</em></p><p><img src="/images/resources/27DF3A546AA0E2017E9F709E2FA2EF3F.jpg" alt="IMAGE"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><img src="/images/resources/39EFB133FF0731C89CF63C09FA41B0CE.jpg" alt="IMAGE"></p><h1 id="Numpy数组的运算"><a href="#Numpy数组的运算" class="headerlink" title="Numpy数组的运算"></a>Numpy数组的运算</h1><p><em>数组很重要,不用编写循环即可对数据执行批量运算</em></p><p><img src="/images/resources/2AC5F7394B93D9FD9BF60F6EF1384DC7.jpg" alt="IMAGE"><br><img src="/images/resources/EADE09AE9703ECFF57D37D730CE90AC0.jpg" alt="IMAGE"></p><p>不同大小数组之间的运算叫做广播</p><h2 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h2><p><strong>数组切片是原始数组的视图,视图上的任何修改都会直接反应到源数组上</strong></p><p><img src="/images/resources/690596B719569E350FF99926E39D6AC7.jpg" alt="IMAGE"></p><p><strong>在进行切片的时候该值会自动传播,以为着跟列表的区别在,数组切片是原始数据的修改。数据不会被复制</strong></p><p><img src="/images/resources/0AF3E10A049F8BD8F6C26106D00BDD19.jpg" alt="IMAGE"></p><p><em>如果明确要复制,使用arr[5:8].copy</em></p><p><em>对于高维度数组,在一个二维数组中,各索引位置上的元素不再是标量而是一维数组</em></p><p><img src="/images/resources/71C6531079D6B2E9EA1FEB5260039AEE.jpg" alt="IMAGE"></p><p><strong>对于各个元素进行递归访问,可以传入一个以逗号隔开的索引列表选取单个元素</strong></p><p><img src="/images/resources/35D0134E8BD96F98A32832FD84AEB436.jpg" alt="IMAGE"></p><h2 id="二维数组索引方式"><a href="#二维数组索引方式" class="headerlink" title="二维数组索引方式"></a>二维数组索引方式</h2><p><img src="/images/resources/7DBC68B452EEA322D859F67C5C49D5F6.jpg" alt="IMAGE"></p><h2 id="三维数组索引方式"><a href="#三维数组索引方式" class="headerlink" title="三维数组索引方式"></a>三维数组索引方式</h2><p><img src="/images/resources/3D26592DADF3C21B0374A98B45075EF9.jpg" alt="IMAGE"></p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p><img src="/images/resources/E16280A90E66D9290676E87CE4D23D84.jpg" alt="IMAGE"></p><h2 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h2><p><em>ndarray的切片语法和列表的一维对象差不多,二维稍微有点区别</em></p><p><img src="/images/resources/7F52A498D14A9558AD27D9C80226E2FA.jpg" alt="IMAGE"></p><p><img src="/images/resources/3FB98072A91656B8C58AAB4FA40F5943.jpg" alt="IMAGE"></p><h2 id="布尔类型索引"><a href="#布尔类型索引" class="headerlink" title="布尔类型索引"></a>布尔类型索引</h2><p><img src="/images/resources/5A51BA2CEB9478B9C02FAC6A02F07EBD.jpg" alt="IMAGE"></p><p><em>通知在匹配完后,同样可以进行切片的操作</em></p><p><img src="/images/resources/9276F96AD69C62E01FF92C49CB59009E.jpg" alt="IMAGE"></p><p><em>一些常见操作</em></p><p><img src="/images/resources/D6297700F707A2E4CA3EEE8522DEDF23.jpg" alt="IMAGE"></p><h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><p><strong>花式索引是一个Numpy术语,利用整数数组进行索引</strong></p><p><img src="/images/resources/47CD0607F4BC614300A7A15A9C06F844.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF4F4FD99B39454CF5470521BA9AB7D3.jpg" alt="IMAGE"></p><p><strong>花式索引和切片不一样,总是将数据复制到新数组中</strong></p><h2 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h2><p><strong>转置是重塑的一种特殊形式,数组不仅有transpose方法,还有一个特殊的T属性</strong></p><p><img src="/images/resources/48EFB15DA1DF601E1AE3114D009598C5.jpg" alt="IMAGE"></p><p><img src="/images/resources/75C86806DA08A724C7E19559E32E4AE1.jpg" alt="IMAGE"></p><h3 id="三轴转换"><a href="#三轴转换" class="headerlink" title="三轴转换"></a>三轴转换</h3><p><img src="/images/resources/FB0262F8F1D97BD5CB277857C5E73FAA.jpg" alt="IMAGE"></p><p><a href="https://blog.csdn.net/theITcat/article/details/100026068" target="_blank" rel="noopener">如何理解轴转换</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Numpy可以好好补补数学.捡起了儿时的快乐&lt;/p&gt;
&lt;h1 id=&quot;数组和矢量计算&quot;&gt;&lt;a href=&quot;#数组和矢量计算&quot; class=&quot;headerlink&quot; title=&quot;数组和矢量计算&quot;&gt;&lt;/a&gt;数组和矢量计算&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Numpy介绍&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://wangweijie.vip/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="矩阵相乘" scheme="https://wangweijie.vip/tags/%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python文件和操作系统</title>
    <link href="https://wangweijie.vip/2020/02/21/2020-02-21-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPython%E6%96%87%E4%BB%B6%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wangweijie.vip/2020/02/21/2020-02-21-数据分析之Python文件和操作系统/</id>
    <published>2020-02-21T07:28:54.288Z</published>
    <updated>2020-02-21T07:30:56.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件和操作系统"><a href="#文件和操作系统" class="headerlink" title="文件和操作系统"></a>文件和操作系统</h1><ol><li>文件的读写操作</li><li>文件的字节与编码</li></ol><h1 id="文件的读写操作"><a href="#文件的读写操作" class="headerlink" title="文件的读写操作"></a>文件的读写操作</h1><p><em>打开一个文件以便读写,可以使用内置的open函数填充一个相对路径或者是绝对路径</em></p><p><img src="/images/resources/21CA280ADDD5BE786A7CD57CF732044D.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r:读取文件，若文件不存在则会报错</span><br><span class="line">w:写入文件，若文件不存在则会先创建再写入，会覆盖原文件</span><br><span class="line">a:写入文件，若文件不存在则会先创建再写入，但不会覆盖原文件，而是追加在文件末尾</span><br><span class="line">rb,wb:分别于r,w类似，但是用于读写二进制文件</span><br><span class="line">r+:可读、可写，文件不存在也会报错，写操作时会覆盖</span><br><span class="line">w+:可读，可写，文件不存在先创建，会覆盖</span><br><span class="line">a+:可读、可写，文件不存在先创建，不会覆盖，追加在末尾</span><br></pre></td></tr></table></figure><p><strong>注意：这里的覆盖是指每次重新打开文件进行操作时覆盖原来的，如果是在打开文件中则不会覆盖</strong></p><h1 id="文件的字节和编码"><a href="#文件的字节和编码" class="headerlink" title="文件的字节和编码"></a>文件的字节和编码</h1><p><img src="/images/resources/7D247662CDCFE9E85AD384245142E586.jpg" alt="IMAGE"></p><h1 id="前期回顾"><a href="#前期回顾" class="headerlink" title="前期回顾"></a>前期回顾</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件和操作系统&quot;&gt;&lt;a href=&quot;#文件和操作系统&quot; class=&quot;headerlink&quot; title=&quot;文件和操作系统&quot;&gt;&lt;/a&gt;文件和操作系统&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;文件的读写操作&lt;/li&gt;
&lt;li&gt;文件的字节与编码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="文件操作" scheme="https://wangweijie.vip/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="字符编码" scheme="https://wangweijie.vip/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python函数</title>
    <link href="https://wangweijie.vip/2020/02/20/2020-02-20-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%87%BD%E6%95%B0/"/>
    <id>https://wangweijie.vip/2020/02/20/2020-02-20-数据分析之python函数/</id>
    <published>2020-02-20T12:25:07.558Z</published>
    <updated>2020-02-20T12:30:07.949Z</updated>
    
    <content type="html"><![CDATA[<p>函数即是对象,函数也可以叫做方法</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol><li>函数的定义</li><li>命名空间,作用域和局部函数</li><li>函数即是对象</li><li>匿名函数</li><li>错误和异常处理</li></ol><h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><p><strong>函数是在python中最重要的代码组织和复用手段,如果需要重读的使用或者非常类似的代码,就需要写一个函数,通过给函数起一个名字,可以提高代码的可读性</strong></p><p><img src="/images/resources/777C32F6B336976812AC094355178630.jpg" alt="IMAGE"></p><h2 id="命名空间-作用域和局部函数"><a href="#命名空间-作用域和局部函数" class="headerlink" title="命名空间,作用域和局部函数"></a>命名空间,作用域和局部函数</h2><p><strong>函数可以访问到不同作用域中的变量:全局(global) 和 局部(local)</strong></p><p><em>注意:任何函数中赋值的变量默认都是被分配到局部命名空间(local namespace)中的,局部空间是在函数被调用时创建的,函数参数会立即填入该命名空间</em></p><p><img src="/images/resources/FAB357288CC2FF086A600FC5773BC8E8.jpg" alt="IMAGE"></p><h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><p><img src="/images/resources/14060CAB55BB20B68A46011B9F28FAD2.jpg" alt="IMAGE"></p><h2 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h2><p>详见代码示例:</p><p>第一种:常规方式</p><p><img src="/images/resources/75F2EE1A746CC28223D9CBA784D621F8.jpg" alt="IMAGE"></p><p>第二种:将需要执行的方法作为操作列表</p><p><img src="/images/resources/32066ADE961BA76B43353336B2123FC4.jpg" alt="IMAGE"></p><p>第三种:通过内置的map函数,可以在一组数据上应用一个函数</p><p><img src="/images/resources/3B5EF6C4BE7CED93727DADBB1FEC66F3.jpg" alt="IMAGE"></p><h2 id="匿名函数-就是函数没有名字"><a href="#匿名函数-就是函数没有名字" class="headerlink" title="匿名函数(就是函数没有名字)"></a>匿名函数(就是函数没有名字)</h2><p><img src="/images/resources/57EB28B40163B2AED7D58EDB35C8026C.jpg" alt="IMAGE"></p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="迭代器和生成器对比"><a href="#迭代器和生成器对比" class="headerlink" title="迭代器和生成器对比"></a>迭代器和生成器对比</h3><p><img src="/images/resources/7C774E7CAC907D0FF8EC8F4EA6FB828B.jpg" alt="IMAGE"></p><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><p><em>生成器表达式就是将列表推导式两端的方括号改为圆括号</em></p><p><img src="/images/resources/012FFC11BC72C4EBA72E6EE35E83DA24.jpg" alt="IMAGE"></p><h2 id="itertoole模块"><a href="#itertoole模块" class="headerlink" title="itertoole模块"></a>itertoole模块</h2><p><em>itertoole有许多常见的算法生成器</em></p><p><img src="/images/resources/3CAAD0D25E4BA9CD03E2E1E929B24C51.jpg" alt="IMAGE"></p><p><strong>注意:其余功能可以参考相关文档</strong></p><h2 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h2><pre><code>f = open(path,&apos;w&apos;)try:    xxx_to()except:    print(&apos;xxx&apos;)finally:    f.close()</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数即是对象,函数也可以叫做方法&lt;/p&gt;
&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;函数的定义&lt;/li&gt;
&lt;li&gt;命名空间,作用域和局部函数&lt;/li&gt;
&lt;li&gt;函数
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="函数和方法" scheme="https://wangweijie.vip/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    
      <category term="异常机制" scheme="https://wangweijie.vip/tags/%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python数据结构和序列</title>
    <link href="https://wangweijie.vip/2020/02/18/2020-02-18-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%8F%E5%88%97/"/>
    <id>https://wangweijie.vip/2020/02/18/2020-02-18-数据分析之python数据结构和序列/</id>
    <published>2020-02-18T14:00:09.011Z</published>
    <updated>2020-02-18T14:05:43.787Z</updated>
    
    <content type="html"><![CDATA[<p>每个数据结构都是语言设计者的精心设计,推导式也是有趣的部分</p><h1 id="python的数据结构-函数和文件"><a href="#python的数据结构-函数和文件" class="headerlink" title="python的数据结构,函数和文件"></a>python的数据结构,函数和文件</h1><ol><li>数据结构和序列,函数,文件讲分为3个部分进行叙述</li></ol><h1 id="数据结构和序列"><a href="#数据结构和序列" class="headerlink" title="数据结构和序列"></a>数据结构和序列</h1><p><strong>python的数据结构有元组,列表,字典,集合</strong></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><em>元组是一个固定长度,不可改变的python序列对象,创建元组最简单的方式就是用逗号进行分隔</em></p><p><img src="/images/resources/2ADB91417B20DC838C193A4ACDF1A6A1.jpg" alt="IMAGE"></p><p><em>如何元组中某个对象是可变的,可以在原位上进行修改</em></p><p><img src="/images/resources/4687ABDDABDE1152358DE012E5CBC3C7.jpg" alt="IMAGE"></p><p><em>元组可以相接与复制</em></p><p><img src="/images/resources/755E5FA05748213CCA82761CBE40B6C5.jpg" alt="IMAGE"></p><h3 id="拆分元组"><a href="#拆分元组" class="headerlink" title="拆分元组"></a>拆分元组</h3><h4 id="拆分和数值交换"><a href="#拆分和数值交换" class="headerlink" title="拆分和数值交换"></a>拆分和数值交换</h4><p><img src="/images/resources/92858794DECE6DAD07EE673BBD4FDCC7.jpg" alt="IMAGE"></p><h4 id="拆分迭代元组或者列表序列"><a href="#拆分迭代元组或者列表序列" class="headerlink" title="拆分迭代元组或者列表序列"></a>拆分迭代元组或者列表序列</h4><p><img src="/images/resources/22F732D23D4E4917BA09FC95F66DB0F3.jpg" alt="IMAGE"></p><h4 id="tuple方法"><a href="#tuple方法" class="headerlink" title="tuple方法"></a>tuple方法</h4><p><em>元组有一个方法和列表保持一致是叫做count,可以统计某个值出现的频率</em></p><p><img src="/images/resources/F5BFB1E3646A723755FB1A2C2303A8D3.jpg" alt="IMAGE"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><em>与元组对比,列表的长度可变,内容可以被修改,可以用方括号定义,或者用list函数</em></p><p><img src="/images/resources/3FA6147CEEC6591A8FF02FEA84DD0682.jpg" alt="IMAGE"></p><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><p><img src="/images/resources/C74934A48935FB96A9827AE4CF762EB1.jpg" alt="IMAGE"></p><h3 id="通过in或者not-in可以检查列表是否包含该数据"><a href="#通过in或者not-in可以检查列表是否包含该数据" class="headerlink" title="通过in或者not in可以检查列表是否包含该数据"></a>通过in或者not in可以检查列表是否包含该数据</h3><p><img src="/images/resources/5FE59F4596DF44F604E9EF46372515A7.jpg" alt="IMAGE"></p><h3 id="串联和组合列表"><a href="#串联和组合列表" class="headerlink" title="串联和组合列表"></a>串联和组合列表</h3><p><img src="/images/resources/3AAC6E0B610071462195D4AD879D36A2.jpg" alt="IMAGE"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><em>通过使用sort函数对一个列表原地排序</em></p><p><img src="/images/resources/BEFDED1B684DFB66AD6B773B661DCE7B.jpg" alt="IMAGE"></p><h3 id="二分搜索和维护已排序的列表"><a href="#二分搜索和维护已排序的列表" class="headerlink" title="二分搜索和维护已排序的列表"></a>二分搜索和维护已排序的列表</h3><p><em>在python中bisect模块支持二分查找和向已排序的列表插入值</em></p><p><img src="/images/resources/39F97B38573F4D1D30B11FCAB79E7D92.jpg" alt="IMAGE"></p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p><em>切片的目的主要选取大多数序列类型的一部分,切片的基本形式就是strat:stop</em></p><p><em>切片的起始元素是包含的,但不包含结束元素,因此结果中包含的元素个数为stop-start</em></p><p><img src="/images/resources/8AB835212447CFEFA8F40535D85F72E2.jpg" alt="IMAGE"></p><h4 id="递进切片"><a href="#递进切片" class="headerlink" title="递进切片"></a>递进切片</h4><p><img src="/images/resources/66ADF11715DBDE531B2283C4AE59EFE0.jpg" alt="IMAGE"></p><h2 id="切片的规律可以如下图所示"><a href="#切片的规律可以如下图所示" class="headerlink" title="切片的规律可以如下图所示"></a>切片的规律可以如下图所示</h2><p><img src="/images/resources/185AADC5CACCF64F386E5769BB564A2A.jpg" alt="IMAGE"></p><h2 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a>序列函数</h2><h3 id="enumerate函数"><a href="#enumerate函数" class="headerlink" title="enumerate函数"></a>enumerate函数</h3><p><em>迭代一个序列的时候,想知道当前项的序号</em></p><p><img src="/images/resources/AA3852DD100C8F45ACF57882952A231D.jpg" alt="IMAGE"></p><h3 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h3><p><em>sorted函数可以从任意序列的元素返回一个新的排好序的列表</em></p><p><img src="/images/resources/5657F65F4C8FD5441E3C3916E3A54A6C.jpg" alt="IMAGE"></p><h3 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h3><p><em>zip函数可以将多个列表，元组或其它序列组合成一个元组列表</em></p><p><img src="/images/resources/272D7629905D0F009F37B257463A591A.jpg" alt="IMAGE"></p><h3 id="reversed函数"><a href="#reversed函数" class="headerlink" title="reversed函数"></a>reversed函数</h3><p><em>reversed可以从后向前迭代一个序列</em></p><p><img src="/images/resources/D5154AC437784C34B97FF8A39087B138.jpg" alt="IMAGE"></p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><em>字典是python最为重要的数据结构,也可以叫做哈希映射或关联数组.以键值的方式构成,键值都可以是python对象</em></p><p><em>创建字典的方法之一是使用尖括号,用冒号进行键和值的分隔</em></p><p><img src="/images/resources/A5C76341228517851E00CDB816CA3A39.jpg" alt="IMAGE"></p><h3 id="删除的2种方式"><a href="#删除的2种方式" class="headerlink" title="删除的2种方式"></a>删除的2种方式</h3><p><img src="/images/resources/6599F1C98711F040F7CA77A780A1E9FF.jpg" alt="IMAGE"></p><h3 id="键值的迭代与字典融合"><a href="#键值的迭代与字典融合" class="headerlink" title="键值的迭代与字典融合"></a>键值的迭代与字典融合</h3><p><img src="/images/resources/E4C4DCF8FAC151BC5DE3BF0BF54A4E22.jpg" alt="IMAGE"></p><h3 id="通过序列创建字典"><a href="#通过序列创建字典" class="headerlink" title="通过序列创建字典"></a>通过序列创建字典</h3><p><img src="/images/resources/FD763C5F0162EAF6F5E9DB2AA875E2AC.jpg" alt="IMAGE"></p><h3 id="对单词进行分类"><a href="#对单词进行分类" class="headerlink" title="对单词进行分类"></a>对单词进行分类</h3><p><img src="/images/resources/5160274AFDB6C56B59E6D2265426568D.jpg" alt="IMAGE"></p><h3 id="关于有效的键类型"><a href="#关于有效的键类型" class="headerlink" title="关于有效的键类型"></a>关于有效的键类型</h3><p><strong>键通常是不可变的标量类型,list是不被允许的</strong></p><p><img src="/images/resources/B428C73E1B1025035FC0E7C5D866631C.jpg" alt="IMAGE"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><em>集合是无序,不可重复的元素的集合,可以理解为字典,只有键没有值,创建集合有2种方式,通过set函数或者使用尖括号set语句</em></p><p><img src="/images/resources/D87BD1A35015B4AF0A8C72053B521F42.jpg" alt="IMAGE"></p><h3 id="集合支持合并-交集-等集合运算"><a href="#集合支持合并-交集-等集合运算" class="headerlink" title="集合支持合并,交集,等集合运算"></a>集合支持合并,交集,等集合运算</h3><p><img src="/images/resources/411E63BDE36BE3DC7D014E840F5F96B5.jpg" alt="IMAGE"></p><h3 id="集合中常用的方法"><a href="#集合中常用的方法" class="headerlink" title="集合中常用的方法"></a>集合中常用的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S.add(e) 在集合中添加一个新的元素e；如果元素已经存在，则不添加</span><br><span class="line">S.remove(e) 从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误</span><br><span class="line">S.discard(e) 从集合S中移除一个元素e;</span><br><span class="line">S.clear() 清空集合内的所有元素</span><br><span class="line">S.copy() 将集合进行一次浅拷贝</span><br><span class="line">S.pop() 从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常</span><br><span class="line">S.update(s2) 用 S与s2得到的全集更新变量S</span><br><span class="line">以下内容可以用运算符操作代替  </span><br><span class="line">S.difference(s2) 用S - s2 运算，返回存在于在S中，但不在s2中的所有元素的集合</span><br><span class="line">S.difference_update(s2) 等同于 S = S - s2</span><br><span class="line">S.intersection(s2) 等同于S &amp; s2</span><br><span class="line">S.intersection_update(s2) 等同于S = S &amp; s2</span><br><span class="line">S.isdisjoint(s2) 如果S与s2交集为空返回True,非空则返回False</span><br><span class="line">S.issubset(s2) 如果S与s2交集为非空返回True,空则返回False</span><br><span class="line">S.issuperset(...) 如果S为s2的子集返回True,否则返回False</span><br><span class="line">S.symmetric_difference(s2) 返回对称补集,等同于 S ^ s2</span><br><span class="line">S.symmetric_difference_update(s2) 用S 与 s2的对称补集更新 S</span><br><span class="line">S.union(s2) 生成 S 与 s2的全集</span><br></pre></td></tr></table></figure><h2 id="列表-集合-字典推导式以及嵌套推导式"><a href="#列表-集合-字典推导式以及嵌套推导式" class="headerlink" title="列表,集合,字典推导式以及嵌套推导式"></a>列表,集合,字典推导式以及嵌套推导式</h2><p><em>语法格式如下:[expr for val in colletion if condition]</em></p><p><img src="/images/resources/19E78E4840C00686CC94012669B01D67.jpg" alt="IMAGE"></p><h3 id="嵌套推导式-稍难"><a href="#嵌套推导式-稍难" class="headerlink" title="嵌套推导式(稍难)"></a>嵌套推导式(稍难)</h3><p><img src="/images/resources/8AF0CADA6EAE4D2EAE8968C87A325DCB.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个数据结构都是语言设计者的精心设计,推导式也是有趣的部分&lt;/p&gt;
&lt;h1 id=&quot;python的数据结构-函数和文件&quot;&gt;&lt;a href=&quot;#python的数据结构-函数和文件&quot; class=&quot;headerlink&quot; title=&quot;python的数据结构,函数和文件&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据结构" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="序列" scheme="https://wangweijie.vip/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="推导式" scheme="https://wangweijie.vip/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python基础语法2</title>
    <link href="https://wangweijie.vip/2020/02/17/2020-02-17-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/"/>
    <id>https://wangweijie.vip/2020/02/17/2020-02-17-数据分析之python基础语法2/</id>
    <published>2020-02-17T08:03:14.622Z</published>
    <updated>2020-02-17T08:19:36.569Z</updated>
    
    <content type="html"><![CDATA[<p>继续前进,这是python基础知识的完结,后续我们将进阶到数据结构,函数和文件</p><h1 id="python数据类型和控制流"><a href="#python数据类型和控制流" class="headerlink" title="python数据类型和控制流"></a>python数据类型和控制流</h1><ol><li>标量类型是什么,如何使用</li><li>控制流式什么,如何使用</li></ol><h1 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h1><p><em>在python的标准库中,有一些内建的类型,用来处理数值数据,字符串,布尔值,日期类型.单值类型成为标量类型</em></p><ol><li>None         表明python里面的控制</li><li>str          字符串类型,有以UTF-8为基准</li><li>bytes        原生的ascii字节</li><li>float        双精度浮点数</li><li>bool         True或false值</li><li>int          任意精度整数</li></ol><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="int可以存储任意大的数"><a href="#int可以存储任意大的数" class="headerlink" title="int可以存储任意大的数"></a>int可以存储任意大的数</h3><p><img src="/images/resources/BCEB5560ADDBFD33CEFA045B1FE0F0CC.jpg" alt="IMAGE"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><em>字符串的表现,可以用单引号和双引号,有换行的可以用三引号</em></p><p><img src="/images/resources/302597F360B28DB47883A85B37C57F71.jpg" alt="IMAGE"></p><p><em>python的字符串是不可变的,不能修改字符串</em></p><p><img src="/images/resources/D58AE7B29D7594EC5F157E8E855256B5.jpg" alt="IMAGE"></p><p><em>许多python对象可以转换为字符串,字符串是一个有序列的unicode字符,可以像列表和元组一样处理(用于切片)</em></p><p><img src="/images/resources/B8B3839B489398E76BBC35787E77A93F.jpg" alt="IMAGE"></p><p><em>用r来表示字符本身,字符串合并,字符串格式化</em></p><p><img src="/images/resources/2DE7E3EAC6027725B02131A41F6BAC1F.jpg" alt="IMAGE"></p><p><em>字节和Unicode</em></p><p><img src="/images/resources/D7C95EC8DABD2198462AD9B0D31094A7.jpg" alt="IMAGE"></p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p><img src="/images/resources/00762643AC8645079A66413E2FF4FFD2.jpg" alt="IMAGE"></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><img src="/images/resources/24C0806F8555931DBFDFD0AC4791BB6C.jpg" alt="IMAGE"></p><h3 id="关于特殊的None"><a href="#关于特殊的None" class="headerlink" title="关于特殊的None"></a>关于特殊的None</h3><p><em>None是python的空值类型,一个函数没有明确的返回值,就默认返回为none</em></p><p><img src="/images/resources/9D1235D92D422E3FB6449AF2FBEB275C.jpg" alt="IMAGE"></p><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p><em>python内建的datetime模块提供了datetime,date,time类型,datetime结合date和time是常使用的</em></p><p><img src="/images/resources/A625D02AB8ECB7A603FAEDFC0DFE59C5.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%a星期的英文单词的缩写：如星期一， 则返回 Mon</span><br><span class="line">%A星期的英文单词的全拼：如星期一，返回 Monday</span><br><span class="line">%b月份的英文单词的缩写：如一月， 则返回 Jan</span><br><span class="line">%B月份的引文单词的缩写：如一月， 则返回 January</span><br><span class="line">%c返回datetime的字符串表示，如03/08/15 23:01:26</span><br><span class="line">%d返回的是当前时间是当前月的第几天</span><br><span class="line">%f微秒的表示： 范围: [0,999999]</span><br><span class="line">%H以24小时制表示当前小时</span><br><span class="line">%I以12小时制表示当前小时</span><br><span class="line">%j返回 当天是当年的第几天 范围[001,366]</span><br><span class="line">%m返回月份 范围[0,12]</span><br><span class="line">%M返回分钟数 范围 [0,59]</span><br><span class="line">%P返回是上午还是下午–AM or PM</span><br><span class="line">%S返回秒数 范围 [0,61]。。。手册说明的</span><br><span class="line">%U返回当周是当年的第几周 以周日为第一天</span><br><span class="line">%W返回当周是当年的第几周 以周一为第一天</span><br><span class="line">%w当天在当周的天数，范围为[0, 6]，6表示星期天</span><br><span class="line">%x日期的字符串表示 ：03/08/15</span><br><span class="line">%X时间的字符串表示 ：23:22:08</span><br><span class="line">%y两个数字表示的年份 15</span><br><span class="line">%Y四个数字表示的年份 2015</span><br><span class="line">%z与utc时间的间隔 （如果是本地时间，返回空字符串）</span><br><span class="line">%Z时区名称（如果是本地时间，返回空字符串）</span><br></pre></td></tr></table></figure><h4 id="时间替换和时间差"><a href="#时间替换和时间差" class="headerlink" title="时间替换和时间差"></a>时间替换和时间差</h4><p><img src="/images/resources/726822CE28F6DAE65F3A4D73632E21CC.jpg" alt="IMAGE"></p><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><p><em>在python中有若干的关键字进行条件逻辑,循环,以及其他控制流操作</em></p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if,elif,else"></a>if,elif,else</h2><p><img src="/images/resources/47EC1A063113F928740E64748596D507.jpg" alt="IMAGE"></p><p><img src="/images/resources/0D86D52E143AA8D621CE3BFFF2856E7C.jpg" alt="IMAGE"></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="contiune"><a href="#contiune" class="headerlink" title="contiune"></a>contiune</h3><p><em>contiune代表着当次循环跳过,继续进行下一次的循环</em></p><p><img src="/images/resources/B8D21E133AE0C982129F7B9098A78436.jpg" alt="IMAGE"></p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><em>break代表着跳出整个循环,并结束循环的过程</em></p><p><img src="/images/resources/6945B396B8E12DBF4E67B8BC838E4C73.jpg" alt="IMAGE"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><img src="/images/resources/6A11357229210DA6A177A2B96B4A543D.jpg" alt="IMAGE"></p><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><p><em>pass是python中的非操作语句,代码块不需要执行任何动作</em></p><p><img src="/images/resources/7953034C9AB1DA6CC980D6029A4F3D35.jpg" alt="IMAGE"></p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p><em>rang函数返回一个迭代器,用来产生一个均匀分布的整数序列</em></p><p><img src="/images/resources/D551EBF7FB2492428B00937256A0BE99.jpg" alt="IMAGE"></p><p><img src="/images/resources/9AE7D1020C0B8A6FDC404A681543A2E9.jpg" alt="IMAGE"></p><p><strong>注意:虽然range可以产生任意大的序号.所耗用的时长和内容比较小</strong></p><p><img src="/images/resources/FC805DC118C375042C3DCEB08C855B1D.jpg" alt="IMAGE"></p><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p><img src="/images/resources/D784B98ADA87F900AF14C9E03FDBB05E.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续前进,这是python基础知识的完结,后续我们将进阶到数据结构,函数和文件&lt;/p&gt;
&lt;h1 id=&quot;python数据类型和控制流&quot;&gt;&lt;a href=&quot;#python数据类型和控制流&quot; class=&quot;headerlink&quot; title=&quot;python数据类型和控制流&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="面向对象" scheme="https://wangweijie.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="语言基础2" scheme="https://wangweijie.vip/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%802/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python基础语法1</title>
    <link href="https://wangweijie.vip/2020/02/16/2020-02-15-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/"/>
    <id>https://wangweijie.vip/2020/02/16/2020-02-15-数据分析之python基础语法1/</id>
    <published>2020-02-16T09:03:27.058Z</published>
    <updated>2020-02-16T09:27:28.389Z</updated>
    
    <content type="html"><![CDATA[<p>从语言思维来牢记基础,对于我们用语言来创造是必要的.</p><h1 id="python语言基础"><a href="#python语言基础" class="headerlink" title="python语言基础"></a>python语言基础</h1><ol><li>语言的艺术</li><li>语言的标准</li></ol><h1 id="语言的艺术"><a href="#语言的艺术" class="headerlink" title="语言的艺术"></a>语言的艺术</h1><blockquote><p>语言的语义</p></blockquote><p><strong>python语言在编写的时候强调的是可读性,简洁,清晰.</strong></p><blockquote><p>语言使用缩进而不是括号</p></blockquote><ol><li>使用tab或者4个空格来组织自己的代码</li><li>增加可读性,简洁</li></ol><p><img src="/images/resources/CABF027DF32BB72242382DCD94299087.jpg" alt="IMAGE"></p><blockquote><p>万物皆对象</p></blockquote><p><strong>在python所构建的数据都是对象,而这个对象拥有一致性也就是目标和目的是一致的</strong></p><p><em>每个数字,字符串,数据结构等都是对象,对象中都有自己的数据类型和内部数据</em></p><blockquote><p>注释</p></blockquote><ol><li>注释注重解释</li></ol><p><img src="/images/resources/249CBE5EA473D4C1AB847514449F4C41.jpg" alt="IMAGE"></p><blockquote><p>函数和对象上的方法调用</p></blockquote><ol><li>定义函数,调用函数,定义对象,对象方法调用</li></ol><p><img src="/images/resources/E78BDD7B30D1C7AE2ADFE5F043151BE3.jpg" alt="IMAGE"></p><h1 id="语言的标准"><a href="#语言的标准" class="headerlink" title="语言的标准"></a>语言的标准</h1><h2 id="变量和参数的传递"><a href="#变量和参数的传递" class="headerlink" title="变量和参数的传递"></a>变量和参数的传递</h2><ol><li>变量即是创建一个名字,而等号右边则是这个变量所代表的含义即是数据</li></ol><p><img src="/images/resources/4CABE6DC8BA41177D66FF4EB6B59E005.jpg" alt="IMAGE"></p><p><em>a和b都是同一个引用,指向的是具体的对象</em></p><h3 id="赋值-绑定-传递对象"><a href="#赋值-绑定-传递对象" class="headerlink" title="赋值=绑定,传递对象"></a>赋值=绑定,传递对象</h3><p><em>赋值称作为绑定,把一个名字绑定给一个对象,变量名可能被称为绑定变量</em></p><p><em>把对象传递给函数的时候,不会复制,而是直接引用</em></p><p><img src="/images/resources/09640B27C22D97CABE93AF55534FCB04.jpg" alt="IMAGE"></p><h3 id="动态引用和强类型"><a href="#动态引用和强类型" class="headerlink" title="动态引用和强类型"></a>动态引用和强类型</h3><p><img src="/images/resources/3E769A6E9B8C16189DBEC3D12804ACF9.jpg" alt="IMAGE"></p><p><em>注意知晓元组类型</em></p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p><em>对象都拥有属性和方法</em></p><p><strong>对象拥有属性和方法</strong></p><p><img src="/images/resources/CF718DF421AB02EDB230CB55BA654466.jpg" alt="IMAGE"></p><h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><p><em>如果不关心对象的类型,只关心是否有些方法和用途,这种称作为鸭子类型,比如你只想关心这个对象是否可以迭代.那么可以</em></p><p><img src="/images/resources/DEF5DA99ABBEBB8E238A50B26AD26348.jpg" alt="IMAGE"></p><h3 id="关于模块的引入"><a href="#关于模块的引入" class="headerlink" title="关于模块的引入"></a>关于模块的引入</h3><p><strong>引入模块有三种形式</strong></p><ol><li>引入整个模块</li><li>引入模块中的某个部分</li><li>引入的模块构建一个别名</li></ol><p><img src="/images/resources/F9DF1ABBA17F2D2FE6522B8482904CB0.jpg" alt="IMAGE"></p><h3 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h3><p><img src="/images/resources/4975BC58F07B92BE658ECB9EBF8CDC02.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a+b : a加b</span><br><span class="line"></span><br><span class="line">a-b :  a减b</span><br><span class="line"></span><br><span class="line">a*b :  a乘b</span><br><span class="line"></span><br><span class="line">a/b : a除以b</span><br><span class="line"></span><br><span class="line">a//b:a整除以b,表示的是返回a除以b的结果的整数部分，而不是证明了a能被b整除。要证明a能被b整除，可以是if a%b==0: 或者a/b＝int 等等</span><br><span class="line"></span><br><span class="line">a**b : a的b次方</span><br><span class="line"></span><br><span class="line">a&amp;b : a与b,对于整数则是按位AND</span><br><span class="line"></span><br><span class="line">a|b :  a或b,对于整数则是按位OR</span><br><span class="line"></span><br><span class="line">a^b :  对布尔值，a异或b,对于整数则是按位异或</span><br><span class="line"></span><br><span class="line">a==b : a和b相等则为Ture</span><br><span class="line"></span><br><span class="line">a!=b: a和b不相等则为Ture</span><br><span class="line"></span><br><span class="line">a&lt;=b,a&lt;b : 小于等于，小于</span><br><span class="line"></span><br><span class="line">a&gt;=b,a&gt;b : 大于等于，大于</span><br><span class="line"></span><br><span class="line">a is b: a和b是同一个python对象则为Ture</span><br><span class="line"></span><br><span class="line">a is not b: a和b不是同一个python对象则为Ture</span><br></pre></td></tr></table></figure><p><strong>在python中is是判断对象,==才是判断对象里面的内容是否一样</strong></p><h3 id="可变和不可编对象"><a href="#可变和不可编对象" class="headerlink" title="可变和不可编对象"></a>可变和不可编对象</h3><p><em>在python的大多数对象中,如:列表,字典,Numpy数组和用户自定义类型都是可变的</em></p><p><img src="/images/resources/7BFA7F926936CAC7642A7A70526A81DE.jpg" alt="IMAGE"></p><p><em>但是对于字符串和元组是不可变的</em></p><p><img src="/images/resources/3CA0B3E0025D142C615B4B917C590694.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从语言思维来牢记基础,对于我们用语言来创造是必要的.&lt;/p&gt;
&lt;h1 id=&quot;python语言基础&quot;&gt;&lt;a href=&quot;#python语言基础&quot; class=&quot;headerlink&quot; title=&quot;python语言基础&quot;&gt;&lt;/a&gt;python语言基础&lt;/h1&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="语言基础" scheme="https://wangweijie.vip/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
      <category term="面向对象" scheme="https://wangweijie.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之常用操作</title>
    <link href="https://wangweijie.vip/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://wangweijie.vip/2020/02/14/2020-02-14-数据分析之常用操作/</id>
    <published>2020-02-14T14:24:13.202Z</published>
    <updated>2020-02-14T14:43:48.642Z</updated>
    
    <content type="html"><![CDATA[<p>熟知一些基本操作,能够加快你的学习效率。</p><h1 id="python日常操作"><a href="#python日常操作" class="headerlink" title="python日常操作"></a>python日常操作</h1><ol><li>python交互工具jupyter_notebook日常使用</li></ol><h1 id="notebook的使用"><a href="#notebook的使用" class="headerlink" title="notebook的使用"></a>notebook的使用</h1><h2 id="命令窗口中输入jupyter-notebook"><a href="#命令窗口中输入jupyter-notebook" class="headerlink" title="命令窗口中输入jupyter notebook"></a>命令窗口中输入jupyter notebook</h2><p><strong>可以在切换到自己要写笔记的目录中</strong></p><p><img src="/images/resources/B53284DA6C7F0A216CDE866AB9B635A6.jpg" alt="IMAGE"></p><h2 id="在notenook中第一次操作"><a href="#在notenook中第一次操作" class="headerlink" title="在notenook中第一次操作"></a>在notenook中第一次操作</h2><p><img src="/images/resources/53861EE5B0A4F68971F8688B99F8D47C.jpg" alt="IMAGE"></p><p><em>注意:我们在使用的时候可以输入关键字的用Tab键进行补全操作</em></p><h3 id="Tab补全说明"><a href="#Tab补全说明" class="headerlink" title="Tab补全说明"></a>Tab补全说明</h3><p>1.Tab补全不是万能的,会尽可能的补全你的代码.按下Tab会搜索已输入的变量(对象,函数等等)</p><p><img src="/images/resources/92C3982A52F89E66DE166DBA8974181E.jpg" alt="IMAGE"></p><p><img src="/images/resources/42AD3F735B677C78D1EE45BC13000A74.jpg" alt="IMAGE"></p><p>2.同样的tab也适应于模块</p><p><img src="/images/resources/C2CCD872AD89C00E60B2F26A4BE7E001.jpg" alt="IMAGE"></p><p>3.同样适用与函数</p><p><img src="/images/resources/B9DE29D92317E46F3F2CEB3F20AA4D99.jpg" alt="IMAGE"></p><h2 id="自省操作"><a href="#自省操作" class="headerlink" title="自省操作"></a>自省操作</h2><p><strong>通过自省可以关注对象的类型</strong></p><p><img src="/images/resources/63C327928CBF5FA6B1D5B905C127226D.jpg" alt="IMAGE"></p><p><strong>针对自定义函数</strong></p><p><img src="/images/resources/5616539F0C89B3FED84CE97BFB5580E1.jpg" alt="IMAGE"></p><p><img src="/images/resources/B8036F487C114A4937BCD63D830106F9.jpg" alt="IMAGE"></p><h2 id="其余额外的命令"><a href="#其余额外的命令" class="headerlink" title="其余额外的命令"></a>其余额外的命令</h2><ol><li>%run命令可以用来执行某一个位置上的py文件</li><li>%load命令可以将代码导入到某一个位置中</li><li>使用Ctrl+C可以随时终端执行中的程序</li></ol><h2 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h2><p><em>魔术命令是指在指令面前加上%,可以是普通任务更快捷,更方便</em></p><p><strong>注意:没下载numpy的话可以执行 pip3 install numpy</strong></p><p><img src="/images/resources/1572ECAE3810677FBED5CAFB70B50E64.jpg" alt="IMAGE"></p><p><img src="/images/resources/B760556E4AF6D26DF497A3189EFDEBB1.jpg" alt="IMAGE"></p><h3 id="常用的魔术命令"><a href="#常用的魔术命令" class="headerlink" title="常用的魔术命令"></a>常用的魔术命令</h3><p>%quickref       显示IPython的快速参考</p><p>%magic          显示所有魔术命令的详细文档</p><p>%debug          从最新的异常跟踪的底部进入交互式调试器</p><p>%hist           打开命令的输入（可选输出）历史</p><p>%pdb            在异常发生后自动进入调试器</p><p>%paste          执行剪贴板中的Python代码</p><p>%cpaste         打开一个特殊的提示符以便于手工粘贴待执行的Python代码</p><p>%reset          删除interactive命名空间中的全部变量、名称</p><p>%page OBJECT    通过分页器打印出OBJECT</p><p>%run script.py  执行Python脚本文件</p><p>%prun statement 通过cProfile执行statement,并打印分析器的输出结果</p><p>%time statement 报告statement的执行时间</p><p>%timeit statement 多次执行statement以计算系综合平均执行时间。对那些执行时间非常小的代码有用</p><p>%who、%who_ls、whos 显示interactive命名空间中定义的变量，信息级别/冗余度可变</p><p>%xdel variable 删除variable,并尝试清除其在IPython中的对象上的一切引用</p><p><strong>后面在使用的时候可以在回过来进行查找</strong></p><h2 id="集成美丽的制图"><a href="#集成美丽的制图" class="headerlink" title="集成美丽的制图"></a>集成美丽的制图</h2><p><em>同样的需要安装制图执行命令:pip3 install matplotlib -i <a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a></em></p><p><img src="/images/resources/9163D86D2540DF9C66DF020EB18231C8.jpg" alt="IMAGE"></p><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p>1.np.random.randn(50) 代表着返回一组标准正态分布的随机值,范围在-1.96～+1.96</p><p><img src="/images/resources/1E7AF91A912DEA021CBF628480AE1DE8.jpg" alt="IMAGE"></p><p>2.numpy.cumsum()代表着累加求和 1 1+2 1+2+3 依次类推</p><p><img src="/images/resources/E16A45C8AC4BB3BF79964275A0CA50DA.jpg" alt="IMAGE"></p><p>3.plt.plot()代表着线性制图</p><p><img src="/images/resources/3FD580DCF3524851AEF1217B9566B66D.jpg" alt="IMAGE"></p><ol start="4"><li>%matplotlib inline 用于省掉plt.show()</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熟知一些基本操作,能够加快你的学习效率。&lt;/p&gt;
&lt;h1 id=&quot;python日常操作&quot;&gt;&lt;a href=&quot;#python日常操作&quot; class=&quot;headerlink&quot; title=&quot;python日常操作&quot;&gt;&lt;/a&gt;python日常操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pyth
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据的禅意" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A6%85%E6%84%8F/"/>
    
      <category term="日常操作" scheme="https://wangweijie.vip/tags/%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/"/>
    
      <category term="初次接触" scheme="https://wangweijie.vip/tags/%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据分析前的准备工作</title>
    <link href="https://wangweijie.vip/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://wangweijie.vip/2020/02/14/2020-02-14-数据分析前的准备工作/</id>
    <published>2020-02-14T08:37:39.234Z</published>
    <updated>2020-02-14T14:24:49.339Z</updated>
    
    <content type="html"><![CDATA[<p>做好数据分析,先好好理解数据和工具</p><h1 id="数据分析前的准备工作"><a href="#数据分析前的准备工作" class="headerlink" title="数据分析前的准备工作"></a>数据分析前的准备工作</h1><ol><li>数据与python</li><li>python处理数据问题上面重要的库</li><li>环境安装以及常用的学习工具与开发工具</li></ol><h1 id="数据与python"><a href="#数据与python" class="headerlink" title="数据与python"></a>数据与python</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><strong>数据这个词是抽象的,我们如何认识数据,有2个点我们需要我们作为前提</strong></p><ol><li>数据有可能代表是世界,人等一切事物,及时杂乱无序,但是也在当中存在规律</li><li>从数据中找到合适的规律和特点,那么我们需要结构化数据。那么结构化的数据有哪些？比如:表格类型的数据,多维数组,通过关键列构建的表格类型数据等</li></ol><p><strong><em>注意:大部分数据集都能转换成结构化的数据,结构化只是一种形式,更多的还是人自主的思维能力.比如:一组新闻文章里面的内容可以提取出词频表,而这个表就可以对于以后的情感进行分析</em></strong></p><h2 id="为什么选择用python"><a href="#为什么选择用python" class="headerlink" title="为什么选择用python"></a>为什么选择用python</h2><ol><li>python作为胶水语言可以随时沾和随时撕掉</li><li>python语言在设计的过程中就是构建以数据为中心的应用型数据</li><li>python适用于构建分析应用和一些常见的通用系统(日常的管理系统)</li></ol><p><strong>注:python作为一种解释性语言没有编译性语言的运行时间效率要高.这也是python的不足之处</strong></p><h1 id="python重要的库"><a href="#python重要的库" class="headerlink" title="python重要的库"></a>python重要的库</h1><blockquote><p>Numpy (数值处理)</p></blockquote><ol><li>可以构建快速高效的多维数组对象(ndarray)</li><li>可以用于对数组执行数学运算和计算.提供了大量的函数</li><li>可以用于读写硬盘中基于数组的数据集的工具</li><li>常见的线性代数等包含随机数的生成</li></ol><blockquote><p>pandas (面板数据)</p></blockquote><ol><li>能够处理大量结构化数据</li><li>常用的2个对象一个是DataFrame和Series,分别是面向列的二维表结构以及一个一维的标签化数组对象</li><li>提供复杂精细的索引功能,能够快速的完成重塑,切片,切块,聚合以及选取数据子集等操作</li></ol><blockquote><p>matplotlib</p></blockquote><ol><li>绘制图表以及其他二维数据可视化的工具</li></ol><blockquote><p>ipython与jupyter</p></blockquote><ol><li>2个都是良好的交互工具</li><li>ipython用于运行，调试，测试等操作</li><li>jupyter良好的学习笔记工具</li></ol><blockquote><p>Scipy与scikit-learn与statsmodels</p></blockquote><ol><li>Scipy解决计算中各种标准问题域</li><li>scikit-learn机器学习的工具包,偏重于预测</li><li>statsmodels统计分析包,偏重于统计与推断</li></ol><h1 id="环境安装以及常用的学习工具"><a href="#环境安装以及常用的学习工具" class="headerlink" title="环境安装以及常用的学习工具"></a>环境安装以及常用的学习工具</h1><h2 id="python环境的安装"><a href="#python环境的安装" class="headerlink" title="python环境的安装"></a>python环境的安装</h2><p><strong><em>python环境的安装不在进行说明,只是需要注意的是检查不同系统的变量设置,macos系统比较特殊,需要检查.bash_prifile中是否添加</em></strong></p><blockquote><p>ipython</p></blockquote><p><img src="/images/resources/0F0228205486739552A6EC6780BA2B68.jpg" alt="IMAGE"></p><blockquote><p>jupyter</p></blockquote><p>1.更新pip<br>python -m pip install -U pip setuptools</p><p>2.安装,使用国内源满速安装<br>pip install jupyter -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>3.在命令中直接jupyter notebook</p><p><img src="/images/resources/2A5E8FE12AE7421DA99315DFC30983A7.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做好数据分析,先好好理解数据和工具&lt;/p&gt;
&lt;h1 id=&quot;数据分析前的准备工作&quot;&gt;&lt;a href=&quot;#数据分析前的准备工作&quot; class=&quot;headerlink&quot; title=&quot;数据分析前的准备工作&quot;&gt;&lt;/a&gt;数据分析前的准备工作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;数据与pyth
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据的禅意" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A6%85%E6%84%8F/"/>
    
  </entry>
  
</feed>
