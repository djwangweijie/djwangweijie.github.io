<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael_Wang</title>
  
  <subtitle>JavaAndKafka_Streams</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://djwangweijie.github.io/"/>
  <updated>2021-04-02T00:43:35.684Z</updated>
  <id>https://djwangweijie.github.io/</id>
  
  <author>
    <name>Michael_Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习平凡之路七</title>
    <link href="https://djwangweijie.github.io/2021/04/01/2021-04-02-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E4%B8%83/"/>
    <id>https://djwangweijie.github.io/2021/04/01/2021-04-02-机器学习平凡之路七/</id>
    <published>2021-04-01T02:03:25.064Z</published>
    <updated>2021-04-02T00:43:35.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习平凡之路七"><a href="#机器学习平凡之路七" class="headerlink" title="机器学习平凡之路七"></a>机器学习平凡之路七</h1><ol><li>循环神经网络</li><li>实例操作</li></ol><h2 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h2><h3 id="序列数据"><a href="#序列数据" class="headerlink" title="序列数据"></a>序列数据</h3><p><strong>序列数据，是特征的先后顺序对于数据的解释和处理十分重要的数据</strong></p><p><u>语音数据,文本数据都是序列数据。比如一句话放在前面或者放在后面，会使文意有很大的不同</u></p><p>文本数据集的形状为3D张量(样本,序号,字编码)</p><p>时间序列数据，按时间顺序进行收集，用于描述现象随时间变化的情况，如果不记录时间戳，数字本身就没有意义</p><p>序列数据可以应用的场景:</p><ol><li>文档分类,识别新闻的主题和书的类型，作者等</li><li>文档或时间序列对比，比如估测两个文档或两支股票的相关程度</li><li>文字情感分析，比如评论等情感划分为正面或者负面</li><li>时间序列预测，预测某地天气的历史数据来预测未来天气。</li><li>序列到序列的学习，比如两种语言之间的翻译</li></ol><p><em>使用循环神经网络专门处理序列数据而生。它是一种具有记忆功能的神经网络，特点是能够把刚刚处理过的信息放进神经网络内存中。</em></p><h3 id="原始文本如何转化为向量数据"><a href="#原始文本如何转化为向量数据" class="headerlink" title="原始文本如何转化为向量数据"></a>原始文本如何转化为向量数据</h3><blockquote><p>通过One-hot编码分词</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.text <span class="keyword">import</span> Tokenizer</span><br><span class="line">words = [<span class="string">'laowang has a wechat account'</span>, <span class="string">'he is no a nice persion'</span>,<span class="string">'be careful.'</span>]</span><br><span class="line">tokenizer = Tokenizer(num_words=<span class="number">30</span>) <span class="comment"># 词典大小设定为30个单词</span></span><br><span class="line">tokenizer.fit_on_texts(words) <span class="comment"># 根据句子编辑词典</span></span><br><span class="line">sequences = tokenizer.texts_to_sequences(words) <span class="comment"># 句子根据词典进行序号编码</span></span><br><span class="line">ont_hot_matrix = tokenizer.texts_to_matrix(words,mode=<span class="string">'binary'</span>) <span class="comment"># 进行ont-hot编码</span></span><br><span class="line">word_index = tokenizer.word_index</span><br><span class="line">print(word_index)</span><br><span class="line">print(sequences)</span><br><span class="line">print(ont_hot_matrix)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210402/image-20210401103103978.png" alt="image-20210401103103978"></p><p><strong>会存在一个问题本来2个单词，增加到了30维度。一般也就是常人说的维度灾难。解决这个问题，就是使用词嵌入。降低其维度，让本来的0，1本成包含一个意义的数字</strong></p><h2 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h2><blockquote><p>用Tokennizer进行分词</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df_train = pd.read_csv(<span class="string">'Reviews.csv'</span>)</span><br><span class="line">df_train.head()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210402/image-20210401104721082.png" alt="image-20210401104721082"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.text <span class="keyword">import</span> Tokenizer</span><br><span class="line">X_train_lst =df_train[<span class="string">'Review Text'</span>].fillna(<span class="string">''</span>).values</span><br><span class="line">y_train = df_train[<span class="string">'Rating'</span>].values</span><br><span class="line">dictionary_size = <span class="number">20000</span></span><br><span class="line">tokenizer = Tokenizer(num_words=dictionary_size)</span><br><span class="line">tokenizer.fit_on_texts(X_train_lst)</span><br><span class="line">X_train_tokenized_lst = tokenizer.texts_to_sequences(X_train_lst)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">word_per_comment = [len(comment) <span class="keyword">for</span> comment <span class="keyword">in</span> X_train_tokenized_lst]</span><br><span class="line">plt.hist(word_per_comment,bins = np.arange(<span class="number">0</span>,<span class="number">500</span>,<span class="number">10</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210402/image-20210401112743777.png" alt="image-20210401112743777"></p><p>大部分的评论长度都在120以内</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.sequence <span class="keyword">import</span> pad_sequences</span><br><span class="line">max_comment_length = <span class="number">120</span></span><br><span class="line">X_train = pad_sequences(X_train_tokenized_lst, maxlen=max_comment_length)</span><br><span class="line">print(X_train)</span><br></pre></td></tr></table></figure><p><u>通过pad_sequences截取成相同的长度，长度大于120截断，小于120，填充无意义的0值</u></p><blockquote><p>构建SimpleRNN</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line">embedding_vecor_length = <span class="number">60</span></span><br><span class="line">rnn = tf.keras.Sequential()</span><br><span class="line">rnn.add(layers.Embedding(dictionary_size,embedding_vecor_length,</span><br><span class="line">                         input_length=max_comment_length))</span><br><span class="line">rnn.add(layers.SimpleRNN(<span class="number">100</span>))</span><br><span class="line">rnn.add(layers.Dense(<span class="number">10</span>,activation=<span class="string">'relu'</span>))</span><br><span class="line">rnn.add(layers.Dense(<span class="number">6</span>,activation=<span class="string">'softmax'</span>))</span><br><span class="line">rnn.compile(loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">            optimizer=<span class="string">'adam'</span>,</span><br><span class="line">            metrics=[<span class="string">'acc'</span>])</span><br><span class="line">rnn.summary()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210402/image-20210401114956156.png" alt="image-20210401114956156"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history = rnn.fit(X_train,y_train,</span><br><span class="line">                 validation_split=<span class="number">0.3</span>,</span><br><span class="line">                 epochs=<span class="number">10</span>,</span><br><span class="line">                 batch_size=<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210402/image-20210401115658875.png" alt="image-20210401115658875"></p><p><a href="https://blog.csdn.net/weixin_42608414/article/details/89856566" target="_blank" rel="noopener">可以参考的文章</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = rnn.predict(X_test[<span class="number">1</span>])</span><br><span class="line">rs = y.argmax(axis=<span class="number">1</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>预测结果代码使用</p><p><a href="https://blog.csdn.net/suiyueruge1314/article/details/104527641" target="_blank" rel="noopener">不同损失函数的区别</a></p><h2 id="定义恒星是否有行星环绕"><a href="#定义恒星是否有行星环绕" class="headerlink" title="定义恒星是否有行星环绕"></a>定义恒星是否有行星环绕</h2><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.utils <span class="keyword">import</span> shuffle <span class="comment"># 导入乱序工具</span></span><br><span class="line">df_train = shuffle(df_train) <span class="comment"># 乱序训练集</span></span><br><span class="line">df_test = shuffle(df_test)  <span class="comment"># 乱序测试集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X_train = df_train.iloc[:, <span class="number">1</span>:].values <span class="comment"># 构建特征集（训练）</span></span><br><span class="line">y_train = df_train.iloc[:, <span class="number">0</span>].values <span class="comment"># 构建标签集（训练）</span></span><br><span class="line">X_test = df_test.iloc[:, <span class="number">1</span>:].values <span class="comment"># 构建特征集（测试）</span></span><br><span class="line">y_test = df_test.iloc[:, <span class="number">0</span>].values <span class="comment"># 构建标签集（测试）</span></span><br><span class="line">y_train = y_train - <span class="number">1</span> <span class="comment"># 标签转换成惯用的(0，1)分类</span></span><br><span class="line">y_test = y_test - <span class="number">1</span> <span class="comment"># 标签转换成惯用的(0，1)分类</span></span><br><span class="line"><span class="keyword">print</span> (X_train) <span class="comment"># 打印训练集中的特征</span></span><br><span class="line"><span class="keyword">print</span> (y_train) <span class="comment"># 打印训练集中的标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential <span class="comment"># 导入序贯模型</span></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers <span class="comment"># 导入所有类型的层</span></span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam <span class="comment"># 导入优化器</span></span><br><span class="line">model = Sequential() <span class="comment"># 序贯模型</span></span><br><span class="line">model.add(layers.Conv1D(<span class="number">32</span>, kernel_size=<span class="number">10</span>, strides=<span class="number">4</span>,</span><br><span class="line">          input_shape=(<span class="number">3197</span>, <span class="number">1</span>))) <span class="comment"># 1D CNN层</span></span><br><span class="line">model.add(layers.MaxPooling1D(pool_size=<span class="number">4</span>, strides=<span class="number">2</span>)) <span class="comment"># 池化层</span></span><br><span class="line">model.add(layers.GRU(<span class="number">256</span>, return_sequences=<span class="literal">True</span>)) <span class="comment"># 关键，GRU层够要大</span></span><br><span class="line">model.add(layers.Flatten()) <span class="comment"># 展平</span></span><br><span class="line">model.add(layers.Dropout(<span class="number">0.5</span>)) <span class="comment"># Dropout层</span></span><br><span class="line">model.add(layers.BatchNormalization()) <span class="comment"># 批标准化   </span></span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)) <span class="comment"># 分类输出层</span></span><br><span class="line">opt = Adam(lr=<span class="number">0.0001</span>, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>, decay=<span class="number">0.01</span>) <span class="comment"># 设置优化器</span></span><br><span class="line">model.compile(optimizer=opt, <span class="comment"># 优化器</span></span><br><span class="line">              loss = <span class="string">'binary_crossentropy'</span>, <span class="comment"># 交叉熵</span></span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>]) <span class="comment"># 准确率</span></span><br><span class="line">              </span><br><span class="line">history = model.fit(X_train,y_train, <span class="comment"># 训练集</span></span><br><span class="line">                    validation_split = <span class="number">0.2</span>, <span class="comment"># 部分训练集数据拆分成验证集</span></span><br><span class="line">                    batch_size = <span class="number">128</span>, <span class="comment"># 批量大小</span></span><br><span class="line">                    epochs = <span class="number">4</span>, <span class="comment"># 训练轮次</span></span><br><span class="line">                    shuffle = <span class="literal">True</span>) <span class="comment"># 乱序</span></span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report <span class="comment"># 分类报告</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix <span class="comment"># 混淆矩阵</span></span><br><span class="line">y_prob = model.predict(X_test) <span class="comment"># 对测试集进行预测</span></span><br><span class="line">y_pred =  np.where(y_prob &gt; <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0</span>) <span class="comment">#将概率值转换成真值</span></span><br><span class="line">cm = confusion_matrix(y_pred, y_test)</span><br><span class="line">print(<span class="string">'Confusion matrix:\n'</span>, cm, <span class="string">'\n'</span>)</span><br><span class="line">print(classification_report(y_pred, y_test))</span><br><span class="line"></span><br><span class="line">y_pred =  np.where(y_prob &gt; <span class="number">0.15</span>, <span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 进行阈值调整</span></span><br><span class="line">cm = confusion_matrix(y_pred, y_test) </span><br><span class="line">print(<span class="string">'Confusion matrix:\n'</span>, cm, <span class="string">'\n'</span>)</span><br><span class="line">print(classification_report(y_pred, y_test))</span><br></pre></td></tr></table></figure><p>以上是CNN和RNN的组合</p><h3 id="函数式API构建"><a href="#函数式API构建" class="headerlink" title="函数式API构建"></a>函数式API构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam <span class="comment"># 导入Adam优化器</span></span><br><span class="line">input = layers.Input(shape=(<span class="number">3197</span>, <span class="number">1</span>)) <span class="comment"># Input</span></span><br><span class="line"><span class="comment"># 通过函数式API构建模型</span></span><br><span class="line">x = layers.Conv1D(<span class="number">32</span>, kernel_size=<span class="number">10</span>, strides=<span class="number">4</span>)(input)</span><br><span class="line">x = layers.MaxPooling1D(pool_size=<span class="number">4</span>, strides=<span class="number">2</span>)(x)</span><br><span class="line">x = layers.GRU(<span class="number">256</span>, return_sequences=<span class="literal">True</span>)(x)</span><br><span class="line">x = layers.Flatten()(x)</span><br><span class="line">x = layers.Dropout(<span class="number">0.5</span>)(x)</span><br><span class="line">x = layers.BatchNormalization()(x)</span><br><span class="line">output = layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)(x) <span class="comment"># Output</span></span><br><span class="line">model = Model(input, output) </span><br><span class="line">model.summary() <span class="comment"># 显示模型的输出</span></span><br><span class="line">opt = Adam(lr=<span class="number">0.0001</span>, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>, decay=<span class="number">0.01</span>) <span class="comment"># 设置优化器</span></span><br><span class="line">model.compile(optimizer=opt, <span class="comment"># 优化器</span></span><br><span class="line">              loss = <span class="string">'binary_crossentropy'</span>, <span class="comment"># 交叉熵</span></span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>]) <span class="comment"># 准确率</span></span><br></pre></td></tr></table></figure><h3 id="构建多头网络"><a href="#构建多头网络" class="headerlink" title="构建多头网络"></a>构建多头网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建正向网络</span></span><br><span class="line">input_1 = layers.Input(shape=(<span class="number">3197</span>, <span class="number">1</span>))</span><br><span class="line">x = layers.GRU(<span class="number">32</span>, return_sequences=<span class="literal">True</span>)(input_1)</span><br><span class="line">x = layers.Flatten()(x)</span><br><span class="line">x = layers.Dropout(<span class="number">0.5</span>)(x)</span><br><span class="line"><span class="comment"># 构建逆向网络</span></span><br><span class="line">input_2 = layers.Input(shape=(<span class="number">3197</span>, <span class="number">1</span>))</span><br><span class="line">y = layers.GRU(<span class="number">32</span>, return_sequences=<span class="literal">True</span>)(input_2)</span><br><span class="line">y = layers.Flatten()(y)</span><br><span class="line">y = layers.Dropout(<span class="number">0.5</span>)(y)</span><br><span class="line"><span class="comment"># 连接两个网络</span></span><br><span class="line">z = layers.concatenate([x, y])</span><br><span class="line">output = layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)(z)</span><br><span class="line">model = Model([input_1,input_2], output)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p><a href="https://www.jb51.net/article/189193.htm" target="_blank" rel="noopener">多输入输出参考文章</a></p><blockquote><p>需要注意的点</p></blockquote><ol><li>数据集在升维之前,数据集进行逆序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_train_rev = [X[::<span class="number">-1</span>] <span class="keyword">for</span> X <span class="keyword">in</span> X_train] <span class="comment"># 数据逆序之后再进行升阶</span></span><br></pre></td></tr></table></figure><ol start="2"><li>训练模型时同时指定正序和逆序数据集作为输入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model.fit([X_train, X_train_rev],y_train,</span><br><span class="line"> validation_split = 0.2</span><br><span class="line"> batch_size =128</span><br><span class="line"> epochs =1</span><br><span class="line"> shuffle =True</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习平凡之路七&quot;&gt;&lt;a href=&quot;#机器学习平凡之路七&quot; class=&quot;headerlink&quot; title=&quot;机器学习平凡之路七&quot;&gt;&lt;/a&gt;机器学习平凡之路七&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;循环神经网络&lt;/li&gt;
&lt;li&gt;实例操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="多元分类" scheme="https://djwangweijie.github.io/tags/%E5%A4%9A%E5%85%83%E5%88%86%E7%B1%BB/"/>
    
      <category term="高阶" scheme="https://djwangweijie.github.io/tags/%E9%AB%98%E9%98%B6/"/>
    
      <category term="RNN神经网络" scheme="https://djwangweijie.github.io/tags/RNN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="单元神经元" scheme="https://djwangweijie.github.io/tags/%E5%8D%95%E5%85%83%E7%A5%9E%E7%BB%8F%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>机器学习平凡之路六</title>
    <link href="https://djwangweijie.github.io/2021/03/31/2021-04-01-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E5%85%AD/"/>
    <id>https://djwangweijie.github.io/2021/03/31/2021-04-01-机器学习平凡之路六/</id>
    <published>2021-03-31T00:28:56.025Z</published>
    <updated>2021-04-01T08:23:59.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习平凡之路六"><a href="#机器学习平凡之路六" class="headerlink" title="机器学习平凡之路六"></a>机器学习平凡之路六</h1><ol><li>卷积层神经网络</li><li>图像识别</li></ol><h3 id="卷积层神经网络"><a href="#卷积层神经网络" class="headerlink" title="卷积层神经网络"></a>卷积层神经网络</h3><p><strong>卷积层神经网络称作为卷积网络,与普通的神经网络是，卷积层的神经元中只覆盖输入特征局部范围的单元,其中的过滤器可以做到对图像关键特征的提取。卷积层神经网络在图像识别上有很好的效果</strong></p><h2 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h2><p><strong>猫狗分类本质就是二元分类的问题。对单一种类细分就是多元分类问题。</strong></p><h3 id="回顾卷积网络代码"><a href="#回顾卷积网络代码" class="headerlink" title="回顾卷积网络代码"></a>回顾卷积网络代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential, load_model</span><br><span class="line">model = tf.keras.Sequential()  <span class="comment"># 序贯模型</span></span><br><span class="line">model.add(layers.Conv2D(</span><br><span class="line">                       filters=<span class="number">32</span>, <span class="comment"># 添加Conv2D层，指定过滤器的个数,即通道数</span></span><br><span class="line">                       kernel_size=(<span class="number">3</span>,<span class="number">3</span>), <span class="comment"># 指定卷积核的大小</span></span><br><span class="line">                       activation=<span class="string">'relu'</span>, <span class="comment"># 指定激活函数</span></span><br><span class="line">                       input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>))) <span class="comment"># 指定输入数据样本张量的类型</span></span><br><span class="line">model.add(layers.MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 添加2D层</span></span><br><span class="line">model.add(layers.Conv2D(<span class="number">64</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>)) <span class="comment"># 添加Conv2D层</span></span><br><span class="line">model.add(layers.MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 再次添2D层</span></span><br><span class="line">model.add(layers.Dropout(<span class="number">0.25</span>)) <span class="comment"># 添加Dropout层</span></span><br><span class="line">model.add(layers.Flatten()) <span class="comment"># 添加展平层</span></span><br><span class="line">model.add(layers.Dense(<span class="number">128</span>,activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dropout(<span class="number">0.5</span>)) <span class="comment"># 添加Dropout层</span></span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>))</span><br><span class="line">model.compile(optimizer = <span class="string">'adam'</span>, <span class="comment"># 优化器</span></span><br><span class="line">              loss = <span class="string">'categorical_crossentropy'</span>, <span class="comment">#损失函数 </span></span><br><span class="line">              metrics = [<span class="string">'acc'</span>]) <span class="comment"># 评估指标</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331093529751.png" alt="image-20210331093529751"></p><blockquote><p>同样的生成图形</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG <span class="comment"># 实现神经网络结构的图形化显示</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.utils <span class="keyword">import</span>  model_to_dot</span><br><span class="line">SVG(model_to_dot(model, show_shapes=<span class="literal">True</span>,show_layer_names=<span class="literal">True</span>, dpi=<span class="number">65</span>).create(prog=<span class="string">'dot'</span>, format=<span class="string">'svg'</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331093816250.png" alt="image-20210331093816250"></p><p><img src="/images/resources/20210401/image-20210331093835633.png" alt="image-20210331093835633"></p><p><img src="/images/resources/20210401/image-20210331093928589.png" alt="image-20210331093928589"></p><ol><li>分为了三大层次构建</li><li>输入层，特层学习(卷积和最大池化)，分类学习(展平层,全连接,softmax)</li></ol><h2 id="卷积层的原理"><a href="#卷积层的原理" class="headerlink" title="卷积层的原理"></a>卷积层的原理</h2><p><strong>卷积网络是通过Conv2D层中的过滤器用卷积计算对图像的核心特性进行抽取，提高图像处理的效率和准确率</strong></p><p>其余原理可以自行百度学习</p><h2 id="利用卷积网络给天气进行分类"><a href="#利用卷积网络给天气进行分类" class="headerlink" title="利用卷积网络给天气进行分类"></a>利用卷积网络给天气进行分类</h2><p>数据说明:天气分为4种多云,雨天,晴天,日落</p><ol><li>准备数据集,把不同目录中图像全部整理到同一个特征张量数组中，进行乱序排列。输入结构应该是4D张量(样本,图像高度，图像宽度，颜色深度)</li><li>对应的获取目录名整理到一个同样长度的1D标签张量中,次序与特征张量一致</li></ol><blockquote><p>准备图像数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.listdir(<span class="string">'dataset2'</span>))  <span class="comment"># 显示数据集的目录</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331102747618.png" alt="image-20210331102747618"></p><blockquote><p>处理图像数据到X和y中(pip install opencv-python)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dir = <span class="string">'dataset2/'</span></span><br><span class="line">cloudy_dir = dir+<span class="string">'cloudy'</span></span><br><span class="line">rain_dir = dir+<span class="string">'rain'</span></span><br><span class="line">shine_dir = dir+<span class="string">'shine'</span></span><br><span class="line">sunrise_dir = dir+<span class="string">'sunrise'</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">X = []</span><br><span class="line">y_label = []</span><br><span class="line">imgsize = <span class="number">150</span></span><br><span class="line"><span class="comment"># 定义一个函数读入图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">training_data</span><span class="params">(label, data_dir)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> os.listdir(data_dir):</span><br><span class="line">        print(<span class="string">'正在读入:'</span>,data_dir)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = os.path.join(data_dir, img)</span><br><span class="line">            img = cv2.imread(path, cv2.IMREAD_COLOR)</span><br><span class="line">            img = cv2.resize(img, (imgsize, imgsize))</span><br><span class="line">            X.append(np.array(img))</span><br><span class="line">            y_label.append(str(label))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(path)</span><br><span class="line">            print(str(e))</span><br><span class="line">training_data(<span class="string">'cloudy'</span>,cloudy_dir)</span><br><span class="line">training_data(<span class="string">'rain'</span>,rain_dir)</span><br><span class="line">training_data(<span class="string">'shine'</span>,shine_dir)</span><br><span class="line">training_data(<span class="string">'sunrise'</span>,sunrise_dir) <span class="comment"># 如果cv在读有损失的图片可能会报错</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331105157531.png" alt="image-20210331105157531"></p><blockquote><p>构建X,y的张量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"><span class="keyword">from</span> keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line">label_encoder = LabelEncoder()</span><br><span class="line">y = label_encoder.fit_transform(y_label) <span class="comment"># 标签编码</span></span><br><span class="line">y = to_categorical(y,<span class="number">10</span>) <span class="comment">#将标签转化为One-hot编码</span></span><br><span class="line">X = np.array(X)</span><br><span class="line">X = X/<span class="number">255</span> <span class="comment"># X进行归一化处理</span></span><br><span class="line">print(<span class="string">'X张量的形状:'</span>,X.shape)</span><br><span class="line">print(<span class="string">'X一个数据'</span>,X[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'y张量的形状:'</span>,y.shape)</span><br><span class="line">print(<span class="string">'y一个数据'</span>,y[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331110059562.png" alt="image-20210331110059562"></p><p><img src="/images/resources/20210401/image-20210331110113696.png" alt="image-20210331110113696"></p><blockquote><p>随机显示图片</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rdm</span><br><span class="line">fig, ax = plt.subplots(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">fig.set_size_inches(<span class="number">15</span>,<span class="number">15</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        r = rdm.randint(<span class="number">0</span>,len(X))</span><br><span class="line">        ax[i,j].imshow(X[r])</span><br><span class="line">        ax[i,j].set_title(<span class="string">'tq:'</span>+y_label[r])</span><br><span class="line">plt.tight_layout()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331110836357.png" alt="image-20210331110836357"></p><blockquote><p>拆分数据集</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train,y_test = train_test_split(X,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>构建简单的卷积网络</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential, load_model</span><br><span class="line">cnn = tf.keras.Sequential()  <span class="comment"># 序贯模型</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">32</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>,</span><br><span class="line">                     input_shape=(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>)))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">64</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">128</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">128</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Flatten())</span><br><span class="line">cnn.add(layers.Dense(<span class="number">512</span>,activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>))</span><br><span class="line">cnn.compile(loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">            optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">            metrics=[<span class="string">'acc'</span>])</span><br><span class="line">history = cnn.fit(X_train,y_train,</span><br><span class="line">                 epochs=<span class="number">10</span>,</span><br><span class="line">                 batch_size=<span class="number">256</span>,</span><br><span class="line">                 validation_data=(X_test,y_test)</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331115256984.png" alt="image-20210331115256984"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_history</span><span class="params">(history)</span>:</span> <span class="comment"># 显示训练过程的学习曲线</span></span><br><span class="line">    loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">    val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line">    epochs = range(<span class="number">1</span>, len(loss) + <span class="number">1</span>)</span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.plot(epochs, loss, <span class="string">'bo'</span>, label=<span class="string">'Training loss'</span>)</span><br><span class="line">    plt.plot(epochs, val_loss, <span class="string">'b'</span>, label=<span class="string">'Validation loss'</span>)</span><br><span class="line">    plt.title(<span class="string">'Training and validation loss'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Epochs'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Loss'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    acc = history.history[<span class="string">'acc'</span>]</span><br><span class="line">    val_acc = history.history[<span class="string">'val_acc'</span>]</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.plot(epochs, acc, <span class="string">'bo'</span>, label=<span class="string">'Training acc'</span>)</span><br><span class="line">    plt.plot(epochs, val_acc, <span class="string">'b'</span>, label=<span class="string">'Validation acc'</span>)</span><br><span class="line">    plt.title(<span class="string">'Training and validation accuracy'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Epochs'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line">show_history(history)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331115356781.png" alt="image-20210331115356781"></p><p><u>我们可以看到在图像识别的线性上面还是比较欠缺</u></p><h2 id="优化学习"><a href="#优化学习" class="headerlink" title="优化学习"></a>优化学习</h2><h3 id="优化学习速率"><a href="#优化学习速率" class="headerlink" title="优化学习速率"></a>优化学习速率</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential, load_model</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> optimizers</span><br><span class="line">cnn = tf.keras.Sequential()  <span class="comment"># 序贯模型</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">32</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>,</span><br><span class="line">                     input_shape=(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>)))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">64</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">128</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">128</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Flatten())</span><br><span class="line">cnn.add(layers.Dense(<span class="number">512</span>,activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>))</span><br><span class="line">cnn.compile(loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">            optimizer=optimizers.Adam(lr=<span class="number">0.02</span>),</span><br><span class="line">            metrics=[<span class="string">'acc'</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331121023016.png" alt="image-20210331121023016"></p><p><strong>其实还是不够完美,更多详情参考一下Adam</strong></p><h3 id="第二个添加Dropout层"><a href="#第二个添加Dropout层" class="headerlink" title="第二个添加Dropout层"></a>第二个添加Dropout层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential, load_model</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> optimizers</span><br><span class="line">cnn = tf.keras.Sequential()  <span class="comment"># 序贯模型</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">32</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>,</span><br><span class="line">                     input_shape=(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>)))</span><br><span class="line">cnn.add(layers.Dropout(<span class="number">0.5</span>)) </span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">64</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.Dropout(<span class="number">0.5</span>)) </span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">128</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Conv2D(<span class="number">128</span>,(<span class="number">3</span>,<span class="number">3</span>),activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.MaxPooling2D((<span class="number">2</span>,<span class="number">2</span>))) <span class="comment"># 最大池化层</span></span><br><span class="line">cnn.add(layers.Flatten())</span><br><span class="line">cnn.add(layers.Dropout(<span class="number">0.5</span>)) </span><br><span class="line">cnn.add(layers.Dense(<span class="number">512</span>,activation=<span class="string">'relu'</span>))</span><br><span class="line">cnn.add(layers.Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>))</span><br><span class="line">cnn.compile(loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">            optimizer=optimizers.Adam(),</span><br><span class="line">            metrics=[<span class="string">'acc'</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331130706617.png" alt="image-20210331130706617"></p><p><strong>从线性上面看,偏差还是不够</strong></p><h3 id="使用数据增强"><a href="#使用数据增强" class="headerlink" title="使用数据增强"></a>使用数据增强</h3><p><em>在keras中,有一个imageData-Generator，通过对图像的平移，颠倒等一些列多种手段，增大数据集样本数</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line">augs_gen = ImageDataGenerator(</span><br><span class="line">           featurewise_center=<span class="literal">False</span>,</span><br><span class="line">           samplewise_center=<span class="literal">False</span>,         </span><br><span class="line">           featurewise_std_normalization=<span class="literal">False</span>,          </span><br><span class="line">           samplewise_std_normalization=<span class="literal">False</span>,  </span><br><span class="line">           zca_whitening=<span class="literal">False</span>, </span><br><span class="line">           rotation_range=<span class="number">10</span>,  </span><br><span class="line">           zoom_range = <span class="number">0.1</span>, </span><br><span class="line">           width_shift_range=<span class="number">0.2</span>,  </span><br><span class="line">           height_shift_range=<span class="number">0.2</span>,</span><br><span class="line">           horizontal_flip=<span class="literal">True</span>,  </span><br><span class="line">           vertical_flip=<span class="literal">False</span>) </span><br><span class="line">augs_gen.fit(X_train) <span class="comment"># 针对训练集拟合数据增强器</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">history = cnn.fit( <span class="comment"># 使用fit_generator</span></span><br><span class="line">    augs_gen.flow(X_train,y_train,batch_size=<span class="number">16</span>), <span class="comment"># 增强后的训练集</span></span><br><span class="line">    validation_data  = (X_test,y_test), <span class="comment"># 指定验证集</span></span><br><span class="line">    validation_steps = <span class="number">100</span>, <span class="comment"># 指定验证步长</span></span><br><span class="line">    steps_per_epoch  = <span class="number">100</span>, <span class="comment"># 指定每轮步长</span></span><br><span class="line">    epochs = <span class="number">10</span>,  <span class="comment"># 指定轮次</span></span><br><span class="line">    verbose = <span class="number">1</span>) <span class="comment"># 指定是否显示训练过程中的信息</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331132722608.png" alt="image-20210331132722608"></p><p><u>总的来说，效果其实还是比较一般</u></p><h3 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential, load_model</span><br><span class="line">cnn.save(<span class="string">'tq.h5'</span>)</span><br><span class="line"><span class="comment">## del cnn</span></span><br><span class="line">cnn = load_model(<span class="string">'tq.h5'</span>)</span><br></pre></td></tr></table></figure><p>可以保存模型</p><h3 id="绘制特征通道"><a href="#绘制特征通道" class="headerlink" title="绘制特征通道"></a>绘制特征通道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 导入matplotlib</span></span><br><span class="line">model = load_model(<span class="string">'tq.h5'</span>)<span class="comment"># 载入刚才保存的模型</span></span><br><span class="line"><span class="comment"># 绘制特征通道</span></span><br><span class="line">layer_outputs = [layer.output <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers[:<span class="number">16</span>]]</span><br><span class="line">image = X_train[<span class="number">0</span>]</span><br><span class="line">image = image.reshape(<span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">3</span>)</span><br><span class="line">activation_model = Model(inputs=model.input, outputs=layer_outputs)</span><br><span class="line">activations = activation_model.predict(image)</span><br><span class="line">first_layer_activation = activations[<span class="number">0</span>]</span><br><span class="line">plt.matshow(first_layer_activation[<span class="number">0</span>, :, :, <span class="number">2</span>], cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.matshow(first_layer_activation[<span class="number">0</span>, :, :, <span class="number">3</span>], cmap=<span class="string">'viridis'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331133645175.png" alt="image-20210331133645175"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pred = cnn.predict(X_test[<span class="number">2</span>].reshape(<span class="number">1</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>))</span><br><span class="line">rs = pred.argmax</span><br><span class="line">print(label_encoder.inverse_transform([pred.argmax(axis=<span class="number">1</span>)[<span class="number">0</span>]]))</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.imshow(X_test[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210401/image-20210331140509790.png" alt="image-20210331140509790"></p><p><strong>2对应的是shine,可以看到当前结果还是很满意的</strong></p><p><a href="https://www.imooc.com/article/288444?block_id=tuijian_wz" target="_blank" rel="noopener">相关的一些案例参考</a></p><p><a href="https://www.imooc.com/article/288444?block_id=tuijian_wz" target="_blank" rel="noopener">相关的一些小例子参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习平凡之路六&quot;&gt;&lt;a href=&quot;#机器学习平凡之路六&quot; class=&quot;headerlink&quot; title=&quot;机器学习平凡之路六&quot;&gt;&lt;/a&gt;机器学习平凡之路六&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;卷积层神经网络&lt;/li&gt;
&lt;li&gt;图像识别&lt;/li&gt;
&lt;/ol&gt;
&lt;h3
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="卷积层神经网络" scheme="https://djwangweijie.github.io/tags/%E5%8D%B7%E7%A7%AF%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="多元分类" scheme="https://djwangweijie.github.io/tags/%E5%A4%9A%E5%85%83%E5%88%86%E7%B1%BB/"/>
    
      <category term="神经元" scheme="https://djwangweijie.github.io/tags/%E7%A5%9E%E7%BB%8F%E5%85%83/"/>
    
      <category term="高阶" scheme="https://djwangweijie.github.io/tags/%E9%AB%98%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>机器学习平凡之路四</title>
    <link href="https://djwangweijie.github.io/2021/03/31/2021-03-30-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E5%9B%9B/"/>
    <id>https://djwangweijie.github.io/2021/03/31/2021-03-30-机器学习平凡之路四/</id>
    <published>2021-03-30T22:24:10.367Z</published>
    <updated>2021-03-31T00:18:04.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习平凡之路四"><a href="#机器学习平凡之路四" class="headerlink" title="机器学习平凡之路四"></a>机器学习平凡之路四</h1><ol><li>分类</li><li>逻辑回归</li></ol><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><strong>事物的类别比如，根据客户的收入，存款，性别等为客户的信用等级分类</strong></p><p><strong>读入图片,为图片内容分类</strong></p><p><em>分类的过程就是确定某一事物隶属于某一个类别的可能性大小的过程</em></p><p>通过Sigmoid函数 g(z) = 1/1+e的-z次方</p><p><strong>逻辑回归做的事情就是把线性回归输出的任意值，通过数学上的转换，输出0-1的结果</strong></p><h2 id="逻辑回归解决二元分类的问题"><a href="#逻辑回归解决二元分类的问题" class="headerlink" title="逻辑回归解决二元分类的问题"></a>逻辑回归解决二元分类的问题</h2><h3 id="数据的准备与分析"><a href="#数据的准备与分析" class="headerlink" title="数据的准备与分析"></a>数据的准备与分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df_heart = pd.read_csv(<span class="string">'heart.csv'</span>)</span><br><span class="line">df_heart.head()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325101537753.png" alt="image-20210325101537753"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_heart.target.value_counts() <span class="comment"># 查看心脏病的分类数统计</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325101644579.png" alt="image-20210325101644579"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示年龄与最大心率两个特性与是否患病之间的关系</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.scatter(x=df_heart.age[df_heart.target==<span class="number">1</span>],</span><br><span class="line">            y=df_heart.thalach[df_heart.target==<span class="number">1</span>], c=<span class="string">'red'</span></span><br><span class="line">           )</span><br><span class="line">plt.scatter(x=df_heart.age[df_heart.target==<span class="number">0</span>],</span><br><span class="line">            y=df_heart.thalach[df_heart.target==<span class="number">0</span>], marker=<span class="string">'^'</span></span><br><span class="line">           )</span><br><span class="line">plt.legend([<span class="string">'Disease'</span>,<span class="string">'No Disease'</span>])</span><br><span class="line">plt.xlabel(<span class="string">'age'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'heart rate'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325102456635.png" alt="image-20210325102456635"></p><h3 id="构建特征和标签集-数据特征缩放"><a href="#构建特征和标签集-数据特征缩放" class="headerlink" title="构建特征和标签集,数据特征缩放"></a>构建特征和标签集,数据特征缩放</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = df_heart.drop([<span class="string">'target'</span>], axis = <span class="number">1</span>) <span class="comment"># 构建特征集</span></span><br><span class="line">y = df_heart.target.values <span class="comment"># 构建标签集</span></span><br><span class="line">y = y.reshape(len(y),<span class="number">1</span>)</span><br><span class="line">print(X.shape)</span><br><span class="line">print(y.shape)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325103027802.png" alt="image-20210325103027802"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = <span class="number">0.2</span>)</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">X_train = scaler.fit_transform(X_train) <span class="comment"># 先拟合在应用</span></span><br><span class="line">X_test =scaler.transform(X_test) <span class="comment"># 直接应用</span></span><br></pre></td></tr></table></figure><h3 id="建立逻辑回归模型"><a href="#建立逻辑回归模型" class="headerlink" title="建立逻辑回归模型"></a>建立逻辑回归模型</h3><h4 id="逻辑函数的定义"><a href="#逻辑函数的定义" class="headerlink" title="逻辑函数的定义"></a>逻辑函数的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    y_hat = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br></pre></td></tr></table></figure><h3 id="使用线性回归模型"><a href="#使用线性回归模型" class="headerlink" title="使用线性回归模型"></a>使用线性回归模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression() <span class="comment"># 代表使用逻辑回归模型</span></span><br><span class="line">lr.fit(X_train,y_train) <span class="comment"># 相当于梯度下降</span></span><br><span class="line">print(lr.score(X_test,y_test)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325112352571.png" alt="image-20210325112352571"></p><blockquote><p>关于哑特征</p></blockquote><p>注意观察cp和thal和slope。它们的取值都在0-4，但是计算会认为这个可以比较的数值。所以要做一定的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = pd.get_dummies(df_heart[<span class="string">'cp'</span>], prefix =<span class="string">'cp'</span>)</span><br><span class="line">b = pd.get_dummies(df_heart[<span class="string">'thal'</span>], prefix =<span class="string">'thal'</span>)</span><br><span class="line">c = pd.get_dummies(df_heart[<span class="string">'slope'</span>], prefix =<span class="string">'slope'</span>)</span><br><span class="line">frames = [df_heart,a,b,c]</span><br><span class="line">df_heart = pd.concat(frames, axis = <span class="number">1</span>)</span><br><span class="line">df_heart = df_heart.drop(columns = [<span class="string">'cp'</span>,<span class="string">'thal'</span>,<span class="string">'slope'</span>])</span><br><span class="line">X = df_heart.drop([<span class="string">'target'</span>], axis = <span class="number">1</span>) <span class="comment"># 构建特征集</span></span><br><span class="line">y = df_heart.target.values <span class="comment"># 构建标签集</span></span><br><span class="line">y = y.reshape(len(y),<span class="number">1</span>)</span><br><span class="line">print(X.shape)</span><br><span class="line">print(y.shape)</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = <span class="number">0.2</span>)</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">X_train = scaler.fit_transform(X_train) <span class="comment"># 先拟合在应用</span></span><br><span class="line">X_test =scaler.transform(X_test) <span class="comment"># 直接应用</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression() <span class="comment"># 代表使用逻辑回归模型</span></span><br><span class="line">lr.fit(X_train,y_train) <span class="comment"># 相当于梯度下降</span></span><br><span class="line">print(lr.score(X_test,y_test)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325113823867.png" alt="image-20210325113823867"></p><h2 id="多元分类"><a href="#多元分类" class="headerlink" title="多元分类"></a>多元分类</h2><p><strong>多元分类本质就是训练好多个二元分类器之后，做预测的时候将所有二元分类器都运行一遍。对每一个输入样本，选择最高可能性的输出概率</strong></p><blockquote><p>多元分类的损失函数</p></blockquote><p>多元分类的标签有以下两种格式</p><ol><li>一种是通过one-hot格式编码分类</li><li>一种是直接转换为类别数字</li><li>如果通过one-hot 则应该使用分类交叉熵</li><li>如果通过标签编码，则应该使用稀疏分类交叉熵</li></ol><blockquote><p>正则化和欠拟合，过拟合</p></blockquote><p><em>标准化，规范化，归一化，是调整数据</em></p><p><em>正则化是调整模型，和约束权重</em></p><p><strong>过拟合现象是机器学习无法回避的。降低拟合一般增加数据集的个数，找到模型优化试的平衡点，添加正则化</strong></p><p><em>正则的本质是崇尚简单化，以最小化损失和复杂度为目标</em></p><ol><li>L1正则化，根据权重的绝对值综合来惩罚权重，有助于不相关或者几乎不相关的特征的权重正好为0，从而将这些特征从模型中移除</li><li>L2正则化,根据权重的平方和惩罚权重，线性模型中，能够增强泛化的目的</li><li>L1是套索回归，L2是岭回归</li></ol><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><h3 id="数据准备和分析"><a href="#数据准备和分析" class="headerlink" title="数据准备和分析"></a>数据准备和分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X_sepal = iris.data[:,[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">X_petal = iris.data[:,[<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">y = iris.target</span><br></pre></td></tr></table></figure><h3 id="分割数据集"><a href="#分割数据集" class="headerlink" title="分割数据集"></a>分割数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">X_train_sepal, X_test_sepal, y_train_sepal, y_test_sepal = \</span><br><span class="line">    train_test_split(X_sepal,y,test_size=<span class="number">0.3</span>,random_state=<span class="number">0</span>)</span><br><span class="line">print(len(X_train_sepal))</span><br><span class="line">print(len(X_test_sepal))</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_sepal = scaler.fit_transform(X_train_sepal)</span><br><span class="line">X_test_sepal = scaler.transform(X_test_sepal)</span><br></pre></td></tr></table></figure><h3 id="使用逻辑回归"><a href="#使用逻辑回归" class="headerlink" title="使用逻辑回归"></a>使用逻辑回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression(penalty=<span class="string">'l2'</span>, C = <span class="number">10</span>) <span class="comment"># 这里的C可以以后自动调整</span></span><br><span class="line">lr.fit(X_train_sepal, y_train_sepal)</span><br><span class="line">score = lr.score( X_test_sepal,y_test_sepal)</span><br><span class="line">print(score)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325140748429.png" alt="image-20210325140748429"></p><h2 id="自动调整参数"><a href="#自动调整参数" class="headerlink" title="自动调整参数"></a>自动调整参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings( <span class="string">"ignore"</span>)</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">params = &#123; <span class="string">'C'</span>:[ <span class="number">0.0001</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">1000</span>],</span><br><span class="line"></span><br><span class="line"><span class="string">'max_iter'</span>:[ <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">500</span>],</span><br><span class="line"></span><br><span class="line"><span class="string">'class_weight'</span>:[ <span class="string">'balanced'</span>, <span class="literal">None</span>],</span><br><span class="line"></span><br><span class="line"><span class="string">'solver'</span>:[ <span class="string">'liblinear'</span>, <span class="string">'sag'</span>, <span class="string">'lbfgs'</span>, <span class="string">'newton-cg'</span>]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">clf = GridSearchCV(lr, param_grid=params, cv= <span class="number">10</span>)</span><br><span class="line">clf.fit(X_train_sepal,y_train_sepal)</span><br><span class="line">clf.best_params_</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325142057021.png" alt="image-20210325142057021"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classifier = LogisticRegression(**clf.best_params_)</span><br><span class="line">classifier.fit(X_train_sepal, y_train_sepal)</span><br><span class="line">score = classifier.score( X_test_sepal,y_test_sepal)</span><br><span class="line">print(score)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210330/image-20210325142125391.png" alt="image-20210325142125391"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习平凡之路四&quot;&gt;&lt;a href=&quot;#机器学习平凡之路四&quot; class=&quot;headerlink&quot; title=&quot;机器学习平凡之路四&quot;&gt;&lt;/a&gt;机器学习平凡之路四&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;分类&lt;/li&gt;
&lt;li&gt;逻辑回归&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="逻辑回归算法" scheme="https://djwangweijie.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    
      <category term="二元分类" scheme="https://djwangweijie.github.io/tags/%E4%BA%8C%E5%85%83%E5%88%86%E7%B1%BB/"/>
    
      <category term="底层实现" scheme="https://djwangweijie.github.io/tags/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    
      <category term="进阶" scheme="https://djwangweijie.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>机器学习平凡之路五</title>
    <link href="https://djwangweijie.github.io/2021/03/30/2021-03-31-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E4%BA%94/"/>
    <id>https://djwangweijie.github.io/2021/03/30/2021-03-31-机器学习平凡之路五/</id>
    <published>2021-03-30T01:33:00.807Z</published>
    <updated>2021-03-31T00:21:57.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习平凡之路五"><a href="#机器学习平凡之路五" class="headerlink" title="机器学习平凡之路五"></a>机器学习平凡之路五</h1><ol><li>神经网络的原理</li><li>神经网络的实现和实战</li></ol><h2 id="神经网络的原理"><a href="#神经网络的原理" class="headerlink" title="神经网络的原理"></a>神经网络的原理</h2><p><strong>用过加载银行客户流失的数据，通过机器判断出哪些客户未来两年结束在该银行的业务,本质上也是分类。但是利用神经网络解决这类问题的优势</strong></p><p><em>神经网络在计算机视觉，语音识别，自然语言处理，棋类竞赛和机器人技术</em></p><p>在数据集中，特征的维度组合越来越大，机器学习的过程中，单纯用线性回归和逻辑回归模型进行机器学习就力不从心。</p><p><strong>特征空间是数据特征形成的空间，特征维度越高，特征空间越复杂，假设空间是假设函数形成的空间，特征越多，特征和标签之间的对应关系越难拟合。假设空间越复杂</strong></p><p>深度学习的机理其实就是用一串一串的函数作用于输入数据，进行从原始数据到分类结果的过滤与提纯。这些层通过权重来参数化。通过损失函数来判断当前网络的效能，通过优化器太调整权重。寻找输入到输出的最佳函数。</p><p><u>注意:层就是神经网络的基本元素。神经网络是通过不同类型的层来构建的。</u></p><h2 id="神经网络的实现和实战"><a href="#神经网络的实现和实战" class="headerlink" title="神经网络的实现和实战"></a>神经网络的实现和实战</h2><h3 id="数据分析与准备"><a href="#数据分析与准备" class="headerlink" title="数据分析与准备"></a>数据分析与准备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df_bank = pd.read_csv(<span class="string">'BankCustomer.csv'</span>)</span><br><span class="line">df_bank.head()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330103528305.png" alt="image-20210330103528305"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># 显示不同特征的分布情况</span></span><br><span class="line">features = [<span class="string">'City'</span>,<span class="string">'Gender'</span>,<span class="string">'Age'</span>,<span class="string">'Tenure'</span>,<span class="string">'ProductsNo'</span>,<span class="string">'HasCard'</span>,<span class="string">'ActiveMember'</span>,<span class="string">'Exited'</span>]</span><br><span class="line">fig = plt.subplots(figsize=(<span class="number">15</span>,<span class="number">15</span>)) <span class="comment"># 设置长宽</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(features):</span><br><span class="line">    plt.subplot(<span class="number">4</span>,<span class="number">2</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.subplots_adjust(hspace = <span class="number">1.0</span>)</span><br><span class="line">    sns.countplot(x = j,data = df_bank)</span><br><span class="line">    plt.title(<span class="string">'No. of costumers'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330104444739.png" alt="image-20210330104444739"></p><p><img src="/images/resources/20210331/image-20210330104514838.png" alt="image-20210330104514838"></p><p><img src="/images/resources/20210331/image-20210330104532151.png" alt="image-20210330104532151"></p><p><img src="/images/resources/20210331/image-20210330104548626.png" alt="image-20210330104548626"></p><p><strong>可以看出，北京的客户最多，男女客户的比例大致一致。年龄和客户数据量呈现正态分布</strong></p><h3 id="关于数据的处理准备工作"><a href="#关于数据的处理准备工作" class="headerlink" title="关于数据的处理准备工作"></a>关于数据的处理准备工作</h3><ol><li>性别:这是一个二元类的特征。需要做0和1的转换</li><li>城市:这是一个多元类的特征,可以转换为多个二元类别的哑变量</li><li>姓名可以进行忽略处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二元类别进行数字化</span></span><br><span class="line">df_bank[<span class="string">'Gender'</span>].replace(<span class="string">'Female'</span>,<span class="number">0</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">df_bank[<span class="string">'Gender'</span>].replace(<span class="string">'Male'</span>,<span class="number">1</span>,inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 显示数字类别</span></span><br><span class="line">print(df_bank[<span class="string">'Gender'</span>].unique())</span><br><span class="line"><span class="comment"># 把多元类别转化为哑变量特征</span></span><br><span class="line">d_city = pd.get_dummies(df_bank[<span class="string">'City'</span>], prefix = <span class="string">'City'</span>)</span><br><span class="line">df_bank = [df_bank,d_city]</span><br><span class="line">df_bank = pd.concat(df_bank, axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 构建特征和标签集合</span></span><br><span class="line">y = df_bank[<span class="string">'Exited'</span>]</span><br><span class="line">X = df_bank.drop([<span class="string">'Name'</span>,<span class="string">'Exited'</span>,<span class="string">'City'</span>] , axis = <span class="number">1</span>)</span><br><span class="line">X.head()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330105441807.png" alt="image-20210330105441807"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分数据集为测试集和训练集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split </span><br><span class="line">X_train, X_test , y_train,y_test = train_test_split(X,y,test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="使用逻辑回归算法尝试"><a href="#使用逻辑回归算法尝试" class="headerlink" title="使用逻辑回归算法尝试"></a>使用逻辑回归算法尝试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.linear_model import LogisticRegression </span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">history = lr.fit(X_train, y_train)</span><br><span class="line">print(lr.score(X_test,y_test)*100)</span><br></pre></td></tr></table></figure><p>通过逻辑回归，我们可以看到准确率大概在78.3,当然使用神经网路至少看能不能提升准确率</p><h2 id="学习keras"><a href="#学习keras" class="headerlink" title="学习keras"></a>学习keras</h2><p><strong>keras构建出来的神经网络模型通过模块组装在一起。各个深度学习元件是Keras模块,比如神经网络，损失函数，优化器，参数初始化，激活函数，模型曾泽华，都是可以组合起来构建新模型的模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential, load_model</span><br><span class="line">ann = tf.keras.Sequential()</span><br><span class="line">ann.add(layers.Dense(units=<span class="number">12</span>, input_dim=<span class="number">12</span>, activation = <span class="string">'relu'</span>)) <span class="comment"># 添加输入层</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">24</span>, activation = <span class="string">'relu'</span>)) <span class="comment"># 添加隐层</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">1</span>, activation = <span class="string">'sigmoid'</span>)) <span class="comment"># 添加输出层</span></span><br><span class="line">ann.summary()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330111123644.png" alt="image-20210330111123644"></p><p><u>这个网络只有3层,493个参数.</u></p><blockquote><p>模型可视化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG <span class="comment"># 实现神经网络结构的图形化显示</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.utils <span class="keyword">import</span>  model_to_dot</span><br><span class="line">SVG(model_to_dot(ann, show_shapes=<span class="literal">True</span>,show_layer_names=<span class="literal">True</span>, dpi=<span class="number">65</span>).create(prog=<span class="string">'dot'</span>, format=<span class="string">'svg'</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330113028024.png" alt="image-20210330113028024"></p><blockquote><p>名词解释</p></blockquote><ol><li>模型的创建: 通过Sequential创建了一个序贯神经网络模型.与之对外的还有另外一种模型，称作为函数式API</li><li>输入层,通过add方法一层一层的进行顺序堆叠</li><li>Dense是层的类型,代表密集网络层。也是全连接层</li><li>input_dim是输入维度,输入维度必须与特征维度相同</li><li>unit是输出维度,代表线性变化和激活之后的假设空间维度，也就是神经元的个数</li><li>activation是激活函数，每一层都要设置的参数。relu书神经网络常用的激活函数</li><li>隐层不需要指定输入维度。</li><li>输出层，指定的输出维度是1.对于二分类问题，输出维度必须是1，如果是多分类问题。多少个类别，维度就是多少。对于二分类问题，Sigmoid是固定的选择。如果是神经网络输出层不用指定任何激活函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译网络，指定优化器，损失函数，以及评估指标</span></span><br><span class="line">ann.compile(optimizer = <span class="string">'adam'</span>,</span><br><span class="line">           loss = <span class="string">'binary_crossentropy'</span>,</span><br><span class="line">            metrics = [<span class="string">'acc'</span>]</span><br><span class="line">           )</span><br></pre></td></tr></table></figure><ol><li>优化器可以选择adam或者是rmsprop</li><li>损失函数二元分类使用二元交叉熵函数，神经网络使用均方误差函数是合适的选择</li><li>评估指标通过acc，也就是准确率</li></ol><blockquote><p>关于全连接层</p></blockquote><p>一般用于处理最普通的机器学习向量数据，也就是2D张量数据集，公式为:</p><p>Output = Activation(dot(input,kernel)+bias)</p><blockquote><p>神经网络的其它类型层</p></blockquote><ol><li>循环层，Kears的LSTM层,用于处理保存形状为(样本,时戳,标签)的3D张量中的序列数据</li><li>二维卷积层,Keras的Conv2D层。用于处理保存形状为(样本,帧数,图像高度,图像宽度，颜色深度)的4D张量中的图像数据</li><li>层就是相当于乐高的积木。将相互兼容，相同或者不同类型的多个层拼接在一起。</li></ol><h3 id="训练单隐层神经网络"><a href="#训练单隐层神经网络" class="headerlink" title="训练单隐层神经网络"></a>训练单隐层神经网络</h3><p><u>需要注意的地方:样本中训练集的维度是12,所以前面的代码需要稍微调整下输入样本的维度为12</u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history = ann.fit(X_train, y_train,</span><br><span class="line">                  epochs = <span class="number">30</span>,</span><br><span class="line">                  batch_size=<span class="number">64</span>,</span><br><span class="line">                  validation_data=(X_test,y_test)</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330115802062.png" alt="image-20210330115802062"></p><blockquote><p>通过图示显示</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_history</span><span class="params">(history)</span>:</span> <span class="comment"># 显示训练过程的学习曲线</span></span><br><span class="line">    loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">    val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line">    epochs = range(<span class="number">1</span>, len(loss) + <span class="number">1</span>)</span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.plot(epochs, loss, <span class="string">'bo'</span>, label=<span class="string">'Training loss'</span>)</span><br><span class="line">    plt.plot(epochs, val_loss, <span class="string">'b'</span>, label=<span class="string">'Validation loss'</span>)</span><br><span class="line">    plt.title(<span class="string">'Training and validation loss'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Epochs'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Loss'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    acc = history.history[<span class="string">'acc'</span>]</span><br><span class="line">    val_acc = history.history[<span class="string">'val_acc'</span>]</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.plot(epochs, acc, <span class="string">'bo'</span>, label=<span class="string">'Training acc'</span>)</span><br><span class="line">    plt.plot(epochs, val_acc, <span class="string">'b'</span>, label=<span class="string">'Validation acc'</span>)</span><br><span class="line">    plt.title(<span class="string">'Training and validation accuracy'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Epochs'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line">show_history(history) <span class="comment"># 可以观察到验证集和训练集上面的损失和准确率</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330120313747.png" alt="image-20210330120313747"></p><h2 id="通过手段调优"><a href="#通过手段调优" class="headerlink" title="通过手段调优"></a>通过手段调优</h2><h3 id="混淆矩阵-精确率-召回率和F1分数"><a href="#混淆矩阵-精确率-召回率和F1分数" class="headerlink" title="混淆矩阵,精确率,召回率和F1分数"></a>混淆矩阵,精确率,召回率和F1分数</h3><p><strong>注意上面的问题:根据最上面的数据分析,按照80和20的比例,准确率80以下什么也没做。提升还是需要从每一个类别预测精确率和召回率上面入手</strong></p><p><em>也就是说:对于这种大量标签是普通值,小部分标签是特殊值的数据集来说，3个标准的重要性要高于准确率</em></p><h4 id="使用分类报告和混淆矩阵"><a href="#使用分类报告和混淆矩阵" class="headerlink" title="使用分类报告和混淆矩阵"></a>使用分类报告和混淆矩阵</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line">y_pred = ann.predict(X_test, batch_size = <span class="number">10</span>) <span class="comment"># 预测测试集的标签</span></span><br><span class="line">y_pred = np.round(y_pred)</span><br><span class="line">y_test = y_test.values </span><br><span class="line">y_test = y_test.reshape((len(y_test),<span class="number">1</span>)) <span class="comment"># 转换成相同的形状</span></span><br><span class="line">print(classification_report(y_test,y_pred,labels=[<span class="number">0</span>,<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330122340867.png" alt="image-20210330122340867"></p><p><u>报告分别对应: 精确率,召回率,以及F1分数,对于客户标签为1的类别分数都为0,如果输出y_pred呈现清一色的0值</u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix <span class="comment"># 引入混淆矩阵</span></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line">plt.title(<span class="string">'ANN Matrix'</span>)</span><br><span class="line">sns.heatmap(cm,annot = <span class="literal">True</span>, cmap=<span class="string">'Blues'</span>,fmt=<span class="string">'d'</span>,cbar=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330122952457.png" alt="image-20210330122952457"></p><p><strong>通过预测值和真值组成的矩阵,4个象限从上到下，从左到右，分别为真负,假正,假负,真正</strong></p><p>也就是数据集真值，预测为负的有408个。这个和数据分析出来的值不对等，需要调整</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="特征缩放的魔力"><a href="#特征缩放的魔力" class="headerlink" title="特征缩放的魔力"></a>特征缩放的魔力</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过特征缩放</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">sc = StandardScaler()</span><br><span class="line">X_train = sc.fit_transform(X_train)</span><br><span class="line">X_test = sc.transform(X_test)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330130632426.png" alt="image-20210330130632426"></p><blockquote><p>分别使用逻辑回归和单层神经网络</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">history = lr.fit(X_train, y_train)</span><br><span class="line">print(lr.score(X_test, y_test)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>结果可以达到80%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history = ann.fit(X_train, y_train,</span><br><span class="line">                  epochs = <span class="number">30</span>,</span><br><span class="line">                  batch_size=<span class="number">64</span>,</span><br><span class="line">                  validation_data=(X_test,y_test)</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330131025852.png" alt="image-20210330131025852"></p><p><img src="/images/resources/20210331/image-20210330131113794.png" alt="image-20210330131113794"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line">y_pred = ann.predict(X_test, batch_size = <span class="number">10</span>) <span class="comment"># 预测测试集的标签</span></span><br><span class="line">y_pred = np.round(y_pred)</span><br><span class="line">y_test = y_test </span><br><span class="line">y_test = y_test.reshape((len(y_test),<span class="number">1</span>)) <span class="comment"># 转换成相同的形状</span></span><br><span class="line">print(classification_report(y_test,y_pred,labels=[<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix <span class="comment"># 引入混淆矩阵</span></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line">plt.title(<span class="string">'ANN Matrix'</span>)</span><br><span class="line">sns.heatmap(cm,annot = <span class="literal">True</span>, cmap=<span class="string">'Blues'</span>,fmt=<span class="string">'d'</span>,cbar=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330131458442.png" alt="image-20210330131458442"></p><p><img src="/images/resources/20210331/image-20210330131514646.png" alt="image-20210330131514646"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>在面对数据不平衡的时候,可以考虑阈值调整,欠采样，过采样</strong></p><h2 id="从单层到深度"><a href="#从单层到深度" class="headerlink" title="从单层到深度"></a>从单层到深度</h2><p>深度神经网络就如宇宙一样，并不复杂，就是很多而已</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>深度神经网络的梯度下降参数和参数优化过程是通过优化器实现的，包含了正向传播和反向传播</p><blockquote><p>正向传播</p></blockquote><ol><li>从输入层开始，线性处理权重和偏置后。层层递进，然后计算出损失值的过程</li></ol><blockquote><p>反向传播</p></blockquote><ol><li>从结果开始,拿到损失函数给出的值,通过求导和偏微分逐步的发现每一个参数往哪个方向上面调整,减小损失</li></ol><h3 id="可调超参数"><a href="#可调超参数" class="headerlink" title="可调超参数"></a>可调超参数</h3><ol><li>优化器</li><li>激活函数</li><li>损失函数</li><li>评估指标</li></ol><h3 id="关于梯度下降"><a href="#关于梯度下降" class="headerlink" title="关于梯度下降"></a>关于梯度下降</h3><blockquote><p>神经网络权重参数随机初始化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ann.add(layers.Dense(units=<span class="number">12</span>, input_dim=<span class="number">12</span>, </span><br><span class="line">activation = <span class="string">'relu'</span>,kernel_initializer=<span class="string">'random_uniform'</span>,</span><br><span class="line">        bias_initializer = <span class="string">'zeros'</span></span><br><span class="line">                    ))</span><br></pre></td></tr></table></figure><blockquote><p>批量梯度下降</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">配置batch_size</span><br></pre></td></tr></table></figure><blockquote><p>随机梯度下降</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ann.compile(loss = keras.losses.categorical_crossentropy,</span><br><span class="line">optimizer = keras.optimizers.SGD()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>小批量梯度下降</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keras.optimizers.SGD(lr=<span class="number">0.02</span>,  <span class="comment"># 学习速率</span></span><br><span class="line"> decay=<span class="number">0.1</span> <span class="comment"># 衰减率</span></span><br><span class="line"> )</span><br></pre></td></tr></table></figure><blockquote><p>动量SGD</p></blockquote><p>更新参数W时不仅考虑当前梯度，还要考虑上一次的参数更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keras.optimizers.SGD(lr=0.02,  # 学习速率</span><br><span class="line"> momentum = 0.9</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><blockquote><p>NAG上坡减少动量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keras.optimizers.SGD(lr=0.02,  # 学习速率</span><br><span class="line"> momentum = 0.9,</span><br><span class="line"> nesterov = True</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><blockquote><p>自适应梯度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keras.optimizers.adagrad()</span><br></pre></td></tr></table></figure><blockquote><p>加权平均值计算二阶动量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keras.optimizers.RMSprop()</span><br></pre></td></tr></table></figure><blockquote><p>Adam(常用)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keras.optimizers.Adam(</span><br><span class="line">learning_rate = 0.001,</span><br><span class="line">beta_1 =0.9</span><br><span class="line">beta_2 = 0.999,</span><br><span class="line">amsgrad = False</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>Nadam</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keras.optimizers.Adam(</span><br><span class="line">lr = 0.002,</span><br><span class="line">beta_1 =0.9</span><br><span class="line">beta_2 = 0.999,</span><br><span class="line">epsilob = None,</span><br><span class="line">schedule_decay = False</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>神经网络超参数的调试，没有一定之规矩,需要逐渐累积经验</strong></p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><ol><li>Sigmoid函数映射在0和1之间</li><li>Tanh函数映射在-1和1之间</li><li>Relu函数算是主流,输入小于等于0时,输出是0，输入信号大于0是,输出等于输入</li><li>Sigmoid用于二元分类,SoftMax用于多元分类</li></ol><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><ol><li>对于连续值向量的回归问题<code>loss = &#39;mse&#39; # 均方误差损失函数</code></li><li>对于二分类问题<code>loss = &#39;binary_crossentropy&#39; # 二元交叉熵损失函数</code></li><li>对于多分类问题<code>loss = categorical_crossentropy # 分类交叉熵损失函数</code>,如果输出是one-hot编码</li><li>对于多分类问题<code>loss = sparse_categorical_crossentropy # 稀疏分类交叉熵损失函数</code>,如果输出是整数数值</li></ol><h3 id="评估指标"><a href="#评估指标" class="headerlink" title="评估指标"></a>评估指标</h3><ol><li>对于回归问题使用MAE和准确率比较常见</li><li>普通分类通过辅以精确率，召回率，F1分数等其他评估指标</li></ol><h2 id="重新定义-加入Dropout"><a href="#重新定义-加入Dropout" class="headerlink" title="重新定义(加入Dropout)"></a>重新定义(加入Dropout)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ann = tf.keras.Sequential() <span class="comment"># 创建一个序贯ANN模型</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">12</span>, input_dim=<span class="number">12</span>, activation = <span class="string">'relu'</span>)) <span class="comment"># 添加输入层</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">24</span>, activation = <span class="string">'relu'</span>)) <span class="comment"># 添加隐层</span></span><br><span class="line">ann.add(layers.Dropout(<span class="number">0.5</span>)) <span class="comment"># 添加Dropout</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">48</span>, activation = <span class="string">'relu'</span>)) <span class="comment"># 添加隐层</span></span><br><span class="line">ann.add(layers.Dropout(<span class="number">0.5</span>)) <span class="comment"># 添加Dropout</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">96</span>, activation = <span class="string">'relu'</span>)) <span class="comment"># 添加隐层</span></span><br><span class="line">ann.add(layers.Dropout(<span class="number">0.5</span>)) <span class="comment"># 添加Dropout</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">192</span>, activation = <span class="string">'relu'</span>)) <span class="comment"># 添加隐层</span></span><br><span class="line">ann.add(layers.Dropout(<span class="number">0.5</span>)) <span class="comment"># 添加Dropout</span></span><br><span class="line">ann.add(layers.Dense(units=<span class="number">1</span>, activation = <span class="string">'sigmoid'</span>)) <span class="comment"># 添加输出层</span></span><br><span class="line">ann.compile(optimizer = <span class="string">'adam'</span>, <span class="comment"># 优化器</span></span><br><span class="line">              loss = <span class="string">'binary_crossentropy'</span>, <span class="comment">#损失函数 </span></span><br><span class="line">              metrics = [<span class="string">'acc'</span>]) <span class="comment"># 评估指标</span></span><br><span class="line">history = ann.fit(X_train, y_train, epochs=<span class="number">30</span>, batch_size=<span class="number">64</span>, validation_data=(X_test, y_test))</span><br><span class="line">y_pred = ann.predict(X_test,batch_size=<span class="number">10</span>) <span class="comment"># 预测测试集的标签</span></span><br><span class="line">y_pred = np.round(y_pred) <span class="comment"># 将分类概率值转换成0/1整数值</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210331/image-20210330141441091.png" alt="image-20210330141441091"></p><p><img src="/images/resources/20210331/image-20210330141553874.png" alt="image-20210330141553874"></p><p><img src="/images/resources/20210331/image-20210330141621592.png" alt="image-20210330141621592"></p><p><img src="/images/resources/20210331/image-20210330141703233.png" alt="image-20210330141703233"></p><h2 id="调试以及性能优化"><a href="#调试以及性能优化" class="headerlink" title="调试以及性能优化"></a>调试以及性能优化</h2><p><strong>通过回调功能，也就是根据一些预设的指示对训练进行控制</strong></p><ol><li>ModelCheckpoint: 在训练过程中不同时间点保存模型，保存当前网络的所有权重</li><li>EarlyStopping:如果验证损失不再改善，则中断训练</li><li>ReduceLROnPlateau:训练过程中动态调节某些参数数值，跳出高原区，也就是局部地点或者鞍点</li><li>TensorBoard:将模型训练过程可视化</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> ModelCheckpoint</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> EarlyStopping</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> ReduceLROnPlateau</span><br><span class="line">earlystop = EarlyStopping(monitor=<span class="string">'val_acc'</span>, patience=<span class="number">20</span>, verbose=<span class="number">1</span>, restore_best_weights=<span class="literal">True</span>)</span><br><span class="line">reducelr = ReduceLROnPlateau(monitor=<span class="string">'val_acc'</span>, patience=<span class="number">3</span>, verbose=<span class="number">1</span>, min_lr=<span class="number">0.00001</span>)</span><br><span class="line">modelckpt = ModelCheckpoint(filepath=<span class="string">'ann.h5'</span>,monitor=<span class="string">'val_acc'</span>,verbose=<span class="number">1</span>, save_best_only=<span class="literal">True</span>,mode=<span class="string">'max'</span>)</span><br><span class="line">callbacks = [earlystop,reducelr,modelckpt]</span><br><span class="line">history = ann.fit(X_train, y_train,</span><br><span class="line">                  epochs = <span class="number">100</span>,</span><br><span class="line">                  batch_size=<span class="number">128</span>,</span><br><span class="line">                  validation_data=(X_test,y_test),</span><br><span class="line">                  callbacks = callbacks</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><h3 id="解决过度拟合与梯度消失和爆炸"><a href="#解决过度拟合与梯度消失和爆炸" class="headerlink" title="解决过度拟合与梯度消失和爆炸"></a>解决过度拟合与梯度消失和爆炸</h3><blockquote><p>过度拟合</p></blockquote><ol><li>能够用较小的网络解决问题，就不要强迫使用较大的网络</li><li>先使用少量数据训练一个较小的模型。小模型泛化好。</li><li>通过加入Dropout层。但是会对训练的速度有一定的影响</li><li>通过正则化解决过度拟合</li></ol><blockquote><p>梯度爆炸和梯度消失</p></blockquote><p>本质原因就是网络太深，网络权重更新不稳定造成的。本质都是梯度反向传播中的连锁效应</p><ol><li><p>选择合适的激活函数</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> regularizers</span><br><span class="line">model.add(Dense(<span class="number">64</span>, input_dim=<span class="number">64</span>,</span><br><span class="line">                kernel_regularizer=regularizers.l2(<span class="number">0.01</span>),</span><br><span class="line">                activity_regularizer=regularizers.l1(<span class="number">0.01</span>))) <span class="comment"># 使用过神经元权重进行正则化</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ann.add(BatchNormalization())</span><br></pre></td></tr></table></figure><p>通过批标准化可以使网络中间层的输入数据分布变得更加均衡。加速网络的收敛，减少训练的次数</p></li></ol><p><a href="https://blog.csdn.net/TFATS/article/details/110063244" target="_blank" rel="noopener">可参考的文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习平凡之路五&quot;&gt;&lt;a href=&quot;#机器学习平凡之路五&quot; class=&quot;headerlink&quot; title=&quot;机器学习平凡之路五&quot;&gt;&lt;/a&gt;机器学习平凡之路五&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;神经网络的原理&lt;/li&gt;
&lt;li&gt;神经网络的实现和实战&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="多元分类" scheme="https://djwangweijie.github.io/tags/%E5%A4%9A%E5%85%83%E5%88%86%E7%B1%BB/"/>
    
      <category term="神经元" scheme="https://djwangweijie.github.io/tags/%E7%A5%9E%E7%BB%8F%E5%85%83/"/>
    
      <category term="高阶" scheme="https://djwangweijie.github.io/tags/%E9%AB%98%E9%98%B6/"/>
    
      <category term="深度学习" scheme="https://djwangweijie.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习平凡之路三</title>
    <link href="https://djwangweijie.github.io/2021/03/24/2021-03-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E4%B8%89/"/>
    <id>https://djwangweijie.github.io/2021/03/24/2021-03-25-机器学习平凡之路三/</id>
    <published>2021-03-24T15:26:00.744Z</published>
    <updated>2021-03-24T15:33:17.656Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习平凡之路三</p><ol><li>线性回归</li></ol><h2 id="网店销售额预测"><a href="#网店销售额预测" class="headerlink" title="网店销售额预测"></a>网店销售额预测</h2><blockquote><p>步骤说明</p></blockquote><ol><li><p>明确定义所解决的问题——网店销售额的预测</p></li><li><p>数据收集和预处理环节分5步走</p><ol><li>收集数据</li><li>收集的数据可视化，熟悉数据的结构</li><li>做特征工程，使数据更好的被机器识别</li><li>查分数据集为训练集和测试集</li><li>做特征缩放，把数据压缩到比较小的区间中</li></ol></li><li><p>选择合适的机器学习算法</p><ol><li>确定机器学习的算法(线性回归算法)</li><li>确定线性回归的假设函数</li><li>确定线性回归的损失函数</li></ol></li><li><p>通过梯度下降训练机器，确定内部参数的过程</p></li><li><p>进行超参数调试和性能优化</p></li></ol><p><strong>简明的说就是发现一个能有此到彼的函数，如果函数只包括一个自变量和一个因变量，这个就是一元线性回归。包含2个以上的自变量就是多元线性回归</strong></p><h3 id="步骤一数据读取和可视化"><a href="#步骤一数据读取和可视化" class="headerlink" title="步骤一数据读取和可视化"></a>步骤一数据读取和可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df_ads = pd.read_csv(<span class="string">'advertising.csv'</span>)</span><br><span class="line">df_ads.head()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210325/image-20210324094522204.png" alt="image-20210324094522204"></p><h3 id="步骤二数据的相关分析"><a href="#步骤二数据的相关分析" class="headerlink" title="步骤二数据的相关分析"></a>步骤二数据的相关分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.heatmap(df_ads.corr(),cmap=<span class="string">'YlGnBu'</span>,annot=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210325/image-20210324095018400.png" alt="image-20210324095018400"></p><p>通过相关系分析，可以得知销售额和通过微信投入的是最有效地正比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(df_ads,</span><br><span class="line">            x_vars =[<span class="string">'wechat'</span>,<span class="string">'weibo'</span>,<span class="string">'others'</span>],</span><br><span class="line">            y_vars =<span class="string">'sales'</span>,</span><br><span class="line">            height=<span class="number">4</span>, aspect=<span class="number">1</span>,kind=<span class="string">'scatter'</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210325/image-20210324095358931.png" alt="image-20210324095358931"></p><p>步骤三数据集清洗和规范化</p><p>上面的图可以发现微信广告的投入和销售额的相关性比较高，所以就只保留微信投入和销售金额</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = np.array(df_ads.wechat) <span class="comment"># 构建特征集。</span></span><br><span class="line">y = np.array(df_ads.sales) <span class="comment"># 构建标签集</span></span><br><span class="line">print(X.ndim)</span><br><span class="line">print(X.shape)</span><br><span class="line">print(X)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210325/image-20210324101447985.png" alt="image-20210324101447985"></p><p><em>对于回归问题的数值类型数据集，机器学习模型读入的规范格式应该是2D张量.形状为(样本数,标签数)</em></p><h3 id="步骤三拆分变形后的数据集"><a href="#步骤三拆分变形后的数据集" class="headerlink" title="步骤三拆分变形后的数据集"></a>步骤三拆分变形后的数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = X.reshape(len(x),<span class="number">1</span>)</span><br><span class="line">y = y.reshape(len(y),<span class="number">1</span>) <span class="comment"># 对特征及和标签集进行变形</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,</span><br><span class="line">                                                test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>) <span class="comment"># 拆分数据集</span></span><br></pre></td></tr></table></figure><h3 id="步骤四数据归一化"><a href="#步骤四数据归一化" class="headerlink" title="步骤四数据归一化"></a>步骤四数据归一化</h3><p>归一化，相当于数据的分布不变，但是值都落入一个小的特定区间。</p><p>常见的一个归一化公式如下 x = x-min(x) / max(x)-min(x)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''from sklearn import preprocessing</span></span><br><span class="line"><span class="string">min_max_scaler = preprocessing.MinMaxScaler()#默认为范围0~1，拷贝操作</span></span><br><span class="line"><span class="string">#min_max_scaler = preprocessing.MinMaxScaler(feature_range = (1,3),copy = False)#范围改为1~3，对原数组操作</span></span><br><span class="line"><span class="string">x_minmax = min_max_scaler.fit_transform(x)'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1表示横轴，方向从左到右；0表示纵轴，方向从上到下。当axis=1时，数组的变化是横向的，而体现出来的是列的增加或者减少。</span></span><br><span class="line"><span class="comment"># 自行定义一个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scaler</span><span class="params">(train,test)</span>:</span></span><br><span class="line">    min = train.min(axis=<span class="number">0</span>)</span><br><span class="line">    max = train.max(axis=<span class="number">0</span>)</span><br><span class="line">    gap = max-min</span><br><span class="line">    train -= min</span><br><span class="line">    train /= gap</span><br><span class="line">    test -=min</span><br><span class="line">    test /= gap</span><br><span class="line">    <span class="keyword">return</span> train, test</span><br><span class="line">X_train, X_test = scaler(X_train, X_test)</span><br><span class="line">y_train, y_test = scaler(y_train, y_test)</span><br><span class="line">plt.plot(X_train,y_train,<span class="string">'r.'</span>,label =<span class="string">'Training data'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'wechat'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sales'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210325/image-20210324104104750.png" alt="image-20210324104104750"></p><h3 id="步骤五选择合适的机器学习模型"><a href="#步骤五选择合适的机器学习模型" class="headerlink" title="步骤五选择合适的机器学习模型"></a>步骤五选择合适的机器学习模型</h3><ol><li>确定选用什么类型的模型</li><li>确定模型的具体参数</li></ol><blockquote><p>说明</p></blockquote><p>y = ax+b  （a代表直线的斜率,b是截距也就是与y轴相交的位置）</p><p>y = wx+b   (w替换成a代表权重,参数b称作为偏置)</p><blockquote><p>假设函数</p></blockquote><p>y-hat = wx+b</p><p>h(x) = wx+b (h(x)就是假设函数,也可以叫做预测函数)</p><p>机器学习的目标就是确定假设函数h(x)同时也是在确定w和b</p><blockquote><p>损失函数</p></blockquote><p><strong>比如一个模型3x+5和100x+1,哪一个更好，损失是对糟糕预测的惩罚。损失也是误差，也称作成本或代价，也就是当前预测值和真实值之间的差距体现。因为每一组不同的参数，机器会针对样本数据集算一次平均损失，计算平均损失是每一个机器学习的必要环节</strong></p><p>损失函数的表现形式为L(w,b)</p><p>损失函数一般有 L2损失函数，L1损失函数,平均偏差误差函数 (回归)</p><p>交叉熵损失函数,多类SVM损失函数(分类)</p><p>均方误差函数的实现过程:</p><ol><li>对于每一个样本y-yhat,这是预测值和真实值的差异，但损失值与参数w和b有关</li><li>将损失值进行平方，平方后都变为正数，这个值叫做单个样本的平方损失</li><li>所有平方损失相加，根据数量求平均值。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss_function</span><span class="params">(X,y,weight,bias)</span>:</span></span><br><span class="line">    y_hat =weight*X + bias</span><br><span class="line">    loss = y_hat-y</span><br><span class="line">    cost =np.sum(loss**<span class="number">2</span>)/<span class="number">2</span>*len(X) <span class="comment"># 这里2相当于去抵消平方后的产生的洗漱</span></span><br><span class="line">    <span class="keyword">return</span> cost</span><br><span class="line">print(loss_function(X_train,y_train,weight=<span class="number">5</span>,bias=<span class="number">3</span>))</span><br><span class="line">print(loss_function(X_train,y_train,weight=<span class="number">100</span>,bias=<span class="number">1</span>)) <span class="comment"># 系数越小也合适</span></span><br></pre></td></tr></table></figure><blockquote><p>通过梯度下降找到最佳参数</p></blockquote><p><strong>训练机器，成为拟合的过程。为了确定内部的w和b。怎么才知道他们的最佳值了。最无脑的方式就是，随其生成1万个w和b的不同组合。然后挨个计算。确定一万种最优的。不过最好的理想结果是每做一次都更接近真相。也就是最精髓的梯度下降</strong></p><p>通过凸函数确保有最小损失点。比如L和W单独看。</p><p><img src="/images/resources/20210325/image-20210324111234231.png" alt="image-20210324111234231"></p><p>w和b共同作用</p><p><img src="/images/resources/20210325/image-20210324111308272.png" alt="image-20210324111308272"></p><blockquote><p>关于梯度下降的实现</p></blockquote><p><img src="/images/resources/20210325/image-20210324111700558.png" alt="image-20210324111700558"></p><p>通过导数，描述函数在某点附近的变化率。求导后为梯度为正值。说明L随着W的增大而增大，反之减小</p><p>梯度具有两个特征也就是方向和大小，通过梯度下降法会沿着负梯度方向走一步，以降低损失</p><p><img src="/images/resources/20210325/image-20210324112354251.png" alt="image-20210324112354251"></p><blockquote><p>关于学习速率</p></blockquote><p>求导知道了后，接下来是学习速率，也就alpha</p><blockquote><p>梯度下降实现</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(X,y,w,b,lr,iter)</span>:</span></span><br><span class="line">    l_history = np.zeros(iter)</span><br><span class="line">    w_history = np.zeros(iter)</span><br><span class="line">    b_history = np.zeros(iter)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> rang(iter):</span><br><span class="line">        y_hat = w*x+b</span><br><span class="line">        loss = y_hat-y</span><br><span class="line">        deruvative_w = X.T.dot(loss)/len(x) <span class="comment"># 权重求导</span></span><br><span class="line">        deruvative_b = sum(loss)*<span class="number">1</span>/len(x)</span><br><span class="line">        w = w - lr*deruvative_w</span><br><span class="line">        b = b - lr*deruvative_b</span><br><span class="line">        l_history[i] = loss_fuction(X,y,w,b)</span><br><span class="line">        w_history[i] = w</span><br><span class="line">        b_history[i] = b</span><br><span class="line">    <span class="keyword">return</span> l_history,w_history,b_history</span><br></pre></td></tr></table></figure><blockquote><p>实现线性回归并调试参数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iterations = <span class="number">100</span></span><br><span class="line">alpha =<span class="number">1</span></span><br><span class="line">weight =<span class="number">-5</span></span><br><span class="line">bias =<span class="number">3</span></span><br><span class="line">print(<span class="string">'损失值:'</span>,loss_function(X_train,y_train,weight,bias))</span><br><span class="line">plt.plot(X_train,y_train,<span class="string">'r.'</span>,label=<span class="string">'Training data'</span>)</span><br><span class="line">line_X  = np.linspace(X_train.min(),X_train.max(),<span class="number">500</span>)</span><br><span class="line">line_y = [weight*xx + bias <span class="keyword">for</span> xx <span class="keyword">in</span> line_X]</span><br><span class="line">plt.plot(line_X,line_y,<span class="string">'b--'</span>,label=<span class="string">'current'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'wechat'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sales'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210325/image-20210324114719056.png" alt="image-20210324114719056"></p><blockquote><p>调整学习速率</p></blockquote><p>如果损失函数和求导过程没有出现错误,一般造成损失过大的在于学习速率</p><p>通过比较学习速率和迭代次，选择最优</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loss_history,weight_history,bias_history = gradient_descent(X_train,y_train,weight,bias,alpha,iterations)</span><br><span class="line">plt.plot(loss_history,<span class="string">'g--'</span>,label=<span class="string">'loss curve'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'iter'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()  <span class="comment"># 学习</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210325/image-20210324130604001.png" alt="image-20210324130604001"></p><p><img src="/images/resources/20210325/image-20210324130914968.png" alt="image-20210324130914968"></p><p>做完这一切也就是找到了最佳的两个参数</p><p>关于多元线性回归基于以上的同等道理</p><p>下面贴出代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 导入NumPy数学工具箱</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 导入Pandas数据处理工具箱</span></span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> boston_housing <span class="comment">#从Keras中导入mnist数据集</span></span><br><span class="line"><span class="comment">#读入训练集和测试集</span></span><br><span class="line">(X_train, y_train), (X_test, y_test) = boston_housing.load_data()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_function</span><span class="params">(X, y, W)</span>:</span> <span class="comment"># 手工定义一个MSE均方误差函数，W此时是一个向量</span></span><br><span class="line"><span class="comment"># X -&gt; 是一个矩阵，形状是(N,4),N是数据集大小，4是特征数量</span></span><br><span class="line"><span class="comment"># W -&gt; 是一个向量，形状是(4,1)（1*）</span></span><br><span class="line"><span class="comment">#   y_hat = X.dot(weight) # 这是假设函数,其中已经应用了Python的广播功能</span></span><br><span class="line"><span class="comment">#   y_hat = np.dot(X,weight) # 也是正确的</span></span><br><span class="line">    y_hat = X.dot(W.T) <span class="comment"># 也是正确的 点积运算 h(x)=w_0*x_0 + w_1*x_1 + w_2*x_2 + w_3*x_3    </span></span><br><span class="line"><span class="comment">#   y_hat = np.dot(X,weight.T) # 也是正确的</span></span><br><span class="line"><span class="comment">#   y_hat = weight.dot(X) # 错误 shapes (4,) and (160,4) not aligned: 4 (dim 0) != 160 (dim 0)</span></span><br><span class="line"><span class="comment">#   y_hat = np.dot(weight,X) # 错误 shapes (4,) and (160,4) not aligned: 4 (dim 0) != 160 (dim 0)</span></span><br><span class="line">    loss = y_hat-y <span class="comment"># 求出每一个y’和训练集中真实的y之间的差异 </span></span><br><span class="line">    cost = np.sum(loss**<span class="number">2</span>)/len(X) <span class="comment"># 这是均方误差函数的代码实现</span></span><br><span class="line">    <span class="keyword">return</span> cost <span class="comment"># 返回当前模型的均方误差值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(X, y, W, lr, iter)</span>:</span> <span class="comment"># 定义梯度下降函数</span></span><br><span class="line">    l_history = np.zeros(iter) <span class="comment"># 初始化记录梯度下降过程中损失的数组</span></span><br><span class="line">    W_history = np.zeros((iter,len(W))) <span class="comment"># 初始化权重数组 </span></span><br><span class="line">    <span class="keyword">for</span> iter <span class="keyword">in</span> range(iter): <span class="comment"># 进行梯度下降的迭代，就是下多少级台阶</span></span><br><span class="line">        y_hat = X.dot(W) <span class="comment"># 这个是向量化运行实现的假设函数   </span></span><br><span class="line">        loss = y_hat-y <span class="comment"># 中间过程, y_hat和y真值的差</span></span><br><span class="line">        derivative_W = X.T.dot(loss)/(<span class="number">2</span>*len(X)) <span class="comment">#求出多项式的梯度向量</span></span><br><span class="line">        derivative_W = derivative_W.reshape(len(W)) </span><br><span class="line">        W = W - alpha*derivative_W <span class="comment"># 结合下降速率更新权重</span></span><br><span class="line">        l_history[iter] = cost_function(X, y, W) <span class="comment"># 损失的历史记录 </span></span><br><span class="line">        W_history[iter] = W <span class="comment"># 梯度下降过程中权重的历史记录</span></span><br><span class="line">    <span class="keyword">return</span> l_history, W_history <span class="comment"># 返回梯度下降过程数据</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#首先确定参数的初始值</span></span><br><span class="line">iterations = <span class="number">12000</span>; <span class="comment"># 迭代12000次</span></span><br><span class="line">alpha = <span class="number">0.00001</span>; <span class="comment">#学习速率设为0.00001</span></span><br><span class="line">weight = np.array([<span class="number">0.5</span>,<span class="number">1.2</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>]) <span class="comment"># 权重向量</span></span><br><span class="line"><span class="comment">#计算一下初始值的损失</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'当前损失：'</span>,cost_function(X_train, y_train, weight))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义线性回归模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">(X, y, weight, alpha, iterations)</span>:</span> </span><br><span class="line">    loss_history, weight_history = gradient_descent(X, y, </span><br><span class="line">                                                    weight, </span><br><span class="line">                                                    alpha, </span><br><span class="line">                                                    iterations)</span><br><span class="line">    print(<span class="string">"训练最终损失:"</span>, loss_history[<span class="number">-1</span>]) <span class="comment"># 打印最终损失</span></span><br><span class="line">    y_pred = X.dot(weight_history[<span class="number">-1</span>]) <span class="comment"># 预测</span></span><br><span class="line">    traning_acc = <span class="number">100</span> - np.mean(np.abs(y_pred - y)/y)*<span class="number">100</span> <span class="comment"># 计算准确率</span></span><br><span class="line">    print(<span class="string">"线性回归训练准确率: &#123;:.2f&#125;%"</span>.format(traning_acc))  <span class="comment"># 打印准确率</span></span><br><span class="line">    <span class="keyword">return</span> loss_history, weight_history <span class="comment"># 返回训练历史记录</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">loss_history, weight_history = linear_regression(X_train, y_train, weight, alpha, iterations) </span><br><span class="line"></span><br><span class="line">loss_history, weight_history = gradient_descent(X_train, y_train, weight, alpha, iterations) </span><br><span class="line">print(<span class="string">"权重历史记录："</span>, weight_history)</span><br><span class="line">print(<span class="string">"损失历史记录："</span>, loss_history)</span><br></pre></td></tr></table></figure><h3 id="其他代码"><a href="#其他代码" class="headerlink" title="其他代码"></a>其他代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression <span class="comment">#导入线性回归算法模型</span></span><br><span class="line">model = LinearRegression() <span class="comment">#使用线性回归算法</span></span><br><span class="line">model.fit(X_train, y_train) <span class="comment">#用训练集数据，训练机器，拟合函数，确定参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge <span class="comment">#导入线性岭回归算法模型 </span></span><br><span class="line">model = Ridge() <span class="comment">#使用线性回归算法</span></span><br><span class="line">model.fit(X_train, y_train) <span class="comment">#用训练集数据，训练机器，拟合函数，确定参数</span></span><br><span class="line">y_pred = model.predict(X_test) <span class="comment">#预测测试集的Y值</span></span><br><span class="line">print(<span class="string">"线性回归预测评分："</span>, model.score(X_test, y_test)) <span class="comment">#评估预测结果</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/VariableX/article/details/107166602" target="_blank" rel="noopener">https://blog.csdn.net/VariableX/article/details/107166602</a></p><p>使用岭回归和LASSO回归，主要针对自变量之间存在多重共线性或者自变量个数多于样本量的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习平凡之路三&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线性回归&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;网店销售额预测&quot;&gt;&lt;a href=&quot;#网店销售额预测&quot; class=&quot;headerlink&quot; title=&quot;网店销售额预测&quot;&gt;&lt;/a&gt;网店销售额预测&lt;/h2&gt;&lt;blockquote
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="底层实现" scheme="https://djwangweijie.github.io/tags/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    
      <category term="进阶" scheme="https://djwangweijie.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="线性回归算法" scheme="https://djwangweijie.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    
      <category term="多元线性" scheme="https://djwangweijie.github.io/tags/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>机器学习平凡之路二</title>
    <link href="https://djwangweijie.github.io/2021/03/24/2021-03-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E4%BA%8C/"/>
    <id>https://djwangweijie.github.io/2021/03/24/2021-03-24-机器学习平凡之路二/</id>
    <published>2021-03-24T01:23:44.711Z</published>
    <updated>2021-03-24T01:27:38.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习平凡之路二"><a href="#机器学习平凡之路二" class="headerlink" title="机器学习平凡之路二"></a>机器学习平凡之路二</h1><ol><li>数学知识</li><li>python部分基础</li></ol><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><blockquote><p>函数</p></blockquote><p><strong>函数视为一种模型，这种模型是对客观世界复杂事物之间的关系简单模拟</strong></p><p><em>在函数中,一个事物输出随着另一个事物的输入的变化而变化</em></p><p><strong>函数的输入和输出,很多情况下都是数字.函数也可以反映非数学之间的关系</strong></p><p><em>函数需要注意的是输入集中的每一个元素X都要被照顾到。函数的输出值是独一无二的</em></p><blockquote><p>机器学习中的函数</p></blockquote><p><strong>机器学习基本上等价于寻找函数的过程,机器学习到的函数,实现了从特征到结果的一个特定推断。机器学习不是注重特征到标签之间的因果逻辑，更多的是注重期间的相关关系</strong></p><p><em>四方上下曰宇，往故来今曰宙。仰光宇宙之大，俯察品类之盛</em></p><p><strong>如果决定是一个好函数，训练集和验证集上的预测准确并且能够泛化到测试集中，就是好函数</strong></p><p><em>机器学习算法得到的函数，往往能看到数据背后隐藏着的，肉眼不能发现的秘密</em></p><p><strong><em>机器学习算法，可以得到不同的函数。深度学习的函数相当于一大堆线性函数的跨层堆叠。不管什么样的学习，都是对样本集中特征到标签的关系总结。</em></strong></p><h3 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a>函数分类</h3><blockquote><p>线性函数</p></blockquote><p><strong>线性函数只拥有一个变量一阶多项式函数，函数就和直线一样，比如y=-x+5或者y=0.5x+2,线性函数适合模拟简单的关系。比如房屋面积和期售价之间可能会呈线性关系</strong></p><blockquote><p>二次函数和多次函数</p></blockquote><p><strong>函数中自变量X中最大的指数被称为函数的次数。比如y=x的二次方，二次函数是凸函数，随着函数的次数升高，将不再是只有一个最低点的凸函数，此事将出现局部最低点</strong></p><blockquote><p>激活函数</p></blockquote><p><strong>激活函数在机器学习算法中实现的是非线性，阶跃性质的变换</strong></p><p><em>比如y=1(x&gt;0),y=0(x&lt;0)</em></p><p>比如Sigmoid函数，<img src="/images/resources/20210324/image-20210322094310829.png" alt="image-20210322094310829">，e是一个自然常数，约等于2.72</p><p>比如ReLU函数，y=max(x,0)</p><p>比如Leaky ReLU函数，y=max(&amp;x,x) . &amp;代表斜率</p><blockquote><p>对数函数</p></blockquote><p>对数函数是指数函数的逆运算，原来的指数就是对数的底。</p><p><img src="/images/resources/20210324/image-20210322100042683.png" alt="image-20210322100042683"></p><h3 id="函数变化趋势"><a href="#函数变化趋势" class="headerlink" title="函数变化趋势"></a>函数变化趋势</h3><p><strong>机器学习就是研究y如何随着X而变，通过求导和微分来实现的</strong></p><p><strong>导数是定义在连续函数的基础之上的，导数是引导，导航,它与函数上连续两个点之间变化趋势，也就是变化的方向相关</strong></p><p>函数变化趋势至少由两个点体现,A趋近于B的时候,求其变换的极限。这就是导数。导数的值和它附近的一小段连续函数有关。如果没有那么一段连续的函数，就无法计算其切线的斜率。函数在该点也就是不可导的。</p><p><strong>通过求导，实现了以直代曲。也发现了y值随X值变化的方向。也就是在机器学习中可以得到标签y随特征X而变化的方向。导数是针对一个变量而言的函数变化趋向，对于多元的函数，关于一个变量的导数为偏导数。</strong></p><blockquote><p>凸函数</p></blockquote><p>凸函数可以沿着导数给出的方向滚到最低点。在机器学习中无法达到全局最低点是很不理想的情况</p><blockquote><p>梯度</p></blockquote><p><em>对多元函数的各参数求偏导数，然后把所求的各个参数的偏导数以向量的形式写出来，就是梯度</em></p><p>比如:下山,已知远处的位置比此处低很多。如何下山，每走一个位置求解当前的位置的梯度。然后沿着梯度的负方向，也就是往最陡峭的地方向下一步走。</p><p>梯度下降的作用:</p><ol><li>机器学习的本质是找到最优的函数</li><li>如何衡量函数是否最优，方法是尽量减小预测值和真值间的误差</li><li>可以建立误差和模型参数之间的函数</li><li>梯度下降能够引导我们走到凸函数的全局最低端，也就是找到误差最小时的参数。</li></ol><h2 id="机器学习的数据结构"><a href="#机器学习的数据结构" class="headerlink" title="机器学习的数据结构"></a>机器学习的数据结构</h2><p>在机器学忠，用于存储数据的结构叫作张量。张量是机器学习程序中的数字容器。本质上就是各种不同维度的数组。</p><p>张量的维度称为轴axis。轴的个数称为阶(rank)。张量的形状(shple)就是张量的阶加上每个阶的维度</p><h3 id="标量"><a href="#标量" class="headerlink" title="标量"></a>标量</h3><p>scalar。包含一个数字的的张量，标量的功能主要用于流程控制，设置参数等。</p><p><img src="/images/resources/20210324/image-20210322103343239.png" alt="image-20210322103343239"></p><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p>有一组数字组成的数组叫做向量(vector),也就是一阶张量。</p><p><img src="/images/resources/20210324/image-20210322103840926.png" alt="image-20210322103840926"></p><p>比如<img src="/images/resources/20210324/image-20210322104521694.png" alt="image-20210322104521694"></p><p>X_train是一个2D的矩阵，是404个样本数据的集合。y_train是一个向量，是一个404维的标签向量</p><p><em>向量的维度:表示沿着某个轴上的元素个数</em></p><p>而X_train[0]，相当于是一个13维向量(也就是1D张量)，简单的说就是包含13个特征</p><h4 id="向量的点积"><a href="#向量的点积" class="headerlink" title="向量的点积"></a>向量的点积</h4><p>两个向量之间可以进行乘法运算，向量的点积结果是一个值，也就是一个标量，比如</p><p><img src="/images/resources/20210324/image-20210322105307512.png" alt="image-20210322105307512"></p><h3 id="矩阵-2D张量"><a href="#矩阵-2D张量" class="headerlink" title="矩阵(2D张量)"></a>矩阵(2D张量)</h3><p>矩阵是2D张量一般形状为 (样本轴,特征轴)，比如城市交通数据集，包含城市的街道名，等28个交通数据特征。共800个街道。张量形状为(800,28)</p><h4 id="矩阵的点积"><a href="#矩阵的点积" class="headerlink" title="矩阵的点积"></a>矩阵的点积</h4><p>矩阵相乘，第一个矩阵的列数必须等于第二个矩阵的行数。(m,n)乘以(n,m)得到一个矩阵(m,m),公式自行百度</p><h3 id="序列数据"><a href="#序列数据" class="headerlink" title="序列数据"></a>序列数据</h3><p><img src="/images/resources/20210324/image-20210322131214261.png" alt="image-20210322131214261"></p><p>比如</p><p>第一轴: 样本轴,一年记录下来的数据共365个。也就是365维向量</p><p>第二轴:时间步轴,每天一共24小时，每小时4个15分钟，共96维</p><p>第三轴：特征轴,一共是温度，湿度，风力3个维度</p><p>也就是对于时间数据集的形状为3D张量(样本,时间,标签)</p><h3 id="图像数据"><a href="#图像数据" class="headerlink" title="图像数据"></a>图像数据</h3><p>图像数据本身包含高度，宽度，在加上颜色深度的通道。对于图像数据集来说形状为(样本,图像高度,图像宽度,颜色通道)</p><p>在机器学习中，数据是一批一批的进行处理</p><h3 id="视频数据"><a href="#视频数据" class="headerlink" title="视频数据"></a>视频数据</h3><p>视频数据需要5D张量也就是(样本,帧，高度，宽度，颜色深度)</p><h2 id="python中张量的创建和运算"><a href="#python中张量的创建和运算" class="headerlink" title="python中张量的创建和运算"></a>python中张量的创建和运算</h2><p><strong>机器学习中张量大多是通过Numpy数组来实现的</strong></p><p><img src="/images/resources/20210324/image-20210323141707108.png" alt="image-20210323141707108"></p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p><img src="/images/resources/20210324/image-20210323141928869.png" alt="image-20210323141928869"></p><p><em>机器学习一般先从文本文件中把所有样本读取到Dataframe格式的数据，然后用array方法转为Numpy数组，也就是变为张量。然后进行后续的操作</em></p><h3 id="通过索引和切片访问张量中的数据"><a href="#通过索引和切片访问张量中的数据" class="headerlink" title="通过索引和切片访问张量中的数据"></a>通过索引和切片访问张量中的数据</h3><p>索引既是访问张量某个具体的数据</p><p>切片就是访问一个范围内的数据</p><p><img src="/images/resources/20210324/image-20210323142446813.png" alt="image-20210323142446813"></p><h3 id="张量的操作"><a href="#张量的操作" class="headerlink" title="张量的操作"></a>张量的操作</h3><p><img src="/images/resources/20210324/image-20210323143241936.png" alt="image-20210323143241936"></p><h2 id="python中的广播"><a href="#python中的广播" class="headerlink" title="python中的广播"></a>python中的广播</h2><p>Python的广播功能就是自动自发地把一个变成一排的向量，把一个低维的数组变为高维的数组<br>张量的的形状和第一位加数保持一致</p><p><img src="/images/resources/20210324/image-20210323144002199.png" alt="image-20210323144002199"></p><blockquote><p>向量和矩阵的点积运算</p></blockquote><p>向量a = [a1,a2,…,an]</p><p>向量b = [b1,b2,…,bn]</p><p>aXb = a1xb1+a2xb2 +…+anxbn</p><p>矩阵形状（a,b）和 （b,c）结果为（a,c）</p><h3 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h3><p>某公司男生和女生各占50%，烟民占总人数的10%，女烟民占1%，遇到一个烟民的概率可能性多大</p><p>事件B —-烟民</p><p>事件A —-女生</p><p>P（B） —-10% 随便遇到一个烟民的概率</p><p>P（A）—-50% 随便遇到一个女生的概率</p><p>p(B|A) 1% 已知100个人里面才有一个烟民  <em>已知A ，B的概率</em></p><p>p(A|B) = 1% X 50% /10% = 5%  <em>已知B，A的概率</em></p><p>条件概率就是已知事件发生的时候，前者的概率</p><p>这个就是贝叶斯定理</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>正态分布 自行百度</p><p>标准差(sigma)是根据方差进行计算出来的。方差是一组资料中实际数值与算术平均数的差值做平方结果相加之后，除以总数，标准差是方差算术平方根</p><p>方差和标准差都是数据相对期望值的离散程度</p><p>一般数据标准化，就是样本特征值减去期均值，然后除以期标准差进行缩放</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习平凡之路二&quot;&gt;&lt;a href=&quot;#机器学习平凡之路二&quot; class=&quot;headerlink&quot; title=&quot;机器学习平凡之路二&quot;&gt;&lt;/a&gt;机器学习平凡之路二&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;数学知识&lt;/li&gt;
&lt;li&gt;python部分基础&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="快速进阶" scheme="https://djwangweijie.github.io/tags/%E5%BF%AB%E9%80%9F%E8%BF%9B%E9%98%B6/"/>
    
      <category term="算法" scheme="https://djwangweijie.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="概念" scheme="https://djwangweijie.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
      <category term="数学" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>机器学习平凡之路一</title>
    <link href="https://djwangweijie.github.io/2021/03/20/2021-03-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E4%B8%80/"/>
    <id>https://djwangweijie.github.io/2021/03/20/2021-03-20-机器学习平凡之路一/</id>
    <published>2021-03-19T16:19:43.825Z</published>
    <updated>2021-03-19T16:25:19.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习平凡之路一"><a href="#机器学习平凡之路一" class="headerlink" title="机器学习平凡之路一"></a>机器学习平凡之路一</h1><ol><li>一些概念</li><li>一些操作</li><li>基本的机器学习术语</li><li>机器学习项目结构</li></ol><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p><strong>机器学习是AI技术的分支,深度学习是机器学习的技术之一</strong></p><p><strong>机器学习的关键内涵在于利用计算机的运算能力从大量的数据中发现一个函数或者模型，通过她来模拟现实世界事物之间的关系，从而预测或者判断的功能</strong></p><p><strong>自变量在机器学习中叫做特征，也可以叫做标签。或者叫做标记也可以</strong></p><p><em>比如:爸爸的身高(自变量X1),妈妈的身高(自变量X2),可能会影响孩子的身高(因变量y)</em></p><p><strong>机器学习是在已知数据集的基础上，反复计算通过比较贴切的函数，找到之间的关系</strong></p><p><strong>机器学习中监督学习需要标签数据,无监督学习不需要标签数据,半监督学习介于2者之间</strong></p><p><strong>深度学习:就是层数较多,结构比较复杂的神经网络的机器学习，这个过程中会产生数据由非结构化到结构化的转变</strong></p><p><em>注意:简单的说就是一张32px X 32px的图片通过深度学习转换为机器能够看明白的编码</em></p><p><strong>强化学习：研究智能体如何基于环境做出行动反应,以取得最大化的累积奖励</strong></p><h3 id="机器学习两大场景"><a href="#机器学习两大场景" class="headerlink" title="机器学习两大场景"></a>机器学习两大场景</h3><h4 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h4><p><strong>回归问题通常用来预测一个值,标签的值是连续的</strong></p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><strong>分类问题是将事物标记一个类别的标签，结果为离散值，也就是类别中的一个选项</strong></p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p><strong>聚类就是在没有便签的情况下，将数据按照特征的性质分成不同的簇</strong></p><p><strong>关联规则就是找到特征之间的影响关系</strong></p><p><strong>时间序列指内部结构随时间呈现规律性变化的数据集，类似金融市场，太阳活动等</strong></p><p><strong>机器学习不是万能的，只能作用于和已知数据集类似的数据，优势在于计算量，速度和准确性。暂时没有形成人类的智力思维模式</strong></p><h2 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h2><p><img src="/images/resources/20210320/image-20210319144446801.png" alt="image-20210319144446801"></p><h3 id="图形展示"><a href="#图形展示" class="headerlink" title="图形展示"></a>图形展示</h3><p><img src="/images/resources/20210320/image-20210319145019614.png" alt="image-20210319145019614"></p><p><strong>预测结果可以看到随着家庭的收入增高，房价也是随之水涨船高。</strong></p><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><table><thead><tr><th>术语</th><th>定义</th><th align="center">数学描述</th><th align="center">示例</th></tr></thead><tbody><tr><td>数据集</td><td>数据的集合</td><td align="center">{(x1,y1),…,(xn,yn)}</td><td align="center">比如1000个房屋的面积，楼层，以及房价</td></tr><tr><td>样本</td><td>数据集中的一条具体记录</td><td align="center">(x1,y1)</td><td align="center">一个房屋的数据记录</td></tr><tr><td>标签</td><td>预测的结果也称作为目标</td><td align="center">y</td><td align="center">房价</td></tr><tr><td>有样本标签</td><td>特征，标签，用于训练</td><td align="center">(x,y)</td><td align="center">800个房屋信息</td></tr><tr><td>无标签样本</td><td>有特征,无标签</td><td align="center">(x,?)</td><td align="center">200个房屋信息不带房价</td></tr><tr><td>模型</td><td>样本的特征映射到预测标签</td><td align="center">f(x)</td><td align="center">通过特征信息确定房价的函数</td></tr><tr><td>模型中的参数</td><td>参数确定了机器学习的模型</td><td align="center">f(x)</td><td align="center">f(x) = 3x+2中的3和2</td></tr><tr><td>模型的映射结果</td><td>通过模型获取到的无标签样本的标签</td><td align="center">y’</td><td align="center">200个预测出来的房价</td></tr></tbody></table><p><strong>特征的维度指的是特征的数目,不同的数据维度有多有少，比如房屋面积就是特征，图片100px X 100px,每一个像素是一个特征，颜色通道有3个，那就是就3万个特征</strong></p><p><strong>标签就是机器学习要输出的结果</strong></p><p><strong>模型就是函数，就是执行预测的工具</strong></p><h2 id="机器学习项目结构"><a href="#机器学习项目结构" class="headerlink" title="机器学习项目结构"></a>机器学习项目结构</h2><ol><li>函数模型</li><li>评估函数的优劣</li><li>确定最优的函数</li></ol><table><thead><tr><th>步骤一</th><th>步骤二</th><th>步骤三</th><th>步骤四</th><th>步骤五</th></tr></thead><tbody><tr><td>问题的定义</td><td>数据的收集和预处理</td><td>模型的选择</td><td>选择机器学习模型</td><td>超参数调试和性能优化</td></tr></tbody></table><h3 id="问题的定义"><a href="#问题的定义" class="headerlink" title="问题的定义"></a>问题的定义</h3><p><strong>可以按照痛点,现状,目标来进行思考</strong></p><h3 id="数据的收集和预处理"><a href="#数据的收集和预处理" class="headerlink" title="数据的收集和预处理"></a>数据的收集和预处理</h3><ol><li>可视化:通过分析工具或者Excel对数据有一个基本的了解</li><li>数据向量化:把原始数据格式化,让机器变得可以读取。将文字转为one-hot编码，类别变为0,1</li><li>处理坏数据和缺失值</li><li>特征缩放自行百度</li><li>特征工程和特征提取也就是选择最有价值的特性</li></ol><h3 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h3><p><img src="/images/resources/20210320/image-20210319164116130.png" alt="image-20210319164116130"></p><p>注意：<strong>改变格式，是因为keras要求图像数据集导入卷积网络模型为4阶张量,最后一阶代表颜色深度，灰度图像只有一个颜色通道，设置值为1，one-hot编码请自行百度</strong></p><h3 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h3><p>使用前先读<a href="https://blog.csdn.net/monk1992/article/details/89947267" target="_blank" rel="noopener">https://blog.csdn.net/monk1992/article/details/89947267</a></p><p>2.0以下的版本</p><p><img src="/images/resources/20210320/image-20210319165914801.png" alt="image-20210319165914801"></p><p><strong>注意:以上代码包含2个2维卷积层,2个最大池化层,2个遗忘层,防止过度拟合.最后通过全连接层，通过分类器输出预测标签</strong></p><p>最新版本的代码参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential, load_model</span><br><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, <span class="comment"># 添加Conv2D层</span></span><br><span class="line">                 input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>))) <span class="comment"># 指定输入数据样本张量的类型</span></span><br><span class="line">model.add(layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))) <span class="comment"># 添加MaxPooling2D层</span></span><br><span class="line">model.add(layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>)) <span class="comment"># 添加Conv2D层</span></span><br><span class="line">model.add(layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))) <span class="comment"># 添加MaxPooling2D层</span></span><br><span class="line">model.add(layers.Dropout(<span class="number">0.25</span>)) <span class="comment"># 添加Dropout层</span></span><br><span class="line">model.add(layers.Flatten()) <span class="comment"># 展平</span></span><br><span class="line">model.add(layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>)) <span class="comment"># 添加全连接层</span></span><br><span class="line">model.add(layers.Dropout(<span class="number">0.5</span>)) <span class="comment"># 添加Dropout层</span></span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)) <span class="comment"># Softmax分类激活，输出10维分类码</span></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.compile(optimizer=<span class="string">'rmsprop'</span>, <span class="comment"># 指定优化器</span></span><br><span class="line">              loss=<span class="string">'categorical_crossentropy'</span>, <span class="comment"># 指定损失函数</span></span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>]) <span class="comment"># 指定验证过程中的评估指标</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210320/image-20210319172807378.png" alt="image-20210319172807378"></p><h3 id="训练机器-确定参数"><a href="#训练机器-确定参数" class="headerlink" title="训练机器,确定参数"></a>训练机器,确定参数</h3><p><img src="/images/resources/20210320/image-20210319234159152.png" alt="image-20210319234159152"></p><p><strong>通过训练可以看出accuracy代表训练集上的预测准确率,val_accuracy代表验证集上的预测准确率</strong></p><h3 id="关于超参数调试和性能优化"><a href="#关于超参数调试和性能优化" class="headerlink" title="关于超参数调试和性能优化"></a>关于超参数调试和性能优化</h3><ol><li>机器学习重在评估</li><li>机器训练的过程，对于模型内部参数的评估是通过损失函数进行的</li><li>机器训练结束后，还要进行验证。现在是指明使用accuracy，使用分类的准确率做为验证指标</li><li>k折验证将数据划分为大小相通的k个分区。每个分区打出的分数取平均分数。</li></ol><p><img src="/images/resources/20210320/image-20210320001517281.png" alt="image-20210320001517281"></p><p><img src="/images/resources/20210320/image-20210320001720860.png" alt="image-20210320001720860"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习平凡之路一&quot;&gt;&lt;a href=&quot;#机器学习平凡之路一&quot; class=&quot;headerlink&quot; title=&quot;机器学习平凡之路一&quot;&gt;&lt;/a&gt;机器学习平凡之路一&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;一些概念&lt;/li&gt;
&lt;li&gt;一些操作&lt;/li&gt;
&lt;li&gt;基本的机器学习术
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://djwangweijie.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="快速进阶" scheme="https://djwangweijie.github.io/tags/%E5%BF%AB%E9%80%9F%E8%BF%9B%E9%98%B6/"/>
    
      <category term="算法" scheme="https://djwangweijie.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="模型" scheme="https://djwangweijie.github.io/tags/%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="概念" scheme="https://djwangweijie.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>面向用户开发界面(完结)</title>
    <link href="https://djwangweijie.github.io/2021/03/11/2021-03-11-%E9%9D%A2%E5%90%91%E7%94%A8%E6%88%B7%E5%BC%80%E5%8F%91%E7%95%8C%E9%9D%A2(%E5%AE%8C%E7%BB%93)/"/>
    <id>https://djwangweijie.github.io/2021/03/11/2021-03-11-面向用户开发界面(完结)/</id>
    <published>2021-03-11T01:54:22.368Z</published>
    <updated>2021-03-11T01:59:09.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向用户开发界面"><a href="#面向用户开发界面" class="headerlink" title="面向用户开发界面"></a>面向用户开发界面</h1><p>1.使用functionView</p><p>2.使用class-basedView</p><h2 id="使用functionView"><a href="#使用functionView" class="headerlink" title="使用functionView"></a>使用functionView</h2><h3 id="合理编排url"><a href="#合理编排url" class="headerlink" title="合理编排url"></a>合理编排url</h3><p>根据上次的需求有博客首页,博文详情页,分类列表页，标签列表页，友链展示页</p><p>决定的url可以有:</p><ol><li>博客首页:127.0.0.1:8080</li><li>博文详情页:127.0.0.1:8080/post/<post_id>.html</post_id></li><li>分类列表页:127.0.0.1:8080/category/<category_id>/</category_id></li><li>标签列表页:127.0.0.1:8080/tag/<tag_id></tag_id></li><li>友链展示页:127.0.0.1:8080/links</li></ol><h3 id="定义相关的url"><a href="#定义相关的url" class="headerlink" title="定义相关的url"></a>定义相关的url</h3><p>在urls.py中代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># view相当于视图控制层</span></span><br><span class="line"><span class="keyword">from</span> blog.views <span class="keyword">import</span> post_detail, post_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> config.views <span class="keyword">import</span> links</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, custom_site.urls),</span><br><span class="line">    url(<span class="string">r'^super_admin/'</span>,admin.site.urls),</span><br><span class="line"></span><br><span class="line">    url(<span class="string">r'^$'</span>,post_list),</span><br><span class="line">    <span class="comment"># 代表定义了一个组，匹配后面的\d+</span></span><br><span class="line">    url(<span class="string">r'^category/(?P&lt;category_id&gt;\d+)/$'</span>,post_list),</span><br><span class="line">    url(<span class="string">r'^tag/(?P&lt;tag_id&gt;\d+)/$'</span>,post_list),</span><br><span class="line">    url(<span class="string">r'^post/(?P&lt;post_id&gt;\d+).html$'</span>,post_detail),</span><br><span class="line">    url(<span class="string">r'^links/$'</span>,links)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>完整的url参数:</p><p>url(正则表达式字符串,视图函数,固定参数,此url的名称)</p><h3 id="编写相关View的代码"><a href="#编写相关View的代码" class="headerlink" title="编写相关View的代码"></a>编写相关View的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数暂时现在可以处理种类和标签的请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">post_list</span><span class="params">(request, category_id=None,tag_id=None)</span>:</span></span><br><span class="line">    content  = <span class="string">'post _list category_id=&#123;category_id&#125;, tag_id=&#123;tag_id&#125;'</span>.format(</span><br><span class="line">        category_id = category_id,</span><br><span class="line">        tag_id = tag_id</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_detail</span><span class="params">(request, post_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'detail'</span>)</span><br></pre></td></tr></table></figure><h4 id="render基础用法"><a href="#render基础用法" class="headerlink" title="render基础用法"></a>render基础用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">post_list</span><span class="params">(request, category_id=None,tag_id=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  render(request,<span class="string">'blog/list.html'</span>,context=&#123;<span class="string">'name'</span>:<span class="string">'post_list'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_detail</span><span class="params">(request, post_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'blog/detail.html'</span>,context=&#123;<span class="string">'name'</span>:<span class="string">'post_detail'</span>&#125;)</span><br></pre></td></tr></table></figure><p>render一共6个参数:</p><ol><li>request对象</li><li>模版名称</li><li>字典类型数据,可以传递到模版中</li><li>页面编码类型</li><li>状态码</li><li>使用哪种模版引擎解析</li></ol><h4 id="配置模版"><a href="#配置模版" class="headerlink" title="配置模版"></a>配置模版</h4><p><img src="/images/resources/20210311/image-20210226101505726.png" alt="image-20210226101505726"></p><h4 id="编写相应的页面和逻辑"><a href="#编写相应的页面和逻辑" class="headerlink" title="编写相应的页面和逻辑"></a>编写相应的页面和逻辑</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个函数暂时现在可以处理种类和标签的请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">post_list</span><span class="params">(request, category_id=None,tag_id=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tag_id:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            tag = Tag.objects.get(id=tag_id)</span><br><span class="line">        <span class="keyword">except</span> Tag.DoesNotExist:</span><br><span class="line">            post_list = []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            post_list = tag.post_set.filter(status=Post.STATUS_NORMAL)   <span class="comment"># eles代表程序正常执行一样执行</span></span><br><span class="line">            <span class="comment"># post_set是反向生成了一个外键名字叫xxx_set</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        post_list = Post.objects.filter(status=Post.STATUS_NORMAL)</span><br><span class="line">        <span class="keyword">if</span> category_id:</span><br><span class="line">            post_list = post_list.filter(category_id=category_id)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  render(request,<span class="string">'blog/list.html'</span>,context=&#123;<span class="string">'post_list'</span>:post_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_detail</span><span class="params">(request, post_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post = Post.objects.get(id=post_id)</span><br><span class="line">    <span class="keyword">except</span> Post.DoesNotExist:</span><br><span class="line">        post = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'blog/detail.html'</span>,context=&#123;<span class="string">'post'</span>: post&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>页面展示为</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--list.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for post in post_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/post/&#123;&#123; post.id &#125;&#125;.html"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>作者:&#123;&#123; post.owner.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>分类:&#123;&#123; post.category.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--detail.html --&gt;</span></span><br><span class="line">&#123;% if post %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>作者:&#123;&#123; post.owner.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>分类:&#123;&#123; post.category.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123; post.content &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210311/image-20210226150123228.png" alt="image-20210226150123228"></p><p><img src="/images/resources/20210311/image-20210226150144753.png" alt="image-20210226150144753"></p><h4 id="重构页面视图"><a href="#重构页面视图" class="headerlink" title="重构页面视图"></a>重构页面视图</h4><p>可以在模型中构建api方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_by_tag</span><span class="params">(tag_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tag = Tag.objects.get(id=tag_id)</span><br><span class="line">    <span class="keyword">except</span> Tag.DoesNotExist:</span><br><span class="line">        tag = <span class="literal">None</span></span><br><span class="line">        post_list =[]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        post_list = tag.post_set.filter(status=Post.STATUS_NORMAL)\</span><br><span class="line">                    .select_related(<span class="string">'owner'</span>,<span class="string">'category'</span>)</span><br><span class="line">    <span class="keyword">return</span> post_list, tag</span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_by_category</span><span class="params">(category_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        category = Category.objects.get(id=category_id)</span><br><span class="line">    <span class="keyword">except</span> Category.DoesNotExist:</span><br><span class="line">        category = <span class="literal">None</span></span><br><span class="line">        post_list = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        post_list = category.post_set.filter(status=Post.STATUS_NORMAL)\</span><br><span class="line">                    .select_related(<span class="string">'owner'</span>,<span class="string">'category'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">latest_posts</span><span class="params">(cls)</span>:</span></span><br><span class="line">    queryset = cls.Objects.filter(status=cls.STATUS_NORMAL)</span><br><span class="line">    <span class="keyword">return</span> queryset</span><br><span class="line"><span class="comment"># 参考文章 https://blog.csdn.net/guanmaoning/article/details/106746740</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个函数暂时现在可以处理种类和标签的请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">post_list</span><span class="params">(request, category_id=None,tag_id=None)</span>:</span></span><br><span class="line">    tag = <span class="literal">None</span></span><br><span class="line">    category = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> tag_id:</span><br><span class="line">        post_list, tag = Post.get_by_tag(tag_id)</span><br><span class="line">    <span class="keyword">elif</span> category_id:</span><br><span class="line">        post_list, category = Post.get_by_category(category_id)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        post_list = Post.latest_posts()</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'category'</span>: category,</span><br><span class="line">        <span class="string">'tag'</span>: tag,</span><br><span class="line">        <span class="string">'post_list'</span>: post_list</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其余页面代码大同小异</p><p>关于注解属性的文章可以参考 <a href="https://zhuanlan.zhihu.com/p/64487092" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/64487092</a></p><p>关于渲染不同的数据到不同的页面中，可以参考一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">content_html</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" 通过直接渲染模板 """</span></span><br><span class="line">    <span class="keyword">from</span> blog.models <span class="keyword">import</span> Post  <span class="comment"># 避免循环引用</span></span><br><span class="line">    <span class="keyword">from</span> comment.models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> self.display_type == self.DISPLAY_HTML:</span><br><span class="line">        result = self.content</span><br><span class="line">    <span class="keyword">elif</span> self.display_type == self.DISPLAY_LATEST:</span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">'posts'</span>: Post.latest_posts()</span><br><span class="line">        &#125;</span><br><span class="line">        result = render_to_string(<span class="string">'config/blocks/sidebar_posts.html'</span>, context)</span><br><span class="line">    <span class="keyword">elif</span> self.display_type == self.DISPLAY_HOT:</span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">'posts'</span>: Post.hot_posts()</span><br><span class="line">        &#125;</span><br><span class="line">        result = render_to_string(<span class="string">'config/blocks/sidebar_posts.html'</span>, context)</span><br><span class="line">    <span class="keyword">elif</span> self.display_type == self.DISPLAY_COMMENT:</span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">'comments'</span>: Comment.objects.filter(status=Comment.STATUS_NORMAL)</span><br><span class="line">        &#125;</span><br><span class="line">        result = render_to_string(<span class="string">'config/blocks/sidebar_comments.html'</span>, context)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="整理模版代码"><a href="#整理模版代码" class="headerlink" title="整理模版代码"></a>整理模版代码</h3><h4 id="抽象基础模版"><a href="#抽象基础模版" class="headerlink" title="抽象基础模版"></a>抽象基础模版</h4><p>抽象出base.html</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;博客系统&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;顶部分类:</span><br><span class="line">    &#123;% <span class="keyword">for</span> cate <span class="keyword">in</span> navs  %&#125;</span><br><span class="line">    &lt;a href="/category/&#123;&#123; cate.id &#125;&#125;"&gt;&#123;&#123; cate.name&#125;&#125;&lt;/a&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;div&gt;底部分类:</span><br><span class="line">    &#123;% <span class="keyword">for</span> cate <span class="keyword">in</span> navs  %&#125;</span><br><span class="line">    &lt;a href="/category/&#123;&#123; cate.id &#125;&#125;"&gt;&#123;&#123; cate.name&#125;&#125;&lt;/a&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;侧边栏展示:</span><br><span class="line">&#123;% <span class="keyword">for</span> sidebar <span class="keyword">in</span> sidebars %&#125;</span><br><span class="line">&lt;h4&gt;&#123;&#123; sidebar.title &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &#123;&#123; sidebar.content_html &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>其余代码参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">'./base.html'</span> %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> tag %&#125;</span><br><span class="line">标签页: &#123;&#123; tag.name&#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endblock  %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> category %&#125;</span><br><span class="line">分类页: &#123;&#123; category.name&#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> post_list %&#125;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;a href="/post/&#123;&#123; post.id &#125;&#125;.html"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;span&gt;作者:&#123;&#123; post.owner.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;分类:&#123;&#123; post.category.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; post.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&#123;% endblock  %&#125;</span><br></pre></td></tr></table></figure><h4 id="关于url解耦"><a href="#关于url解耦" class="headerlink" title="关于url解耦"></a>关于url解耦</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^post/(?P&lt;post_id&gt;\d+).html$&apos;,post_detail name=&apos;post-detail&apos;),</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;post-detail&apos; post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="使用class-based-view"><a href="#使用class-based-view" class="headerlink" title="使用class-based view"></a>使用class-based view</h2><p><a href="https://www.cnblogs.com/donghaiming/p/11007505.html" target="_blank" rel="noopener">https://www.cnblogs.com/donghaiming/p/11007505.html</a> 分页参考代码如下</p><p><a href="https://blog.csdn.net/bibinGee/article/details/104859388" target="_blank" rel="noopener">https://blog.csdn.net/bibinGee/article/details/104859388</a>  关于类视图 当然可以查阅书籍159-163</p><p><a href="https://blog.csdn.net/pyrans/article/details/82763314" target="_blank" rel="noopener">https://blog.csdn.net/pyrans/article/details/82763314</a> 使用静态资源参考</p><p><a href="https://www.cnblogs.com/sch01ar/p/11508002.html" target="_blank" rel="noopener">https://www.cnblogs.com/sch01ar/p/11508002.html</a> 关于django定义中间件</p><p>关于restframwork和一些其他的包插件等，可以到官方市场和博客中查阅</p><h2 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h2><p>关于django，一个项目需要流程化，比如工作流等特别定制等，除此之外基本都可以考虑使用djangoAdmin来解决</p><p>关于django的学习成本主要在djangoAdmin和ORM上。如果需要自行画页面就需要加上django的模版</p><p>关于部署和java保持一致。加载类似tomcat的服务器。然后用nginx做分流</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向用户开发界面&quot;&gt;&lt;a href=&quot;#面向用户开发界面&quot; class=&quot;headerlink&quot; title=&quot;面向用户开发界面&quot;&gt;&lt;/a&gt;面向用户开发界面&lt;/h1&gt;&lt;p&gt;1.使用functionView&lt;/p&gt;
&lt;p&gt;2.使用class-basedView&lt;/p
      
    
    </summary>
    
    
      <category term="django开发" scheme="https://djwangweijie.github.io/categories/django%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="web开发" scheme="https://djwangweijie.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="快速构建" scheme="https://djwangweijie.github.io/tags/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA/"/>
    
      <category term="ORM" scheme="https://djwangweijie.github.io/tags/ORM/"/>
    
      <category term="日志管理" scheme="https://djwangweijie.github.io/tags/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    
      <category term="管理后台" scheme="https://djwangweijie.github.io/tags/%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>开发django管理后台</title>
    <link href="https://djwangweijie.github.io/2021/02/22/2021-02-22-django%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
    <id>https://djwangweijie.github.io/2021/02/22/2021-02-22-django后台管理/</id>
    <published>2021-02-21T17:49:30.753Z</published>
    <updated>2021-02-21T17:57:58.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发django管理后台"><a href="#开发django管理后台" class="headerlink" title="开发django管理后台"></a>开发django管理后台</h1><ol><li>配置admin进行操作</li><li>定制admin</li><li>复用admin</li></ol><h2 id="配置admin进行操作"><a href="#配置admin进行操作" class="headerlink" title="配置admin进行操作"></a>配置admin进行操作</h2><p><a href="https://docs.djangoproject.com/zh-hans/3.1/ref/contrib/admin/" target="_blank" rel="noopener">关于django的站点可以参考</a></p><p>采用文档的原话：管理有很多用于定制的钩子，但要注意不要试图专门使用这些钩子。如果您需要提供一个更以流程为中心的接口，抽象掉数据库表和替代的实现细节，那么可能是时候编写自己的视图了</p><h3 id="编写blogAdmin代码"><a href="#编写blogAdmin代码" class="headerlink" title="编写blogAdmin代码"></a>编写blogAdmin代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post, Category, Tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册管理模型</span></span><br><span class="line"><span class="meta">@admin.register(Category)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># 用于在更改列表中显示更改哪些字段</span></span><br><span class="line">    list_display = (<span class="string">'name'</span>,<span class="string">'status'</span>,<span class="string">'is_nav'</span>,<span class="string">'create_time'</span>)</span><br><span class="line">    <span class="comment"># 使用该fields选项可以在“添加”和“更改”页面上的表单中进行简单的布局更改</span></span><br><span class="line">    fields = (<span class="string">'name'</span>,<span class="string">'status'</span>,<span class="string">'is_nav'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Tag)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'name'</span>,<span class="string">'status'</span>,<span class="string">'create_time'</span>)</span><br><span class="line">    fields = (<span class="string">'name'</span>,<span class="string">'status'</span>)</span><br></pre></td></tr></table></figure><p>接下激活虚拟环境</p><p>执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">manage.py createsuperuser</span><br><span class="line"><span class="comment"># 启动服务 输入:地址/admin</span></span><br><span class="line">manage.py runserver</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210222/image-20210221155615331.png" alt="image-20210221155615331"></p><h3 id="修复小bug"><a href="#修复小bug" class="headerlink" title="修复小bug"></a>修复小bug</h3><p>因为我们的模型都是有关联作者的，这个时候实际上fields上面是缺少作者选项的。添加进去就可以了。但是会存在任何作者把创建的内容改为任意作者。这个时候我们需要重写savemodel方法，引用官方文档说明:</p><p><img src="/images/resources/20210222/image-20210221160636141.png" alt="image-20210221160636141"></p><p>修改代码后如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post, Category, Tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册管理模型</span></span><br><span class="line"><span class="meta">@admin.register(Category)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># 用于在更改列表中显示更改哪些字段</span></span><br><span class="line">    list_display = (<span class="string">'name'</span>,<span class="string">'status'</span>,<span class="string">'is_nav'</span>,<span class="string">'create_time'</span>)</span><br><span class="line">    <span class="comment"># 使用该fields选项可以在“添加”和“更改”页面上的表单中进行简单的布局更改</span></span><br><span class="line">    fields = (<span class="string">'name'</span>,<span class="string">'status'</span>,<span class="string">'is_nav'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(self, request, obj, form, change)</span>:</span></span><br><span class="line">        <span class="comment"># request获取的是当前已经登录的用户 obj就是对应的注册的模型</span></span><br><span class="line">        obj.owner = request.user</span><br><span class="line">        <span class="keyword">return</span> super(CategoryAdmin,self).save_model(request, obj, form, change)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Tag)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'name'</span>,<span class="string">'status'</span>,<span class="string">'create_time'</span>)</span><br><span class="line">    fields = (<span class="string">'name'</span>,<span class="string">'status'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(self, request, obj, form, change)</span>:</span></span><br><span class="line">        obj.owner = request.user</span><br><span class="line">        <span class="keyword">return</span> super(TagAdmin,self).save_model(request, obj, form, change)</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><p><img src="/images/resources/20210222/image-20210221161654566.png" alt="image-20210221161654566"></p><p>对于django2.1下没有查看的权限可以参考<a href="https://blog.csdn.net/u011519550/article/details/100171861" target="_blank" rel="noopener">https://blog.csdn.net/u011519550/article/details/100171861</a></p><p>同时:如果只想看到自己建立的数据可以:</p><p><img src="/images/resources/20210222/image-20210221163755523.png" alt="image-20210221163755523"></p><h3 id="细致的配置post管理后台"><a href="#细致的配置post管理后台" class="headerlink" title="细致的配置post管理后台"></a>细致的配置post管理后台</h3><p>1.先说2个东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个可以用来解析视图甚至admin，从url中寻找路径</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="comment"># 格式化一段html代码</span></span><br><span class="line"><span class="keyword">from</span> django.utils.html <span class="keyword">import</span> format_html</span><br></pre></td></tr></table></figure><p>2.增加以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Post)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># 更改列表显示的字段,这里的operator是自定义的方法格式化了一段html代码</span></span><br><span class="line">    list_display = [</span><br><span class="line">        <span class="string">'title'</span>, <span class="string">'category'</span>, <span class="string">'status'</span>,</span><br><span class="line">        <span class="string">'create_time'</span>,<span class="string">'operator'</span></span><br><span class="line">    ]  </span><br><span class="line">    <span class="comment"># 用来配置哪些字段可以作为链接。点击它们就可以进入编辑页面</span></span><br><span class="line">    list_display_links = [] </span><br><span class="line">    <span class="comment"># 配置页面过滤器,意味着可以通过种类的值对数据进行过滤</span></span><br><span class="line">    list_filter = [<span class="string">'category'</span>,]</span><br><span class="line">    <span class="comment"># 配置可以搜索的字段</span></span><br><span class="line">    search_fields = [<span class="string">'title'</span>, <span class="string">'category__name'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动作相关的配置</span></span><br><span class="line">    actions_on_top = <span class="literal">True</span></span><br><span class="line">    actions_on_bottom = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编辑页面</span></span><br><span class="line">    save_on_top = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    fields = (</span><br><span class="line">        (<span class="string">'category'</span>, <span class="string">'title'</span>),</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'status'</span>,</span><br><span class="line">        <span class="string">'content'</span>,</span><br><span class="line">        <span class="string">'tag'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operator</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> format_html(</span><br><span class="line">            <span class="string">'&lt;a href="&#123;&#125;"&gt;编辑&lt;/a&gt;'</span>,</span><br><span class="line">            reverse(<span class="string">'admin:blog_post_change'</span>,args=(obj.id,)) <span class="comment"># 这里就是从url中寻找地址</span></span><br><span class="line">        )</span><br><span class="line">    operator.short_description = <span class="string">'操作'</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(self, request, obj, form, change)</span>:</span></span><br><span class="line">        obj.owner = request.user</span><br><span class="line">        <span class="keyword">return</span> super(TagAdmin,self).save_model(request, obj, form, change)</span><br></pre></td></tr></table></figure><p>同理如果我们要增加分类下面有多少文章可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_count</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> obj.post_set.count()</span><br><span class="line"></span><br><span class="line">post_count.short_description = <span class="string">'文章数量'</span></span><br></pre></td></tr></table></figure><p>还有一个问题我们要显示文案的名字需要重写 str方法 每个model需要重写此方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>展示为:</p><p><img src="/images/resources/20210222/image-20210221211507516.png" alt="image-20210221211507516"></p><h2 id="照猫画虎-comment与和config"><a href="#照猫画虎-comment与和config" class="headerlink" title="照猫画虎(comment与和config)"></a>照猫画虎(comment与和config)</h2><blockquote><p>comment</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Comment)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'target'</span>, <span class="string">'nickname'</span>, <span class="string">'content'</span>, <span class="string">'website'</span>, <span class="string">'create_time'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>config</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Link, SideBar</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Link)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'title'</span>, <span class="string">'href'</span>, <span class="string">'status'</span>, <span class="string">'weight'</span>, <span class="string">'create_time'</span>)</span><br><span class="line"></span><br><span class="line">    fields = (<span class="string">'title'</span>, <span class="string">'href'</span>, <span class="string">'status'</span>, <span class="string">'weight'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(self, request, obj, form, change)</span>:</span></span><br><span class="line">        obj.owner = request.user</span><br><span class="line">        <span class="keyword">return</span> super(LinkAdmin,self).save_model(self, request, obj, form, change)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(SideBar)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SideBarAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'title'</span>, <span class="string">'display_type'</span>, <span class="string">'content'</span>, <span class="string">'create_time'</span>)</span><br><span class="line"></span><br><span class="line">    fields = (<span class="string">'title'</span>, <span class="string">'diplay_type'</span>, <span class="string">'content'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(self, request, obj, form, change)</span>:</span></span><br><span class="line">        obj.owner = request.user</span><br><span class="line">        <span class="keyword">return</span> super(SideBarAdmin,self).save_model(self, request, obj, form, change)</span><br></pre></td></tr></table></figure><p>最后效果如下:</p><p><img src="/images/resources/20210222/image-20210221213728228.png" alt="image-20210221213728228"></p><h2 id="admin定制"><a href="#admin定制" class="headerlink" title="admin定制"></a>admin定制</h2><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>只能过滤当前用户的文章，代码如下：在PostAdmin上面添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryOwnerFilter</span><span class="params">(admin.SimpleListFilter)</span>:</span></span><br><span class="line">    <span class="string">'''自定义过滤器只展示当前用户分类'''</span></span><br><span class="line">    title = <span class="string">'分类过滤器'</span></span><br><span class="line">    parameter_name = <span class="string">'owner_category'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookups</span><span class="params">(self, request, model_admin)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Category.objects.filter(owner=request.user).values_list(<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">queryset</span><span class="params">(self,request,queryset)</span>:</span></span><br><span class="line">        category_id = self.value()</span><br><span class="line">        <span class="keyword">if</span> category_id:</span><br><span class="line">            <span class="keyword">return</span> queryset.filter(category_id=self.value())</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210222/image-20210221220924981.png" alt="image-20210221220924981"></p><p>解释说明:</p><p>title: 用于展示标题</p><p>parameter_name: 查询时url参数的名字相当于?owner_category=1,可以根据配置简答的过滤器来观察参数</p><p>lookups： 返回要展示的内容和查询用的id</p><p>queryset： 根据url Query的内ring返回列表页数据。 ?owner_category=1 那么self.value就是1</p><h3 id="列表数据过滤"><a href="#列表数据过滤" class="headerlink" title="列表数据过滤"></a>列表数据过滤</h3><p>解决用户在列表页只看到自己创建的文章</p><p>在PostAdmin中重写get_queryset方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    qs = super(PostAdmin,self).get_queryset(request)</span><br><span class="line">    <span class="keyword">return</span> qs.filter(owner=request.user)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210222/image-20210221222501537.png" alt="image-20210221222501537"></p><h2 id="admin编辑页面配置"><a href="#admin编辑页面配置" class="headerlink" title="admin编辑页面配置"></a>admin编辑页面配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exclude = (<span class="string">'owner'</span>,) <span class="comment"># 可以用于排除不需要什么样的字段</span></span><br></pre></td></tr></table></figure><h3 id="fieldsets控制页面布局"><a href="#fieldsets控制页面布局" class="headerlink" title="fieldsets控制页面布局"></a>fieldsets控制页面布局</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fieldsets = (</span><br><span class="line">    (<span class="string">'基础配置'</span>,&#123;</span><br><span class="line">        <span class="string">'description'</span>: <span class="string">'基础配置描述'</span>,</span><br><span class="line">        <span class="string">'fields'</span>: (</span><br><span class="line">            (<span class="string">'title'</span>, <span class="string">'category'</span>),</span><br><span class="line">            <span class="string">'status'</span></span><br><span class="line">        )</span><br><span class="line">    &#125;),</span><br><span class="line">    (<span class="string">'内容'</span>,&#123;</span><br><span class="line">        <span class="string">'fields'</span>:(</span><br><span class="line">            <span class="string">'desc'</span>,</span><br><span class="line">            <span class="string">'content'</span></span><br><span class="line">        ),</span><br><span class="line">    &#125;),</span><br><span class="line">    (<span class="string">'额外信息'</span>,&#123;</span><br><span class="line">        <span class="string">'classes'</span>: (<span class="string">'collapse'</span>,),</span><br><span class="line">        <span class="string">'fields'</span>: (<span class="string">'tag'</span>, )</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210222/image-20210221223957741.png" alt="image-20210221223957741"></p><h3 id="自定义静态资源引入"><a href="#自定义静态资源引入" class="headerlink" title="自定义静态资源引入"></a>自定义静态资源引入</h3><p>在PostAdmin下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Media</span>:</span></span><br><span class="line">    css = &#123;</span><br><span class="line">        <span class="string">"all"</span>: (<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css"</span>,)</span><br><span class="line">    &#125;</span><br><span class="line">    js = (<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0-beta.2/js/bootstrap.bundle.js"</span>,)</span><br></pre></td></tr></table></figure><h3 id="自定义form"><a href="#自定义form" class="headerlink" title="自定义form"></a>自定义form</h3><p>利用modelForm可以定制，比如文章描述字段希望是textarea</p><p>Form是和model耦合在一起的。Form的逻辑和model是一致的,model是对数据库字段的抽象，form是对用户输入以及model展示数据的抽象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostAdminForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    desc = forms.CharField(widget=forms.Textarea, label=<span class="string">'摘要'</span>, required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(Post)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    form = PostAdminForm</span><br><span class="line">    <span class="string">'''其余省略'''</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210222/image-20210221230620789.png" alt="image-20210221230620789"></p><h3 id="同一页面编辑关联数据"><a href="#同一页面编辑关联数据" class="headerlink" title="同一页面编辑关联数据"></a>同一页面编辑关联数据</h3><p>分类下面可以编辑文章</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInline</span><span class="params">(admin.TabularInline)</span>:</span> <span class="comment"># 也有stackedInline</span></span><br><span class="line">    fields = (<span class="string">'title'</span>, <span class="string">'desc'</span>)</span><br><span class="line">    extra = <span class="number">1</span> <span class="comment"># 这控制了表单集除初始表单外还将显示的其他表单的数量。默认值为3</span></span><br><span class="line">    model = Post</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册管理模型</span></span><br><span class="line"><span class="meta">@admin.register(Category)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    inlines = [PostInline,]</span><br><span class="line">    <span class="string">'''其余省略'''</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210222/image-20210221231542155.png" alt="image-20210221231542155"></p><h3 id="定制站点"><a href="#定制站点" class="headerlink" title="定制站点"></a>定制站点</h3><p>讲文章分类等数据的管理与用户模块等分开</p><p>定义一个custom_site.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.admin <span class="keyword">import</span> AdminSite</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomSite</span><span class="params">(AdminSite)</span>:</span></span><br><span class="line">    site_header = <span class="string">'djwwj'</span></span><br><span class="line">    site_title = <span class="string">'djwwj管理后台'</span></span><br><span class="line">    index_title = <span class="string">'首页'</span></span><br><span class="line"></span><br><span class="line">custom_site = CustomSite(name=<span class="string">'cus_admin'</span>)</span><br></pre></td></tr></table></figure><p>PostAdmin中修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> djwwj.custom_site <span class="keyword">import</span> custom_site</span><br><span class="line"><span class="meta">@admin.register(Post, site=custom_site)</span></span><br><span class="line"><span class="comment"># 以及调整链接</span></span><br><span class="line">reverse(<span class="string">'cus_admin:blog_post_change'</span>,args=(obj.id,)) <span class="comment"># 这里就是从url中寻找地址 /admin/blog/post/1/change/</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>最后更改url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .custom_site <span class="keyword">import</span> custom_site</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, custom_site.urls),</span><br><span class="line">    url(<span class="string">r'^super_admin/'</span>,admin.site.urls)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其实就是通过两套url对业务进行了划分</p><h3 id="权限和用户"><a href="#权限和用户" class="headerlink" title="权限和用户"></a>权限和用户</h3><p>用户以及权限可以参考文档</p><p><a href="https://zhuanlan.zhihu.com/p/26188198" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26188198</a></p><p><a href="https://docs.djangoproject.com/zh-hans/3.1/topics/auth/default/" target="_blank" rel="noopener">https://docs.djangoproject.com/zh-hans/3.1/topics/auth/default/</a></p><p><a href="https://docs.djangoproject.com/zh-hans/3.1/topics/auth/customizing/" target="_blank" rel="noopener">https://docs.djangoproject.com/zh-hans/3.1/topics/auth/customizing/</a></p><h3 id="操作日志"><a href="#操作日志" class="headerlink" title="操作日志"></a>操作日志</h3><p>如果是大型项目针对业务可以参考 <a href="https://www.cnblogs.com/gaosai/p/10322924.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaosai/p/10322924.html</a></p><p>关于自带的LogEntry 参考<a href="https://www.wandouip.com/t5i330704/" target="_blank" rel="noopener">https://www.wandouip.com/t5i330704/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> LogEntry</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(LogEntry, site=custom_site)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogEntryAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'object_repr'</span>,<span class="string">'object_id'</span>,<span class="string">'action_flag'</span>,<span class="string">'user'</span>,<span class="string">'change_message'</span>]</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210222/image-20210222014105835.png" alt="image-20210222014105835"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发django管理后台&quot;&gt;&lt;a href=&quot;#开发django管理后台&quot; class=&quot;headerlink&quot; title=&quot;开发django管理后台&quot;&gt;&lt;/a&gt;开发django管理后台&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;配置admin进行操作&lt;/li&gt;
&lt;li&gt;定制a
      
    
    </summary>
    
    
      <category term="django开发" scheme="https://djwangweijie.github.io/categories/django%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="web开发" scheme="https://djwangweijie.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="快速构建" scheme="https://djwangweijie.github.io/tags/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA/"/>
    
      <category term="ORM" scheme="https://djwangweijie.github.io/tags/ORM/"/>
    
      <category term="日志管理" scheme="https://djwangweijie.github.io/tags/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    
      <category term="管理后台" scheme="https://djwangweijie.github.io/tags/%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>django开发之规范和细节</title>
    <link href="https://djwangweijie.github.io/2021/02/20/2021-02-20-django%E5%BC%80%E5%8F%91%E4%B9%8B%E8%A7%84%E8%8C%83%E5%92%8C%E7%BB%86%E8%8A%82/"/>
    <id>https://djwangweijie.github.io/2021/02/20/2021-02-20-django开发之规范和细节/</id>
    <published>2021-02-20T07:59:23.932Z</published>
    <updated>2021-02-20T08:07:56.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="·django开发之规范和细节"><a href="#·django开发之规范和细节" class="headerlink" title="·django开发之规范和细节"></a>·django开发之规范和细节</h1><ol><li>编码规范</li><li>项目准备</li><li>model层字段介绍</li></ol><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren&apos;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">Although that way may not be obvious at first unless you&apos;re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">If the implementation is hard to explain, it&apos;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">Namespaces are one honking great idea -- let&apos;s do more of those!</span><br></pre></td></tr></table></figure><ol><li>适当的缩进</li><li>优选空格</li><li>适当的长度</li></ol><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><h3 id="构建虚拟环境"><a href="#构建虚拟环境" class="headerlink" title="构建虚拟环境"></a>构建虚拟环境</h3><p>在某盘某个目录下执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv typeidea-env</span><br></pre></td></tr></table></figure><p>激活环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\Envs\typeidea-env&gt;cd Scripts</span><br><span class="line">D:\Envs\typeidea-env\Scripts&gt;activate.bat</span><br><span class="line"><span class="comment">## 在其目录下安装django</span></span><br><span class="line">pip install Django==<span class="number">1.11</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210220/image-20210219121703646.png" alt="image-20210219121703646"></p><p>构建项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(typeidea-env) D:\Envs\typeidea-env\Scripts&gt;cd ..</span><br><span class="line">(typeidea-env) D:\Envs\typeidea-env&gt;mkdir typeidea</span><br><span class="line">(typeidea-env) D:\Envs\typeidea-env&gt;cd typeidea</span><br><span class="line">(typeidea-env) D:\Envs\typeidea-env\typeidea&gt;django-admin startproject typeidea</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/midworld/p/11002821.html" target="_blank" rel="noopener">关于项目依赖</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##启动项目 报错参考https://www.pianshen.com/article/82141167778/</span></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210220/image-20210219142756301.png" alt="image-20210219142756301"></p><h3 id="拆分setting适应不同的环境"><a href="#拆分setting适应不同的环境" class="headerlink" title="拆分setting适应不同的环境"></a>拆分setting适应不同的环境</h3><p>构建settings文件夹.目录结构如下<img src="/images/resources/20210220/image-20210219143352146.png" alt="image-20210219143352146"></p><p><strong>注意:base.py基于外部的settings.py文件</strong></p><p><img src="/images/resources/20210220/image-20210219143858599.png" alt="image-20210219143858599"></p><p>新增develop配置文件如上图所示，最后修改manage.py和wsgi.py识别新的配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## os.environ.setdefault("DJANGO_SETTINGS_MODULE", "djwwj.settings")</span></span><br><span class="line">profile = os.environ.get(<span class="string">'TYPEIDEA_PROFILE'</span>,<span class="string">'develop'</span>)</span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"djwwj.settings.%s"</span> % profile)</span><br></pre></td></tr></table></figure><p>并且设置一个环境变量 TYPEIDEA_PROFILE = develop<br><a href="https://blog.csdn.net/cierlongbu/article/details/103753452" target="_blank" rel="noopener">vscode设置django参考</a></p><h3 id="编写model层代码"><a href="#编写model层代码" class="headerlink" title="编写model层代码"></a>编写model层代码</h3><p><img src="/images/resources/20210220/image-20210219150221092.png" alt="image-20210219150221092"></p><p>在django中有一个app应用的概念。每个app应该是一个自组织的应用。可以根据model的业务性质分别进行处理</p><p>根据上面的规划：model可以划分blog相关，配置相关，评论相关</p><h4 id="构建blog-App"><a href="#构建blog-App" class="headerlink" title="构建blog App"></a>构建blog App</h4><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(typeidea-env) D:\Envs\typeidea-env\typeidea\djwwj&gt;manage.py startapp blog</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210220/image-20210219151124987.png" alt="image-20210219151124987"></p><p>blog相关的model分类大概有种类，标签以及帖子，构建的model如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># user来源自django自带的认证中</span></span><br><span class="line">form django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="comment"># 种类类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 状态申明</span></span><br><span class="line">    STATUS_NORMAL = <span class="number">1</span></span><br><span class="line">    STATUS_DELETE = <span class="number">0</span></span><br><span class="line">    STATUS_ITEMS = (</span><br><span class="line">        (STATUS_NORMAL,<span class="string">'正常'</span>),</span><br><span class="line">        (STATUS_DELETE,<span class="string">'删除'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字段申明</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'名称'</span>)</span><br><span class="line">    <span class="comment"># 正整数或0类型 PositiveIntegerField</span></span><br><span class="line">    status = models.PositiveIntegerField(default=STATUS_NORMAL,choices=STATUS_ITEMS, verbose_name=<span class="string">'状态'</span>)</span><br><span class="line">    is_nav = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否为导航'</span>)</span><br><span class="line">    <span class="comment">#  外键表明的是多对一 参考文章:https://blog.csdn.net/hpu_yly_bj/article/details/78939748</span></span><br><span class="line">    owner = models.ForeignKey(User, verbose_name=<span class="string">'作者'</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每个类都有一个源类型可以配置</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'分类'</span></span><br><span class="line"><span class="comment"># 标签类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 状态申明</span></span><br><span class="line">    STATUS_NORMAL = <span class="number">1</span></span><br><span class="line">    STATUS_DELETE = <span class="number">0</span></span><br><span class="line">    STATUS_ITEMS = (</span><br><span class="line">        (STATUS_NORMAL,<span class="string">'正常'</span>),</span><br><span class="line">        (STATUS_DELETE,<span class="string">'删除'</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 字段申明</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">'名称'</span>)</span><br><span class="line">    status = models.PositiveIntegerField(default=STATUS_NORMAL,choices=STATUS_ITEMS, verbose_name=<span class="string">'状态'</span>)</span><br><span class="line">    owner = models.ForeignKey(User, verbose_name=<span class="string">'作者'</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'标签'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 帖子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 状态申明</span></span><br><span class="line">    STATUS_NORMAL = <span class="number">1</span></span><br><span class="line">    STATUS_DELETE = <span class="number">0</span></span><br><span class="line">    STATUS_ITEMS = (</span><br><span class="line">        (STATUS_NORMAL,<span class="string">'正常'</span>),</span><br><span class="line">        (STATUS_DELETE,<span class="string">'删除'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字段申明</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">255</span> , verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">1024</span>, verbose_name=<span class="string">'摘要'</span>)</span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">'正文'</span> help_text=<span class="string">'正文必须为Markdown格式'</span>)</span><br><span class="line">    status = models.PositiveIntegerField(default=STATUS_NORMAL,choices=STATUS_ITEMS, verbose_name=<span class="string">'状态'</span>)</span><br><span class="line">    category = models.ForeignKey(Category, verbose_name=<span class="string">'分类'</span>)</span><br><span class="line">    <span class="comment"># 一个帖子对应多个标签,一个标签对应多个帖子</span></span><br><span class="line">    tag = models.ManyToManyField(Tag, verbose_name=<span class="string">'标签'</span>)</span><br><span class="line">    owner = models.ForeignKey(User, verbose_name=<span class="string">'作者'</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'文章'</span></span><br><span class="line">        <span class="comment"># 排序可以参考 https://blog.csdn.net/old_man31/article/details/86377988</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>] <span class="comment"># 根据id进行降序排序</span></span><br></pre></td></tr></table></figure><p><strong>注意:上面总体构建的步骤就是规划模型—–&gt;设计模型——&gt;构建模型</strong></p><h4 id="构建config-App"><a href="#构建config-App" class="headerlink" title="构建config App"></a>构建config App</h4><p>同理我们构建配置选项，model里面主要是连接和侧边栏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="comment"># 连接类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 状态申明</span></span><br><span class="line">    STATUS_NORMAL = <span class="number">1</span></span><br><span class="line">    STATUS_DELETE = <span class="number">0</span></span><br><span class="line">    STATUS_ITEMS = (</span><br><span class="line">        (STATUS_NORMAL,<span class="string">'正常'</span>),</span><br><span class="line">        (STATUS_DELETE,<span class="string">'删除'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字段申明</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    href = models.URLField(verbose_name=<span class="string">'链接'</span>)</span><br><span class="line">    status = models.PositiveIntegerField(default=STATUS_NORMAL,choices=STATUS_ITEMS, verbose_name=<span class="string">'状态'</span>)</span><br><span class="line">    weight = models.PositiveIntegerField(default=<span class="number">1</span>, </span><br><span class="line">                                         choices=zip(range(<span class="number">1</span>,<span class="number">6</span>),range(<span class="number">1</span>,<span class="number">6</span>)), </span><br><span class="line">                                         verbose_name=<span class="string">'权重'</span>, </span><br><span class="line">                                         help_text=<span class="string">'权重高展示顺序靠前'</span>)</span><br><span class="line">    owner =models.ForeignKey(User, verbose_name=<span class="string">'作者'</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'友链'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SideBar</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    STATUS_SHOW = <span class="number">1</span></span><br><span class="line">    STATUS_HIDE = <span class="number">0</span></span><br><span class="line">    STATUS_ITEMS = (</span><br><span class="line">        (STATUS_SHOW, <span class="string">'展示'</span>),</span><br><span class="line">        (STATUS_HIDE, <span class="string">'隐藏'</span>)</span><br><span class="line">    )</span><br><span class="line">    SIDE_TYPE = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'HTML'</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'最新文章'</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'最热文章'</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">'最热评论'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 申明字段</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    display_type = models.PositiveIntegerField(default=<span class="number">1</span>, choices=SIDE_TYPE, verbose_name=<span class="string">'展示类型'</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">'内容'</span>, help_text=<span class="string">'设置不为HTML类型,可为空'</span>)</span><br><span class="line">    status = models.PositiveIntegerField(default=STATUS_SHOW, choices=STATUS_ITEMS, verbose_name=<span class="string">'状态'</span>)</span><br><span class="line">    owner = models.ForeignKey(User, verbose_name=<span class="string">'作者'</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'侧边栏'</span></span><br></pre></td></tr></table></figure><h4 id="构建comment-App"><a href="#构建comment-App" class="headerlink" title="构建comment App"></a>构建comment App</h4><p>在这里暂时将评论和文章耦合起来。当然以后可以独立出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和文章耦合起来</span></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Post</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#评论类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 状态申明</span></span><br><span class="line">    STATUS_NORMAL = <span class="number">1</span></span><br><span class="line">    STATUS_DELETE = <span class="number">0</span></span><br><span class="line">    STATUS_ITEMS = (</span><br><span class="line">        (STATUS_NORMAL,<span class="string">'正常'</span>),</span><br><span class="line">        (STATUS_DELETE,<span class="string">'删除'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 申明字段</span></span><br><span class="line">    target = models.ForeignKey(Post, verbose_name=<span class="string">'评论目标'</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">2000</span>, verbose_name=<span class="string">'内容'</span>)</span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'昵称'</span>)</span><br><span class="line">    website = models.URLField(verbose_name= <span class="string">'网站'</span>)</span><br><span class="line">    email = models.EmailField(verbose_name= <span class="string">'邮箱'</span>)</span><br><span class="line">    status = models.PositiveIntegerField(default=STATUS_NORMAL, choices=STATUS_ITEMS, verbose_name=<span class="string">'状态'</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'评论'</span></span><br></pre></td></tr></table></figure><p>到此3个model类型构建完毕。还有值得修改的地方</p><h4 id="一系列流程"><a href="#一系列流程" class="headerlink" title="一系列流程"></a>一系列流程</h4><p>在installedapps添加 文件在bast.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'config'</span>,</span><br><span class="line">    <span class="string">'comment'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在djwwj目录下执行数据库迁移的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">manage.py makemigrations</span><br><span class="line">manage.py migrate</span><br><span class="line"><span class="comment"># sqlite3如果看不到，可以参考https://blog.csdn.net/foryouslgme/article/details/52034149</span></span><br><span class="line"><span class="comment"># 可以将文件放到djwwj目录下来查看</span></span><br><span class="line">manage.py dbshell</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210220/image-20210220130938034.png" alt="image-20210220130938034"></p><h2 id="model层说明"><a href="#model层说明" class="headerlink" title="model层说明"></a>model层说明</h2><h3 id="常用的字段类型"><a href="#常用的字段类型" class="headerlink" title="常用的字段类型"></a>常用的字段类型</h3><blockquote><p>数值型</p></blockquote><p>1.AutoField 自增主键,可以被重写</p><p>2.BooleanField 布尔类型字段,一般记录状态标记</p><p>3.DecimalField decima 数据精度比较高的字段。注意需要在python中使用Decimal类型进行转换</p><p>4.IntegerField 整数字段,不自增</p><p>5.PostiveIntegerField 只包含正整数</p><p>6.SmallIntegerField smallint 小整数</p><blockquote><p>字符型</p></blockquote><p>1.CharField 基础的varchar类型</p><p>2.UrlField 对url的特殊处理</p><p>3.UUIDField 存放唯一id</p><p>4.EmailField 对email的处理</p><p>5.FileField 对文件的特殊处理,在admin展示可以自动生成一个上传文件的按钮</p><p>6.TextField 存放正文类容</p><p>7.ImageField 处理图片相关的数据</p><blockquote><p>日期类型</p></blockquote><p>分别为DateField  和  DateTimeField 以及 TimeField 就不在细说了</p><blockquote><p>关系类型</p></blockquote><p>ForeignKey 多对一 OneToOneField 一对一 以及 ManyToManyField 多对多 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以参考文章https://www.cnblogs.com/navysummer/p/10200154.html</span></span><br></pre></td></tr></table></figure><h3 id="字段参数类型"><a href="#字段参数类型" class="headerlink" title="字段参数类型"></a>字段参数类型</h3><p>1.null 空类型</p><p>2.blank 不能为空</p><p>3.choices可选项</p><p>4.db_column对应数据库字段类型</p><p>5.db_index 索引配置</p><p>6.default 默认配置</p><p>7.editable 是否可编辑</p><p>8.error_messages 检查异常是提示</p><p>9.help_text 字段提示语</p><p>10.primary_key 主键设置</p><p>11.unique 唯一约束</p><p>12.unique_for_data/month/year 可以针对日期，月和年的约束</p><p>13.verbose_name 字段展示相应的文案</p><p>14.validators 自定义逻辑校验</p><h2 id="QuerySet的使用"><a href="#QuerySet的使用" class="headerlink" title="QuerySet的使用"></a>QuerySet的使用</h2><p>QuerySet的主要作用是数据库的所有查询以及有更新的交互都是需要这个来完成的</p><p>在model层中django提供了一个objects属性来提供数据操作的接口。并且支持链式操作，同时queryset是懒加载的</p><h3 id="常用的接口"><a href="#常用的接口" class="headerlink" title="常用的接口"></a>常用的接口</h3><h4 id="支持链式调用"><a href="#支持链式调用" class="headerlink" title="支持链式调用"></a>支持链式调用</h4><p>1.all接口等于查询所有</p><p>2.filter接口根据条件过滤数据</p><p>3.exclude根据条件排除之外，和filter相反</p><p>4.reverse接口 结果倒序</p><p>5.distinct 去重查询</p><p>6.none接口 返回空</p><h4 id="不支持链式调用"><a href="#不支持链式调用" class="headerlink" title="不支持链式调用"></a>不支持链式调用</h4><p>1.get接口根据条件进行查询</p><p>2.create接口创建一个model对象</p><p>3.get_or_create根据条件进行查找,没有就创建</p><p>4.update_or_create 根据条件更新没有就创建</p><p>5.lastest接口返回最新的记录</p><p>6.earliest接口获取第一个记录</p><p>7.last接口获取最后一条</p><p>8.exists 返回布尔值.判断是否存在</p><p>9.bulk_create接口 批量创建记录</p><p>10.in_bluk 批量查询</p><p>11.update接口 批量更新</p><p>12.delete接口 批量删除</p><p>13.values接口 明确只需要某个返回字段值，不需要实例时</p><p>14 values_list接口 返回的是元组的queryset</p><h4 id="进阶接口"><a href="#进阶接口" class="headerlink" title="进阶接口"></a>进阶接口</h4><p>defer 不需要的字段做延迟加载，但是在循环查询中会产生N+1，重复查询的问题</p><p>only接口 与defer相反</p><p>select_related 关联查询 针对一对多 也可以解决N+1的问题</p><p>prefetch_related 关联查询 针对多对多的</p><h4 id="常用的字段查询"><a href="#常用的字段查询" class="headerlink" title="常用的字段查询"></a>常用的字段查询</h4><p>针对<code>QuerySet</code> 方法 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/querysets/#django.db.models.query.QuerySet.filter" target="_blank" rel="noopener"><code>filter()</code></a>、<a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/querysets/#django.db.models.query.QuerySet.exclude" target="_blank" rel="noopener"><code>exclude()</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/querysets/#django.db.models.query.QuerySet.get" target="_blank" rel="noopener"><code>get()</code></a> 的关键字参数。</p><p>contains 包含相似查询</p><p>icontains 同上，忽略大小写</p><p>exact 精确匹配</p><p>in 指定某个集合</p><p>gt 大于 gte 大于等于</p><p>lt 小于 lte 小于等于</p><p>startswith endwith 以什么开始，什么结尾</p><p>range 用于时间范围查找</p><h4 id="进阶查询"><a href="#进阶查询" class="headerlink" title="进阶查询"></a>进阶查询</h4><p>F 用来保证数据避免出现竞争状态 保证数据的原子性</p><p>Q 执行and 或者 or 的复杂表达式</p><p>聚合运算可以参考文档也可以 使用<code>annotate()</code> 执行更简便的操作</p><h4 id="执行原生sql"><a href="#执行原生sql" class="headerlink" title="执行原生sql"></a>执行原生sql</h4><p>可以通过raw接口来执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;·django开发之规范和细节&quot;&gt;&lt;a href=&quot;#·django开发之规范和细节&quot; class=&quot;headerlink&quot; title=&quot;·django开发之规范和细节&quot;&gt;&lt;/a&gt;·django开发之规范和细节&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;编码规范&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="django开发" scheme="https://djwangweijie.github.io/categories/django%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="web开发" scheme="https://djwangweijie.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="快速构建" scheme="https://djwangweijie.github.io/tags/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA/"/>
    
      <category term="ORM" scheme="https://djwangweijie.github.io/tags/ORM/"/>
    
      <category term="模型设计" scheme="https://djwangweijie.github.io/tags/%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="查询" scheme="https://djwangweijie.github.io/tags/%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ消息队列</title>
    <link href="https://djwangweijie.github.io/2021/01/26/2021-01-26-RabbitMQ/"/>
    <id>https://djwangweijie.github.io/2021/01/26/2021-01-26-RabbitMQ/</id>
    <published>2021-01-25T21:07:09.001Z</published>
    <updated>2021-01-25T21:13:42.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ消息队列"><a href="#RabbitMQ消息队列" class="headerlink" title="RabbitMQ消息队列"></a>RabbitMQ消息队列</h1><ol><li>消息队列的概念</li><li>windows下面安装RabbitMQ</li><li>RabbitMQ的初步使用</li><li>RabbitMQ的几种模式</li><li>springboot整合RabbitMQ</li><li>关于持久化操作,消息确认(自动和手动)，事务管理</li></ol><h2 id="消息队列的概念"><a href="#消息队列的概念" class="headerlink" title="消息队列的概念"></a>消息队列的概念</h2><p><strong>首先消息队列是应用程序之间的一种通信办法,其次，在应用程序中可以将一些无需及时返回的以及耗时的业务提取出来,通过异步的方式,当然异步的方式主要就是节省了服务器的响应时间，从而提高系统的吞吐量</strong></p><p><em>消息队列的应用场景一般在应用解耦、异步处理(提高系统响应速度)、流量削峰(高峰堆积消息，峰后继续处理消息)、日志处理、通讯上面。</em></p><h3 id="消息队列模型-AMQP和JMS"><a href="#消息队列模型-AMQP和JMS" class="headerlink" title="消息队列模型(AMQP和JMS)"></a>消息队列模型(AMQP和JMS)</h3><p>AMQP高级消息队列协议，是一个进程间传递异步消息的网络协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式.</p><p>JMS即Java消息服务（JavaMessage Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><p>注意:JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式,JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。JMS规定了两种消息模式；而AMQP的消息模式更加丰富,简单的说就好比一个是已经开发好的应用,一个定义了一系列的标准。</p><h3 id="关于消息队列的产品"><a href="#关于消息队列的产品" class="headerlink" title="关于消息队列的产品"></a>关于消息队列的产品</h3><blockquote><p>kafka</p></blockquote><p>Apache下的一个子项目，使用scala实现的一个高性能分布式Publish/Subscribe消息队列系统。</p><ol><li>快速持久化：通过磁盘顺序读写与零拷贝机制，可以在O(1)的系统开销下进行消息持久化</li><li>高吞吐：在一台普通的服务器上既可以达到10W/s的吞吐速率</li><li>高堆积：支持topic下消费者较长时间离线，消息堆积量大；</li><li>完全的分布式系统：Broker、Producer、Consumer都原生自动支持分布式，依赖zookeeper自动实现复杂均衡</li></ol><blockquote><p>rabbitmq</p></blockquote><p>RocketMQ是一款分布式、队列模型的消息中间件，具有以下特点 ：</p><ol><li>能够保证严格的消息顺序,提供丰富的消息拉取模式</li><li>高效的订阅者水平扩展能力.实时的消息订阅机制</li><li>支持事务消息，亿级消息堆积能力.</li><li>生产者不会将消息直接发送给队列，消息在发送给客户端时先在中心队列排队。对路由(Routing)，负载均衡(Load balance)、数据持久化都有很好的支持</li></ol><p>支持的模式有以下(来源于官网):</p><p><img src="/images/resources/20210126/image-20210125214506194.png" alt="image-20210125214506194"></p><p><img src="/images/resources/20210126/image-20210125214611902.png" alt="image-20210125214611902"></p><p><img src="/images/resources/20210126/image-20210125214630439.png" alt="image-20210125214630439"></p><h2 id="windows下面安装RabbitMQ"><a href="#windows下面安装RabbitMQ" class="headerlink" title="windows下面安装RabbitMQ"></a>windows下面安装RabbitMQ</h2><p>因为RabbitMQ基于erlang语言,所以首先先安装erlang语言，安装过程主要为</p><ol><li><p>下载并安装erlang语言，配置相应的环境变量。CMD执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl <span class="comment"># 截图如下</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210125225309280.png" alt="image-20210125225309280"></p></li></ol><p>2.下载并安装rabbitmq,然后在sbin目录下执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management <span class="comment"># 截图如下</span></span><br><span class="line">rabbitmq-plugins disable rabbitmq_management <span class="comment"># 该命令为关闭</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210125230927166.png" alt="image-20210125230927166"></p><p>3.在此目录下查看rabbitmq状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status <span class="comment"># 截图如下</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210125231404437.png" alt="image-20210125231404437"></p><p>4.输入地址<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a>  默认账户密码guest</p><p><img src="/images/resources/20210126/image-20210125231613526.png" alt="image-20210125231613526"></p><h3 id="关于用户"><a href="#关于用户" class="headerlink" title="关于用户"></a>关于用户</h3><p><img src="/images/resources/20210126/image-20210125231702280.png" alt="image-20210125231702280"></p><p>角色说明：</p><ol><li><p><strong><em>超级管理员(administrator)</em></strong>  可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p><strong><em>监控者(monitoring)</em></strong> 可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p><strong><em>策略制定者(policymaker)</em></strong>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p><strong><em>普通管理者(management)</em></strong>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li></ol><h3 id="关于-Virtual-Hosts配置"><a href="#关于-Virtual-Hosts配置" class="headerlink" title="关于 Virtual Hosts配置"></a>关于 Virtual Hosts配置</h3><p>Virtual Hosts就是虚拟主机的意思.相当于一个独立的数据库，数据库之间不受影响.一般以/开头</p><p><img src="/images/resources/20210126/image-20210125232301322.png" alt="image-20210125232301322"></p><p>当然同理可以不同的用户能访问的虚拟注意不一样</p><h2 id="RabbitMQ的初步使用"><a href="#RabbitMQ的初步使用" class="headerlink" title="RabbitMQ的初步使用"></a>RabbitMQ的初步使用</h2><p>1.创建一个maven项目,pom.xml文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wwj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建生产者和消费者都需要提供一个连接对象。先封装一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建链接工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2、设置RabbitMQ服务主机地址</span></span><br><span class="line">        factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="comment">//3、设置RabbitMQ服务端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//4、设置虚拟主机名字，默认/-factory.setVirtualHost("szitheima")</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">//5、设置用户连接名</span></span><br><span class="line">        factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//6、设置链接密码</span></span><br><span class="line">        factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//7、创建链接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">Connection  con  = Util.getConnection();</span><br><span class="line">   System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="/images/resources/20210126/image-20210125235252704.png" alt="image-20210125235252704"></p><h2 id="RabbitMQ的几种模式"><a href="#RabbitMQ的几种模式" class="headerlink" title="RabbitMQ的几种模式"></a>RabbitMQ的几种模式</h2><h3 id="模式一简单发送消息"><a href="#模式一简单发送消息" class="headerlink" title="模式一简单发送消息"></a>模式一简单发送消息</h3><p>生产者:也就是要发送消息的程序.</p><p>消费者：消息的接受者，会一直等待消息到来.</p><p>消息队列:生产者向其中投递消息，消费者从其中取出消息.</p><p>生产者代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//定义队列.分别对应名字,持久化,独占连接,自动删除,附加参数</span></span><br><span class="line">channel.queueDeclare(<span class="string">"hello1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//构建消息</span></span><br><span class="line">String message = <span class="string">"第一条消息"</span>;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">""</span>,<span class="string">"hello1"</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到有一条消息待读</p><p><img src="/images/resources/20210126/image-20210126001101869.png" alt="image-20210126001101869"></p><p>消费者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"hello1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"hello1"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210126002157514.png" alt="image-20210126002157514"></p><p>以下可以看到消息在被读取后就删除了,消费者一直挂起中</p><p><img src="/images/resources/20210126/image-20210126002323551.png" alt="image-20210126002323551"></p><h3 id="模式二多个消费者-有竞争关系的"><a href="#模式二多个消费者-有竞争关系的" class="headerlink" title="模式二多个消费者(有竞争关系的)"></a>模式二多个消费者(有竞争关系的)</h3><p>生产者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//定义队列.分别对应名字,持久化,独占连接,自动删除,附加参数</span></span><br><span class="line">channel.queueDeclare(<span class="string">"hello1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">""</span>,<span class="string">"hello1"</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建多个消费者，代码一样，参照模式一</p><p>先启动消费者，然后启动生产者，观察</p><p><img src="/images/resources/20210126/image-20210126003314899.png" alt="image-20210126003314899"></p><p><img src="/images/resources/20210126/image-20210126003413596.png" alt="image-20210126003413596"></p><p>相当于10个相同的任务,被雇佣的2个员工分担了</p><h3 id="模式三-发布订阅模式"><a href="#模式三-发布订阅模式" class="headerlink" title="模式三(发布订阅模式)"></a>模式三(发布订阅模式)</h3><p>注意：生产者是通过发布消息是通过交换机传递到队列中</p><blockquote><p>关于交换机的说明</p></blockquote><p>交换机，。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：</p><p>​    Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>​    Direct：定向，把消息交给符合指定routing key 的队列</p><p>​    Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</p><p>生产者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//改为定义交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"exchange1"</span>, BuiltinExchangeType.FANOUT);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">"exchange1"</span>,<span class="string">""</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"q1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//通过绑定的方式将主题绑定到交换机中</span></span><br><span class="line">channel.queueBind(<span class="string">"q1"</span>, <span class="string">"exchange1"</span>, <span class="string">""</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"q1"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样启动消费者,然后观察结果</p><p><img src="/images/resources/20210126/image-20210126005606249.png" alt="image-20210126005606249"></p><p><img src="/images/resources/20210126/image-20210126005650320.png" alt="image-20210126005650320"></p><p>可以看到消费者都消费了10条消息。q1和q2主题绑定在了同一个交换机上面</p><h3 id="模式四-有选择性的接收"><a href="#模式四-有选择性的接收" class="headerlink" title="模式四(有选择性的接收)"></a>模式四(有选择性的接收)</h3><p>主要是在exchange交换上加上了路由值。可以将路由值理解为分类值</p><p>生产者代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//需要将交换机类型改为定向</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"exchange1"</span>, BuiltinExchangeType.DIRECT);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//定义分类值</span></span><br><span class="line">String rk = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//代表rk为不同的类型</span></span><br><span class="line">            <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">            rk = <span class="string">"apple"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            rk = <span class="string">"huawei"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">            rk = <span class="string">"xiaomi"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">"exchange1"</span>,rk,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码如下：消费者1消费apple  消费者2消费huawei和xiaomi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"q2"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//通过绑定的方式将主题绑定到交换机中</span></span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"huawei"</span>);</span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"xiaomi"</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"q2"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样观察结果</p><p><img src="/images/resources/20210126/image-20210126012017799.png" alt="image-20210126012017799"></p><p><img src="/images/resources/20210126/image-20210126012551797.png" alt="image-20210126012551797"></p><p>可以不同的类别分发到了不同主题中</p><h3 id="模式伍-基于特定规则的接收"><a href="#模式伍-基于特定规则的接收" class="headerlink" title="模式伍(基于特定规则的接收)"></a>模式伍(基于特定规则的接收)</h3><p>在模式四的基础上，增加了通配符，也就是类别可以无限细化.因为routingkey 一般都是有一个或多个单词组成，多个单词之间以“ . ”分割</p><ol><li>#：匹配一个或多个词</li><li>*：匹配不多不少恰好1个词</li></ol><p>比如item.#：能够匹配item.insert.abc 或者 item.insert,item.*：只能匹配item.insert</p><p>生产者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//需要将交换机类型改为主题</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"exchange1"</span>, BuiltinExchangeType.TOPIC);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//定义分类值</span></span><br><span class="line">String rk = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//代表rk为不同的类型</span></span><br><span class="line">            <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">            rk = <span class="string">"apple"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            rk = <span class="string">"huawei"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">            rk = <span class="string">"xiaomi"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: </span><br><span class="line">            rk = <span class="string">"huawei.rongyao"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">"exchange1"</span>,rk,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"q2"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//通过绑定的方式将主题绑定到交换机中</span></span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"huawei.#"</span>);</span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"xiaomi"</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"q2"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察结果</p><p><img src="/images/resources/20210126/image-20210126013353769.png" alt="image-20210126013353769"></p><p><img src="/images/resources/20210126/image-20210126013433116.png" alt="image-20210126013433116"></p><h2 id="Springboot整合RabbitMQ"><a href="#Springboot整合RabbitMQ" class="headerlink" title="Springboot整合RabbitMQ"></a>Springboot整合RabbitMQ</h2><h3 id="创建springboot项目"><a href="#创建springboot项目" class="headerlink" title="创建springboot项目"></a>创建springboot项目</h3><p>pom.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wwj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>srb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别在src/main/java下构建启动程序</p><p><img src="/images/resources/20210126/image-20210126023802653.png" alt="image-20210126023802653"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">SpringApplication.run(App.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"t"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">t</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.port=<span class="number">8032</span></span><br></pre></td></tr></table></figure><h3 id="整合RabbitMQ"><a href="#整合RabbitMQ" class="headerlink" title="整合RabbitMQ"></a>整合RabbitMQ</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改springboot的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#rabbitmq连接参数</span><br><span class="line">spring.rabbitmq.host=localhost</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line"># 开启发送确认</span><br><span class="line">spring.rabbitmq.publisher-confirms=true</span><br><span class="line"># 开启发送失败退回</span><br><span class="line">spring.rabbitmq.publisher-returns=true</span><br><span class="line"># 开启ACK</span><br><span class="line">spring.rabbitmq.listener.direct.acknowledge-mode=manual</span><br><span class="line">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span><br></pre></td></tr></table></figure><p>初始化交换机和主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列可以设置以下参数</span></span><br><span class="line"><span class="comment"> * durable: 是否持久化；exclusive: 是否独享、排外的；autoDelete: 是否自动删除 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">firstQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"q1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">secondQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"q2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//具体用什么模式在这里定义不同的交换机类型 FanoutExchange   DirectExchange  TopicExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"exchage1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置不同队列到交换机上(选择不同的策略)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingExchangeMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(firstQueue()).to(exchange()).with(<span class="string">"q1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingExchangeMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(secondQueue()).to(exchange()).with(<span class="string">"q2.#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Produce</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sen1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"生产者发送消息，序号为: "</span> + i);</span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">"exchage1"</span>, <span class="string">"q1"</span>, String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"生产者发送消息，序号为: "</span> + i);</span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">"exchage1"</span>, <span class="string">"q2.#"</span>, String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"q1"</span>, autoDelete = <span class="string">"false"</span>), exchange = <span class="meta">@Exchange</span>(value = <span class="string">"exchange1"</span>, type = ExchangeTypes.TOPIC), key = <span class="string">"q1.#"</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"q1"</span>, autoDelete = <span class="string">"false"</span>), exchange = <span class="meta">@Exchange</span>(value = <span class="string">"exchange1"</span>, type = ExchangeTypes.TOPIC), key = <span class="string">"q1.#"</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"拒绝消息"</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"q2"</span>, autoDelete = <span class="string">"false"</span>), exchange = <span class="meta">@Exchange</span>(value = <span class="string">"exchange1"</span>, type = ExchangeTypes.TOPIC), key = <span class="string">"q2.#"</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process3</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在启动文件中加入@EnableRabbit</p><p>观察如下：</p><p><img src="/images/resources/20210126/image-20210126043328416.png" alt="image-20210126043328416"></p><p>调用send2发送消息</p><p><img src="/images/resources/20210126/image-20210126043956076.png" alt="image-20210126043956076"></p><p>接下来调用send1</p><p><img src="/images/resources/20210126/image-20210126044505203.png" alt="image-20210126044505203"></p><p><img src="/images/resources/20210126/image-20210126044756877.png" alt="image-20210126044756877"></p><h2 id="关于持久化操作-消息确认-自动和手动-，事务管理"><a href="#关于持久化操作-消息确认-自动和手动-，事务管理" class="headerlink" title="关于持久化操作,消息确认(自动和手动)，事务管理"></a>关于持久化操作,消息确认(自动和手动)，事务管理</h2><ol><li>持久化操作。如果队列与消息不持久化，那么服务在崩溃了之后，消息会丢失。所以可以在构建队列的时候设置durable，以及auto-delete设置为false</li><li>消息确认自动和手动：rabbitmq默认确认方式为自动，也就是消息一旦发出立即认为本次投递已经被正确处理，不管消费者端是否成功处理本次投递,那么有可能的情况就是消费者崩掉以后，消息丢失的情况会产生</li><li>选择手动，通过channel.basicAck 确认 和channel.basicReject 拒绝。一般出现异常的时候，catch异常再拒绝入列</li><li>事务管理:。生产中不建议使用事务模式，性能比较低，尽量使用手动确认模式</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ消息队列&quot;&gt;&lt;a href=&quot;#RabbitMQ消息队列&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ消息队列&quot;&gt;&lt;/a&gt;RabbitMQ消息队列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;消息队列的概念&lt;/li&gt;
&lt;li&gt;windows
      
    
    </summary>
    
    
      <category term="消息队列" scheme="https://djwangweijie.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="消息队列" scheme="https://djwangweijie.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="web开发" scheme="https://djwangweijie.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://djwangweijie.github.io/tags/java/"/>
    
      <category term="解耦" scheme="https://djwangweijie.github.io/tags/%E8%A7%A3%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>django开发第一次</title>
    <link href="https://djwangweijie.github.io/2021/01/17/2021-01-17-django%E5%BC%80%E5%8F%91%E5%88%9D%E8%AF%86/"/>
    <id>https://djwangweijie.github.io/2021/01/17/2021-01-17-django开发初识/</id>
    <published>2021-01-17T14:02:32.463Z</published>
    <updated>2021-01-17T14:10:54.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django开发"><a href="#django开发" class="headerlink" title="django开发"></a>django开发</h1><h2 id="需求的描述"><a href="#需求的描述" class="headerlink" title="需求的描述"></a>需求的描述</h2><h3 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h3><ol><li>可以通过搜索到博客内容</li><li>能够根据关键词进行搜索。然后展示出文章列表</li><li>能够根据某个分类查看所有关于这一分类的文章</li><li>首页看到新到旧的文章列表</li><li>能够订阅，能够评论，能够配置友链</li></ol><h3 id="作者端"><a href="#作者端" class="headerlink" title="作者端"></a>作者端</h3><ol><li>后台需登录进入</li><li>创建分类和标签</li><li>能够用markdown进行编写</li><li>上传文章配图</li><li>配置导航</li><li>及时更新,收到对应的订阅</li></ol><h2 id="ER关系说明"><a href="#ER关系说明" class="headerlink" title="ER关系说明"></a>ER关系说明</h2><p><img src="/images/resources/01/image-20210116204419728.png" alt="image-20210116204419728"></p><blockquote><p>sql语句如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE `category` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `is_nav` INTEGER,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_category__owner` ON `category` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `category` ADD CONSTRAINT `fk_category__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `link` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `title` VARCHAR(255) NOT NULL,</span><br><span class="line">  `href` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `weight` INTEGER,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_link__owner` ON `link` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `link` ADD CONSTRAINT `fk_link__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `post` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY,</span><br><span class="line">  `title` VARCHAR(255) NOT NULL,</span><br><span class="line">  `description` VARCHAR(255) NOT NULL,</span><br><span class="line">  `content` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` VARCHAR(255) NOT NULL,</span><br><span class="line">  `create_time` DATETIME,</span><br><span class="line">  `updated_time` DATETIME,</span><br><span class="line">  `category` INTEGER,</span><br><span class="line">  `user` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_post__category` ON `post` (`category`);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_post__user` ON `post` (`user`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post` ADD CONSTRAINT `fk_post__category` FOREIGN KEY (`category`) REFERENCES `category` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post` ADD CONSTRAINT `fk_post__user` FOREIGN KEY (`user`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `comment` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `nickname` VARCHAR(255) NOT NULL,</span><br><span class="line">  `email` VARCHAR(255) NOT NULL,</span><br><span class="line">  `website` VARCHAR(255) NOT NULL,</span><br><span class="line">  `content` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `post` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_comment__post` ON `comment` (`post`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `comment` ADD CONSTRAINT `fk_comment__post` FOREIGN KEY (`post`) REFERENCES `post` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `sidebar` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `type` VARCHAR(255) NOT NULL,</span><br><span class="line">  `title` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` INTEGER,</span><br><span class="line">  `content` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_sidebar__owner` ON `sidebar` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `sidebar` ADD CONSTRAINT `fk_sidebar__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `tag` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_tinme` DATETIME,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_tag__owner` ON `tag` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `tag` ADD CONSTRAINT `fk_tag__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `post_tag` (</span><br><span class="line">  `post` INTEGER NOT NULL,</span><br><span class="line">  `tag` INTEGER NOT NULL,</span><br><span class="line">  PRIMARY KEY (`post`, `tag`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_post_tag` ON `post_tag` (`tag`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post_tag` ADD CONSTRAINT `fk_post_tag__post` FOREIGN KEY (`post`) REFERENCES `post` (`id`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post_tag` ADD CONSTRAINT `fk_post_tag__tag` FOREIGN KEY (`tag`) REFERENCES `tag` (`id`)</span><br></pre></td></tr></table></figure><h2 id="框架基础"><a href="#框架基础" class="headerlink" title="框架基础"></a>框架基础</h2><h3 id="关于django的几个模块"><a href="#关于django的几个模块" class="headerlink" title="关于django的几个模块"></a>关于django的几个模块</h3><p>参考官方的文档<a href="https://docs.djangoproject.com/en/3.1/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/3.1/</a></p><ol><li><p>Model部分包含</p><p>1.1 models 模型的定义相关使用说明</p><p>1.2 querysets 在model的基础上查看数据以及定义过滤</p><p>1.3 model instances  单个记录，如果CRUD操作</p><p>1.4 Migrations 表结构的调整，迁移等操作</p><p>1.5 Advanced 使用原生sql，聚合，事务，搜索等相关操作</p><p>1.6 其他:数据库优化等操作</p></li><li><p>View部分包含</p><p>2.1 The basics：url配置，增加缓存以及增加限制等</p><p>2.2 reference 静态文件和404页面处理。请求和回复对象</p><p>2.3 File uploads 文件上传下载存储等</p><p>2.4 class-based views 构建和复用view</p><p>2.5 advanced 导出csv和pdf格式</p><p>2.6 中间件涉及安全和session，缓存等</p></li><li><p>模版</p><p>3.1 the basics 基本配置模版和语法</p><p>3.2 逻辑操作</p><p>3.3 高效的配置渲染模版</p></li><li><p>form表单</p><p>4.1 基础语法使用</p><p>4.2 进阶 与model一起操作</p></li></ol><h2 id="编写一个简单的学员管理系统"><a href="#编写一个简单的学员管理系统" class="headerlink" title="编写一个简单的学员管理系统"></a>编写一个简单的学员管理系统</h2><p>先安装虚拟环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>创建一个文件夹student-env为虚拟环境目录,并执行初始化虚拟环境  （默认构建在用户下面的ENV环境下。可以做更改,需要新增系统变量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv student-env</span><br></pre></td></tr></table></figure><p>激活虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon student-env</span><br></pre></td></tr></table></figure><p>停止或者删除环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br><span class="line">rmvirtualenv student-env</span><br></pre></td></tr></table></figure><p>安装django1.11</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.11</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>切换到自己喜欢的目录，构建django项目（注意在虚拟环境进行操作）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir student_house</span><br><span class="line">django-admin startproject student_sys</span><br></pre></td></tr></table></figure><p>创建App（创建模块）(出现错误可参考<a href="https://blog.csdn.net/qq_28194001/article/details/86709006" target="_blank" rel="noopener">https://blog.csdn.net/qq_28194001/article/details/86709006</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd student_sys</span><br><span class="line">python manage.py startapp student</span><br></pre></td></tr></table></figure><p><img src="/images/resources/01/image-20210117120725798.png" alt="image-20210117120725798"></p><h3 id="编写模块代码"><a href="#编写模块代码" class="headerlink" title="编写模块代码"></a>编写模块代码</h3><p>VS配置环境参照<a href="https://blog.csdn.net/cierlongbu/article/details/103753452" target="_blank" rel="noopener">https://blog.csdn.net/cierlongbu/article/details/103753452</a></p><p>在model.py中编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SEX_ITEMS = [</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'女'</span>),</span><br><span class="line">        (<span class="number">0</span>,<span class="string">'未知'</span>)</span><br><span class="line">    ]</span><br><span class="line">    STATUS_ITEMS = [</span><br><span class="line">        (<span class="number">0</span>,<span class="string">'申请'</span>),</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'通过'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'拒绝'</span>)</span><br><span class="line">    ]</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'姓名'</span>)</span><br><span class="line">    sex = models.IntegerField(choices=SEX_ITEMS, verbose_name=<span class="string">'性别'</span>)</span><br><span class="line">    profession = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'职业'</span>)</span><br><span class="line">    email =models.EmailField(verbose_name= <span class="string">'Email'</span>)</span><br><span class="line">    qq = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'QQ'</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'电话'</span>)</span><br><span class="line">    status = models.IntegerField(choices=STATUS_ITEMS,default=<span class="number">0</span>,verbose_name=<span class="string">'审核状态'</span>)</span><br><span class="line">    created_time = models.DateField(auto_now_add=<span class="literal">True</span>,editable=<span class="literal">False</span>,verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Student: &#123;&#125;&gt;'</span>.format(self.name)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'学员信息'</span></span><br></pre></td></tr></table></figure><p>在admin.py中编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'sex'</span>,<span class="string">'profession'</span>,<span class="string">'email'</span>,<span class="string">'qq'</span>,<span class="string">'phone'</span>,<span class="string">'status'</span>,<span class="string">'created_time'</span>)</span><br><span class="line">    list_filter = (<span class="string">'sex'</span>,<span class="string">'status'</span>,<span class="string">'created_time'</span>)</span><br><span class="line">    search_fields = (<span class="string">'name'</span>,<span class="string">'profession'</span>)</span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>,&#123;</span><br><span class="line">            <span class="string">'fields'</span>:(</span><br><span class="line">                <span class="string">'name'</span>,</span><br><span class="line">                (<span class="string">'sex'</span>,<span class="string">'prefession'</span>),</span><br><span class="line">                (<span class="string">'email'</span>,<span class="string">'qq'</span>,<span class="string">'phone'</span>),</span><br><span class="line">                <span class="string">'status'</span>,</span><br><span class="line">            )</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">admin.site.register(Student, StudentAdmin)</span><br></pre></td></tr></table></figure><p>注册到setting文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'student'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;zh-Hans&apos;</span><br><span class="line"></span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line"></span><br><span class="line">USE_I18N = True</span><br><span class="line"></span><br><span class="line">USE_L10N = True</span><br><span class="line"></span><br><span class="line">USE_TZ = True</span><br></pre></td></tr></table></figure><p>在项目的根目录下执行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigreations <span class="comment"># 创建数据库迁移文件</span></span><br><span class="line">python manage.py migrate <span class="comment"># 创建表</span></span><br><span class="line">python manage.py createsuperuser <span class="comment">#创建超级用户</span></span><br><span class="line">python manage.py runserver <span class="comment">#启动服务</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/resources/01/image-20210117152057036.png" alt="image-20210117152057036"></p><h3 id="关于前台页面的开发"><a href="#关于前台页面的开发" class="headerlink" title="关于前台页面的开发"></a>关于前台页面的开发</h3><p>在student.py 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义了一个index方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    words = <span class="string">'World!'</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,context=&#123;<span class="string">'words'</span>:words&#125;)  <span class="comment"># 在student的templates中寻找index.html,并且上下文内容包含words</span></span><br></pre></td></tr></table></figure><p>注意：在工作空间的json中加入可以解决在django中编写html的问题</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"files.associations": &#123;</span><br><span class="line">     "**/*.html": "html",</span><br><span class="line">     "**/templates/**/*.html": "django-html",</span><br><span class="line">     "**/templates/**/*": "django-txt",</span><br><span class="line">     "**/requirements&#123;/**,*&#125;.&#123;txt,in&#125;": "pip-requirements"</span><br><span class="line"> &#125;,</span><br><span class="line"> "emmet.includeLanguages": &#123;"django-html": "html"&#125;</span><br></pre></td></tr></table></figure><p>在创建的templates的index.html中编写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学员管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello &#123;&#123; words &#125;&#125;!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在urls.py中配置映射目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> student.views <span class="keyword">import</span> index</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^$'</span>,index,name=<span class="string">'index'</span>)  <span class="comment"># 匹配所有映射给index函数处理 r代表使用原生字符</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="重新调整"><a href="#重新调整" class="headerlink" title="重新调整"></a>重新调整</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义了一个index方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># words = 'World!'</span></span><br><span class="line">    <span class="comment"># return render(request,'index.html',context=&#123;'words':words&#125;)  # 在student的templates中寻找index.html,并且上下文内容包含words</span></span><br><span class="line">    students = Student.objects.all() <span class="comment"># 获取所有学员信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,context=&#123;<span class="string">'students'</span>:students&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for student in students %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;student.name&#125;&#125; - &#123;&#123;student.get_status_display&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>get_status_display自动调用带有choices</em></p><p>效果如下：</p><p><img src="/images/resources/01/image-20210117162744822.png" alt="image-20210117162744822"></p><h2 id="提交数据-使用form"><a href="#提交数据-使用form" class="headerlink" title="提交数据(使用form)"></a>提交数据(使用form)</h2><p>创建一个forms.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line"><span class="comment"># 定义元数据,模型参照student，并且设置显示的字段</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = (</span><br><span class="line">            <span class="string">'name'</span>,<span class="string">'sex'</span>,<span class="string">'profession'</span>,</span><br><span class="line">            <span class="string">'email'</span>,<span class="string">'qq'</span>,<span class="string">'phone'</span></span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检验QQ必须为数据(示例)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_qq</span><span class="params">(self)</span>:</span></span><br><span class="line">        cleaned_data = self.cleaned_data[<span class="string">'qq'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cleaned_data.isdigit():</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">'必须为数字'</span>)</span><br><span class="line">        <span class="keyword">return</span> int(cleaned_data)</span><br></pre></td></tr></table></figure><p>修改view.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义了一个index方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># words = 'World!'</span></span><br><span class="line">    <span class="comment"># return render(request,'index.html',context=&#123;'words':words&#125;)  # 在student的templates中寻找index.html,并且上下文内容包含words</span></span><br><span class="line">    students = Student.objects.all() <span class="comment"># 获取所有学员信息</span></span><br><span class="line">    <span class="comment"># 以下为新增代码</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = StudentForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 对于手动创建student 可以利用form直接进行保存</span></span><br><span class="line">            <span class="comment"># cleaned_data = form.cleaned_data</span></span><br><span class="line">            <span class="comment"># student = Student()</span></span><br><span class="line">            <span class="comment"># student.name = cleaned_data['name']</span></span><br><span class="line">            <span class="comment"># student.sex = cleaned_data['sex']</span></span><br><span class="line">            <span class="comment"># student.email = cleaned_data['email']</span></span><br><span class="line">            <span class="comment"># student.profession = cleaned_data['profession']</span></span><br><span class="line">            <span class="comment"># student.qq = cleaned_data['qq']</span></span><br><span class="line">            <span class="comment"># student.phone = cleaned_data['phone']</span></span><br><span class="line">            <span class="comment"># student.save()</span></span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = StudentForm()</span><br><span class="line">    </span><br><span class="line">    context =&#123;</span><br><span class="line">        <span class="string">'students'</span>:students,</span><br><span class="line">        <span class="string">'form'</span>:form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>页面调整如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> student <span class="keyword">in</span> students %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123;student.name&#125;&#125; - &#123;&#123;student.get_status_display&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form &#125;&#125;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>注意:csrf_token是对安全性进行检验</strong></p><p>最终效果如下：</p><p><img src="/images/resources/01/image-20210117170653853.png" alt="image-20210117170653853"></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>一般将数据操作逻辑封装到model层中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cls.objects.all()</span><br></pre></td></tr></table></figure><h3 id="使用class-based-view复用"><a href="#使用class-based-view复用" class="headerlink" title="使用class-based view复用"></a>使用class-based view复用</h3><p>在views.py中构建以下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用class-based view 复用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(View)</span>:</span></span><br><span class="line">    template_name = <span class="string">'index.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context</span><span class="params">(self)</span>:</span></span><br><span class="line">        students = Student.get_all()</span><br><span class="line">        context =&#123;</span><br><span class="line">            <span class="string">'students'</span>:students</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 匹配get请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        context = self.get_context()</span><br><span class="line">        form = StudentForm()</span><br><span class="line">        context.update(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'form'</span>:form</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> render(request,self.template_name,context=context)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 匹配post请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        form = StudentForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'index'</span>))</span><br><span class="line">        context =self.get_context()</span><br><span class="line">        context.update(&#123;</span><br><span class="line">            <span class="string">'form'</span>:form</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> render(request,self.template_name,context=context)</span><br></pre></td></tr></table></figure><p>urls.py中引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> student.views <span class="keyword">import</span> index</span><br><span class="line"><span class="keyword">from</span> student.views <span class="keyword">import</span> IndexView</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment">## url(r'^$',index,name='index')</span></span><br><span class="line">    url(<span class="string">r'^$'</span>,IndexView.as_view(),name=<span class="string">'index'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意：as_view 就是对get和post方法的包装</p><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><p>构建一个middlewares.py文件，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeItMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        strs = <span class="string">"1. 处理requset请求，第一个被调用，"</span></span><br><span class="line">        <span class="string">"处理request中认证头之类"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request,func,*args,**kwargs)</span>:</span></span><br><span class="line">        strs = <span class="string">"2. 用于view处理,其中func即是调用的view"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">if</span> request.path != reverse(<span class="string">'index'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="comment">#这里调用了view做处理</span></span><br><span class="line">        response  = func(request)</span><br><span class="line">        costed = time.time() - start</span><br><span class="line">        print(<span class="string">"process view used  %d seconds"</span> % (costed,))</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request,Exception)</span>:</span></span><br><span class="line">        strs = <span class="string">"0. 用来处理全部流程中的异常"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        strs = <span class="string">"3. 如果处理渲染模板使用了render,就会调用到这里"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        strs = <span class="string">"4. 所有的流程执行完后会返回response给浏览器,在返回之前会调用到这里"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>加入到setting配置中的中间件中:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    'student.middlewares.TimeItMiddleware', </span><br><span class="line">    'django.middleware.security.SecurityMiddleware',</span><br><span class="line">    'django.contrib.sessions.middleware.SessionMiddleware',</span><br><span class="line">    'django.middleware.common.CommonMiddleware',</span><br><span class="line">    'django.middleware.csrf.CsrfViewMiddleware',</span><br><span class="line">    'django.contrib.auth.middleware.AuthenticationMiddleware',</span><br><span class="line">    'django.contrib.messages.middleware.MessageMiddleware',</span><br><span class="line">    'django.middleware.clickjacking.XFrameOptionsMiddleware',</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="关于单元测试"><a href="#关于单元测试" class="headerlink" title="关于单元测试"></a>关于单元测试</h3><p>参考的文章很多,可以参考<a href="https://www.cnblogs.com/fiona-zhong/p/10554197.html" target="_blank" rel="noopener">https://www.cnblogs.com/fiona-zhong/p/10554197.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;django开发&quot;&gt;&lt;a href=&quot;#django开发&quot; class=&quot;headerlink&quot; title=&quot;django开发&quot;&gt;&lt;/a&gt;django开发&lt;/h1&gt;&lt;h2 id=&quot;需求的描述&quot;&gt;&lt;a href=&quot;#需求的描述&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="django开发" scheme="https://djwangweijie.github.io/categories/django%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="web开发" scheme="https://djwangweijie.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="快速构建" scheme="https://djwangweijie.github.io/tags/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA/"/>
    
      <category term="ORM" scheme="https://djwangweijie.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>数据分析完结</title>
    <link href="https://djwangweijie.github.io/2020/09/29/2020-09-29-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%8C%E7%BB%93%E7%AB%A0/"/>
    <id>https://djwangweijie.github.io/2020/09/29/2020-09-29-数据分析完结章/</id>
    <published>2020-09-29T07:49:36.114Z</published>
    <updated>2020-10-09T05:29:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据分析完结章"><a href="#数据分析完结章" class="headerlink" title="数据分析完结章"></a>数据分析完结章</h1><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p><img src="/images/resources/20200929/image-20200929095444399.png" alt="image-20200929095444399"></p><h2 id="纯python时区计数"><a href="#纯python时区计数" class="headerlink" title="纯python时区计数"></a>纯python时区计数</h2><p><img src="/images/resources/20200929/image-20200929101915101.png" alt="image-20200929101915101"></p><h2 id="使用pandas进行时区计数"><a href="#使用pandas进行时区计数" class="headerlink" title="使用pandas进行时区计数"></a>使用pandas进行时区计数</h2><p><img src="/images/resources/20200929/image-20200929102222199.png" alt="image-20200929102222199"></p><p><img src="/images/resources/20200929/image-20200929102234993.png" alt="image-20200929102234993"></p><blockquote><p>处理缺失值</p></blockquote><p><img src="/images/resources/20200929/image-20200929102730104.png" alt="image-20200929102730104"></p><blockquote><p>可视化操作</p></blockquote><p><img src="/images/resources/20200929/image-20200929102908833.png" alt="image-20200929102908833"></p><h3 id="处理复杂字符串"><a href="#处理复杂字符串" class="headerlink" title="处理复杂字符串"></a>处理复杂字符串</h3><p><img src="/images/resources/20200929/image-20200929103516946.png" alt="image-20200929103516946"></p><p><img src="/images/resources/20200929/image-20200929104806177.png" alt="image-20200929104806177"></p><p><img src="/images/resources/20200929/image-20200929105539064.png" alt="image-20200929105539064"></p><p><img src="/images/resources/20200929/image-20200929105916586.png" alt="image-20200929105916586"></p><blockquote><p>可视化操作</p></blockquote><p><img src="/images/resources/20200929/image-20200929110709018.png" alt="image-20200929110709018"></p><p><img src="/images/resources/20200929/image-20200929111432477.png" alt="image-20200929111432477"></p><h2 id="分析电影"><a href="#分析电影" class="headerlink" title="分析电影"></a>分析电影</h2><p><img src="/images/resources/20200929/image-20200929120052889.png" alt="image-20200929120052889"></p><p><img src="/images/resources/20200929/image-20200929121024924.png" alt="image-20200929121024924"></p><p><img src="/images/resources/20200929/image-20200929121120775.png" alt="image-20200929121120775"></p><p><img src="/images/resources/20200929/image-20200929121302878.png" alt="image-20200929121302878"></p><h3 id="测量评价分歧"><a href="#测量评价分歧" class="headerlink" title="测量评价分歧"></a>测量评价分歧</h3><p><em>假设想找到男性和女性观众最具分歧的电影</em><br><img src="/images/resources/20200929/image-20200929121753333.png" alt="image-20200929121753333"></p><p><em>假设通过评分的方差或者标准差来衡量</em></p><p><img src="/images/resources/20200929/image-20200929122144330.png" alt="image-20200929122144330"></p><p><img src="/images/resources/20200929/image-20200929123844632.png" alt="image-20200929123844632"></p><h2 id="分析婴儿名字"><a href="#分析婴儿名字" class="headerlink" title="分析婴儿名字"></a>分析婴儿名字</h2><blockquote><p>目标</p></blockquote><ol><li>根据给定的名字,对婴儿名字随时间比例进行可视化</li><li>确定一个名字的相对排位</li><li>每年最受欢迎的名字或者流行度最好或者最低的名字</li><li>分析名字的趋势</li><li>分析名字的来源</li></ol><p><img src="/images/resources/20200929/image-20200929124834423.png" alt="image-20200929124834423"></p><h3 id="整理数据集"><a href="#整理数据集" class="headerlink" title="整理数据集"></a>整理数据集</h3><p><img src="/images/resources/20200929/image-20200929125528800.png" alt="image-20200929125528800"></p><p><img src="/images/resources/20200929/image-20200929130624338.png" alt="image-20200929130624338"></p><p><img src="/images/resources/20200929/image-20200929131045948.png" alt="image-20200929131045948"></p><p><img src="/images/resources/20200929/image-20200929131615520.png" alt="image-20200929131615520"></p><h3 id="分析名字趋势"><a href="#分析名字趋势" class="headerlink" title="分析名字趋势"></a>分析名字趋势</h3><p><img src="/images/resources/20200929/image-20200929132644570.png" alt="image-20200929132644570"></p><h3 id="计算命名的多样性"><a href="#计算命名的多样性" class="headerlink" title="计算命名的多样性"></a>计算命名的多样性</h3><p><img src="/images/resources/20200929/image-20200929133735933.png" alt="image-20200929133735933"></p><p><img src="/images/resources/20200929/image-20200929134529776.png" alt="image-20200929134529776"></p><h3 id="最后一个字母"><a href="#最后一个字母" class="headerlink" title="最后一个字母"></a>最后一个字母</h3><p><img src="/images/resources/20200929/image-20200929135508417.png" alt="image-20200929135508417"></p><p><img src="/images/resources/20200929/image-20200929135520001.png" alt="image-20200929135520001"></p><p><img src="/images/resources/20200929/image-20200929135936555.png" alt="image-20200929135936555"></p><p><img src="/images/resources/20200929/image-20200929140202763.png" alt="image-20200929140202763"></p><h3 id="男孩名字变成女孩名字"><a href="#男孩名字变成女孩名字" class="headerlink" title="男孩名字变成女孩名字"></a>男孩名字变成女孩名字</h3><p><img src="/images/resources/20200929/image-20200929140915728.png" alt="image-20200929140915728"></p><h2 id="农业数据分析"><a href="#农业数据分析" class="headerlink" title="农业数据分析"></a>农业数据分析</h2><p><img src="/images/resources/20200929/image-20200929141802330.png" alt="image-20200929141802330"></p><p><img src="/images/resources/20200929/image-20200929141812142.png" alt="image-20200929141812142"></p><p><img src="/images/resources/20200929/image-20200929144432227.png" alt="image-20200929144432227"></p><p><img src="/images/resources/20200929/image-20200929145237933.png" alt="image-20200929145237933"></p><p><img src="/images/resources/20200929/image-20200929150302933.png" alt="image-20200929150302933"></p><h2 id="选举分析"><a href="#选举分析" class="headerlink" title="选举分析"></a>选举分析</h2><p><img src="/images/resources/20200929/image-20200929151557059.png" alt="image-20200929151557059"></p><p><img src="/images/resources/20200929/image-20200929152112283.png" alt="image-20200929152112283"></p><h3 id="按雇主和职业进行统计"><a href="#按雇主和职业进行统计" class="headerlink" title="按雇主和职业进行统计"></a>按雇主和职业进行统计</h3><p><img src="/images/resources/20200929/image-20200929153055725.png" alt="image-20200929153055725"></p><p><img src="/images/resources/20200929/image-20200929153747022.png" alt="image-20200929153747022"></p><h3 id="捐赠金额分桶"><a href="#捐赠金额分桶" class="headerlink" title="捐赠金额分桶"></a>捐赠金额分桶</h3><p><img src="/images/resources/20200929/image-20200929154255437.png" alt="image-20200929154255437"></p><h3 id="按州进行计算"><a href="#按州进行计算" class="headerlink" title="按州进行计算"></a>按州进行计算</h3><p><img src="/images/resources/20200929/image-20200929154622418.png" alt="image-20200929154622418"></p><p><img src="/images/resources/20200929/image-20200929154640914.png" alt="image-20200929154640914"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据分析完结章&quot;&gt;&lt;a href=&quot;#数据分析完结章&quot; class=&quot;headerlink&quot; title=&quot;数据分析完结章&quot;&gt;&lt;/a&gt;数据分析完结章&lt;/h1&gt;&lt;h2 id=&quot;数据准备&quot;&gt;&lt;a href=&quot;#数据准备&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据建模</title>
    <link href="https://djwangweijie.github.io/2020/09/28/2020-09-28-python%E5%BB%BA%E6%A8%A1/"/>
    <id>https://djwangweijie.github.io/2020/09/28/2020-09-28-python建模/</id>
    <published>2020-09-28T06:44:56.290Z</published>
    <updated>2020-10-09T05:28:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python建模"><a href="#python建模" class="headerlink" title="python建模"></a>python建模</h1><p><strong><em>在机器学习的学习库中,有2个比较流行的建模数据包statsmodel和大名鼎鼎的scikit-learn.statsmodels更关注统计推断，提供不确定估计和参数p-value。相反的，scikit-learn注重预测。</em></strong></p><h2 id="pandas与建模代码结合"><a href="#pandas与建模代码结合" class="headerlink" title="pandas与建模代码结合"></a>pandas与建模代码结合</h2><p><img src="/images/resources/20200928/image-20200928124523739.png" alt="image-20200928124523739"></p><p><img src="/images/resources/20200928/image-20200928125150294.png" alt="image-20200928125150294"></p><p><img src="/images/resources/20200928/image-20200928125410631.png" alt="image-20200928125410631"></p><h2 id="评估线性模型"><a href="#评估线性模型" class="headerlink" title="评估线性模型"></a>评估线性模型</h2><h3 id="泰坦尼克代码示例"><a href="#泰坦尼克代码示例" class="headerlink" title="泰坦尼克代码示例"></a>泰坦尼克代码示例</h3><p><img src="/images/resources/20200928/image-20200928130852833.png" alt="image-20200928130852833"></p><p><img src="/images/resources/20200928/image-20200928131043151.png" alt="image-20200928131043151"></p><blockquote><p>简单示例</p></blockquote><p><img src="/images/resources/20200928/image-20200928134320807.png" alt="image-20200928134320807"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python建模&quot;&gt;&lt;a href=&quot;#python建模&quot; class=&quot;headerlink&quot; title=&quot;python建模&quot;&gt;&lt;/a&gt;python建模&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;在机器学习的学习库中,有2个比较流行的建模数据包statsmodel
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之高阶pandas</title>
    <link href="https://djwangweijie.github.io/2020/09/27/2020-09-27-%E9%AB%98%E7%BA%A7pandas/"/>
    <id>https://djwangweijie.github.io/2020/09/27/2020-09-27-高级pandas/</id>
    <published>2020-09-27T06:53:25.055Z</published>
    <updated>2020-10-09T05:37:00.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高阶pandas"><a href="#高阶pandas" class="headerlink" title="高阶pandas"></a>高阶pandas</h1><h2 id="背景和目标"><a href="#背景和目标" class="headerlink" title="背景和目标"></a>背景和目标</h2><p><strong><em>一个列经常会包含重复值,汇聚成了一个小型的不同值的集合。通过unique和values_counts,允许从一个数组中提取不同的值,并计算这些不同值的频率</em></strong></p><p><img src="/images/resources/20200927/image-20200927110638900.png" alt="image-20200927110638900"></p><p><strong>在数据库的操作中,使用维度表示一种最佳实践，维度包含了不同的值,并将主要观测值存储为引用维度表的整数键</strong></p><p><img src="/images/resources/20200927/image-20200927110935427.png" alt="image-20200927110935427"></p><p><strong><em>这种按照整数展现的方式成为分类或者字典编码的实现</em></strong></p><h2 id="pandas中的Categorical类型-可分类类型"><a href="#pandas中的Categorical类型-可分类类型" class="headerlink" title="pandas中的Categorical类型(可分类类型)"></a>pandas中的Categorical类型(可分类类型)</h2><p><img src="/images/resources/20200927/image-20200927111800297.png" alt="image-20200927111800297"></p><h3 id="通过函数转为categorical对象"><a href="#通过函数转为categorical对象" class="headerlink" title="通过函数转为categorical对象"></a>通过函数转为categorical对象</h3><p><img src="/images/resources/20200927/image-20200927130954583.png" alt="image-20200927130954583"></p><blockquote><p>其他方式</p></blockquote><p><img src="/images/resources/20200927/image-20200927131403599.png" alt="image-20200927131403599"></p><h3 id="使用categorical对象进行计算"><a href="#使用categorical对象进行计算" class="headerlink" title="使用categorical对象进行计算"></a>使用categorical对象进行计算</h3><p><img src="/images/resources/20200927/image-20200927132408678.png" alt="image-20200927132408678"></p><h3 id="使用分类获得更高性能"><a href="#使用分类获得更高性能" class="headerlink" title="使用分类获得更高性能"></a>使用分类获得更高性能</h3><p><img src="/images/resources/20200927/image-20200927133450474.png" alt="image-20200927133450474"></p><h3 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h3><p><img src="/images/resources/20200927/image-20200927134537131.png" alt="image-20200927134537131"></p><p><img src="/images/resources/20200927/image-20200927134554599.png" alt="image-20200927134554599"></p><h3 id="创建虚拟替换变量"><a href="#创建虚拟替换变量" class="headerlink" title="创建虚拟替换变量"></a>创建虚拟替换变量</h3><p><img src="/images/resources/20200927/image-20200927134717366.png" alt="image-20200927134717366"></p><h2 id="高阶的groupby应用"><a href="#高阶的groupby应用" class="headerlink" title="高阶的groupby应用"></a>高阶的groupby应用</h2><p>在分组操作中有一个内建方法叫做transform,可以达到:</p><ol><li>产生一个标量值,广播到个分组的尺寸数据中</li><li>产生一个与输入分组尺寸相同的对象</li><li>不可改变它的输入</li></ol><p><img src="/images/resources/20200927/image-20200927135545587.png" alt="image-20200927135545587"></p><p><img src="/images/resources/20200927/image-20200927135852507.png" alt="image-20200927135852507"></p><h3 id="分组的时间重新采样"><a href="#分组的时间重新采样" class="headerlink" title="分组的时间重新采样"></a>分组的时间重新采样</h3><p><img src="/images/resources/20200927/image-20200927140302739.png" alt="image-20200927140302739"></p><blockquote><p>其他方式</p></blockquote><p><img src="/images/resources/20200927/image-20200927141652657.png" alt="image-20200927141652657"></p><p><em>注:还有一个pipe管道的方法暂时没有用.后续代码有涉及到在进行查阅</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高阶pandas&quot;&gt;&lt;a href=&quot;#高阶pandas&quot; class=&quot;headerlink&quot; title=&quot;高阶pandas&quot;&gt;&lt;/a&gt;高阶pandas&lt;/h1&gt;&lt;h2 id=&quot;背景和目标&quot;&gt;&lt;a href=&quot;#背景和目标&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据的时间序列</title>
    <link href="https://djwangweijie.github.io/2020/09/25/2020-09-24-%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    <id>https://djwangweijie.github.io/2020/09/25/2020-09-24-时间序列/</id>
    <published>2020-09-25T06:10:42.118Z</published>
    <updated>2020-10-09T05:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><blockquote><p>说明</p></blockquote><ol><li>时间序列的数据是比较重要的结构化数据形式,在多个时间观测或者测量的数据形成了时间序列</li><li>许多的时间序列是固定频率的,也就表明数据是根据相同规则出现的.同样的时间序列可以是不规则的,没有固定的时间单位和偏移量</li><li>标记时间的方式可能有时间戳;固定的时间区间;时间间隔;实验时间或消耗时间</li></ol><h1 id="日期和时间数据的类型以及工具"><a href="#日期和时间数据的类型以及工具" class="headerlink" title="日期和时间数据的类型以及工具"></a>日期和时间数据的类型以及工具</h1><p>在python的标准库中包含了日期和时间数据的类型.有datetime,time,calendar等</p><p><img src="/images/resources/20200924/image-20200924111529527.png" alt="image-20200924111529527"></p><h2 id="字符串和datetime互相转换"><a href="#字符串和datetime互相转换" class="headerlink" title="字符串和datetime互相转换"></a>字符串和datetime互相转换</h2><p><img src="/images/resources/20200924/image-20200924122533490.png" alt="image-20200924122533490"></p><h3 id="使用pd中的to-datetime进行格式转换"><a href="#使用pd中的to-datetime进行格式转换" class="headerlink" title="使用pd中的to_datetime进行格式转换"></a>使用pd中的to_datetime进行格式转换</h3><p><img src="/images/resources/20200924/image-20200924122835232.png" alt="image-20200924122835232"></p><h2 id="时间序列基础"><a href="#时间序列基础" class="headerlink" title="时间序列基础"></a>时间序列基础</h2><p><strong><em>pandas的基础时间序列是由时间戳索引的Series,通常表示为字符串或者是datetime对象</em></strong></p><p><img src="/images/resources/20200924/image-20200925100223177.png" alt="image-20200925100223177"></p><h3 id="索引-子集-选择"><a href="#索引-子集-选择" class="headerlink" title="索引,子集,选择"></a>索引,子集,选择</h3><p><img src="/images/resources/20200924/image-20200925100611997.png" alt="image-20200925100611997"></p><p><img src="/images/resources/20200924/image-20200925101106079.png" alt="image-20200925101106079"></p><p><img src="/images/resources/20200924/image-20200925101651782.png" alt="image-20200925101651782"></p><p><img src="/images/resources/20200924/image-20200925102625533.png" alt="image-20200925102625533"></p><h3 id="含有重复索引的时间序列"><a href="#含有重复索引的时间序列" class="headerlink" title="含有重复索引的时间序列"></a>含有重复索引的时间序列</h3><p>在某些情况下,可能会有多个数据观察值落在特定的时间戳上.</p><p><img src="/images/resources/20200924/image-20200925103954285.png" alt="image-20200925103954285"></p><h2 id="日期范围-频率和移位"><a href="#日期范围-频率和移位" class="headerlink" title="日期范围,频率和移位"></a>日期范围,频率和移位</h2><p>时间序列的频率不是固定的,但是经常有需要处理固定频率的场景,例如每日,每月.这意味着在必要的时候向时间序列引入缺失值。比如通过resample方法将样本时间序列转换为固定的每日频率数据</p><p><img src="/images/resources/20200924/image-20200925104955378.png" alt="image-20200925104955378"></p><p><img src="/images/resources/20200924/image-20200925105846336.png" alt="image-20200925105846336"></p><h3 id="频率和日期偏置"><a href="#频率和日期偏置" class="headerlink" title="频率和日期偏置"></a>频率和日期偏置</h3><p><strong><em>pandas中频率是由基础频率和倍数组成的.基础频率通常会有字符串别名.</em></strong></p><p><img src="/images/resources/20200924/image-20200925112737059.png" alt="image-20200925112737059"></p><h3 id="移位日期"><a href="#移位日期" class="headerlink" title="移位日期"></a>移位日期</h3><p>在Serise和DataFrame中都有一个shift方法进行简单日期前后位移</p><p><img src="/images/resources/20200924/image-20200925113638466.png" alt="image-20200925113638466"></p><h3 id="使用偏移进行移位日期"><a href="#使用偏移进行移位日期" class="headerlink" title="使用偏移进行移位日期"></a>使用偏移进行移位日期</h3><p><img src="/images/resources/20200924/image-20200925114716564.png" alt="image-20200925114716564"></p><h2 id="时区处理"><a href="#时区处理" class="headerlink" title="时区处理"></a>时区处理</h2><p><img src="/images/resources/20200924/image-20200925115647627.png" alt="image-20200925115647627"></p><h2 id="时间区间和区间算术"><a href="#时间区间和区间算术" class="headerlink" title="时间区间和区间算术"></a>时间区间和区间算术</h2><p>时间区间表示的是时间范围,Period类表示的正式这种数据类型<br><img src="/images/resources/20200924/image-20200925123909605.png" alt="image-20200925123909605"></p><blockquote><p>示例</p></blockquote><p><img src="/images/resources/20200924/image-20200925124505804.png" alt="image-20200925124505804"></p><h2 id="重新采样和频率转换"><a href="#重新采样和频率转换" class="headerlink" title="重新采样和频率转换"></a>重新采样和频率转换</h2><p>重新采样指的是将时间序列从一个频率转换到另一个频率的过程,将高频率聚合到低频率为向下采样,反之为向上采样</p><p><img src="/images/resources/20200924/image-20200925124953715.png" alt="image-20200925124953715"></p><h3 id="向下采样"><a href="#向下采样" class="headerlink" title="向下采样"></a>向下采样</h3><p><img src="/images/resources/20200924/image-20200925130523640.png" alt="image-20200925130523640"></p><blockquote><p>开端-峰值-谷值-结束</p></blockquote><p><img src="/images/resources/20200924/image-20200925130719301.png" alt="image-20200925130719301"></p><h3 id="向上采样"><a href="#向上采样" class="headerlink" title="向上采样"></a>向上采样</h3><p><img src="/images/resources/20200924/image-20200925131305982.png" alt="image-20200925131305982"></p><h3 id="使用区间进行重新采样"><a href="#使用区间进行重新采样" class="headerlink" title="使用区间进行重新采样"></a>使用区间进行重新采样</h3><p><img src="/images/resources/20200924/image-20200925132008194.png" alt="image-20200925132008194"></p><h2 id="移动窗口函数"><a href="#移动窗口函数" class="headerlink" title="移动窗口函数"></a>移动窗口函数</h2><p>统计和其他通过移动窗口或指数衰减而运行的函数是用于时间序列操作的数组变换的一个重要类别。这些函数称作为移动窗口函数。函数会自动排除缺失数据<br><img src="/images/resources/20200924/image-20200925134253670.png" alt="image-20200925134253670"></p><p><img src="/images/resources/20200924/image-20200925134309212.png" alt="image-20200925134309212"></p><p><img src="/images/resources/20200924/image-20200925134324416.png" alt="image-20200925134324416"></p><p><img src="/images/resources/20200924/image-20200925134517202.png" alt="image-20200925134517202"></p><h3 id="指数加权函数"><a href="#指数加权函数" class="headerlink" title="指数加权函数"></a>指数加权函数</h3><p>指定一个常数衰减因子以向更多近期观测值提供更多权重值,可以替代使用具有相等加权观察值的静态窗口尺寸的方法</p><p><img src="/images/resources/20200924/image-20200925135940944.png" alt="image-20200925135940944"></p><h3 id="二元移动窗口函数"><a href="#二元移动窗口函数" class="headerlink" title="二元移动窗口函数"></a>二元移动窗口函数</h3><p><img src="/images/resources/20200924/image-20200925140716378.png" alt="image-20200925140716378"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;时间序列&quot;&gt;&lt;a href=&quot;#时间序列&quot; class=&quot;headerlink&quot; title=&quot;时间序列&quot;&gt;&lt;/a&gt;时间序列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;时间序列的数据是比较重要的结构化数据形
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据序列" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/"/>
    
      <category term="数据时间" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>数据分组和聚合操作</title>
    <link href="https://djwangweijie.github.io/2020/09/11/2020-09-11-%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84%E5%92%8C%E8%81%9A%E5%90%88/"/>
    <id>https://djwangweijie.github.io/2020/09/11/2020-09-11-数据分组和聚合/</id>
    <published>2020-09-11T09:51:34.633Z</published>
    <updated>2020-09-11T11:07:29.508Z</updated>
    
    <content type="html"><![CDATA[<p>通过将数据进行分组以及聚合,能够更加能够看到数据的重要性,越来越接近我的想法了.</p><h1 id="数据聚合和分组操作"><a href="#数据聚合和分组操作" class="headerlink" title="数据聚合和分组操作"></a>数据聚合和分组操作</h1><p>​    <strong>对数据及进行分类，在每一组数据应用聚合函数或者转换函数,这是非常重要的一个部分.一般在数据载入,合并,准备数据集之后,可能需要计算分组统计或者数据透视表用于报告或可视化的目的。pandas提供一个灵活的groupby接口,允许一种自然的方式对数据集进行切片,切块和总结。</strong></p><p>​    <strong>我们可以通过pandas对象或者Numpy数据执行复杂的组操作</strong></p><pre><code>1. 使用一个或者多个键将pandas对象拆分为多块  2. 计算组汇总统计信息以及应用组内变化或其他操作        3. 计算数据透视表和交叉表            4. 执行分位数分析以及其他统计组分析</code></pre><h2 id="GroupBy机制"><a href="#GroupBy机制" class="headerlink" title="GroupBy机制"></a>GroupBy机制</h2><p><em>一般聚合操作中所有的动作为拆分-应用-联合,数据包含在pandas对象中,可以是不同的数据结构.之后可以根据一个或者多个键分离到各组中,可以沿着行或者列</em>.分组操作后，一个函数就可以应用到各个组中,产生新的值。<br><strong>注意:axis=0 代表着以行为单位从上至下计算,axis=1代表着以列为单位从左至右计算</strong></p><blockquote><p>分组键</p></blockquote><p>分组键可以是多种形式的,不一定是完全相同的类型:</p><ol><li>与需要分组的轴长度一致的值列表或者值数组</li><li>DataFrame的列名的值</li><li>可以将分组轴向上的值和分组名称相匹配的字典或者Series</li><li>可以在轴索引或者索引中单个标签上调用的函数</li></ol><blockquote><p>示例说明</p></blockquote><p><img src="/images/resources/20200911/image-20200909103353013.png" alt="image-20200909103353013"></p><p><img src="/images/resources/20200911/image-20200909104105962.png" alt="image-20200909104105962"></p><p><img src="/images/resources/20200911/image-20200909105648809.png" alt="image-20200909105648809"></p><h2 id="遍历分组对象"><a href="#遍历分组对象" class="headerlink" title="遍历分组对象"></a>遍历分组对象</h2><p><strong>group对象支持迭代</strong><br><img src="/images/resources/20200911/image-20200909111834130.png" alt="image-20200909111834130"></p><p><img src="/images/resources/20200911/image-20200909144033641.png" alt="image-20200909144033641"></p><h2 id="选择一列或者所有列的子集"><a href="#选择一列或者所有列的子集" class="headerlink" title="选择一列或者所有列的子集"></a>选择一列或者所有列的子集</h2><p><img src="/images/resources/20200911/image-20200909145559991.png" alt="image-20200909145559991"></p><h2 id="使用字典和Serise进行分组"><a href="#使用字典和Serise进行分组" class="headerlink" title="使用字典和Serise进行分组"></a>使用字典和Serise进行分组</h2><p><img src="/images/resources/20200911/image-20200909150813382.png" alt="image-20200909150813382"></p><h2 id="使用函数分组"><a href="#使用函数分组" class="headerlink" title="使用函数分组"></a>使用函数分组</h2><p><img src="/images/resources/20200911/image-20200909152030886.png" alt="image-20200909152030886"></p><h2 id="根据索引层级进行分组"><a href="#根据索引层级进行分组" class="headerlink" title="根据索引层级进行分组"></a>根据索引层级进行分组</h2><p><img src="/images/resources/20200911/image-20200909152936829.png" alt="image-20200909152936829"></p><h1 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h1><p><strong>聚合是指所有根据数组产生标量值的数据转换过程，也就是类似统计函数一样.</strong></p><p><img src="/images/resources/20200911/image-20200910101011063.png" alt="image-20200910101011063"></p><h2 id="逐列以及多函数应用"><a href="#逐列以及多函数应用" class="headerlink" title="逐列以及多函数应用"></a>逐列以及多函数应用</h2><p><img src="/images/resources/20200911/image-20200910102227086.png" alt="image-20200910102227086"></p><blockquote><p>不同的操作方式0</p></blockquote><p><img src="/images/resources/20200911/image-20200910110002305.png" alt="image-20200910110002305"></p><blockquote><p>不同的操作方式1</p></blockquote><p><img src="/images/resources/20200911/image-20200910112800591.png" alt="image-20200910112800591"></p><h2 id="返回不带行索引的聚合数据"><a href="#返回不带行索引的聚合数据" class="headerlink" title="返回不带行索引的聚合数据"></a>返回不带行索引的聚合数据</h2><p><img src="/images/resources/20200911/image-20200910113311844.png" alt="image-20200910113311844"></p><h1 id="apply应用-通用拆分-应用-联合"><a href="#apply应用-通用拆分-应用-联合" class="headerlink" title="apply应用:通用拆分-应用-联合"></a>apply应用:通用拆分-应用-联合</h1><p><img src="/images/resources/20200911/image-20200910120817368.png" alt="image-20200910120817368"></p><p><img src="/images/resources/20200911/image-20200910121023235.png" alt="image-20200910121023235"></p><h2 id="压缩分组键"><a href="#压缩分组键" class="headerlink" title="压缩分组键"></a>压缩分组键</h2><p><img src="/images/resources/20200911/image-20200910121328100.png" alt="image-20200910121328100"></p><h2 id="分位数以及桶分析"><a href="#分位数以及桶分析" class="headerlink" title="分位数以及桶分析"></a>分位数以及桶分析</h2><p><img src="/images/resources/20200911/image-20200910122422983.png" alt="image-20200910122422983"></p><blockquote><p>根据分位数</p></blockquote><p><img src="/images/resources/20200911/image-20200910122807996.png" alt="image-20200910122807996"></p><h1 id="使用指定分组值填充缺失值"><a href="#使用指定分组值填充缺失值" class="headerlink" title="使用指定分组值填充缺失值"></a>使用指定分组值填充缺失值</h1><p><strong>在清除缺失值，有时候可以用dropna去除缺失值,有时候可能需要进行修正.fillna是一个可以填充缺失值的方法</strong><br><img src="/images/resources/20200911/image-20200910123245007.png" alt="image-20200910123245007"></p><blockquote><p>其他示例</p></blockquote><p><img src="/images/resources/20200911/image-20200911103318344.png" alt="image-20200911103318344"></p><h1 id="随机采样和排列"><a href="#随机采样和排列" class="headerlink" title="随机采样和排列"></a>随机采样和排列</h1><p><strong>在Series中有sample方法可以帮助我们进行随机采样</strong><br><img src="/images/resources/20200911/image-20200911131223808.png" alt="image-20200911131223808"></p><p><img src="/images/resources/20200911/image-20200911131647332.png" alt="image-20200911131647332"></p><h1 id="分组加权平均和相关性"><a href="#分组加权平均和相关性" class="headerlink" title="分组加权平均和相关性"></a>分组加权平均和相关性</h1><p><a href="https://jingyan.baidu.com/article/d2b1d1029a99a45c7f37d442.html" target="_blank" rel="noopener">加权平均连接</a><br><img src="/images/resources/20200911/image-20200911132440209.png" alt="image-20200911132440209"></p><blockquote><p>相关示例</p></blockquote><p><img src="/images/resources/20200911/image-20200911135445793.png" alt="image-20200911135445793"></p><p><img src="/images/resources/20200911/image-20200911135500821.png" alt="image-20200911135500821"></p><p><img src="/images/resources/20200911/image-20200911135656979.png" alt="image-20200911135656979"></p><h1 id="逐组线性回归-了解"><a href="#逐组线性回归-了解" class="headerlink" title="逐组线性回归(了解)"></a>逐组线性回归(了解)</h1><p><img src="/images/resources/20200911/image-20200911140808291.png" alt="image-20200911140808291"></p><h1 id="数据透视表和数据交叉表"><a href="#数据透视表和数据交叉表" class="headerlink" title="数据透视表和数据交叉表"></a>数据透视表和数据交叉表</h1><p><img src="/images/resources/20200911/image-20200911141427551.png" alt="image-20200911141427551"></p><p><strong>交叉表是用于统计分组频率的特殊透视表</strong><br><img src="/images/resources/20200911/image-20200911141622302.png" alt="image-20200911141622302"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过将数据进行分组以及聚合,能够更加能够看到数据的重要性,越来越接近我的想法了.&lt;/p&gt;
&lt;h1 id=&quot;数据聚合和分组操作&quot;&gt;&lt;a href=&quot;#数据聚合和分组操作&quot; class=&quot;headerlink&quot; title=&quot;数据聚合和分组操作&quot;&gt;&lt;/a&gt;数据聚合和分组操作&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据制图</title>
    <link href="https://djwangweijie.github.io/2020/08/26/2020-08-26-%E6%95%B0%E6%8D%AE%E5%88%B6%E5%9B%BE/"/>
    <id>https://djwangweijie.github.io/2020/08/26/2020-08-26-数据制图/</id>
    <published>2020-08-26T07:00:25.252Z</published>
    <updated>2020-08-26T07:12:06.406Z</updated>
    
    <content type="html"><![CDATA[<p>通过将数据进行可视化操作,数据就变得越来越美丽了</p><h1 id="绘图与可视化"><a href="#绘图与可视化" class="headerlink" title="绘图与可视化"></a>绘图与可视化</h1><ol><li>python提供了很多可以制作静态或者动态的可视化文件的库</li><li>python中提供了一个库叫做matplotlib库</li><li>可视化数据能够直观的展现数据分析的结果</li></ol><h1 id="简明的matplotlib入门"><a href="#简明的matplotlib入门" class="headerlink" title="简明的matplotlib入门"></a>简明的matplotlib入门</h1><p><img src="/images/resources/20200826/image-20200810154643872.png" alt="image-20200810154643872"></p><h2 id="图片与子图"><a href="#图片与子图" class="headerlink" title="图片与子图"></a>图片与子图</h2><p><strong>matplotlib绘制的图片位于Figure对象中,使用plt.figure生成一个新的图片</strong></p><p><strong>通常是不能用新的空白图片进行绘图的,需要使用add_subplot创建一个或者多个子图</strong></p><p><strong><em>说明:也就是Figure对象中可以允许有多个子图</em></strong></p><p><img src="/images/resources/20200826/image-20200826085630754.png" alt="image-20200826085630754"></p><h2 id="制图的补充说明"><a href="#制图的补充说明" class="headerlink" title="制图的补充说明"></a>制图的补充说明</h2><p><img src="/images/resources/20200826/image-20200826091725105.png" alt="image-20200826091725105"></p><p><img src="/images/resources/20200826/image-20200826091746370.png" alt="image-20200826091746370"></p><h2 id="获取制图对象"><a href="#获取制图对象" class="headerlink" title="获取制图对象"></a>获取制图对象</h2><p><img src="/images/resources/20200826/image-20200826092309660.png" alt="image-20200826092309660"></p><p><strong>这个时候就可以通过索引方便的获取制图对象</strong>、</p><h2 id="调整子图之间的间距"><a href="#调整子图之间的间距" class="headerlink" title="调整子图之间的间距"></a>调整子图之间的间距</h2><p><img src="/images/resources/20200826/image-20200826093403567.png" alt="image-20200826093403567"></p><h1 id="颜色-标记和线类型"><a href="#颜色-标记和线类型" class="headerlink" title="颜色,标记和线类型"></a>颜色,标记和线类型</h1><p><strong>matplotlib的主函数plot接收带有x和y轴的数组。以及一些可选的字符串缩写参数来指明颜色和线类型</strong></p><p><img src="/images/resources/20200826/image-20200826095950780.png" alt="image-20200826095950780"></p><p><a href="https://blog.csdn.net/weixin_40683253/article/details/87375020" target="_blank" rel="noopener">参考文章</a></p><p><img src="/images/resources/20200826/image-20200826100940107.png" alt="image-20200826100940107"></p><h1 id="刻度-标签和图例"><a href="#刻度-标签和图例" class="headerlink" title="刻度,标签和图例"></a>刻度,标签和图例</h1><p><strong>在pyplot接口设计为交互式使用,包含了像xlim,xticks和xticklabels等方法,分别控制了绘图范围,刻度位置以及刻度标签</strong></p><h2 id="设置标题-轴标签-刻度和刻度标签"><a href="#设置标题-轴标签-刻度和刻度标签" class="headerlink" title="设置标题,轴标签,刻度和刻度标签"></a>设置标题,轴标签,刻度和刻度标签</h2><p><img src="/images/resources/20200826/image-20200826102724278.png" alt="image-20200826102724278"></p><h2 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h2><p><img src="/images/resources/20200826/image-20200826103050299.png" alt="image-20200826103050299"></p><h2 id="注释与子图加工"><a href="#注释与子图加工" class="headerlink" title="注释与子图加工"></a>注释与子图加工</h2><p><strong>在plt中使用text,arrow和annote方法用来添加注释和文本</strong></p><p><strong><em>text方式用于给定坐标x和y并绘制对应的说明</em></strong></p><p><img src="/images/resources/20200826/image-20200826103838031.png" alt="image-20200826103838031"></p><h3 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h3><p><strong><em>注释可以同时绘制文本和箭头,示例中展现标普500指数从2007年以来的收盘价。并标注2008到2009金融危机的重要日期</em></strong><br><img src="/images/resources/20200826/image-20200826105956949.png" alt="image-20200826105956949"></p><p><img src="/images/resources/20200826/image-20200826112613289.png" alt="image-20200826112613289"></p><p><strong><em>除此之外还可以绘制多种常见的图形对象</em></strong></p><p><img src="/images/resources/20200826/image-20200826113153981.png" alt="image-20200826113153981"></p><h3 id="图片保存到文件"><a href="#图片保存到文件" class="headerlink" title="图片保存到文件"></a>图片保存到文件</h3><p><img src="/images/resources/20200826/image-20200826113608529.png" alt="image-20200826113608529"></p><h1 id="使用pandas和seaborn进行绘图"><a href="#使用pandas和seaborn进行绘图" class="headerlink" title="使用pandas和seaborn进行绘图"></a>使用pandas和seaborn进行绘图</h1><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p><strong><em>Series和DateFrame都有一个plot的属性。默认情况下绘制的是折线图</em></strong></p><p><img src="/images/resources/20200826/image-20200826114325983.png" alt="image-20200826114325983"></p><p><img src="/images/resources/20200826/image-20200826114644795.png" alt="image-20200826114644795"></p><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p><strong><em>bar()和barh()方法分别绘制垂直和水平的柱状图,Series和DataFrame索引将会被用作x的刻度或者是y的刻度</em></strong></p><p><img src="/images/resources/20200826/image-20200826115817852.png" alt="image-20200826115817852"></p><blockquote><p>DataFrame<img src="/images/resources/20200826/image-20200826120310342.png" alt="image-20200826120310342"></p></blockquote><p><img src="/images/resources/20200826/image-20200826120426030.png" alt="image-20200826120426030"></p><h2 id="相关示例-1"><a href="#相关示例-1" class="headerlink" title="相关示例"></a>相关示例</h2><p><strong>* 根据星期日期和派对规模形成交叉表*</strong></p><p><img src="/images/resources/20200826/image-20200826133823949.png" alt="image-20200826133823949"></p><p><img src="/images/resources/20200826/image-20200826134015163.png" alt="image-20200826134015163"></p><h2 id="使用seaborn进行制图"><a href="#使用seaborn进行制图" class="headerlink" title="使用seaborn进行制图"></a>使用seaborn进行制图</h2><p><img src="/images/resources/20200826/image-20200826141421493.png" alt="image-20200826141421493"></p><p><img src="/images/resources/20200826/image-20200826141545447.png" alt="image-20200826141545447"></p><h2 id="直方图和密度图"><a href="#直方图和密度图" class="headerlink" title="直方图和密度图"></a>直方图和密度图</h2><blockquote><p>直方图</p></blockquote><p>直方图是一种条形图,用于给出值频率的离散显示,数据点被分成离散的,均匀间隔的箱，并且绘制每个箱中数据点的数量</p><p><img src="/images/resources/20200826/image-20200826142521912.png" alt="image-20200826142521912"></p><blockquote><p>密度图</p></blockquote><p>密度图是一种与直方图相关的图形列表。通过计算可能产生的观测数据的连续概率分布</p><p><img src="/images/resources/20200826/image-20200826142728790.png" alt="image-20200826142728790"></p><blockquote><p>一次性绘制直方图和密度图</p></blockquote><p><img src="/images/resources/20200826/image-20200826143450683.png" alt="image-20200826143450683"></p><h2 id="散点图和点图"><a href="#散点图和点图" class="headerlink" title="散点图和点图"></a>散点图和点图</h2><p>散点图和点图可以用于检验两个一维数据序列之间的关系</p><p><img src="/images/resources/20200826/image-20200826144446267.png" alt="image-20200826144446267"></p><p><img src="/images/resources/20200826/image-20200826145006195.png" alt="image-20200826145006195"></p><p><a href="https://www.jianshu.com/p/c50cb4f1029f" target="_blank" rel="noopener">参考文章</a></p><h2 id="分面网格和分类数据"><a href="#分面网格和分类数据" class="headerlink" title="分面网格和分类数据"></a>分面网格和分类数据</h2><p><img src="/images/resources/20200826/image-20200826145713054.png" alt="image-20200826145713054"></p><p><img src="/images/resources/20200826/image-20200826145733211.png" alt="image-20200826145733211"></p><p><img src="/images/resources/20200826/image-20200826145748186.png" alt="image-20200826145748186"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过将数据进行可视化操作,数据就变得越来越美丽了&lt;/p&gt;
&lt;h1 id=&quot;绘图与可视化&quot;&gt;&lt;a href=&quot;#绘图与可视化&quot; class=&quot;headerlink&quot; title=&quot;绘图与可视化&quot;&gt;&lt;/a&gt;绘图与可视化&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;python提供了很多可以制作静
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重塑" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A1%91/"/>
    
      <category term="数据展现" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%B1%95%E7%8E%B0/"/>
    
      <category term="可视化操作" scheme="https://djwangweijie.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据规整之连接,联合与重塑</title>
    <link href="https://djwangweijie.github.io/2020/07/24/2020-07-23-%E6%95%B0%E6%8D%AE%E8%A7%84%E6%95%B4%E4%B9%8B%E8%BF%9E%E6%8E%A5%E8%81%94%E5%90%88%E9%87%8D%E5%A1%91/"/>
    <id>https://djwangweijie.github.io/2020/07/24/2020-07-23-数据规整之连接联合重塑/</id>
    <published>2020-07-24T15:26:36.000Z</published>
    <updated>2020-07-24T15:31:56.260Z</updated>
    
    <content type="html"><![CDATA[<p>这章可以在以后的数据分析案例中,慢慢的体会。但最终的目的就是为了组装自己想要的数据</p><h1 id="数据规整之连接-联合与重塑"><a href="#数据规整之连接-联合与重塑" class="headerlink" title="数据规整之连接,联合与重塑"></a>数据规整之连接,联合与重塑</h1><p><strong>首先数据可能分布在多个文件或者数据库中,或以某种不易于分析的格式进行排列。而现在我们要做的就是如何连接,联合与重塑</strong></p><h2 id="分层索引"><a href="#分层索引" class="headerlink" title="分层索引"></a>分层索引</h2><p><em>分层索引是pandas的重要特性,允许在一个轴向上拥有多个索引层级。分层索引提供了一种在更低维度的形式中处理更高维度数据的方式</em><br><img src="/images/resources/20200723/image-20200723215507558.png" alt="image-20200723215507558"></p><h3 id="筛选数据子集"><a href="#筛选数据子集" class="headerlink" title="筛选数据子集"></a>筛选数据子集</h3><p><img src="/images/resources/20200723/image-20200723220913394.png" alt="image-20200723220913394"></p><h4 id="DataFrame中分层索引"><a href="#DataFrame中分层索引" class="headerlink" title="DataFrame中分层索引"></a>DataFrame中分层索引</h4><p><img src="/images/resources/20200723/image-20200723221921025.png" alt="image-20200723221921025"></p><h3 id="重排序和层级排序"><a href="#重排序和层级排序" class="headerlink" title="重排序和层级排序"></a>重排序和层级排序</h3><p><strong>有时需要重新排列轴上的层级顺序，或者按照特定的层级对数据进行排序。使用swaplevel接收两个层级序号或者层级名称。返回一个层级变更的新对象，但是数据是不变的</strong><br><img src="/images/resources/20200723/image-20200723222834966.png" alt="image-20200723222834966"></p><h4 id="按层级进行汇总统计"><a href="#按层级进行汇总统计" class="headerlink" title="按层级进行汇总统计"></a>按层级进行汇总统计</h4><p><strong>DataFrame和Series有一个level选项。可以在某个特定的轴上面进行聚合</strong></p><p><img src="/images/resources/20200723/image-20200723223607440.png" alt="image-20200723223607440"></p><h3 id="使用DataFrame的列进行索引"><a href="#使用DataFrame的列进行索引" class="headerlink" title="使用DataFrame的列进行索引"></a>使用DataFrame的列进行索引</h3><p><img src="/images/resources/20200723/image-20200723224502583.png" alt="image-20200723224502583"></p><h2 id="联合与合并数据集"><a href="#联合与合并数据集" class="headerlink" title="联合与合并数据集"></a>联合与合并数据集</h2><ol><li>pandas.merge可以根据一个或者多个键进行连接。</li><li>pandas.concat是对象在轴向上进行黏合或堆叠</li><li>combine_first允许将重叠的数据拼接在一起。以使用一个对象中的值填充另一个对象中的缺失值</li></ol><h3 id="数据风格的连接"><a href="#数据风格的连接" class="headerlink" title="数据风格的连接"></a>数据风格的连接</h3><p><img src="/images/resources/20200723/image-20200723230135407.png" alt="image-20200723230135407"></p><h4 id="左右连接以及outer并集"><a href="#左右连接以及outer并集" class="headerlink" title="左右连接以及outer并集"></a>左右连接以及outer并集</h4><p><img src="/images/resources/20200723/image-20200723230934131.png" alt="image-20200723230934131"></p><blockquote><p>注意事项</p></blockquote><p><strong>多对多连接是行的笛卡尔积，使用多个键进行合并时传入一个列名的列表即可，在处理重叠的列名的时候可以使用suffixes进行重新命名</strong></p><h4 id="根据索引合并"><a href="#根据索引合并" class="headerlink" title="根据索引合并"></a>根据索引合并</h4><p><img src="/images/resources/20200723/image-20200723232316630.png" alt="image-20200723232316630"></p><h3 id="沿轴向连接"><a href="#沿轴向连接" class="headerlink" title="沿轴向连接"></a>沿轴向连接</h3><p>一个是通过Numpy的concatenate函数，也可以使用pandas的concat函数</p><p><img src="/images/resources/20200723/image-20200723234200939.png" alt="image-20200723234200939"></p><h3 id="联合重叠数据"><a href="#联合重叠数据" class="headerlink" title="联合重叠数据"></a>联合重叠数据</h3><p><strong>可以理解为填补Series或者DataFrame的缺失值,使用Combine_first</strong></p><p><img src="/images/resources/20200723/image-20200723234742072.png" alt="image-20200723234742072"></p><h2 id="重塑和透视"><a href="#重塑和透视" class="headerlink" title="重塑和透视"></a>重塑和透视</h2><p><strong>多层索引在DataFrame中提供一种一致性的方式用于重排列数据。</strong></p><ul><li>statck简单的说就是转为低维度多层级的Series(堆叠)  也可以叫做列中的数据透视到行</li><li>unstack简单的说就转为层级感强烈的DataFrame(拆堆) 也可以叫做行中的数据透视到列</li></ul><h3 id="长变宽"><a href="#长变宽" class="headerlink" title="长变宽"></a>长变宽</h3><p><img src="/images/resources/20200723/image-20200724225834544.png" alt="image-20200724225834544"></p><p><img src="/images/resources/20200723/image-20200724225904151.png" alt="image-20200724225904151"></p><p><img src="/images/resources/20200723/image-20200724230400324.png" alt="image-20200724230400324"></p><h3 id="宽变长"><a href="#宽变长" class="headerlink" title="宽变长"></a>宽变长</h3><p><strong>pivot方法的反操作是pandas.melt,需要注意的是，需要配置key哪些列是分组指标</strong><br><img src="/images/resources/20200723/image-20200724232356680.png" alt="image-20200724232356680"></p><p><img src="/images/resources/20200723/image-20200724232422708.png" alt="image-20200724232422708"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这章可以在以后的数据分析案例中,慢慢的体会。但最终的目的就是为了组装自己想要的数据&lt;/p&gt;
&lt;h1 id=&quot;数据规整之连接-联合与重塑&quot;&gt;&lt;a href=&quot;#数据规整之连接-联合与重塑&quot; class=&quot;headerlink&quot; title=&quot;数据规整之连接,联合与重塑&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重塑" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A1%91/"/>
    
      <category term="层级拆分" scheme="https://djwangweijie.github.io/tags/%E5%B1%82%E7%BA%A7%E6%8B%86%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之清洗与准备2</title>
    <link href="https://djwangweijie.github.io/2020/07/23/2020-07-22-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%B8%85%E6%B4%97%E4%B8%8E%E5%87%86%E5%A4%872/"/>
    <id>https://djwangweijie.github.io/2020/07/23/2020-07-22-数据分析之清洗与准备2/</id>
    <published>2020-07-22T16:07:00.000Z</published>
    <updated>2020-07-22T16:11:37.808Z</updated>
    
    <content type="html"><![CDATA[<p>继续刚.</p><h1 id="数据清洗与准备2"><a href="#数据清洗与准备2" class="headerlink" title="数据清洗与准备2"></a>数据清洗与准备2</h1><p><strong>python在字符串和文本操作上具有很大的便利性,字符串对象是大部分的文本操作简单化,对于复杂的模式匹配和文本操作。正则表达式是可能需要的。pandas允许将字符串和正则表达式应用到整个数据数组上。同时也能处理数据缺失带来的问题</strong></p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="字符串对象方法"><a href="#字符串对象方法" class="headerlink" title="字符串对象方法"></a>字符串对象方法</h3><p><img src="/images/resources/20200722/image-20200722224044234.png" alt="image-20200722224044234"></p><h3 id="查找和定位字符串"><a href="#查找和定位字符串" class="headerlink" title="查找和定位字符串"></a>查找和定位字符串</h3><p><img src="/images/resources/20200722/image-20200722224326066.png" alt="image-20200722224326066"></p><p><em>index和find方法的区别在于,使用index方法没有找到时会抛出一个异常</em></p><h3 id="计数和替换字符串"><a href="#计数和替换字符串" class="headerlink" title="计数和替换字符串"></a>计数和替换字符串</h3><p><img src="/images/resources/20200722/image-20200722224612390.png" alt="image-20200722224612390"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong>python中提供了re模块进行正则表达式的使用，一般单个表达式称作为regex</strong><br><em>re模块主要有三个主题:匹配，替代，拆分</em><br><img src="/images/resources/20200722/image-20200722225807394.png" alt="image-20200722225807394"></p><h3 id="match和search和findall"><a href="#match和search和findall" class="headerlink" title="match和search和findall"></a>match和search和findall</h3><p><img src="/images/resources/20200722/image-20200722231848760.png" alt="image-20200722231848760"></p><h3 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h3><p>​    假设将每个地址分为三个部分.可以使用括号模式包起来<br><img src="/images/resources/20200722/image-20200722233042459.png" alt="image-20200722233042459"></p><h2 id="pandas中向量化字符串函数"><a href="#pandas中向量化字符串函数" class="headerlink" title="pandas中向量化字符串函数"></a>pandas中向量化字符串函数</h2><p><img src="/images/resources/20200722/image-20200722234500724.png" alt="image-20200722234500724"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续刚.&lt;/p&gt;
&lt;h1 id=&quot;数据清洗与准备2&quot;&gt;&lt;a href=&quot;#数据清洗与准备2&quot; class=&quot;headerlink&quot; title=&quot;数据清洗与准备2&quot;&gt;&lt;/a&gt;数据清洗与准备2&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;python在字符串和文本操作上具有很大的便利性,字
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据清洗" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
</feed>
