<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>文殊_w</title>
  
  <subtitle>JavaAndKafka_Streams</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://djwwj.top/"/>
  <updated>2019-12-06T06:15:49.848Z</updated>
  <id>http://djwwj.top/</id>
  
  <author>
    <name>Michael</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开发Kafka_Streams(3-3)</title>
    <link href="http://djwwj.top/2019/12/06/2019-12-06-%E5%BC%80%E5%8F%91kafka_Stream(3-3)/"/>
    <id>http://djwwj.top/2019/12/06/2019-12-06-开发kafka_Stream(3-3)/</id>
    <published>2019-12-06T06:10:58.650Z</published>
    <updated>2019-12-06T06:15:49.848Z</updated>
    
    <content type="html"><![CDATA[<p>推送是必不可少的一个环节。做好推送,即将进入实时计算的体系中。</p><h1 id="springboot整合websocket推送数据消息"><a href="#springboot整合websocket推送数据消息" class="headerlink" title="springboot整合websocket推送数据消息"></a>springboot整合websocket推送数据消息</h1><ol><li>整合websocket</li><li>结合3-2进行消息的推送</li></ol><h2 id="springboot整合websocket"><a href="#springboot整合websocket" class="headerlink" title="springboot整合websocket"></a>springboot整合websocket</h2><blockquote><p>1.添加依赖文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>实例化websockt提供的对象</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebSocketConfig &#123;</span><br><span class="line">    @Bean  </span><br><span class="line">    public ServerEndpointExporter serverEndpointExporter() &#123;  </span><br><span class="line">        return new ServerEndpointExporter();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.构建服务端对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.websocket;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line">import javax.websocket.OnClose;</span><br><span class="line">import javax.websocket.OnError;</span><br><span class="line">import javax.websocket.OnMessage;</span><br><span class="line">import javax.websocket.OnOpen;</span><br><span class="line">import javax.websocket.Session;</span><br><span class="line">import javax.websocket.server.PathParam;</span><br><span class="line">import javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.wwj.consumer.action.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">@ServerEndpoint(&quot;/websocket/&#123;sid&#125;&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class WebSocketServer &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LogManager.getLogger(WebSocketServer.class);</span><br><span class="line">    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span><br><span class="line">    private static int onlineCount = 0;</span><br><span class="line">    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span><br><span class="line">    private static CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = new CopyOnWriteArraySet&lt;WebSocketServer&gt;();</span><br><span class="line"></span><br><span class="line">    //与某个客户端的连接会话，需要通过它来给客户端发送数据</span><br><span class="line">    private Session session;</span><br><span class="line"></span><br><span class="line">    //接收sid</span><br><span class="line">    private String sid=&quot;&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * 连接建立成功调用的方法*/</span><br><span class="line">    @OnOpen</span><br><span class="line">    public void onOpen(Session session,@PathParam(&quot;sid&quot;) String sid) &#123;</span><br><span class="line">        this.session = session;</span><br><span class="line">        webSocketSet.add(this);     //加入set中</span><br><span class="line">        addOnlineCount();           //在线数加1</span><br><span class="line">        LOG.info(&quot;有新窗口开始监听:&quot;+sid+&quot;,当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">        this.sid=sid;</span><br><span class="line">        try &#123;</span><br><span class="line">         sendMessage(&quot;连接成功&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.error(&quot;websocket IO异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接关闭调用的方法</span><br><span class="line">     */</span><br><span class="line">    @OnClose</span><br><span class="line">    public void onClose() &#123;</span><br><span class="line">        webSocketSet.remove(this);  //从set中删除</span><br><span class="line">        subOnlineCount();           //在线数减1</span><br><span class="line">        LOG.info(&quot;有一连接关闭！当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收到客户端消息后调用的方法</span><br><span class="line">     *</span><br><span class="line">     * @param message 客户端发送过来的消息*/</span><br><span class="line">    @OnMessage</span><br><span class="line">    public void onMessage(String message, Session session) &#123;</span><br><span class="line">    LOG.info(&quot;收到来自窗口&quot;+sid+&quot;的信息:&quot;+message);</span><br><span class="line">        //群发消息</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param session</span><br><span class="line"> * @param error</span><br><span class="line"> */</span><br><span class="line">    @OnError</span><br><span class="line">    public void onError(Session session, Throwable error) &#123;</span><br><span class="line">    LOG.error(&quot;发生错误&quot;);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">/**</span><br><span class="line"> * 实现服务器主动推送</span><br><span class="line"> */</span><br><span class="line">    public void sendMessage(String message) throws IOException &#123;</span><br><span class="line">        this.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 群发自定义消息</span><br><span class="line">     * */</span><br><span class="line">    public static void sendInfo(String message,@PathParam(&quot;sid&quot;) String sid) throws IOException &#123;</span><br><span class="line">    LOG.info(&quot;推送消息到窗口&quot;+sid+&quot;，推送内容:&quot;+message);</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">            //这里可以设定只推送给这个sid的，为null则全部推送</span><br><span class="line">            if(sid==null) &#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;else if(item.sid.equals(sid))&#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized int getOnlineCount() &#123;</span><br><span class="line">        return onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void addOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void subOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加入jsp支持,构建controlle,先跳转到需要建立连接的页面</p></blockquote><p>建立连接页面代码示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line"> var socket;  </span><br><span class="line">    if(typeof(WebSocket) == &quot;undefined&quot;) &#123;  </span><br><span class="line">        console.log(&quot;您的浏览器不支持WebSocket&quot;);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        console.log(&quot;您的浏览器支持WebSocket&quot;);  </span><br><span class="line">        //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  </span><br><span class="line">            //等同于socket = new WebSocket(&quot;ws://localhost:8083/checkcentersys/websocket/20&quot;);  </span><br><span class="line">            socket = new WebSocket(&quot;ws://localhost:10888/websocket/20&quot;);  </span><br><span class="line">            //打开事件  </span><br><span class="line">            socket.onopen = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket 已打开&quot;);  </span><br><span class="line">                //socket.send(&quot;这是来自客户端的消息&quot; + location.href + new Date());  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //获得消息事件  </span><br><span class="line">            socket.onmessage = function(msg) &#123;  </span><br><span class="line">                console.log(msg.data);  </span><br><span class="line">                //发现消息进入    开始处理前端触发逻辑</span><br><span class="line">            &#125;;  </span><br><span class="line">            //关闭事件  </span><br><span class="line">            socket.onclose = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket已关闭&quot;);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //发生了错误事件  </span><br><span class="line">            socket.onerror = function() &#123;  </span><br><span class="line">                alert(&quot;Socket发生了错误&quot;);  </span><br><span class="line">                //此时可以尝试刷新页面</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">我是首页</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong><em>测试通过</em></strong></p><h2 id="结合3-2进行消息的推送"><a href="#结合3-2进行消息的推送" class="headerlink" title="结合3-2进行消息的推送"></a>结合3-2进行消息的推送</h2><ol><li>写一个api进行消息推送</li><li>实验kafka接收到消息后进行推送</li></ol><h3 id="写一个restController"><a href="#写一个restController" class="headerlink" title="写一个restController"></a>写一个restController</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class PushController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/socket/push/&#123;cid&#125;&quot;)</span><br><span class="line">public void pushToWeb(@PathVariable String cid,String message) &#123;  </span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(message,cid);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>*如图所示,统一接收到推送消息</strong></p><p><img src="/images/resources/E347103244A1C7F9FA0B07FB4F6ED096.jpg" alt="IMAGE"></p><h3 id="消费者接收到消息后-调用发送消息"><a href="#消费者接收到消息后-调用发送消息" class="headerlink" title="消费者接收到消息后,调用发送消息"></a>消费者接收到消息后,调用发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(record.value.toString(),&quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/4A43B37A99094065B179770AF9CA753D.jpg" alt="IMAGE"></p><p><strong><em>代码均已测试</em></strong></p><p><strong><em>单机单例未见zookeeper和kafka出现异常</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推送是必不可少的一个环节。做好推送,即将进入实时计算的体系中。&lt;/p&gt;
&lt;h1 id=&quot;springboot整合websocket推送数据消息&quot;&gt;&lt;a href=&quot;#springboot整合websocket推送数据消息&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="http://djwwj.top/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="http://djwwj.top/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="http://djwwj.top/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="http://djwwj.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="http://djwwj.top/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="webscoket推送" scheme="http://djwwj.top/tags/webscoket%E6%8E%A8%E9%80%81/"/>
    
      <category term="群发消息" scheme="http://djwwj.top/tags/%E7%BE%A4%E5%8F%91%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-2)</title>
    <link href="http://djwwj.top/2019/12/05/2019-12-05-%E5%BC%80%E5%8F%91kafka_Stream(3-2)/"/>
    <id>http://djwwj.top/2019/12/05/2019-12-05-开发kafka_Stream(3-2)/</id>
    <published>2019-12-05T07:32:25.674Z</published>
    <updated>2019-12-05T07:36:04.667Z</updated>
    
    <content type="html"><![CDATA[<p>第一步必不可少,理解熟练是必要!</p><h1 id="springboot整合kafka发送自定义消息序列"><a href="#springboot整合kafka发送自定义消息序列" class="headerlink" title="springboot整合kafka发送自定义消息序列"></a>springboot整合kafka发送自定义消息序列</h1><ol><li>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</li><li>构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者</li><li>使用spring提供的kafka对象编写生产者和消费者代码</li><li>模拟数据测试代码</li><li>操作步骤</li></ol><h2 id="结合分层构建的springboot项目-分别构建生产者模块和消费者模块"><a href="#结合分层构建的springboot项目-分别构建生产者模块和消费者模块" class="headerlink" title="结合分层构建的springboot项目,分别构建生产者模块和消费者模块"></a>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</h2><p>图示:如下</p><p><img src="/images/resources/5586430F8F32CD2B4B00D8E66D023F95.jpg" alt="IMAGE"></p><p>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</p><blockquote><p>父类引入新的依赖文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--kafka依赖配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--fastjson依赖配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2.4&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 在2个模块中构建启动文件以及设置不同的端口和log4j2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//在pom.xml中指定启动文件</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.producer.WebApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><p>启动文件示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &quot;com.wwj&quot;)</span><br><span class="line">public class WebApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(WebApplication.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意:appliacation.yml文件和log4j2文件请参照前面3-1中配置按需所取</em></strong></p><h2 id="构建自定的数据模型-使用jsonObject进行数据的转换-并配置kafka生产者和消费者"><a href="#构建自定的数据模型-使用jsonObject进行数据的转换-并配置kafka生产者和消费者" class="headerlink" title="构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者"></a>构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者</h2><p><strong><em>前面提到过,kafka在发送消息的时候需要进行序列化操作,把对象转换字节的,在接收消息的时候需要将字节反序列化成对象,除此之外在kafka中需要按照2个接口进行序列化对象的实现</em></strong></p><blockquote><p>在pojo模块中构建序列化器以及数据模型</p></blockquote><p>1.模型类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">private String  studentName;</span><br><span class="line">private String  studentAge;</span><br><span class="line">private String  studentClassNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class JsonSerializer   implements  Serializer&lt;JSONObject&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, JSONObject data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return JSON.toJSONBytes(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class JsonDeserializer  implements  Deserializer&lt;JSONObject&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public JSONObject deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return JSON.parseObject(data, JSONObject.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置生产者和消费者并引入模型和序列化器(基本配置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#生产者</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">    producer:</span><br><span class="line">      key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">      value-serializer: com.wwj.util.JsonSerializer</span><br><span class="line">      batch-size: 65536</span><br><span class="line">      buffer-memory: 524288</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#消费者</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: 0</span><br><span class="line">      enable-auto-commit: true</span><br><span class="line">      auto-commit-interval: 1000</span><br><span class="line">      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">      value-deserializer: com.wwj.util.JsonDeserializer</span><br></pre></td></tr></table></figure><h2 id="使用spring提供的kafka对象编写生产者和消费者代码"><a href="#使用spring提供的kafka对象编写生产者和消费者代码" class="headerlink" title="使用spring提供的kafka对象编写生产者和消费者代码"></a>使用spring提供的kafka对象编写生产者和消费者代码</h2><blockquote><p>生产者代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KfkaProducer &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KfkaProducer.class);</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  KafkaTemplate&lt;String,JSONObject&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">public void sendMsg(String topic,JSONObject msg) &#123;</span><br><span class="line">ListenableFuture&lt;SendResult&lt;String, JSONObject&gt;&gt; future = kafkaTemplate.send(topic, msg);</span><br><span class="line">future.addCallback(new  SuccessCallback&lt;Object&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onSuccess(Object result) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">LOG.info(&quot;消息发送成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,new FailureCallback() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onFailure(Throwable ex) &#123;</span><br><span class="line">LOG.info(&quot;消息发送失败&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KafkaConsumer &#123;</span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KafkaConsumer.class);</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟数据测试代码"><a href="#模拟数据测试代码" class="headerlink" title="模拟数据测试代码"></a>模拟数据测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class MockController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private  KfkaProducer  producer;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;mock&quot;)</span><br><span class="line">public void sendMock() &#123;</span><br><span class="line">Student  student =  new Student();</span><br><span class="line">student.setStudentName(&quot;小王&quot;);</span><br><span class="line">student.setStudentClassNo(&quot;001&quot;);</span><br><span class="line">student.setStudentAge(&quot;32&quot;);</span><br><span class="line">producer.sendMsg(&quot;studentMsg&quot;,(JSONObject)JSONObject.toJSON(student));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>启动zookeeper</li><li>启动kafka</li><li>创建主题(studentMsg)</li><li>启动消费者</li><li>启动生产者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topic = studentMsg, offset = 0, value = &#123;&quot;studentAge&quot;:&quot;32&quot;,&quot;studentClassNo&quot;:&quot;001&quot;,&quot;studentName&quot;:&quot;小王&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/715327AF7804A32EC11127418DCD4CE5.jpg" alt="IMAGE"></p><p>Ok!代码通过测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一步必不可少,理解熟练是必要!&lt;/p&gt;
&lt;h1 id=&quot;springboot整合kafka发送自定义消息序列&quot;&gt;&lt;a href=&quot;#springboot整合kafka发送自定义消息序列&quot; class=&quot;headerlink&quot; title=&quot;springboot整合kafk
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="http://djwwj.top/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="http://djwwj.top/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="http://djwwj.top/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="http://djwwj.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="http://djwwj.top/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="自定义数据序列化传输" scheme="http://djwwj.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96%E4%BC%A0%E8%BE%93/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-1)</title>
    <link href="http://djwwj.top/2019/12/04/2019-12-04-%E5%BC%80%E5%8F%91Kafka_Stream(3-1)/"/>
    <id>http://djwwj.top/2019/12/04/2019-12-04-开发Kafka_Stream(3-1)/</id>
    <published>2019-12-04T07:39:30.057Z</published>
    <updated>2019-12-04T09:40:49.539Z</updated>
    
    <content type="html"><![CDATA[<p>前期先利用springboot整合热身,不是什么坏事情。</p><h1 id="kafkaStream流式计算版本实现1-0"><a href="#kafkaStream流式计算版本实现1-0" class="headerlink" title="kafkaStream流式计算版本实现1.0"></a>kafkaStream流式计算版本实现1.0</h1><ol><li>springboot分模块整合(3-1)</li><li>springboot整合kafka发送自定义消息序列(3-2)</li><li>springboot整合websocket推送数据消息(3-3)</li><li>springboot结合kafkaStream流推送消息Echart图形展示(3-4)</li></ol><h2 id="springboot分模块整合"><a href="#springboot分模块整合" class="headerlink" title="springboot分模块整合"></a>springboot分模块整合</h2><ol><li>先更新下eclipse</li><li>可在<a href="https://spring.io/tools3/sts/all" target="_blank" rel="noopener">springboot插件下载</a>进行对应版本的eclipse下载</li><li>构建springboot项目</li></ol><p>目录结构如下:</p><p><img src="/images/resources/64012647E02BB4C9E8FDB144CEA89EC6.jpg" alt="IMAGE"></p><h3 id="搭建springboot并整合"><a href="#搭建springboot并整合" class="headerlink" title="搭建springboot并整合"></a>搭建springboot并整合</h3><p><strong>注意事项:</strong></p><ol><li>勾选需要的技术内容(mysql+web+mybatis)</li><li>分层结构</li><li>采用yml方式进行配置可能需要安装yml插件</li></ol><blockquote><p> 使用easyui</p></blockquote><p><strong><em>注意事项:</em></strong></p><ol><li>配置jsp支持</li><li>添加静态资源文件</li><li>引入对应的所需文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置支持jsp页面 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">          &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/37ED589AE4C2730AC283B47FF490B744.jpg" alt="IMAGE"></p><p><img src="/images/resources/58FCDE7336F2DBD1552C5B387A76973B.jpg" alt="IMAGE"></p><p>直接引入static下的文件如下<code>&lt;script type=&quot;text/javascript&quot; src=&quot;/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><blockquote><p> 使用druid数据源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- druid数据池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>yml展示请参照全文展示</em></strong></p><p><code>通过访问ip+端口/druid——即可进入druid控制台</code></p><blockquote><p> 使用分页插件和mybatis</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>yml展示请参照全文展示</em></strong></p><blockquote><p> 使用log4j2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>简单的lo4j2.xml配置文件如下</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- 文件输出格式 --&gt;</span><br><span class="line">        &lt;property name=&quot;PATTERN&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; |-%-5level [%thread] %c [%L] -| %msg%n&lt;/property&gt;</span><br><span class="line">        &lt;Property name=&quot;instance&quot;&gt;spring-boot-log4j2-log&lt;/Property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;CONSOLE&quot; target=&quot;system_out&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;$&#123;PATTERN&#125;&quot;/&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;!-- root logger 配置 --&gt;</span><br><span class="line">        &lt;root level=&quot;info&quot;&gt;</span><br><span class="line">            &lt;appenderref ref=&quot;CONSOLE&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/loggers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 使用swagger2文档生成</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>通过设置初始化信息</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.wwj.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @Description: 构建 api文档的信息</span><br><span class="line">     */</span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                // 设置页面标题</span><br><span class="line">                .title(&quot;使用swagger2构建api接口文档&quot;)</span><br><span class="line">                // 描述</span><br><span class="line">                .description(&quot;欢迎访问接口文档，这里是描述信息&quot;)</span><br><span class="line">                // 定义版本号</span><br><span class="line">                .version(&quot;1.0&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心控制文件展示"><a href="#核心控制文件展示" class="headerlink" title="核心控制文件展示"></a>核心控制文件展示</h2><blockquote><p>根节点pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;KafkaFather&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;KafkaFather&lt;/name&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;description&gt;kafkaDemo2&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- log4j. --&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- druid数据池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 设置支持jsp页面 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- swagger2 配置 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;service&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pojo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module&gt;pojo&lt;/module&gt;</span><br><span class="line">&lt;module&gt;mapper&lt;/module&gt;</span><br><span class="line">&lt;module&gt;service&lt;/module&gt;</span><br><span class="line">&lt;module&gt;web&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>web节点pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;KafkaFather&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line">  &lt;artifactId&gt;web&lt;/artifactId&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;service&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.web.WebApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其余节点之间相互依赖管理</p></blockquote><blockquote><p>关键文件（启动文件以及application.yml文件）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &quot;com.wwj&quot;)</span><br><span class="line">@MapperScan(basePackages = &quot;com.wwj.mapper&quot;)</span><br><span class="line">public class WebApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(WebApplication.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#端口号</span><br><span class="line">server:</span><br><span class="line">  port: 10086</span><br><span class="line">#配置druid数据源</span><br><span class="line">spring:</span><br><span class="line">  mvc:  </span><br><span class="line">        view:  </span><br><span class="line">            prefix: /WEB-INF/views/  </span><br><span class="line">            suffix: .jsp</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/crmpro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    druid:</span><br><span class="line">      #初始化大小</span><br><span class="line">      initialSize: 5</span><br><span class="line">      #最小值</span><br><span class="line">      minIdle: 5</span><br><span class="line">      #最大值</span><br><span class="line">      maxActive: 20</span><br><span class="line">      #最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms</span><br><span class="line">      maxWait: 60000</span><br><span class="line">      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span><br><span class="line">      timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">      #配置一个连接在池中最小生存的时间</span><br><span class="line">      minEvictableIdleTimeMillis: 300000</span><br><span class="line">      validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">      testWhileIdle: true</span><br><span class="line">      testOnBorrow: false</span><br><span class="line">      testOnReturn: false</span><br><span class="line">      poolPreparedStatements: true</span><br><span class="line">      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，</span><br><span class="line">      #&apos;wall&apos;用于防火墙，SpringBoot中没有log4j，我改成了log4j2</span><br><span class="line">      filters: stat,wall,log4j2</span><br><span class="line">      #最大PSCache连接</span><br><span class="line">      maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">      useGlobalDataSourceStat: true</span><br><span class="line">      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line">      # 配置StatFilter</span><br><span class="line">      web-stat-filter:</span><br><span class="line">        #默认为false，设置为true启动</span><br><span class="line">        enabled: true</span><br><span class="line">        url-pattern: &quot;/*&quot;</span><br><span class="line">        exclusions: &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br><span class="line">      #配置StatViewServlet</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        url-pattern: &quot;/druid/*&quot;</span><br><span class="line">        #允许那些ip</span><br><span class="line">        allow: 127.0.0.1</span><br><span class="line">        login-username: admin</span><br><span class="line">        login-password: 123456</span><br><span class="line">        #禁止那些ip</span><br><span class="line">        deny: 192.168.1.102</span><br><span class="line">        #是否可以重置</span><br><span class="line">        reset-enable: true</span><br><span class="line">        #启用</span><br><span class="line">        enabled: true</span><br><span class="line">#设置mybatis</span><br><span class="line">mybatis:</span><br><span class="line">  #mapper.xml所在位置</span><br><span class="line">  mapper-locations: classpath*:Mapper/*.xml</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">#设置pagehelper</span><br><span class="line">pagehelper:</span><br><span class="line">    helperDialect: mysql</span><br><span class="line">    reasonable: true</span><br><span class="line">    supportMethodsArguments: true</span><br><span class="line">    params: count=countSql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前期先利用springboot整合热身,不是什么坏事情。&lt;/p&gt;
&lt;h1 id=&quot;kafkaStream流式计算版本实现1-0&quot;&gt;&lt;a href=&quot;#kafkaStream流式计算版本实现1-0&quot; class=&quot;headerlink&quot; title=&quot;kafkaStream流
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="http://djwwj.top/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="http://djwwj.top/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="http://djwwj.top/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="http://djwwj.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="http://djwwj.top/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="springboot分模块整合" scheme="http://djwwj.top/tags/springboot%E5%88%86%E6%A8%A1%E5%9D%97%E6%95%B4%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams2</title>
    <link href="http://djwwj.top/2019/12/02/2019-12-02-%E5%BC%80%E5%8F%91kafka_Streams2/"/>
    <id>http://djwwj.top/2019/12/02/2019-12-02-开发kafka_Streams2/</id>
    <published>2019-12-02T09:55:55.315Z</published>
    <updated>2019-12-02T09:58:40.618Z</updated>
    
    <content type="html"><![CDATA[<p>熟知kafka提供的高级算子,以及熟练使用我们常用的算子是不可或缺的操作。</p><h1 id="模拟数据进行流拓扑的设计"><a href="#模拟数据进行流拓扑的设计" class="headerlink" title="模拟数据进行流拓扑的设计"></a>模拟数据进行流拓扑的设计</h1><ol><li>根据一个模拟的购物数据进行流的设计</li><li>设计规则以及如何将流切分为多个流(再分流)</li></ol><h2 id="根据一个模拟的购物数据进行流的设计"><a href="#根据一个模拟的购物数据进行流的设计" class="headerlink" title="根据一个模拟的购物数据进行流的设计"></a>根据一个模拟的购物数据进行流的设计</h2><p><img src="/images/resources/DD971F533A1FB5464156F24B5713DC14.jpg" alt="IMAGE"></p><ol><li>通过屏蔽处理器处理屏蔽卡号问题</li><li>提取购买的物品以及邮编,确定购买模式</li><li>获取会员号,以及金额.根据金额确定奖励</li><li>获取所有完成的数据,以备后续进行特定的分析</li></ol><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><blockquote><p>1.模拟数据对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseRecord &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户姓名</span><br><span class="line">     */</span><br><span class="line">private String firstName;</span><br><span class="line">private String lastName;</span><br><span class="line">//用户信用卡编号</span><br><span class="line">private String creditCardNumber;</span><br><span class="line">//用户购买物品</span><br><span class="line">    private String itemPurchased;</span><br><span class="line">    //购物物品数量</span><br><span class="line">    private int  quantity;</span><br><span class="line">    //物品单价</span><br><span class="line">    private double price;</span><br><span class="line">    //购买日期</span><br><span class="line">    private  Date  purchaseDate;</span><br><span class="line">    //用户会员卡编号</span><br><span class="line">    private  String zipCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">PurchaseRecord  record = new PurchaseRecord();</span><br><span class="line">record.setFirstName(&quot;王&quot;);</span><br><span class="line">record.setLastName(&quot;伟杰&quot;);</span><br><span class="line">record.setCreditCardNumber(&quot;1000-5000-1987-0215&quot;);</span><br><span class="line">record.setItemPurchased(&quot;福特钥匙扣&quot;);</span><br><span class="line">record.setQuantity(1);</span><br><span class="line">record.setPrice(28.00);</span><br><span class="line">record.setPurchaseDate(new Date());</span><br><span class="line">record.setZipCode(&quot;100187&quot;);</span><br><span class="line">Gson  g = new Gson();</span><br><span class="line">System.out.println(g.toJson(record));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>数据模拟效果如下:</em></strong><code>{&quot;firstName&quot;:&quot;王&quot;,&quot;lastName&quot;:&quot;伟杰&quot;,&quot;creditCardNumber&quot;:&quot;1000-5000-1987-0215&quot;,&quot;itemPurchased&quot;:&quot;福特钥匙扣&quot;,&quot;quantity&quot;:1,&quot;price&quot;:28.0,&quot;purchaseDate&quot;:&quot;Nov 19, 2019 4:55:58 PM&quot;,&quot;zipCode&quot;:&quot;100187&quot;}</code></p><blockquote><p> 2.构建通用的序列化器</p></blockquote><p><strong>说明:kafka以字节的方式传输数据,在传输数据的时候需要将对象转换为json,发送到对应的主题时候,需要转换成字节的数组,其次在消费的时候需要将主题中的字节数组转换成json,其次在转为对应的对象类型.当然上一节已经提到过.Kafka默认对一些类型进行了支持,比如String,Long,Integer等</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通用的序列化操作</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public class JsonSerializer&lt;T&gt;  implements  Serializer&lt;T&gt;&#123;</span><br><span class="line">private  Gson  g = new Gson();</span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, T data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return g.toJson(data).getBytes(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通用的反序列化操作</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public class JsonDeserializer&lt;T&gt; implements Deserializer&lt;T&gt; &#123;</span><br><span class="line">private  Gson  g = new Gson();</span><br><span class="line">private  Class&lt;T&gt;  deserializedClass;</span><br><span class="line">public JsonDeserializer(Class&lt;T&gt; deserializedClass) &#123;</span><br><span class="line">super();</span><br><span class="line">this.deserializedClass = deserializedClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public T deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return g.fromJson(new String(data), deserializedClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 3.编写对应的规则</p></blockquote><p>1.处理信用卡的规则</p><p>2.提取购买的物品,以及邮编(购买模式的规则)</p><p>3.提取会员号以及话费的金额(奖励机制的规则)</p><p><strong><em>构建一个工具类,以及规则所产出的对应的实体</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class PurchasePattern &#123;</span><br><span class="line">    private String zipCode;</span><br><span class="line">    private String item;</span><br><span class="line">    private Date date;</span><br><span class="line">    private double amount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line">  private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>工具类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class ActionUtil &#123;</span><br><span class="line">private  final  static  String MARK  = &quot;xxxx-xxxx-xxxx&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 屏蔽信用卡号</span><br><span class="line"> * @param pr  需要被屏蔽的信息记录</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static  PurchaseRecord  mask(PurchaseRecord  pr)&#123;</span><br><span class="line">String[] parts = pr.getCreditCardNumber().split(&quot;-&quot;);</span><br><span class="line">pr.setCreditCardNumber(MARK+&quot;-&quot;+parts[3]);</span><br><span class="line">return pr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 提取部分数据</span><br><span class="line"> * @param pr  需要提取的记录信息</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static  PurchasePattern  getSomeOne(PurchaseRecord  pr)&#123;</span><br><span class="line">PurchasePattern  pp = new PurchasePattern();</span><br><span class="line">pp.setZipCode(pr.getZipCode());</span><br><span class="line">pp.setDate(pr.getPurchaseDate());</span><br><span class="line">pp.setItem(pr.getItemPurchased());</span><br><span class="line">pp.setAmount(pr.getPrice()*pr.getQuantity());</span><br><span class="line">return pp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static  RewardAccumulator  getReward(PurchaseRecord  pr)&#123;</span><br><span class="line">RewardAccumulator  ra = new RewardAccumulator();</span><br><span class="line">ra.setCustomerId(pr.getFirstName()+pr.getLastName());</span><br><span class="line">ra.setPurchaseTotal(pr.getPrice()*pr.getQuantity());</span><br><span class="line">return ra;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>测试结果数据如下:</em></strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &#123;&quot;firstName&quot;:&quot;王&quot;,&quot;lastName&quot;:&quot;伟杰&quot;,&quot;creditCardNumber&quot;:&quot;xxxx-xxxx-xxxx-0215&quot;,&quot;itemPurchased&quot;:&quot;福特钥匙扣&quot;,&quot;quantity&quot;:1,&quot;price&quot;:28.0,&quot;purchaseDate&quot;:&quot;Nov 20, 2019 5:07:13 PM&quot;,&quot;zipCode&quot;:&quot;100187&quot;&#125;</span><br><span class="line">&#123;&quot;zipCode&quot;:&quot;100187&quot;,&quot;item&quot;:&quot;福特钥匙扣&quot;,&quot;date&quot;:&quot;Nov 20, 2019 5:07:13 PM&quot;,&quot;amount&quot;:28.0&#125;</span><br><span class="line">&#123;&quot;customerId&quot;:&quot;王伟杰&quot;,&quot;purchaseTotal&quot;:28.0&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>根据拓扑创建一个流式应用程式</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">public class FirstStream &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(FirstStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;FirstZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">JsonSerializer&lt;PurchasePattern&gt; pps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchasePattern&gt; ppds = new JsonDeserializer&lt;&gt;(PurchasePattern.class);</span><br><span class="line">JsonSerializer&lt;RewardAccumulator&gt; rs = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;RewardAccumulator&gt; rds = new JsonDeserializer&lt;&gt;(RewardAccumulator.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">Serde&lt;PurchasePattern&gt; PurchasePatternSerde = Serdes.serdeFrom(pps, ppds);</span><br><span class="line">Serde&lt;RewardAccumulator&gt; RewardAccumulatorSerde = Serdes.serdeFrom(rs, rds);</span><br><span class="line"></span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line">/**</span><br><span class="line"> * 因为机器缘由，我们可以通过打印来替代 这一步等于处理完数据后发送给对应的主题,后续配置消费者消费即可</span><br><span class="line"> * PurchaseRecordStream.to(&quot;Purchase&quot;, Produced.with(stringSerde,</span><br><span class="line"> * PurchaseRecordSerde));</span><br><span class="line"> */</span><br><span class="line">PurchaseRecordStream.print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;PurchaseRecord&quot;));</span><br><span class="line"></span><br><span class="line">// 同理如下</span><br><span class="line">KStream&lt;String, PurchasePattern&gt; PurchasePatternStream = PurchaseRecordStream</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.getSomeOne(pr));</span><br><span class="line">PurchasePatternStream.print(Printed.&lt;String, PurchasePattern&gt;toSysOut().withLabel(&quot;PurchasePattern&quot;));</span><br><span class="line"></span><br><span class="line">KStream&lt;String, RewardAccumulator&gt; RewardAccumulatorStream = PurchaseRecordStream</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.getReward(pr));</span><br><span class="line">RewardAccumulatorStream.print(Printed.&lt;String, RewardAccumulator&gt;toSysOut().withLabel(&quot;RewardAccumulator&quot;));</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.配置生产者以及模拟数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">PurchaseRecord  record = new PurchaseRecord();</span><br><span class="line">record.setFirstName(&quot;王&quot;);</span><br><span class="line">record.setLastName(&quot;伟杰&quot;);</span><br><span class="line">record.setCreditCardNumber(&quot;1000-5000-1987-0215&quot;);</span><br><span class="line">record.setItemPurchased(&quot;福特钥匙扣&quot;);</span><br><span class="line">record.setQuantity(1);</span><br><span class="line">record.setPrice(28.00);</span><br><span class="line">record.setPurchaseDate(new Date());</span><br><span class="line">record.setZipCode(&quot;100187&quot;);</span><br><span class="line"></span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, PurchaseRecord&gt; kp =  new KafkaProducer&lt;String,PurchaseRecord&gt;(properties,new StringSerializer(),new JsonSerializer&lt;PurchaseRecord&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, PurchaseRecord&gt;(&quot;transactions&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>6.测试</p></blockquote><ol><li>启动zookeeper和kafka</li><li>创建一个transactions的主题</li><li>启动流程序</li><li>生产者发送消息</li></ol><blockquote><p>7.结果如下，对象要重写toString方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[PurchaseRecord]: null, PurchaseRecord [firstName=徐, lastName=小二, creditCardNumber=xxxx-xxxx-xxxx-0213, itemPurchased=福特钥匙扣, quantity=1, price=28.0, purchaseDate=Wed Nov 20 18:18:35 CST 2019, zipCode=100187]</span><br><span class="line">[PurchasePattern]: null, PurchasePattern [zipCode=100187, item=福特钥匙扣, date=Wed Nov 20 18:18:35 CST 2019, amount=28.0]</span><br><span class="line">[RewardAccumulator]: null, RewardAccumulator [customerId=徐小二, purchaseTotal=28.0]</span><br></pre></td></tr></table></figure><h2 id="如何将流切分为多个流-再分流"><a href="#如何将流切分为多个流-再分流" class="headerlink" title="如何将流切分为多个流(再分流)"></a>如何将流切分为多个流(再分流)</h2><p><strong><em>截止到现在,数据流的分配已经实现。接下我们需要细化一些规则</em></strong></p><ol><li>一定金额下面的信息我们需要进行过滤，小额交易可能对我们起不到任何帮助</li><li>在进入拓扑,默认没有对应的key值进行分类,这是需要我们为数据生成一个key值,以便做好新的归类</li><li>可能有一些的新的信息，接下来我们需要进行对应的分流到新的主题中</li><li>把一些需要的记录写入kafka之外</li></ol><blockquote><p>1.为模型添加一个Department字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//用户购买物品的种类</span><br><span class="line">    private String departMent;</span><br></pre></td></tr></table></figure><blockquote><p>2.过滤小额交易物品以及选择时间作为key值已方便归类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class SecondStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(SecondStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;FirstZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 过滤小额操作以及选择特定的字段作为key</span><br><span class="line">    */</span><br><span class="line">//声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">KeyValueMapper&lt;String, PurchaseRecord, Long&gt;  PurchaseRecordAsDateKey = </span><br><span class="line">(key,PurchaseRecord) -&gt; PurchaseRecord.getPurchaseDate().getTime();</span><br><span class="line">//过滤小额交易的操作进入对应的流并选择特定的条件作为key值  使用filter可以进行条件进行过滤</span><br><span class="line">KStream&lt;Long,PurchaseRecord&gt;  filteredKStream = </span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt; purchaseRecord.getPrice()&gt;5.00)</span><br><span class="line">.selectKey(PurchaseRecordAsDateKey);</span><br><span class="line">filteredKStream.print(Printed.&lt;Long, PurchaseRecord&gt;toSysOut().withLabel(&quot;purchases&quot;));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分流</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 分流的操作  分流可以根据数据特定的条件进行分流 需要使用到特定的谓词条件 Predicate</span><br><span class="line"> */</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//返回分流的数组</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[] kstreamByDepart = </span><br><span class="line">PurchaseRecordStream.branch(isOne,isTwo);</span><br><span class="line">kstreamByDepart[0].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;钥匙类&quot;));</span><br><span class="line">kstreamByDepart[1].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;小五金&quot;));</span><br></pre></td></tr></table></figure><blockquote><p> 使用foreach操作将记录写入kafka之外</p></blockquote><p><strong><em>假定会员编码为xxxx-xxxx-xxxx-0000为恶意会员码</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//会员编码为恶意编码</span><br><span class="line">ForeachAction&lt;String, PurchaseRecord&gt; purchaseRecordForeachAction =</span><br><span class="line">(key,purchaseRecord) -&gt; System.out.println(&quot;做额外的操作&quot;);</span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt;purchaseRecord.getZipCode().equals(&quot;xxxx-xxxx-xxxx-0000&quot;) )</span><br><span class="line">.foreach(purchaseRecordForeachAction);</span><br></pre></td></tr></table></figure><blockquote><p> 测试代码是否通过</p></blockquote><ol><li>启动zookeeper和kafka</li><li>启动流程序</li><li>生产者输送信息到transactions的主题</li></ol><blockquote><p>测试结果如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[purchases]: 1575279440000, PurchaseRecord [firstName=徐, lastName=小四, creditCardNumber=xxxx-xxxx-xxxx-0001, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:37:20 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小四, creditCardNumber=xxxx-xxxx-xxxx-0001, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:37:20 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575279951000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:45:51 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:45:51 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280227000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:50:27 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:50:27 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280293000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:51:33 CST 2019, zipCode=000000]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:51:33 CST 2019, zipCode=000000]</span><br><span class="line">做额外的操作</span><br><span class="line">[purchases]: 1575280333000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=汤勺, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:13 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=汤勺, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:13 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280351000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:31 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:31 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=5.0, purchaseDate=Mon Dec 02 17:52:42 CST 2019, zipCode=100187]</span><br></pre></td></tr></table></figure><blockquote><p>完整代码示例如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.streams;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.common.serialization.Serde;</span><br><span class="line">import org.apache.kafka.common.serialization.Serdes;</span><br><span class="line">import org.apache.kafka.streams.Consumed;</span><br><span class="line">import org.apache.kafka.streams.KafkaStreams;</span><br><span class="line">import org.apache.kafka.streams.StreamsBuilder;</span><br><span class="line">import org.apache.kafka.streams.StreamsConfig;</span><br><span class="line">import org.apache.kafka.streams.kstream.ForeachAction;</span><br><span class="line">import org.apache.kafka.streams.kstream.KStream;</span><br><span class="line">import org.apache.kafka.streams.kstream.KeyValueMapper;</span><br><span class="line">import org.apache.kafka.streams.kstream.Predicate;</span><br><span class="line">import org.apache.kafka.streams.kstream.Printed;</span><br><span class="line">import org.apache.kafka.streams.processor.WallclockTimestampExtractor;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import com.wwj.model.PurchaseRecord;</span><br><span class="line">import com.wwj.serde.JsonDeserializer;</span><br><span class="line">import com.wwj.serde.JsonSerializer;</span><br><span class="line">import com.wwj.util.ActionUtil;</span><br><span class="line"></span><br><span class="line">public class SecondStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(SecondStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 过滤小额操作以及选择特定的字段作为key</span><br><span class="line">    */</span><br><span class="line">//声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">KeyValueMapper&lt;String, PurchaseRecord, Long&gt;  PurchaseRecordAsDateKey = </span><br><span class="line">(key,PurchaseRecord) -&gt; PurchaseRecord.getPurchaseDate().getTime();</span><br><span class="line">//过滤小额交易的操作进入对应的流并选择特定的条件作为key值  使用filter可以进行条件进行过滤</span><br><span class="line">KStream&lt;Long,PurchaseRecord&gt;  filteredKStream = </span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt; purchaseRecord.getPrice()&gt;5.00)</span><br><span class="line">.selectKey(PurchaseRecordAsDateKey);</span><br><span class="line">filteredKStream.print(Printed.&lt;Long, PurchaseRecord&gt;toSysOut().withLabel(&quot;purchases&quot;));</span><br><span class="line">/**</span><br><span class="line"> * 分流的操作  分流可以根据数据特定的条件进行分流 需要使用到特定的谓词条件 Predicate</span><br><span class="line"> */</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//返回分流的数组</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[] kstreamByDepart = </span><br><span class="line">PurchaseRecordStream.branch(isOne,isTwo);</span><br><span class="line">kstreamByDepart[0].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;钥匙类&quot;));</span><br><span class="line">kstreamByDepart[1].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;小五金&quot;));</span><br><span class="line">//会员编码为恶意编码</span><br><span class="line">ForeachAction&lt;String, PurchaseRecord&gt; purchaseRecordForeachAction =</span><br><span class="line">(key,purchaseRecord) -&gt; System.out.println(&quot;做额外的操作&quot;);</span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt;purchaseRecord.getZipCode().equals(&quot;xxxx-xxxx-xxxx-0000&quot;) )</span><br><span class="line">.foreach(purchaseRecordForeachAction);</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熟知kafka提供的高级算子,以及熟练使用我们常用的算子是不可或缺的操作。&lt;/p&gt;
&lt;h1 id=&quot;模拟数据进行流拓扑的设计&quot;&gt;&lt;a href=&quot;#模拟数据进行流拓扑的设计&quot; class=&quot;headerlink&quot; title=&quot;模拟数据进行流拓扑的设计&quot;&gt;&lt;/a&gt;模拟数据进
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="http://djwwj.top/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="http://djwwj.top/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="http://djwwj.top/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="http://djwwj.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="http://djwwj.top/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="自定义序列器" scheme="http://djwwj.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%99%A8/"/>
    
      <category term="必要的算子" scheme="http://djwwj.top/tags/%E5%BF%85%E8%A6%81%E7%9A%84%E7%AE%97%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams1</title>
    <link href="http://djwwj.top/2019/11/14/2019-11-14-%E5%BC%80%E5%8F%91kafka_Streams1/"/>
    <id>http://djwwj.top/2019/11/14/2019-11-14-开发kafka_Streams1/</id>
    <published>2019-11-14T09:35:55.100Z</published>
    <updated>2019-11-14T09:41:15.627Z</updated>
    
    <content type="html"><![CDATA[<p>自定义数据类型,利用kafka进行数据传递,以及如何去定义流拓扑。什么是流,我们需要有一个初步认识</p><h1 id="从零到有的kafka进阶"><a href="#从零到有的kafka进阶" class="headerlink" title="从零到有的kafka进阶"></a>从零到有的kafka进阶</h1><ol><li>环境的准备</li><li>利用kafkaStreams实现helloworld-HELLOWORLD</li><li>利用kafka自定义序列化器以及构建生产者和消费者</li></ol><h2 id="环境的准备"><a href="#环境的准备" class="headerlink" title="环境的准备"></a>环境的准备</h2><ol><li>jdk1.8</li><li>maven构建普通项目</li><li>引入关联的jar包</li><li>引入log4j</li></ol><p><a href="https://blog.csdn.net/cyxinda/article/details/78254155" target="_blank" rel="noopener">关于log4j的使用可参考</a></p><blockquote><p>pom.xml如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p>lo4j配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"># stdout Appender</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span><br></pre></td></tr></table></figure><h2 id="利用kafkaStreams实现helloworld-HELLOWORLD"><a href="#利用kafkaStreams实现helloworld-HELLOWORLD" class="headerlink" title="利用kafkaStreams实现helloworld-HELLOWORLD"></a>利用kafkaStreams实现helloworld-HELLOWORLD</h2><h3 id="流式处理API-DSL"><a href="#流式处理API-DSL" class="headerlink" title="流式处理API(DSL)"></a>流式处理API(DSL)</h3><ol><li>高级API的核心是KStream对象(该对象代表流/值记录)</li><li>DSL方法都返回了一个KStream对象的引用</li><li>返回的KStream对象是一个新的实例。而不是最初的实例</li></ol><h3 id="构建一个简单的流向图"><a href="#构建一个简单的流向图" class="headerlink" title="构建一个简单的流向图"></a>构建一个简单的流向图</h3><p><img src="/images/resources/45DADE973B6CF2518094F24DC98B78A0.jpg" alt="IMAGE"></p><blockquote><p>类似的步骤</p></blockquote><ol><li>定义配置项</li><li>创建自定义或预定义的Serde实例</li><li>创建处理器拓扑</li><li>创建和启动KStream</li></ol><p><strong><em>补充说明:kafka流在进行处理的时候,数据会进行序列化和反序列化操作。在kafka流中，默认提供了一个Serdes类来构建Serde对象。而默认提供以下类型作为支撑1.String 2.byte数组 3.Long 4.Integer 5.Double</em></strong></p><p><a href="https://www.cnblogs.com/baxianhua/p/10271830.html" target="_blank" rel="noopener">关于序列化的原理和认知</a></p><blockquote><p>代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.kafka;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.common.serialization.Serde;</span><br><span class="line">import org.apache.kafka.common.serialization.Serdes;</span><br><span class="line">import org.apache.kafka.streams.Consumed;</span><br><span class="line">import org.apache.kafka.streams.KafkaStreams;</span><br><span class="line">import org.apache.kafka.streams.StreamsBuilder;</span><br><span class="line">import org.apache.kafka.streams.StreamsConfig;</span><br><span class="line">import org.apache.kafka.streams.kstream.KStream;</span><br><span class="line">import org.apache.kafka.streams.kstream.Produced;</span><br><span class="line">import org.apache.kafka.streams.kstream.ValueMapper;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">public class KafkaStreamsHelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  public final static  Logger   LOG  = LoggerFactory.getLogger(KafkaStreamsHelloWorld.class);</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">//配置基本属性</span><br><span class="line">  Properties  props = new Properties();</span><br><span class="line">  //每个流式程序有特定的id和节点(必选)</span><br><span class="line">  props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;helloworl_app_id&quot;);</span><br><span class="line">  props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">  StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">  Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">  //1.构建流的创建者实例</span><br><span class="line">  StreamsBuilder  builder = new StreamsBuilder();</span><br><span class="line">  // 1.1 接收源数据产生的处理器流</span><br><span class="line">  KStream&lt;String,String&gt; simpleFirstStream = builder.stream(&quot;src-topic&quot;, Consumed.with(stringSerde, stringSerde));</span><br><span class="line">  //1.2 将数据全部转化为大写 V代表接收值的类型,VR代表</span><br><span class="line">  KStream&lt;String, String&gt; upperCaseStream = simpleFirstStream.mapValues(new ValueMapper&lt;String, String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String apply(String value) &#123;</span><br><span class="line"></span><br><span class="line">return value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">  //1.3 将处理后的值送到输出主题中</span><br><span class="line">  upperCaseStream.through(&quot;out-topic&quot;, Produced.with(stringSerde, stringSerde));</span><br><span class="line">  </span><br><span class="line">  //2. 构建流容器</span><br><span class="line">  KafkaStreams  kafkaStreams = new KafkaStreams(builder.build(), streamsConfig);</span><br><span class="line">  </span><br><span class="line">  //3.启动流式程序</span><br><span class="line">  kafkaStreams.start();</span><br><span class="line">  Thread.sleep(60000);</span><br><span class="line">  LOG.info(&quot;流式程序结束&quot;);</span><br><span class="line">  kafkaStreams.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>操作步骤</p></blockquote><ol><li>启动zookeeper和kafka</li><li>创建2个主题，一个src-topic 和 out-topic</li><li>建立一个生产者和消费者</li><li>启动流式就计算程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span><br><span class="line">bin/kafka-server-start.sh config/server.properties</span><br><span class="line">bin/kafka-topics.sh --create --topic src-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class="line">bin/kafka-topics.sh --create --topic out-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class="line">bin/kafka-console-producer.sh --topic src-topic --broker-list localhost:9092</span><br><span class="line">bin/kafka-console-consumer.sh --topic out-topic --bootstrap-server localhost:9092 --from-beginning</span><br></pre></td></tr></table></figure><blockquote><p>最终结果如下:</p></blockquote><p><img src="/images/resources/A76B1B9A1C77F7FFAAD40CA298FDDCC0.jpg" alt="IMAGE"></p><p><img src="/images/resources/EA2F83FE2A5A245B3E5A2F76B851F30C.jpg" alt="IMAGE"></p><h2 id="利用kafka自定义序列化器以及构建生产者和消费者"><a href="#利用kafka自定义序列化器以及构建生产者和消费者" class="headerlink" title="利用kafka自定义序列化器以及构建生产者和消费者"></a>利用kafka自定义序列化器以及构建生产者和消费者</h2><h3 id="创建数据对象"><a href="#创建数据对象" class="headerlink" title="创建数据对象"></a>创建数据对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试数据模型</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class OrderMsg &#123;</span><br><span class="line">    //消费卡号</span><br><span class="line">private String cardNumber;</span><br><span class="line">//消费人</span><br><span class="line">private String  personName;</span><br><span class="line">//消费金额</span><br><span class="line">private  Double  money;</span><br><span class="line">public String getCardNumber() &#123;</span><br><span class="line">return cardNumber;</span><br><span class="line">&#125;</span><br><span class="line">public void setCardNumber(String cardNumber) &#123;</span><br><span class="line">this.cardNumber = cardNumber;</span><br><span class="line">&#125;</span><br><span class="line">public String getPersonName() &#123;</span><br><span class="line">return personName;</span><br><span class="line">&#125;</span><br><span class="line">public void setPersonName(String personName) &#123;</span><br><span class="line">this.personName = personName;</span><br><span class="line">&#125;</span><br><span class="line">public Double getMoney() &#123;</span><br><span class="line">return money;</span><br><span class="line">&#125;</span><br><span class="line">public void setMoney(Double money) &#123;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">public OrderMsg(String cardNumber, String personName, Double money) &#123;</span><br><span class="line">super();</span><br><span class="line">this.cardNumber = cardNumber;</span><br><span class="line">this.personName = personName;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">public OrderMsg() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;OrderMsg [cardNumber=&quot; + cardNumber + &quot;, personName=&quot; + personName + &quot;, money=&quot; + money + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建序列化器"><a href="#创建序列化器" class="headerlink" title="创建序列化器"></a>创建序列化器</h3><p>1.使用序列化器（可选则用GSON）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.序列化器和反序列化器的代码如下(kafka在传递数据的时候,会将数据转换为字节,然后消费的时候将字节转换为具体的对象)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//自定义序列化器</span><br><span class="line">public class JsonSer&lt;T&gt; implements Serializer&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">private  Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, T data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return gson.toJson(data).getBytes(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//自定义反序列化器</span><br><span class="line">public class JsonDser&lt;T&gt; implements Deserializer&lt;T&gt;&#123;</span><br><span class="line">private Gson gson = new Gson();</span><br><span class="line">private Class&lt;T&gt;  deserClass;</span><br><span class="line"></span><br><span class="line">public  JsonDser(Class&lt;T&gt; deserClass)&#123;</span><br><span class="line">this.deserClass = deserClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public JsonDser() &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public T deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">return gson.fromJson(new String(data), deserClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        properties.put(&quot;value.serializer&quot;, new JsonSer&lt;OrderMsg&gt;().getClass());</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">        System.out.println(new JsonSer&lt;OrderMsg&gt;().getClass());</span><br><span class="line">       KafkaProducer&lt;String, OrderMsg&gt; kp =  new KafkaProducer&lt;String,OrderMsg&gt;(properties);</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, OrderMsg&gt;(&quot;test-topic&quot;, new OrderMsg(&quot;005&quot;, &quot;zzz&quot;, 100.1)));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TestConsumer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;simple-consumer-example1&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;3000&quot;);</span><br><span class="line">        KafkaConsumer&lt;String,OrderMsg&gt; ks = new KafkaConsumer&lt;String,OrderMsg&gt;(properties,new StringDeserializer(),new JsonDser&lt;&gt;(OrderMsg.class));</span><br><span class="line">        ks.subscribe(Collections.singletonList(&quot;test-topic&quot;));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">         ConsumerRecords&lt;String, OrderMsg&gt; records = ks.poll(1000);</span><br><span class="line">         for (ConsumerRecord&lt;String, OrderMsg&gt; record : records) &#123;</span><br><span class="line">                     String message = String.format(&quot;Consumed: key = %s value = %s with offset = %d &quot;,</span><br><span class="line">                             record.key(), record.value().toString(), record.offset());</span><br><span class="line">                     System.out.println(message);</span><br><span class="line">                 &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>所有代码均通过测试</em></strong></p><p><a href="https://blog.csdn.net/supreme000/article/details/97794999" target="_blank" rel="noopener">后期参考springboot整合kafka并自定义序列化器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自定义数据类型,利用kafka进行数据传递,以及如何去定义流拓扑。什么是流,我们需要有一个初步认识&lt;/p&gt;
&lt;h1 id=&quot;从零到有的kafka进阶&quot;&gt;&lt;a href=&quot;#从零到有的kafka进阶&quot; class=&quot;headerlink&quot; title=&quot;从零到有的kafka进
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="http://djwwj.top/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="http://djwwj.top/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="http://djwwj.top/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="http://djwwj.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="http://djwwj.top/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="自定义序列器" scheme="http://djwwj.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%99%A8/"/>
    
      <category term="构建生产和消费对象" scheme="http://djwwj.top/tags/%E6%9E%84%E5%BB%BA%E7%94%9F%E4%BA%A7%E5%92%8C%E6%B6%88%E8%B4%B9%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>kafka快速上手</title>
    <link href="http://djwwj.top/2019/11/06/2019-11-06-Kafka%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://djwwj.top/2019/11/06/2019-11-06-Kafka快速上手/</id>
    <published>2019-11-06T08:04:33.932Z</published>
    <updated>2019-11-06T08:09:23.658Z</updated>
    
    <content type="html"><![CDATA[<p>kafkaStreams运行在kafka之上。没有kafka理论先行,很难始于足下。</p><h1 id="kafka的上门之路"><a href="#kafka的上门之路" class="headerlink" title="kafka的上门之路"></a>kafka的上门之路</h1><ol><li>kafka架构</li><li>生产者和消费者</li><li>kafka的安装和运行</li></ol><h2 id="kafka架构"><a href="#kafka架构" class="headerlink" title="kafka架构"></a>kafka架构</h2><ol><li>kafkaStreams是运行在kafka之上的一个库</li></ol><blockquote><p> 示例</p></blockquote><p>比如现在某个公司有3个系统。销售系统，营销系统，审计系统。系统之间数据可以相互共享获取</p><p><img src="/images/resources/5D24E3A3EB5713510C8B5A8B147A1A45.jpg" alt="IMAGE"></p><p>如果随着系统越来越多，数据相互之间都需要共享。这个时候可以使用kafka来做为数据中台。它满足几点要求</p><ol><li>数据中心是无状态的</li><li>以一种方式接受交易数据并存储,消费程序可以根据自己的需要从数据中心提取信息。</li><li>数据中心只知道交易数据要保存多久。以及什么时候切分和删除这些数据</li></ol><h3 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h3><p><strong><em>一个具有容错能力，健壮的发布/订阅系统,一个节点称为一个代理。多个代理组成一个集群。</em></strong></p><p><strong><em>kafka将生产者写入的消息存储在kafka的主题中,消费者订阅kafka主题。与kafka通信查看主体是否有可用的信息*</em></strong></p><p><img src="/images/resources/EB8E5ACE4A58BA66A0CCB14B876517D4.jpg" alt="IMAGE"></p><h3 id="kafka是一个消息代理"><a href="#kafka是一个消息代理" class="headerlink" title="kafka是一个消息代理"></a>kafka是一个消息代理</h3><ol><li>kafka是一个中介,将进行交换或交易但是不一定相互了解的两部分汇聚一起。</li><li>kafka将消息存储在主题中,从主题检索消息.本身不会和消费者和订阅者保持任何状态.仅作为一个消息中心</li><li>kafka底层技术用的是日志,不断追加输入记录文件。</li><li>主题的消息负载,kafka使用分区。</li></ol><h3 id="kafka是一个日志"><a href="#kafka是一个日志" class="headerlink" title="kafka是一个日志"></a>kafka是一个日志</h3><ol><li>日志用于记录应用程序正在做什么,如果程序出现问题。首先检查的是应用程序日志。</li><li>在kafka设计理念中，日志是一种只能追加的，完全按照时间顺序排列的记录序列</li><li>日志是具有强大含义的简单数据抽象.如果记录时间有序。解决冲突或者确定哪个数据更新到不同的机器就更加的明确</li><li>kafka的日志是按照主题名称分隔日志的,如果日志在一个集群中有多个副本。如果一台服务器宕机。从故障中回复是分布式提交日志具有的。</li></ol><p><strong><em>这也分布式应用程序和数据一致性的基本要求</em></strong></p><h3 id="kafka日志工作原理"><a href="#kafka日志工作原理" class="headerlink" title="kafka日志工作原理"></a>kafka日志工作原理</h3><ol><li>kafka将每个主题映射到指定日志路径的下一个子目录。子目录数和主题对应的分区数相同。</li><li>每个目录里面存放都是追加传入消息的日志文件</li><li>一旦日志文件达到某个规模，日志文件就会被切分。消息会追加到一个新的日志文件中.</li></ol><p><strong><em>比如： /logs/topicA_0 logs是消息存储的根目录,目录下代表着主题的分区,下划线后面紧跟分区编号</em></strong></p><h3 id="kafka和分区"><a href="#kafka和分区" class="headerlink" title="kafka和分区"></a>kafka和分区</h3><ol><li>分区能够保证同一个键的数据按序发送给同一个消费者</li><li>kafka将每个传入的消息追加到日志末尾,消息都严格按照时间排列.不保证跨分区有序，但能保证每个分区消息有序</li></ol><h3 id="分区无键和有键的方式"><a href="#分区无键和有键的方式" class="headerlink" title="分区无键和有键的方式"></a>分区无键和有键的方式</h3><ol><li><p>键为空,生产者按照轮询的方式选择分区写入记录</p></li><li><p>键不为空,则按照 hascode.(key) % number of partitions</p></li></ol><h3 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseKeyPartitioner extends DefaultPartitioner &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) &#123;</span><br><span class="line">        Object newKey = null;</span><br><span class="line">        if (key != null) &#123;</span><br><span class="line">            PurchaseKey purchaseKey = (PurchaseKey) key;</span><br><span class="line">            newKey = purchaseKey.getCustomerId();</span><br><span class="line">            keyBytes = ((String) newKey).getBytes();</span><br><span class="line">        &#125;</span><br><span class="line">        return super.partition(topic, newKey, keyBytes, value, valueBytes, cluster);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在生产者配置上设置<code>properties.put(&quot;partitioner.class&quot;, PurchaseKeyPartitioner.class.getName());</code></p><h3 id="分布式日志"><a href="#分布式日志" class="headerlink" title="分布式日志"></a>分布式日志</h3><p><strong><em>kafka提供了数据冗余,数据被写入到一个节点的时候,数据会被复制到一台或者多台机器上</em></strong></p><p><strong>其次选择zookeeper作为代理控制器目的在于:</strong></p><ol><li>集群成员</li><li>主题配置</li><li>访问控制</li></ol><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><ol><li>传统的日志删除通过设置log.roll.ms会对日志进行切分</li><li>通过设置log.retention.ms会设置日志的保留时间</li><li>日志压缩通过这只log.cleanup.policy = compact可以设置日志压缩</li></ol><p><strong><em>注意:如果消息是独立的.就可以用日志删除.如果是需要对消息又更新最新点上面的操作，就可以使用日志压缩</em></strong></p><h2 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = new Properties();</span><br><span class="line">        //服务器引导可以有多个逗号之间隔开</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        //转换为正确的字节数组需要提供正确的序列化器</span><br><span class="line">        properties.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        properties.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        //是否应答 all代表领导和追随者确认后应答  1代表只需要领导者应答  0无需做任何等待</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        //消息发送失败，尝试的次数</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        //日志压缩类型</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">        //指定自定义的分区器</span><br><span class="line">        properties.put(&quot;partitioner.class&quot;, PurchaseKeyPartitioner.class.getName());</span><br><span class="line"></span><br><span class="line">        PurchaseKey key = new PurchaseKey(&quot;12334568&quot;, new Date());</span><br><span class="line"></span><br><span class="line">        try(Producer&lt;PurchaseKey, String&gt; producer = new KafkaProducer&lt;&gt;(properties)) &#123;</span><br><span class="line">            ProducerRecord&lt;PurchaseKey, String&gt; record = new ProducerRecord&lt;&gt;(&quot;some-topic&quot;, key, &quot;对应的json数据&quot;);</span><br><span class="line"></span><br><span class="line">            Callback callback = (metadata, exception) -&gt; &#123;</span><br><span class="line">                if (exception != null) &#123;</span><br><span class="line">                    exception.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Future&lt;RecordMetadata&gt; sendFuture = producer.send(record, callback);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="生产者可指定分区和时间戳以及指定分区"><a href="#生产者可指定分区和时间戳以及指定分区" class="headerlink" title="生产者可指定分区和时间戳以及指定分区"></a>生产者可指定分区和时间戳以及指定分区</h3><blockquote><p>指定分区和时间戳</p></blockquote><ol><li>构造器重载有4个方法，可以指定分区和时间戳</li><li>分区位置平均可以考虑   AtomicInteger count = new AtomicInteger(0);</li><li><a href="https://www.cnblogs.com/zhaoyan001/p/8885360.html" target="_blank" rel="noopener">AtomicInteger类的理解与使用</a></li></ol><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p><strong><em>首先生产者是无状态的,但是消费者需要周期性的提交从代理中消费过的消息的偏移量来管理一些状态。</em></strong></p><blockquote><p>消费者提交一个偏移量有以下含义</p></blockquote><ol><li>意味着消费者完全处理了消息</li><li>也表示发生故障或者重启时该消费者消费的起始位置</li></ol><p>如果创建了消费者发生了某些故障，并且最后的提交的偏移量不可用。消费者从何处开始消费取决于具体的配置</p><ol><li>earliest从最早可用的偏移量检索消息</li><li>latest本质从消费者加入集群的时间点开始消费消息</li><li>none代理将会向消费者抛出异常</li></ol><p><strong><em>同样消费者可以自动提交偏移量,以及手动提交偏移量</em></strong></p><blockquote><p>消费者代码示例 （引用书中代码）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadedConsumerExample &#123;</span><br><span class="line"></span><br><span class="line">    private volatile boolean doneConsuming = false;</span><br><span class="line">    private int numberPartitions;</span><br><span class="line">    private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    public ThreadedConsumerExample(int numberPartitions) &#123;</span><br><span class="line">        this.numberPartitions = numberPartitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void startConsuming() &#123;</span><br><span class="line">        executorService = Executors.newFixedThreadPool(numberPartitions);</span><br><span class="line">        Properties properties = getConsumerProps();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; numberPartitions; i++) &#123;</span><br><span class="line">            Runnable consumerThread = getConsumerThread(properties);</span><br><span class="line">            executorService.submit(consumerThread);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Runnable getConsumerThread(Properties properties) &#123;</span><br><span class="line">        return () -&gt; &#123;</span><br><span class="line">            Consumer&lt;String, String&gt; consumer = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                consumer = new KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">                consumer.subscribe(Collections.singletonList(&quot;test-topic&quot;));</span><br><span class="line">                while (!doneConsuming) &#123;</span><br><span class="line">                    ConsumerRecords&lt;String, String&gt; records = consumer.poll(5000);</span><br><span class="line">                    for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                        String message = String.format(&quot;Consumed: key = %s value = %s with offset = %d partition = %d&quot;,</span><br><span class="line">                                record.key(), record.value(), record.offset(), record.partition());</span><br><span class="line">                        System.out.println(message);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (consumer != null) &#123;</span><br><span class="line">                    consumer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stopConsuming() throws InterruptedException &#123;</span><br><span class="line">        doneConsuming = true;</span><br><span class="line">        executorService.awaitTermination(10000, TimeUnit.MILLISECONDS);</span><br><span class="line">        executorService.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Properties getConsumerProps() &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;simple-consumer-example&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;3000&quot;);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        return properties;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Change the constructor arg to match the actual number of partitions</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        ThreadedConsumerExample consumerExample = new ThreadedConsumerExample(2);</span><br><span class="line">        consumerExample.startConsuming();</span><br><span class="line">        Thread.sleep(60000); //Run for one minute</span><br><span class="line">        consumerExample.stopConsuming();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhaoyan001/p/7049627.html" target="_blank" rel="noopener">Java ExecutorService四种线程池的例子与说明</a></p><p><a href="https://www.cnblogs.com/laowen-zjw/p/6735790.html" target="_blank" rel="noopener">深入理解volatile</a></p><h2 id="kafka的安装和运行"><a href="#kafka的安装和运行" class="headerlink" title="kafka的安装和运行"></a>kafka的安装和运行</h2><ol><li>kafka选择版本  2.12-1.1.0</li><li>默认情况下kafka使用9092端口,zookeeper使用2181端口</li><li>kafka的配置在config的server.properties中-日志配置在log.dirs</li><li>zookeeper在zookeeper.properties中-日志在dataDir中</li></ol><p><img src="/images/resources/B1DC2D0DFA2D61967B6D597DC75C49CF.jpg" alt="IMAGE"></p><p><img src="/images/resources/34AC239F1ED17CB9B958E177A5936CB4.jpg" alt="IMAGE"></p><blockquote><p>操作步骤</p></blockquote><p>1.先启动zookeeper</p><p><code>kafka_2.12-1.1.0 % bin/zookeeper-server-start.sh config/zookeeper.properties</code></p><p><img src="/images/resources/881EF42C2D53CE9A48DD7A8AADCDF204.jpg" alt="IMAGE"></p><p>2.启动kafka</p><p><code>bin/kafka-server-start.sh config/server.properties</code></p><p><img src="/images/resources/F3632FB81EB66E53E00DD4049FC4AD17.jpg" alt="IMAGE"></p><p>3.创建一个主题供生产和消费进行操作</p><p><code>bin/kafka-topics.sh --create --topic first-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</code></p><p>replication-factor 副本设置为1表示不复制。实际中副本因子为奇数以上以便发生故障时保证数据可用性</p><p>partitions 指定主题将用到的分区数。如果需要更高的负载，需要更多的分区。</p><p><img src="/images/resources/08AD7C866BE62196DCF1F0B68A0DDCB6.jpg" alt="IMAGE"></p><p>4.通过生产者控制台发送消息</p><p><code>bin/kafka-console-producer.sh --topic first-topic --broker-list localhost：9092</code></p><p><img src="/images/resources/1742EB88961C0D8758186030DC5CFCAA.jpg" alt="IMAGE"></p><p>5.通过消费者控制台接收消息</p><p><code>bin/kafka-console-consumer.sh --topic first-topic --bootstrap-server localhost:9092 --from-beginning</code></p><p>from-beginning 消费者为从头接受消息,但没有提交偏移量</p><p><img src="/images/resources/F5E081E30448527A6AA81BE05F396476.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kafkaStreams运行在kafka之上。没有kafka理论先行,很难始于足下。&lt;/p&gt;
&lt;h1 id=&quot;kafka的上门之路&quot;&gt;&lt;a href=&quot;#kafka的上门之路&quot; class=&quot;headerlink&quot; title=&quot;kafka的上门之路&quot;&gt;&lt;/a&gt;kafka的
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="http://djwwj.top/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="http://djwwj.top/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="http://djwwj.top/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="应用场景" scheme="http://djwwj.top/tags/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
      <category term="大数据分析" scheme="http://djwwj.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="消息队列" scheme="http://djwwj.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="生产者和消费者" scheme="http://djwwj.top/tags/%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    
      <category term="日志" scheme="http://djwwj.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>kafkaStreams初识</title>
    <link href="http://djwwj.top/2019/11/04/2019-11-04-KafkaStreams%E5%88%9D%E8%AF%86/"/>
    <id>http://djwwj.top/2019/11/04/2019-11-04-KafkaStreams初识/</id>
    <published>2019-11-04T07:24:51.956Z</published>
    <updated>2019-11-04T07:29:27.645Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用好流式处理.流式处理从成本和人力该如何考虑,以及应用场景.</p><h1 id="数据以及kafkaStreams的理念"><a href="#数据以及kafkaStreams的理念" class="headerlink" title="数据以及kafkaStreams的理念"></a>数据以及kafkaStreams的理念</h1><ol><li>数据的发展如何改变程序设计的</li><li>流式处理工作以及应用场景</li><li>kafkaStreams的简介以及解决问题</li></ol><hr><h2 id="数据的发展如何改变程序设计的"><a href="#数据的发展如何改变程序设计的" class="headerlink" title="数据的发展如何改变程序设计的"></a>数据的发展如何改变程序设计的</h2><p><strong><em>在现在的世界中,每天的数据越来越多。如何有有效的利用这些数据,就是我们当下需要考虑的点</em></strong></p><p><strong><em>现在有2种方式处理数据,一种是我们进行批量处理数据(批处理)这些数据都是离线的,第二种就是数据在到达的时候就需要进行处理。</em></strong></p><p><strong><em>kafkaStream是一个对记录的每个时间进行处理的库,基于每个时间就意味着数据一旦到达,就能够被及时处理.不需要将数据分成小批量的</em></strong></p><h3 id="MapReduce范式-补充"><a href="#MapReduce范式-补充" class="headerlink" title="MapReduce范式(补充)"></a>MapReduce范式(补充)</h3><p><strong>map会对每个记录产生一个键值对.而reduce基于每个键合并,处理中间结果</strong></p><p><strong><em>对于TB级别以上的数据有几个概念让我们更好的处理数据</em></strong></p><ol><li>一个集群中分发的数据达到易于处理的规模</li><li>使用键值对讲分布式的数据分组</li><li>利用副本备份机制容忍故障的产生，而不是避免故障</li></ol><p><strong>也就是通过计算机集群中的分散负载,就可以将数据转化为可管理的数量</strong></p><p><strong>其次如何将分布在不同机器上的数据进行汇总也就是分区</strong></p><p><strong><em>分区意味着分组.使用相同的散列码的键进行分组。</em></strong></p><blockquote><p> 公式如下:  partition = key.hashCode()% numberOfPartitions</p></blockquote><p><strong><em>补充:通过使用复制来接受故障。通过复制不同服务器上的数据块,不必担心磁盘故障导致停产.数据复制能够对于分布式的应用提供容错能力至关重要</em></strong></p><h3 id="离线计算的瓶颈"><a href="#离线计算的瓶颈" class="headerlink" title="离线计算的瓶颈"></a>离线计算的瓶颈</h3><ol><li>离线计算首先需要收集大量的数据，批处理的离线计算适合根据根据用户大量的习惯来决定未来可能会发生的事情</li><li>如果用户的习惯是偶然性，那就无法判断资源价值的有效利用</li></ol><blockquote><p> 面对的问题</p></blockquote><ol><li>当前实时的趋势是什么？</li><li>最近一个周期时间段的特征是什么？</li><li>用户如何利用最新的发布的特性的？</li></ol><h2 id="流式处理工作以及应用场景"><a href="#流式处理工作以及应用场景" class="headerlink" title="流式处理工作以及应用场景"></a>流式处理工作以及应用场景</h2><ol><li>定义:流式处理是利用连续计算处理无线数据流的能力,数据是流动的,所以无需收集以及存储数据。</li></ol><blockquote><p> 流式数据的应用场景</p></blockquote><ol><li>信用卡诈骗:根据实时的消费记录,以及对比用户前期的消费习惯和地点,可能信用卡被盗刷.提醒信用卡的拥有者</li><li>入侵检测:实时监控异常行为.</li><li>大型自行车比赛:通过实时传输的数据,监测位置。以及比赛可能会遇到的问题。</li><li>金融业:根据实时买入卖出，提供决策能力</li></ol><p><strong><em>场景:数据到达时需要被立即报告处理,那么可以选择流式处理</em></strong></p><p><strong><em>如果需要对许菊进行深入分析.或者为了编制一个大的数据仓库以备后期分析,那么这个时候需要离线计算</em></strong></p><h2 id="kafkaStreams的简介以及解决问题"><a href="#kafkaStreams的简介以及解决问题" class="headerlink" title="kafkaStreams的简介以及解决问题"></a>kafkaStreams的简介以及解决问题</h2><p><strong><em>假定有一个实时销售系统,我们要根据实时的数据对每个客户甚至于公司的团队制定决策</em></strong></p><blockquote><p>需求分解：有向无环图</p></blockquote><p>购买记录 —-&gt; 屏蔽信息</p><p>屏蔽信息 —-&gt; 存储</p><pre><code>----&gt; 奖励----&gt; 模式</code></pre><blockquote><p>分析节点</p></blockquote><p>源节点 —&gt;  每条销售信息记录</p><p>信用卡屏蔽节点 —-&gt; 将源节点的信息中卡号进行屏蔽</p><p>模式节点  —-&gt; 检索相关的物品，日期，邮政编码组装为一个新的对象</p><p>奖励节点 —-&gt; 抽取客户的ID和实时的消费金额</p><p>存储节点 —-&gt; 存储到相信的关系或者非关系数据中进行分析</p><blockquote><p> 注意:至始至终,这种有向无环图,我们都以深度优先的方式进行遍历以及处理数据。深度优先和广度优先可以参考</p></blockquote><p><a href="https://www.jianshu.com/p/bff70b786bb6" target="_blank" rel="noopener">深度和广度优先</a></p><p><a href="https://blog.csdn.net/weixin_42289193/article/details/81741756" target="_blank" rel="noopener">Java实现深度优先遍历和广度优先遍历</a></p><p><strong><em>总结:数据交由了节点和处理器来进行共同的维护。节点即是需求规则，最终会将节点数据传输到对应的主题中,而处理器则存在在kafkaStream流上。处理器所处理的数据产生出来都是一个新的对象</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何使用好流式处理.流式处理从成本和人力该如何考虑,以及应用场景.&lt;/p&gt;
&lt;h1 id=&quot;数据以及kafkaStreams的理念&quot;&gt;&lt;a href=&quot;#数据以及kafkaStreams的理念&quot; class=&quot;headerlink&quot; title=&quot;数据以及kafkaStre
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="http://djwwj.top/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="http://djwwj.top/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="http://djwwj.top/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="应用场景" scheme="http://djwwj.top/tags/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
      <category term="大数据分析" scheme="http://djwwj.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli链路管理</title>
    <link href="http://djwwj.top/2019/10/11/2019-10-11-SpringAli%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>http://djwwj.top/2019/10/11/2019-10-11-SpringAli链路追踪/</id>
    <published>2019-10-11T11:41:42.291Z</published>
    <updated>2019-10-11T11:48:40.638Z</updated>
    
    <content type="html"><![CDATA[<p>链路追踪虽然是运维做的事情,但是我们作为开发的应该走一走</p><h1 id="springAli链路追踪"><a href="#springAli链路追踪" class="headerlink" title="springAli链路追踪"></a>springAli链路追踪</h1><ol><li>什么是链路追踪</li><li>链路追踪解决方案</li><li>如何使用skywalking</li></ol><h2 id="什么是链路追踪"><a href="#什么是链路追踪" class="headerlink" title="什么是链路追踪"></a>什么是链路追踪</h2><p><strong>微服务架构是通过业务来划分服务的，使用REST调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂</strong></p><p>情况如下:</p><p><img src="/images/resources/41E79BF5E865358EFDAB61D562CF9A83.jpg" alt="IMAGE"></p><p><strong><em>当然服务肯定不止这几个,或许会有上百个,有没有可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题，这就是所谓的 APM（应用性能管理）。</em></strong></p><h2 id="链路追踪解决方案"><a href="#链路追踪解决方案" class="headerlink" title="链路追踪解决方案"></a>链路追踪解决方案</h2><blockquote><p>SkyWalking</p></blockquote><ol><li>多种监控手段，语言探针和服务网格(Service Mesh)</li><li>多语言自动探针，Java，.NET Core 和 Node.JS</li><li>轻量高效，不需要大数据</li><li>模块化，UI、存储、集群管理多种机制可选</li><li>支持告警</li><li>优秀的可视化方案</li></ol><h2 id="如何使用skywalking"><a href="#如何使用skywalking" class="headerlink" title="如何使用skywalking"></a>如何使用skywalking</h2><blockquote><p>1.安装docker,使用docker-compose执行编排文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.3&apos;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: wutang/elasticsearch-shanghai-zone:6.3.2</span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    environment:</span><br><span class="line">      cluster.name: elasticsearch</span><br></pre></td></tr></table></figure><p><strong>docker-compose up -d(启动并后台运行)</strong></p><p><strong>docker-compose stop(停止)</strong></p><p><strong>访问localhost:9200</strong></p><p><img src="/images/resources/7831D1922AF79282124159B6BDB5D34B.jpg" alt="IMAGE"></p><blockquote><p>2.下载skywalking,修改配置文件config下application.yml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    nameSpace: $&#123;SW_NAMESPACE:&quot;&quot;&#125;</span><br><span class="line">    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span><br><span class="line">    user: $&#123;SW_ES_USER:&quot;&quot;&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span><br><span class="line">    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span><br><span class="line">    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span><br><span class="line">    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span><br><span class="line">    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:2000&#125; # Execute the bulk every 2000 requests</span><br><span class="line">    bulkSize: $&#123;SW_STORAGE_ES_BULK_SIZE:20&#125; # flush the bulk every 20mb</span><br><span class="line">    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests</span><br><span class="line">    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requests</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">    segmentQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span><br><span class="line"># h2:</span><br><span class="line">#    driver: $&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span><br><span class="line">#    url: $&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125;</span><br><span class="line">#    user: $&#123;SW_STORAGE_H2_USER:sa&#125;</span><br><span class="line">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">#  mysql:</span><br><span class="line">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.切换并启动</p></blockquote><p><code>cd  /Users/Yun/apache-skywalking-apm-bin/bin</code></p><p><strong>执行./startup.sh访问默认端口<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></strong></p><p><img src="/images/resources/4BE1B5B001F480B7DDB449B0D69395E1.jpg" alt="IMAGE"></p><blockquote><p>4.在idea中部署探针</p></blockquote><p><img src="/images/resources/CDDF1E3DC69265A087952CC9D6E1C26D.jpg" alt="IMAGE"></p><p><strong>增加vm参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:/Users/Yun/mycloud/clouddependencies/spring-cloud-external-skywalking/agent/skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=provider</span><br><span class="line">-Dskywalking.collector.backend_service=localhost:11800</span><br></pre></td></tr></table></figure><p><img src="/images/resources/D801AE88ACBD960F7F1DF5DD0F7DD351.jpg" alt="IMAGE"></p><blockquote><p>5.启动项目</p></blockquote><p><img src="/images/resources/3261DF83D683C675E032BDD8AC657332.jpg" alt="IMAGE"></p><p><img src="/images/resources/7848EF174875CDF2089B18610220AFF2.jpg" alt="IMAGE"></p><p><img src="/images/resources/3D92D119B33233BA296FD08BF72A7092.jpg" alt="IMAGE"></p><p>其余服务同理设置</p><ol><li>Avg SLA： 服务可用性（主要是通过请求成功与失败次数来计算）</li><li>CPM： 每分钟调用次数</li><li>Avg Response Time： 平均响应时间</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链路追踪虽然是运维做的事情,但是我们作为开发的应该走一走&lt;/p&gt;
&lt;h1 id=&quot;springAli链路追踪&quot;&gt;&lt;a href=&quot;#springAli链路追踪&quot; class=&quot;headerlink&quot; title=&quot;springAli链路追踪&quot;&gt;&lt;/a&gt;springAli链路
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="http://djwwj.top/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="http://djwwj.top/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="http://djwwj.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="http://djwwj.top/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="链路追踪" scheme="http://djwwj.top/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
      <category term="应用性能管理" scheme="http://djwwj.top/tags/%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli统一资源管理</title>
    <link href="http://djwwj.top/2019/10/10/2019-10-10-SpringAli%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://djwwj.top/2019/10/10/2019-10-10-SpringAli资源统一配置/</id>
    <published>2019-10-10T08:13:11.891Z</published>
    <updated>2019-10-10T08:20:02.597Z</updated>
    
    <content type="html"><![CDATA[<p>如何做到资源的统一高效管理,nacos-config是一个不错的选择</p><h1 id="springAli资源管理"><a href="#springAli资源管理" class="headerlink" title="springAli资源管理"></a>springAli资源管理</h1><ol><li>统一资源管理的应用场景</li><li>实际操作(代码示例)</li></ol><h2 id="统一资源管理的应用场景"><a href="#统一资源管理的应用场景" class="headerlink" title="统一资源管理的应用场景"></a>统一资源管理的应用场景</h2><blockquote><p>场景说明</p></blockquote><p><strong><em>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。</em></strong></p><p><strong>也就是配置文件众多,你不可能每次更改后然后在打包为jar包运行,是否有一种方式可以通过读取远端的配置文件,随时可以更改端口或者服务名等一系列的动作</strong></p><blockquote><p>解决方案</p></blockquote><p><strong>解决方案:使用nacos config:使用 Spring Cloud Alibaba Nacos Config，可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置</strong></p><blockquote><p>作用原理</p></blockquote><p><strong>作用:在特殊的 bootstrap 阶段，配置被加载到Spring环境中。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时需要运行的所有内容。</strong></p><h2 id="实际操作-代码示例"><a href="#实际操作-代码示例" class="headerlink" title="实际操作(代码示例)"></a>实际操作(代码示例)</h2><blockquote><p>1.启动nacos服务(添加配置文件,不限于消费者或者服务者的配置文件)</p></blockquote><p><img src="/images/resources/297CBE5567F5EABD2F10368D39EE8F68.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: nacos-provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">        # 当前应用被sentinel监控的端口</span><br><span class="line">        port: 8720</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br><span class="line">#sentinel</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br><span class="line">#cus attr</span><br><span class="line">user:</span><br><span class="line">  uname: wwj</span><br><span class="line">  age: 32</span><br></pre></td></tr></table></figure><blockquote><p>2.替换yml文件,新建读取属性文件bootstrap.properties</p></blockquote><p><img src="/images/resources/1B9B4E7D810AA8390124933A02687D0B.jpg" alt="IMAGE"></p><p><strong><em>注意：Spring Boot 配置文件的加载顺序，依次为 bootstrap.properties -&gt; bootstrap.yml -&gt; application.properties -&gt; application.yml ，其中 bootstrap.properties 配置为最高优先级</em></strong></p><blockquote><p>3.新建一个controller用来作为数据可实时配置更新</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class Tcontroller &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注入配置文件上下文</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private ConfigurableApplicationContext applicationContext;</span><br><span class="line">    /**</span><br><span class="line">     * 从上下文中读取配置</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(value = &quot;/hi&quot;)</span><br><span class="line">    public String getNameFromNacosConfig() &#123;</span><br><span class="line">        return &quot;Hello &quot; + applicationContext.getEnvironment().getProperty(&quot;user.uname&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.pom.xml中添加nacos-config的依赖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>5.启动服务</p></blockquote><p><img src="/images/resources/2508FD533F31AF266A9091D8F8F18ABC.jpg" alt="IMAGE"></p><p>更改配置文件再次访问</p><p><img src="/images/resources/91C38ED995B1844042B51A205E651532.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何做到资源的统一高效管理,nacos-config是一个不错的选择&lt;/p&gt;
&lt;h1 id=&quot;springAli资源管理&quot;&gt;&lt;a href=&quot;#springAli资源管理&quot; class=&quot;headerlink&quot; title=&quot;springAli资源管理&quot;&gt;&lt;/a&gt;sprin
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="http://djwwj.top/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="http://djwwj.top/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="http://djwwj.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="http://djwwj.top/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="统一注册配置" scheme="http://djwwj.top/tags/%E7%BB%9F%E4%B8%80%E6%B3%A8%E5%86%8C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli统一网关</title>
    <link href="http://djwwj.top/2019/10/09/2019-10-09-SpringAli%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3/"/>
    <id>http://djwwj.top/2019/10/09/2019-10-09-SpringAli统一网关/</id>
    <published>2019-10-09T00:24:51.541Z</published>
    <updated>2019-10-09T09:06:02.019Z</updated>
    
    <content type="html"><![CDATA[<p>统一路由网关,看得直接明白.</p><h1 id="springAlibaba路由网关"><a href="#springAlibaba路由网关" class="headerlink" title="springAlibaba路由网关"></a>springAlibaba路由网关</h1><ol><li>什么是spring网关</li><li>网关的功能特征</li><li>实际操作</li><li>网关全局过滤</li></ol><h2 id="什么是spring网关"><a href="#什么是spring网关" class="headerlink" title="什么是spring网关"></a>什么是spring网关</h2><p><strong>为微服务架构提供一种简单而有效的统一的 API 路由管理方式,不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</strong></p><p><img src="/images/resources/0DD38B2B0D318D09248FDA807FAB03EA.jpg" alt="IMAGE"></p><h2 id="网关的功能特征"><a href="#网关的功能特征" class="headerlink" title="网关的功能特征"></a>网关的功能特征</h2><ol><li>Predicates 和 Filters 作用于特定路由</li><li>集成 Hystrix 断路器</li><li>集成 Spring Cloud DiscoveryClient</li><li>易于编写的 Predicates 和 Filters</li><li>限流和路径重写 </li></ol><p><img src="/images/resources/F7D7BA5F09A9AB963804D95913B5357A.jpg" alt="IMAGE"></p><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><blockquote><p>新建项目pom.xml如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-alibaba-gateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Commons Begin --&gt;</span><br><span class="line">        &lt;!--需要过滤器--&gt;</span><br><span class="line">        &lt;dependency&gt;GatewayApplication</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.8&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Commons Begin --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.gateway.GatewayApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><strong><em>注意:Spring Cloud Gateway 不使用 Web 作为服务器，而是 使用 WebFlux 作为服务器，Gateway 项目已经依赖了 starter-webflux，所以这里 千万不要依赖 starter-web,由于过滤器等功能依然需要 Servlet 支持，故这里还需要依赖 javax.servlet:javax.servlet-api</em></strong></p><blockquote><p>构建启动项目类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class GatewayApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>applcation.yml配置文件如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 应用名称</span><br><span class="line">    name: spring-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    # 使用 Naoos 作为服务注册发现</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    # 使用 Sentinel 作为熔断器</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        port: 8721</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">    # 路由网关配置</span><br><span class="line">    gateway:</span><br><span class="line">      # 设置与服务注册发现组件结合，这样可以采用服务名的路由策略</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true</span><br><span class="line">      # 配置路由规则</span><br><span class="line">      routes:</span><br><span class="line">        # 采用自定义路由 ID（有固定用法，不同的 id 有不同的功能，详见：https://cloud.spring.io/spring-cloud-gateway/2.0.x/single/spring-cloud-gateway.html#gateway-route-filters）</span><br><span class="line">        - id: NACOS-CONSUMER</span><br><span class="line">          # 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名</span><br><span class="line">          uri: lb://consumer</span><br><span class="line">          # Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法</span><br><span class="line">          predicates:</span><br><span class="line">            # Method 方法谓词，这里是匹配 GET 和 POST 请求</span><br><span class="line">            - Method=GET,POST</span><br><span class="line">        - id: NACOS-CONSUMER-FEIGN</span><br><span class="line">          uri: lb://consumer-feign</span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET,POST</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置日志级别，方别调试</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework.cloud.gateway: debug</span><br></pre></td></tr></table></figure><blockquote><p>依次启动服务提供者,2个消费者,以及网关</p></blockquote><p><img src="/images/resources/7BD97999D72D3EAE6A1DA72EC1C84CB3.jpg" alt="IMAGE"></p><p><img src="/images/resources/7CC14B640A7A4AB853452B17BE9EF304.jpg" alt="IMAGE"></p><h2 id="网关全局过滤"><a href="#网关全局过滤" class="headerlink" title="网关全局过滤"></a>网关全局过滤</h2><p><strong>全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP 访问限制等等.</strong></p><blockquote><p> 构建一个filter</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.gateway.filter;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AuthFilter implements GlobalFilter, Ordered &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line">        if (token == null || token.isEmpty()) &#123;</span><br><span class="line">            ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">            // 封装错误信息</span><br><span class="line">            Map&lt;String, Object&gt; responseData = Maps.newHashMap();</span><br><span class="line">            responseData.put(&quot;code&quot;, 401);</span><br><span class="line">            responseData.put(&quot;message&quot;, &quot;非法请求&quot;);</span><br><span class="line">            responseData.put(&quot;cause&quot;, &quot;Token is empty&quot;);</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                // 将信息转换为 JSON</span><br><span class="line">                ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">                byte[] data = objectMapper.writeValueAsBytes(responseData);</span><br><span class="line"></span><br><span class="line">                // 输出错误信息到页面</span><br><span class="line">                DataBuffer buffer = response.bufferFactory().wrap(data);</span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                response.getHeaders().add(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">                return response.writeWith(Mono.just(buffer));</span><br><span class="line">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">                log.error(&quot;&#123;&#125;&quot;, e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        //顺序，多个filter的时候使用</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/906FEB9A5DD08998F367BC0DDBACC134.jpg" alt="IMAGE"></p><p><img src="/images/resources/358B6EA3C7792B3F92A4AAC6D18B7D7A.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;统一路由网关,看得直接明白.&lt;/p&gt;
&lt;h1 id=&quot;springAlibaba路由网关&quot;&gt;&lt;a href=&quot;#springAlibaba路由网关&quot; class=&quot;headerlink&quot; title=&quot;springAlibaba路由网关&quot;&gt;&lt;/a&gt;springAlibaba
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="http://djwwj.top/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="http://djwwj.top/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="http://djwwj.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="http://djwwj.top/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="统一认证" scheme="http://djwwj.top/tags/%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81/"/>
    
      <category term="统一网关" scheme="http://djwwj.top/tags/%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli服务容灾</title>
    <link href="http://djwwj.top/2019/09/24/2019-09-24-SpringAli%E6%9C%8D%E5%8A%A1%E5%AE%B9%E7%81%BE/"/>
    <id>http://djwwj.top/2019/09/24/2019-09-24-SpringAli服务容灾/</id>
    <published>2019-09-24T14:07:51.520Z</published>
    <updated>2019-10-09T09:05:57.122Z</updated>
    
    <content type="html"><![CDATA[<p>如何有效的监控服务,是我们要考量的问题。使用Sentinel提供解决方案.减少我们的人力成本和物力成本</p><h1 id="springAlibaba服务熔断"><a href="#springAlibaba服务熔断" class="headerlink" title="springAlibaba服务熔断"></a>springAlibaba服务熔断</h1><ol><li>为何出现服务熔断</li><li>使用Sentinel提供解决方案</li><li>Sentinel特征</li><li>Fegin使用Sentinel</li><li>使用熔断器表盘进行监控</li></ol><h2 id="为何出现服务熔断"><a href="#为何出现服务熔断" class="headerlink" title="为何出现服务熔断"></a>为何出现服务熔断</h2><p><strong><em>1.微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 RPC 协议相互调用,在springcloud我们可以使用feign进行服务的调用。而为了保证服务的高可用,我们会把服务部署到集群上面,但是由于网络的原因或者自身出现的不可控的情况。会出现调用该服务出现阻塞</em></strong></p><p><strong><em>2.出现阻塞后,如果大量的请求涌入进来,而服务故障得不到及时处理,容器的西安城资源就会消耗完毕,导致服务瘫痪,因为服务之间在进行相互的调用,会产生对等依赖特性,也就会影响其它的服务.这就会造成我们所说的雪崩效应</em></strong></p><p><strong><em>3.如何解决:提出了熔断器模式.当到达一定的阈值的时候,进行一个特殊的处理。如同曾经证券市场推出来的熔断机制,虽然没有坚挺很久</em></strong></p><h2 id="使用Sentinel提供解决方案"><a href="#使用Sentinel提供解决方案" class="headerlink" title="使用Sentinel提供解决方案"></a>使用Sentinel提供解决方案</h2><p><strong><em>1.服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</em></strong></p><p><strong><em>2.Sentinel 组件，实现了熔断器模式，SpringCloud对这一组件进行了整合。在微服务架构中，一个请求需要调用多个服务是非常常见的，较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值熔断器将会被打开。熔断器打开后，为了避免连锁故障，通过 fallback 方法可以直接返回一个固定值。</em></strong></p><h2 id="Sentinel-的特征"><a href="#Sentinel-的特征" class="headerlink" title="Sentinel 的特征"></a>Sentinel 的特征</h2><ol><li>丰富的应用场景：秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等</li><li>完备的实时监控： Sentinel同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况</li><li>Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与SpringCloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel。</li><li>完善的 SPI 扩展点：Sentinel提供简单易用、完善的SPI扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</li></ol><h2 id="Fegin使用Sentinel"><a href="#Fegin使用Sentinel" class="headerlink" title="Fegin使用Sentinel"></a>Fegin使用Sentinel</h2><h3 id="使用feign项目中引用Sentinel"><a href="#使用feign项目中引用Sentinel" class="headerlink" title="使用feign项目中引用Sentinel"></a>使用feign项目中引用Sentinel</h3><blockquote><p>pom.xml文件添加如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="在全局配置文件添加"><a href="#在全局配置文件添加" class="headerlink" title="在全局配置文件添加"></a>在全局配置文件添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#sentinel</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><h3 id="创建熔断类实现对应的service的接口"><a href="#创建熔断类实现对应的service的接口" class="headerlink" title="创建熔断类实现对应的service的接口"></a>创建熔断类实现对应的service的接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.feign.fallback;</span><br><span class="line"></span><br><span class="line">import com.wwj.consumer.feign.service.ProviderService;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ProviderServiceFallback  implements ProviderService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String echo(String message) &#123;</span><br><span class="line">        return &quot;sentinel fallback&quot;;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Feign中的Service中增加fallback指定类"><a href="#在Feign中的Service中增加fallback指定类" class="headerlink" title="在Feign中的Service中增加fallback指定类"></a>在Feign中的Service中增加fallback指定类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1.通过@FeignClient伪造一个http客户端请求已经注册的服务</span><br><span class="line"> * 2.接口中的方法需要去匹配已经注册的服务方里面的请求</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;nacos-provider&quot;,fallback = ProviderServiceFallback.class)</span><br><span class="line">public interface ProviderService &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/&#123;message&#125;&quot;)</span><br><span class="line">    String echo(@PathVariable String message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><strong>正常启动消费者和提供者</strong></p><p><img src="/images/resources/19E6CB9FA9ED9F9CA810109B0FB5800F.jpg" alt="IMAGE"></p><p><strong><em>关闭提供者(模拟服务提供方崩溃)</em></strong></p><p><img src="/images/resources/9D90EF13076AB9C50D324626746CE612.jpg" alt="IMAGE"></p><h2 id="使用熔断器表盘进行监控"><a href="#使用熔断器表盘进行监控" class="headerlink" title="使用熔断器表盘进行监控"></a>使用熔断器表盘进行监控</h2><h3 id="表盘监控说明"><a href="#表盘监控说明" class="headerlink" title="表盘监控说明"></a>表盘监控说明</h3><p><strong><em>Sentinel 控制台提供一个轻量级的控制台，它提供机器发现、单机资源实时监控、集群资源汇总，以及规则管理的功能。您只需要对应用进行简单的配置，就可以使用这些功能。</em></strong></p><p><strong><em>注意: 集群资源汇总仅支持 500 台以下的应用集群，有大概 1 - 2 秒的延时。</em></strong></p><h3 id="下载切换到对等的目录并打包"><a href="#下载切换到对等的目录并打包" class="headerlink" title="下载切换到对等的目录并打包"></a>下载切换到对等的目录并打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载源码</span><br><span class="line">git clone https://github.com/alibaba/Sentinel.git</span><br><span class="line"></span><br><span class="line">#切换目录</span><br><span class="line">cd /Users/Yun/Sentinel/sentinel-dashboard</span><br><span class="line"># 编译打包</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>或者</p><p><a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">下载最新控制台jar包</a></p><h3 id="切换到控制面板目录执行程序"><a href="#切换到控制面板目录执行程序" class="headerlink" title="切换到控制面板目录执行程序"></a>切换到控制面板目录执行程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p><img src="/images/resources/24536BBFF0C40763CA180D8B15D19306.jpg" alt="IMAGE"></p><h3 id="在Feign客户端的application-yml-和-pom-xml"><a href="#在Feign客户端的application-yml-和-pom-xml" class="headerlink" title="在Feign客户端的application.yml 和 pom.xml"></a>在Feign客户端的application.yml 和 pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer-feign</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">        # 当前应用被sentinel监控的端口</span><br><span class="line">        port: 8719</span><br><span class="line"></span><br><span class="line">#sentinel</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9092</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p> <strong><em>端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。比如 Sentinel 控制台添加了 1 个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server 再将规则注册到 Sentinel 中。</em></strong></p><p><strong><em>同理可以把监控添加给服务方或者消费方</em></strong></p><p><img src="/images/resources/C76129CBBD1A4195AE9881DDCBDD91BA.jpg" alt="IMAGE"></p><p><strong>可以看到利用哨兵对服务进行了监控,可设置QPS</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何有效的监控服务,是我们要考量的问题。使用Sentinel提供解决方案.减少我们的人力成本和物力成本&lt;/p&gt;
&lt;h1 id=&quot;springAlibaba服务熔断&quot;&gt;&lt;a href=&quot;#springAlibaba服务熔断&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="http://djwwj.top/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="http://djwwj.top/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="http://djwwj.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="http://djwwj.top/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="哨兵" scheme="http://djwwj.top/tags/%E5%93%A8%E5%85%B5/"/>
    
      <category term="服务容灾" scheme="http://djwwj.top/tags/%E6%9C%8D%E5%8A%A1%E5%AE%B9%E7%81%BE/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli服务消费</title>
    <link href="http://djwwj.top/2019/09/18/2019-09-18-SpringAli%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9/"/>
    <id>http://djwwj.top/2019/09/18/2019-09-18-SpringAli服务消费/</id>
    <published>2019-09-18T11:58:09.696Z</published>
    <updated>2019-10-09T09:05:52.857Z</updated>
    
    <content type="html"><![CDATA[<p>微服务改变着我们的项目结构,影响深远</p><h1 id="Spring-Cloud-Alibaba-服务消费"><a href="#Spring-Cloud-Alibaba-服务消费" class="headerlink" title="Spring Cloud Alibaba 服务消费"></a>Spring Cloud Alibaba 服务消费</h1><ol><li>服务消费(原始方式)</li><li>服务消费(使用Feign)</li></ol><h2 id="服务消费-原始方式"><a href="#服务消费-原始方式" class="headerlink" title="服务消费(原始方式)"></a>服务消费(原始方式)</h2><blockquote><p>显示的使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问。</p></blockquote><h3 id="创建新的moudle模块-消费者-pom-xml如下"><a href="#创建新的moudle模块-消费者-pom-xml如下" class="headerlink" title="创建新的moudle模块(消费者),pom.xml如下"></a>创建新的moudle模块(消费者),pom.xml如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;nacos-consumer&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.consumer.ConsumerApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="安装标准构建启动类"><a href="#安装标准构建启动类" class="headerlink" title="安装标准构建启动类"></a>安装标准构建启动类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建一个ConsumerConfiguration配置类-注入RestTemplate对象"><a href="#构建一个ConsumerConfiguration配置类-注入RestTemplate对象" class="headerlink" title="构建一个ConsumerConfiguration配置类,注入RestTemplate对象"></a>构建一个ConsumerConfiguration配置类,注入RestTemplate对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ConsumerConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写controller"><a href="#编写controller" class="headerlink" title="编写controller"></a>编写controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.client.ServiceInstance;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class ConsumerController &#123;</span><br><span class="line">    //注入启动客户端对象</span><br><span class="line">    @Autowired</span><br><span class="line">    private LoadBalancerClient loadBalancerClient;</span><br><span class="line">    //注入RestTemplate模板</span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    //可以用来获取当前应用名称</span><br><span class="line">    @Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br><span class="line">    private String appName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/app/name&quot;)</span><br><span class="line">    public String echo() &#123;</span><br><span class="line">        //使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问</span><br><span class="line">        //选择服务名字</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(&quot;provider&quot;);</span><br><span class="line">        //拼接restful请求</span><br><span class="line">        String url = String.format(&quot;http://%s:%s/echo/%s&quot;, serviceInstance.getHost(), serviceInstance.getPort(), appName);</span><br><span class="line">        return restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建应用程序启动文件-application-yml"><a href="#构建应用程序启动文件-application-yml" class="headerlink" title="构建应用程序启动文件 application.yml"></a>构建应用程序启动文件 application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9091</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><p><img src="/images/resources/43F93F91FD29ED95022EFDF09AD472F8.jpg" alt="IMAGE"></p><h3 id="端点检查-http-localhost-9091-actuator-nacos-discovery"><a href="#端点检查-http-localhost-9091-actuator-nacos-discovery" class="headerlink" title="端点检查 http://localhost:9091/actuator/nacos-discovery"></a>端点检查 <code>http://localhost:9091/actuator/nacos-discovery</code></h3><p><img src="/images/resources/B2645760C214ED73B67686309F828862.jpg" alt="IMAGE"></p><h2 id="服务消费-使用Feign"><a href="#服务消费-使用Feign" class="headerlink" title="服务消费(使用Feign)"></a>服务消费(使用Feign)</h2><blockquote><p>概论</p></blockquote><p><strong>Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，Nacos 也很好的兼容了 Feign，默认实现了负载均衡的效果</strong></p><ol><li>使用接口很容易抽象理解</li><li>集成Ribbon达到负载均衡</li></ol><h3 id="构建新的moudle-pom-xml内容如下"><a href="#构建新的moudle-pom-xml内容如下" class="headerlink" title="构建新的moudle,pom.xml内容如下"></a>构建新的moudle,pom.xml内容如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;nacos-consumer-feign&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.consumer.feign.ConsumerFeignApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="构建启动类"><a href="#构建启动类" class="headerlink" title="构建启动类"></a>构建启动类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ConsumerFeignApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConsumerFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过feign调用远程服务"><a href="#通过feign调用远程服务" class="headerlink" title="通过feign调用远程服务"></a>通过feign调用远程服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1.通过@FeignClient伪造一个http客户端请求已经注册的服务</span><br><span class="line"> * 2.接口中的方法需要去匹配已经注册的服务方里面的请求</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;nacos-provider&quot;)</span><br><span class="line">public interface ProviderService &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/&#123;message&#125;&quot;)</span><br><span class="line">    String echo(@PathVariable String message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller注入对应的服务"><a href="#controller注入对应的服务" class="headerlink" title="controller注入对应的服务"></a>controller注入对应的服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class ProviderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProviderService providerService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;echo&quot;)</span><br><span class="line">    public String echo() &#123;</span><br><span class="line">        return providerService.echo(&quot;Feign Client&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局配置文件声明如下"><a href="#全局配置文件声明如下" class="headerlink" title="全局配置文件声明如下"></a>全局配置文件声明如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer-feign</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9092</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><p><img src="/images/resources/5112FE94545FF448A637449A87F9B9F9.jpg" alt="IMAGE"></p><h3 id="测试负载均衡"><a href="#测试负载均衡" class="headerlink" title="测试负载均衡"></a>测试负载均衡</h3><ol><li>服务端启动多个示例</li><li><code>多次访问localhost:9092/echo</code></li></ol><p><img src="/images/resources/A34FBA256FC9760178711CC44CB6A8D1.jpg" alt="IMAGE"></p><p><img src="/images/resources/493249EBD7F4033880035D1B26D18E7A.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微服务改变着我们的项目结构,影响深远&lt;/p&gt;
&lt;h1 id=&quot;Spring-Cloud-Alibaba-服务消费&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba-服务消费&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Ali
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="http://djwwj.top/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="http://djwwj.top/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="http://djwwj.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="http://djwwj.top/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli服务注册</title>
    <link href="http://djwwj.top/2019/09/16/2019-09-16-SpringAli%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
    <id>http://djwwj.top/2019/09/16/2019-09-16-SpringAli服务注册/</id>
    <published>2019-09-16T11:06:20.791Z</published>
    <updated>2019-10-09T09:05:43.045Z</updated>
    
    <content type="html"><![CDATA[<p>微服务改变着我们的项目结构,影响深远</p><h1 id="Spring-Cloud-Alibaba-服务注册与发现"><a href="#Spring-Cloud-Alibaba-服务注册与发现" class="headerlink" title="Spring Cloud Alibaba 服务注册与发现"></a>Spring Cloud Alibaba 服务注册与发现</h1><ol><li>Nacos简介</li><li>Nacos安装</li><li>测试Nacos</li><li>整合Nacos(含服务提供者和消费者)</li><li>重温nacos概念和常用配置项</li></ol><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理<br>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p><a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener">官网链接</a></p><h2 id="Nacos安装"><a href="#Nacos安装" class="headerlink" title="Nacos安装"></a>Nacos安装</h2><blockquote><p>1.下载源码</p></blockquote><p><code>git clone https://github.com/alibaba/nacos.git</code></p><blockquote><p>2.安装</p></blockquote><p><code>mvn -Prelease-nacos clean install -U</code></p><h2 id="测试Nacos"><a href="#测试Nacos" class="headerlink" title="测试Nacos"></a>测试Nacos</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#切换至nacos下的bin目录</span><br><span class="line">/Users/Yun/nacos/distribution/target/nacos-server-1.1.3/nacos/bin</span><br><span class="line"># Linux</span><br><span class="line">./startup.sh -m standalone</span><br></pre></td></tr></table></figure><p><strong>注意:访问端口为8848/nacos,用户名和密码都为nacos</strong></p><p><img src="/images/resources/5330866AFD7E285AE5DE53ED00BA6435.jpg" alt="IMAGE"></p><h2 id="整合Nacos"><a href="#整合Nacos" class="headerlink" title="整合Nacos"></a>整合Nacos</h2><blockquote><p>1.新建maven项目,pom.xml如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    项目信息--&gt;</span><br><span class="line">    &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;nacos-provider&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;!--    项目继承--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">&lt;!--    项目版本--&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- Environment Settings --&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Settings --&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;spring-cloud-alibaba.version&gt;0.2.1.RELEASE&lt;/spring-cloud-alibaba.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">&lt;!--    项目管理--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    构建环境--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- Compiler 插件, 设定 JDK 版本 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;showWarnings&gt;true&lt;/showWarnings&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 打包 jar 文件时，配置 manifest 文件，加入 lib 包的 jar 依赖 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                        &lt;addMavenDescriptor&gt;false&lt;/addMavenDescriptor&gt;</span><br><span class="line">                    &lt;/archive&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;archive&gt;</span><br><span class="line">                                &lt;manifest&gt;</span><br><span class="line">                                    &lt;!-- Add directory entries --&gt;</span><br><span class="line">                                    &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;</span><br><span class="line">                                    &lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt;</span><br><span class="line">                                    &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class="line">                                &lt;/manifest&gt;</span><br><span class="line">                            &lt;/archive&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- resource --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- install --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- clean --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ant --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- dependency --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- Java Document Generate --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;phase&gt;prepare-package&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- YUI Compressor (CSS/JS压缩) --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;yuicompressor-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;1.5.1&lt;/version&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;phase&gt;prepare-package&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;compress&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                    &lt;configuration&gt;</span><br><span class="line">                        &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                        &lt;jswarn&gt;false&lt;/jswarn&gt;</span><br><span class="line">                        &lt;nosuffix&gt;true&lt;/nosuffix&gt;</span><br><span class="line">                        &lt;linebreakpos&gt;30000&lt;/linebreakpos&gt;</span><br><span class="line">                        &lt;force&gt;true&lt;/force&gt;</span><br><span class="line">                        &lt;includes&gt;</span><br><span class="line">                            &lt;include&gt;**/*.js&lt;/include&gt;</span><br><span class="line">                            &lt;include&gt;**/*.css&lt;/include&gt;</span><br><span class="line">                        &lt;/includes&gt;</span><br><span class="line">                        &lt;excludes&gt;</span><br><span class="line">                            &lt;exclude&gt;**/*.min.js&lt;/exclude&gt;</span><br><span class="line">                            &lt;exclude&gt;**/*.min.css&lt;/exclude&gt;</span><br><span class="line">                        &lt;/excludes&gt;</span><br><span class="line">                    &lt;/configuration&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 资源文件配置 --&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;excludes&gt;</span><br><span class="line">                    &lt;exclude&gt;**/*.java&lt;/exclude&gt;</span><br><span class="line">                &lt;/excludes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;aliyun-repos&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Aliyun Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;sonatype-repos&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Sonatype Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://oss.sonatype.org/content/groups/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;sonatype-repos-s&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Sonatype Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-snapshots&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Snapshots&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">            &lt;id&gt;aliyun-repos&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Aliyun Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.在该项目上新增moudle（nacos-provider）</p></blockquote><ol><li>pom.xml文件如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;nacos-provider&lt;/artifactId&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.provider.ProviderApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>2.启动类如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProviderApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.控制层代码以及yml配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class Pcontroller &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    private String port;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/&#123;message&#125;&quot;)</span><br><span class="line">    public String echo(@PathVariable String message) &#123;</span><br><span class="line">        return &quot;Hello Nacos Discovery &quot; + message + &quot; , From port :&quot; + port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: nacos-provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>分别启动服务端和程序端</li></ol><p><img src="/images/resources/D0E5B22F3607B5BD03822F5D62B21EF7.jpg" alt="IMAGE"></p><p><img src="/images/resources/70BCF443A593A11062AEAB2480CF6255.jpg" alt="IMAGE"></p><ol start="5"><li>同时我们也可以通过服务端点进行检查</li></ol><p><code>http://ip:port/actuator/nacos-discovery</code></p><p><img src="/images/resources/D4DE1364B1EED0CDCA201E13D50921AF.jpg" alt="IMAGE"></p><p>1、subscribe: 显示了当前有哪些服务订阅者<br>2、NacosDiscoveryProperties: 显示了当前服务实例关于 Nacos 的基础配置</p><ol start="6"><li>nacos常用的配置项</li></ol><p><img src="/images/resources/3ED01D0079EC0E46709C6A2D319EC859.jpg" alt="IMAGE"></p><p><img src="/images/resources/AA5B04DADE76F0F749B8BB40F7D74EE7.jpg" alt="IMAGE"></p><ol start="7"><li>重温nacos的概念</li></ol><blockquote><p>服务 (Service)<br>服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。Nacos 支持主流的服务生态，如 Kubernetes Service、gRPC|Dubbo RPC Service 或者 Spring Cloud RESTful Service.</p></blockquote><blockquote><p>服务注册中心 (Service Registry)<br>服务注册中心，它是服务，其实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。</p></blockquote><blockquote><p>服务元数据 (Service Metadata)<br>服务元数据是指包括服务端点(endpoints)、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据</p></blockquote><blockquote><p>服务提供方 (Service Provider)<br>是指提供可复用和可调用服务的应用方</p></blockquote><blockquote><p>服务消费方 (Service Consumer)<br>是指会发起对某个服务调用的应用方</p></blockquote><blockquote><p>配置 (Configuration)<br>在系统开发过程中通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成这个步骤。配置变更是调整系统运行时的行为的有效手段之一。</p></blockquote><blockquote><p>配置管理 (Configuration Management)<br>在数据中心中，系统中所有配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动统称为配置管理。</p></blockquote><blockquote><p>名字服务 (Naming Service)<br>提供分布式系统中所有对象(Object)、实体(Entity)的“名字”到关联的元数据之间的映射管理服务，例如 ServiceName -&gt; Endpoints Info, Distributed Lock Name -&gt; Lock Owner/Status Info, DNS Domain Name -&gt; IP List, 服务发现和 DNS 就是名字服务的2大场景。</p></blockquote><blockquote><p>配置服务 (Configuration Service)<br>在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微服务改变着我们的项目结构,影响深远&lt;/p&gt;
&lt;h1 id=&quot;Spring-Cloud-Alibaba-服务注册与发现&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba-服务注册与发现&quot; class=&quot;headerlink&quot; title=&quot;Spring Clo
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="http://djwwj.top/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="http://djwwj.top/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="http://djwwj.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="http://djwwj.top/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringAli准备工作</title>
    <link href="http://djwwj.top/2019/09/16/2019-09-16-SpringAli%E5%87%86%E5%A4%87/"/>
    <id>http://djwwj.top/2019/09/16/2019-09-16-SpringAli准备/</id>
    <published>2019-09-16T11:06:20.782Z</published>
    <updated>2019-10-09T09:05:47.376Z</updated>
    
    <content type="html"><![CDATA[<p>微服务改变着我们的项目结构,影响深远</p><h1 id="Spring-Cloud-Alibaba-准备"><a href="#Spring-Cloud-Alibaba-准备" class="headerlink" title="Spring Cloud Alibaba(准备)"></a>Spring Cloud Alibaba(准备)</h1><ol><li>springCloud-alibaba(组件简介)</li><li>使用idea创建分模块创建统一的依赖管理</li></ol><h2 id="springCloud-alibaba-组件简介"><a href="#springCloud-alibaba-组件简介" class="headerlink" title="springCloud-alibaba(组件简介)"></a>springCloud-alibaba(组件简介)</h2><blockquote><p>1.服务限流降级</p></blockquote><p>默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</p><blockquote><p>2.服务注册与发现</p></blockquote><p>适配 SpringCloud 服务注册与发现标准，默认集成了 Ribbon的支持</p><blockquote><p>3.分布式配置管理</p></blockquote><p>支持分布式系统中的外部化配置，配置更改时自动刷新。</p><p><strong><em>其余的功能请参照官方文档<a href="https://github.com/alibaba/spring-cloud-alibaba" target="_blank" rel="noopener">阿里官方文档</a></em></strong></p><h2 id="使用idea创建分模块创建统一的依赖管理"><a href="#使用idea创建分模块创建统一的依赖管理" class="headerlink" title="使用idea创建分模块创建统一的依赖管理"></a>使用idea创建分模块创建统一的依赖管理</h2><blockquote><p>1.构建目录结构</p></blockquote><p><img src="/images/resources/0BBE42FE095441ADE2F13ABA7A856BA5.jpg" alt="IMAGE"></p><blockquote><p>2.添加对应的pom.xml文件加入到maven管理中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    项目信息--&gt;</span><br><span class="line">    &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;!--    项目继承--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">&lt;!--    项目版本--&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- Environment Settings --&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Settings --&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.SR1&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;spring-cloud-alibaba.version&gt;2.1.0.RELEASE&lt;/spring-cloud-alibaba.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">&lt;!--    项目管理--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微服务改变着我们的项目结构,影响深远&lt;/p&gt;
&lt;h1 id=&quot;Spring-Cloud-Alibaba-准备&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba-准备&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Alibaba
      
    
    </summary>
    
    
      <category term="Spring微服务" scheme="http://djwwj.top/categories/Spring%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring全家桶" scheme="http://djwwj.top/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
      <category term="微服务" scheme="http://djwwj.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="高效开发" scheme="http://djwwj.top/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis1</title>
    <link href="http://djwwj.top/2019/09/10/2019-09-10-Mybatis(%E7%BC%98)/"/>
    <id>http://djwwj.top/2019/09/10/2019-09-10-Mybatis(缘)/</id>
    <published>2019-09-10T05:04:20.160Z</published>
    <updated>2019-10-09T09:12:22.774Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis是一个优秀的开源框架,半自动ORM映射,能够适配各种业务需求</p><h1 id="mybatis的路线图-上"><a href="#mybatis的路线图-上" class="headerlink" title="mybatis的路线图(上)"></a>mybatis的路线图(上)</h1><ol><li>mybatis简介</li><li>mybatis框架执行原理</li><li>mybatis初次的入门案例</li><li>mybatis配置文件详解</li><li>mybatis 方法多参数的处理</li><li>mybatis返回主键值</li><li>sql代码段</li><li>自定义结果类型ResultMap</li></ol><hr><h2 id="mybatis简介"><a href="#mybatis简介" class="headerlink" title="mybatis简介"></a>mybatis简介</h2><p><strong>mybatis本身是一个轻量级的持久化层框架(1.何为持久化。2.何为序列化操作),本身也是基于JDBC的封装(JDBC的链接步骤).开发者本身更多的关注SQL语句的执行效率,除此之外mybatis也是一个半自动的ORM映射框架(支持一对一,一对多的实现,多对多采用两个一对多进行实现)</strong></p><p><strong>注意:实际的开发过程中,因为大量的关系相互映射的存在,在查询数据这一块不便于后期项目本身的项目维护扩展。所以更多的方向是思考数据库中的设计和利用本身mybatis提供的数据自定义封装和其它的类似缓存机制的特点,解决开发中的数据设计结构</strong></p><blockquote><p>mybatis的优势</p></blockquote><ol><li><p>比起jdbc的操作,减少了一些重复的代码量工作，也方便能够集成到后期的管理框架中</p></li><li><p>mybatis提供在XML中编写sql语句,不直接入侵在代码中(方便分类修改）</p></li><li><p>分别提供的xml标签和mapper标签(xml标签可实现动态SQL语句,也就是嵌入条件判断和循环,比较类似存储函数),mapper标签支持对象正确的解析至数据库中</p></li></ol><hr><h2 id="mybatis框架执行原理"><a href="#mybatis框架执行原理" class="headerlink" title="mybatis框架执行原理"></a>mybatis框架执行原理</h2><blockquote><p>sqlConfigXMl配置文件(一个全局的配置文件)(可配置映射文件和连接数据源和事务等)</p></blockquote><blockquote><p>通过配置文件构建出可构建操作数据会话的会话工厂,也就是我们常说的sqlSessionFactory(涉及工厂模式代码设计)</p></blockquote><blockquote><p>通过sqlSessionFactory生产出相互独立的sqlsession,为什么是独立的会话，既然是独立的会话，那也有全局的会话(简单提及缓存)进行数据库层面上面的操作</p></blockquote><blockquote><p>sqlsession之所以能够操作,依赖一个叫Executor的执行器,通过该执行器进行数据库的CRUD操作</p></blockquote><blockquote><p>Executor的执行器需要操作CRUD的动作由谁而来，就是由mapperstatement对象读取mapper映射文件</p></blockquote><p><strong>我们可以看到在配置xml文件的时候,可以支持多种对象级数据参数</strong></p><hr><h2 id="mybatis初次的入门案例"><a href="#mybatis初次的入门案例" class="headerlink" title="mybatis初次的入门案例"></a>mybatis初次的入门案例</h2><ol><li>配置一个log4j.properties(可选)方便我们监听到mybatis进行的动作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\# set level</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"></span><br><span class="line">\# Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><ol start="2"><li>构建一个普通的web项目,jar包结构如下:</li></ol><p><img src="/images/resources/7A7648307DEDBBE8133B158F2BA0AE99.jpg" alt="IMAGE"></p><ol start="3"><li>src目录下构建mybatis的全局配置文件mybatisCfg.xml,配置文件如下:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 数据库连接环境配置 --&gt;</span><br><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">&lt;!-- 标明mybaitis环境 id唯一 --&gt;</span><br><span class="line">&lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">&lt;!-- JDBC – 这个配置直接简单使用了 JDBC 的提交和回滚设置。 它依赖于从数据源得 到的连接来管理事务范围。JDBC默认是自动提交 --&gt;</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">&lt;!-- 采用数据库连接池 --&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">&lt;!-- 避免环境的不统一，造成数据操作乱码 --&gt;</span><br><span class="line">&lt;property name=&quot;url&quot;</span><br><span class="line">value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br><span class="line">&lt;!-- 添加需要被映射的文件 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=&quot;com/wwj/dao/PersonMapper.xml&quot; /&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>构建模型类 com.wwj.model 和 数据库表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line">/**</span><br><span class="line"> * 基本的模型类</span><br><span class="line"> * @author wwj</span><br><span class="line"> *对象序列化是一个用于将对象状态转换为字节流的过程，可以将其保存到磁盘文件中或通过网络发送到任何其他程序；从字节流创建对象的相反的过程称为反序列化。而创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。</span><br><span class="line"> *无需序列化的变量使用transient</span><br><span class="line"> */</span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line">//Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的</span><br><span class="line">//这里是用来表明版本的一致性</span><br><span class="line">private static final long serialVersionUID = 2680875170108959939L;</span><br><span class="line"></span><br><span class="line">private  Integer   id;</span><br><span class="line">private  String name;</span><br><span class="line">private  Date bir;</span><br><span class="line">private  String address;</span><br><span class="line">//自行get和set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/9811E4C49FDA9BE87152DC3AEFEC5B03.jpg" alt="IMAGE"></p><ol start="4"><li>创建数据层的操作也就是mapper的操作接口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * person层的操作</span><br><span class="line"> * </span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface PersonDao &#123;</span><br><span class="line">/**</span><br><span class="line"> * 新增用户</span><br><span class="line"> * </span><br><span class="line"> * @param p</span><br><span class="line"> *            传入需要新增的对象</span><br><span class="line"> * @return 0,1代表结果</span><br><span class="line"> */</span><br><span class="line">int savePerson(Person p);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 更新用户对象</span><br><span class="line"> * @param p 需要被更新的对象</span><br><span class="line"> * @return 0,1代表结果</span><br><span class="line"> */</span><br><span class="line">int updatePerson(Person p);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据用户id进行删除</span><br><span class="line"> * @param id  唯一用户id</span><br><span class="line"> * @return  0，1代表结果</span><br><span class="line"> */</span><br><span class="line">int  deletePersonById(int  id);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取所有的信息</span><br><span class="line"> * @return  所有的人员信息</span><br><span class="line"> */</span><br><span class="line">List&lt;Person&gt;  getPersonInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>构建对应的mapper映射文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.PersonDao&quot;&gt;</span><br><span class="line">&lt;insert id=&quot;savePerson&quot; parameterType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">insert into</span><br><span class="line">person(name,address,bir) values(#&#123;name&#125;,#&#123;address&#125;,#&#123;bir&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;update id=&quot;updatePerson&quot; parameterType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">update person set</span><br><span class="line">name=#&#123;p.name&#125;,address=#&#123;address&#125;,bir=#&#123;bir&#125;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;delete id=&quot;deletePersonById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">delete from person</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getPersonInfos&quot; resultType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">select * from person</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>编码测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试mybatis的CRUD操作</span><br><span class="line"> * </span><br><span class="line"> * @author wwj</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class TestMybatis &#123;</span><br><span class="line">public static void main(String[] args) throws IOException, ParseException &#123;</span><br><span class="line">/*</span><br><span class="line"> * 日期上面的处理</span><br><span class="line"> */</span><br><span class="line">SimpleDateFormat sf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = sf.format(new Date());</span><br><span class="line">Date parse = sf.parse(format);</span><br><span class="line"></span><br><span class="line">InputStream is = Resources.getResourceAsStream(&quot;mybatisCfg.xml&quot;);</span><br><span class="line">SqlSessionFactory build = new SqlSessionFactoryBuilder().build(is);</span><br><span class="line">// 生成 session</span><br><span class="line">SqlSession session = build.openSession();</span><br><span class="line">Person per = new Person();</span><br><span class="line">per.setName(&quot; 小王 &quot;);</span><br><span class="line">per.setAddress(&quot; 重庆 &quot;);</span><br><span class="line">per.setBir(parse);</span><br><span class="line">// 操作数据</span><br><span class="line">int insert = session.insert(&quot;savePerson&quot;,per);</span><br><span class="line">// 提交事务</span><br><span class="line">session.commit();</span><br><span class="line">// 关闭 session</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:mysql中设置为date支持的格式为yyyy-mm-dd,java中的date是格林威治时间</strong></p><p><strong>结果图示</strong></p><p><img src="/images/resources/CD9453D5EA517471A33213C84F600088.jpg" alt="IMAGE"></p><p><strong>同理依次测试更新和删除,以及查询</strong></p><p><strong><em>更新的调用操作</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person per = new Person();</span><br><span class="line">per.setId(1);</span><br><span class="line">per.setName(&quot; 小张 &quot;);</span><br><span class="line">per.setAddress(&quot; 重庆 &quot;);</span><br><span class="line">per.setBir(parse);</span><br><span class="line">// 操作数据</span><br><span class="line">int update = session.update(&quot;updatePerson&quot;, per);</span><br></pre></td></tr></table></figure><p><img src="/images/resources/22CE8444C2704500434DEB997985252E.jpg" alt="IMAGE"></p><p><strong><em>查询的调用操作</em></strong></p><p><code>List&lt;Person&gt; pers  = session.selectList(&quot;getPersonInfos&quot;);</code></p><p><strong><em>删除的调用操作</em></strong></p><p><code>int de  = session.delete(&quot;deletePersonById&quot;, 1);</code></p><hr><h2 id="mybatis配置文件详解"><a href="#mybatis配置文件详解" class="headerlink" title="mybatis配置文件详解"></a>mybatis配置文件详解</h2><h3 id="全局配置文件详解"><a href="#全局配置文件详解" class="headerlink" title="全局配置文件详解"></a>全局配置文件详解</h3><ul><li>environments环境配置,可以配置多种环境 default指定使用某种环境.</li><li>transactionManager事务管理器有两种取值JDBC,managed.我们选择jdbc即可</li><li>dataSource配置数据源,采用默认的连接池选择项POOLED</li><li>mappers里面填入需要进行数据操作xml标签用于执行的动作</li><li>映射的数据操作文件需要和接口保持同个路径(可以把mapper当成接口的实现类)</li></ul><h3 id="映射文件详解"><a href="#映射文件详解" class="headerlink" title="映射文件详解"></a>映射文件详解</h3><ul><li>namespace表明需要对应动作的空间即是接口所在的全路径名称</li><li>id与接口中的方法保持一致</li><li>parameterType填写自定义对象的全路径名称</li><li>接收参数采用 #{objAttrName}</li></ul><hr><h2 id="mybatis方法多参数接收-代码示例）"><a href="#mybatis方法多参数接收-代码示例）" class="headerlink" title="mybatis方法多参数接收(代码示例）"></a>mybatis方法多参数接收(代码示例）</h2><h4 id="索引接收-了解即可"><a href="#索引接收-了解即可" class="headerlink" title="索引接收(了解即可)"></a>索引接收(了解即可)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> List&lt;Person&gt;  getPersonInfosByNameAndID(String name ,int id);</span><br><span class="line">&lt;select id=&quot;getPersonInfosByNameAndID&quot; &gt;</span><br><span class="line">select * from person where name = #&#123;0&#125; and id = #&#123;1&#125; </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="map接收-重点"><a href="#map接收-重点" class="headerlink" title="map接收(重点)"></a>map接收(重点)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    *  根据map进行查询</span><br><span class="line">    * @param attrs</span><br><span class="line">    * key1 id  key2 name</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   List&lt;Person&gt;  getPersonInfosByMap(Map attrs);</span><br><span class="line">   //------------------动作实现</span><br><span class="line"> &lt;select id=&quot;getPersonInfosByMap&quot;  parameterType=&quot;java.util.Map&quot; resultType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">select * from person where id =</span><br><span class="line">#&#123;id&#125; and name = #&#123;name&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">  //----------------调用测试</span><br><span class="line">  Map&lt;String,Object&gt;  attrs = new HashMap&lt;&gt;();</span><br><span class="line">attrs.put(&quot;id&quot;, 2);</span><br><span class="line">attrs.put(&quot;name&quot;, &quot;小王&quot;);</span><br><span class="line">session.selectList(&quot;getPersonInfosByMap&quot;, attrs);</span><br></pre></td></tr></table></figure><h4 id="注解-Param接收-重点"><a href="#注解-Param接收-重点" class="headerlink" title="注解@Param接收(重点)"></a>注解@Param接收(重点)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    * 根据用户唯一id查询信息</span><br><span class="line">    * @param id</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   Person  getPersonInfo(@Param(&quot;pid&quot;) int id);</span><br><span class="line">   //---------------动作实现</span><br><span class="line">&lt;select id=&quot;getPersonInfo&quot; </span><br><span class="line">resultType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">select * from person where id =</span><br><span class="line">#&#123;pid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">//---------调用测试</span><br><span class="line">session.selectOne(&quot;getPersonInfo&quot;, 2);</span><br></pre></td></tr></table></figure><hr><h2 id="mybatis立即返回主键值"><a href="#mybatis立即返回主键值" class="headerlink" title="mybatis立即返回主键值"></a>mybatis立即返回主键值</h2><p><strong><em>应用场景:当我们需要在当前事务插入数据后立即获取数据的主键id，做下一步额外操作，并且不因为并发高的情况下取错值而考虑</em></strong></p><p><strong>修改代码如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;insert id=&quot;savePerson&quot; parameterType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">&lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;&gt;</span><br><span class="line">select last_insert_id()</span><br><span class="line">&lt;/selectKey&gt;</span><br><span class="line">insert into</span><br><span class="line">person(name,address,bir) values(#&#123;name&#125;,#&#123;address&#125;,#&#123;bir&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">//------------------------------------------------------------</span><br><span class="line">// 操作数据</span><br><span class="line">Person p = new Person();</span><br><span class="line">p.setName(&quot;小小王&quot;);</span><br><span class="line">p.setBir(parse);</span><br><span class="line">int result = session.insert(&quot;savePerson&quot;, p);</span><br><span class="line">System.out.println(result);</span><br><span class="line">System.out.println(p.getId());</span><br></pre></td></tr></table></figure><ul><li>keyProperty=”返回主键的id的属性名”</li><li>resultType=”主键类型”</li><li>order=””什么时候执行，在SQL执行前还是执行后执行，两个取值：BEFORE和AFTER</li><li>select last_insert_id()取到最后生成的主键，只在当前事务中取</li></ul><h2 id="sql代码段"><a href="#sql代码段" class="headerlink" title="sql代码段"></a>sql代码段</h2><p><strong>如果场景中有大量的重复的公共sql语句,那么可以考虑使用<code>&lt;sql&gt;</code>声明公共的部分</strong></p><p><strong>示例如下:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    * sql片段</span><br><span class="line">    * @param id  根据用户的id查询姓名</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line"> String  getPersonName(@Param(&quot;pid&quot;) int id);</span><br><span class="line">   //--------动作实现</span><br><span class="line"> &lt;sql id=&quot;nameCol&quot;&gt; name&lt;/sql&gt;</span><br><span class="line">&lt;select id=&quot;getPersonName&quot;   resultType=&quot;java.lang.String&quot;&gt;</span><br><span class="line">select </span><br><span class="line">&lt;include refid=&quot;nameCol&quot;&gt;&lt;/include&gt;</span><br><span class="line">from person where</span><br><span class="line">id =</span><br><span class="line">#&#123;pid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">//--------测试调用</span><br><span class="line">String name  = session.selectOne(&quot;getPersonName&quot;,2);</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure><hr><h2 id="自定义结果类型ResultMap-开发中长期使用"><a href="#自定义结果类型ResultMap-开发中长期使用" class="headerlink" title="自定义结果类型ResultMap(开发中长期使用)"></a>自定义结果类型ResultMap(开发中长期使用)</h2><p><strong>应用场景:假设我们的实际开发过程中,数据表组合字段多,又不想关心配置映射关系,只想关心sql语句,以及结果,并且也关心sql语句的效率</strong></p><ol><li>假设2张表 person和card 1:m关系</li><li>连接查询需要person中的人名和card表中的卡号名字</li></ol><blockquote><p>操作步骤如下:</p></blockquote><ol><li>在任意自定对象上添加属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//----- 实体类</span><br><span class="line">public class Card &#123;</span><br><span class="line">private String cname;</span><br><span class="line">&#125;</span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line">private  Integer   id;</span><br><span class="line">private  String name;</span><br><span class="line">private  Date bir;</span><br><span class="line">private  String address;</span><br><span class="line">private  List&lt;Card&gt;  cards;</span><br><span class="line">&#125;</span><br><span class="line">//----构建自定义的resultmap封装 注意   collection(集合)association(联系)</span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.Person&quot; id=&quot;personRS&quot;&gt;</span><br><span class="line">&lt;!--column指向数据库列名 property指向pojo对象中字段名 --&gt;</span><br><span class="line">&lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;</span><br><span class="line">&lt;!-- property指的是在bean中字段名 ofType类的全定向名 --&gt;</span><br><span class="line">&lt;collection property=&quot;cards&quot; ofType=&quot;com.wwj.model.Card&quot;&gt;</span><br><span class="line">&lt;result column=&quot;cname&quot; property=&quot;cname&quot; /&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">//--------映射的动作实现</span><br><span class="line">    &lt;select id=&quot;getPersonsOfCard&quot; resultMap=&quot;personRS&quot;&gt;</span><br><span class="line">        select</span><br><span class="line">        person.name,card.cname</span><br><span class="line">        from person</span><br><span class="line">        INNER JOIN card</span><br><span class="line">        on person.id = card.pid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">//--------代码操作</span><br><span class="line">List&lt;Person&gt; persons = session.selectList(&quot;getPersonsOfCard&quot;);</span><br><span class="line">for (Person person : persons) &#123;</span><br><span class="line">System.out.println(person.getCards().get(0).getCname());</span><br><span class="line">System.out.println(person.getCards().get(1).getCname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意1:po代表和数据库一一对照的数据模型.vo代表业务逻辑和表现层之间需要的数据</em></strong></p><p><strong><em>注意2:如果需要暴露一部分数据出去的,可能还是会单独做接口和设计VO</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mybatis是一个优秀的开源框架,半自动ORM映射,能够适配各种业务需求&lt;/p&gt;
&lt;h1 id=&quot;mybatis的路线图-上&quot;&gt;&lt;a href=&quot;#mybatis的路线图-上&quot; class=&quot;headerlink&quot; title=&quot;mybatis的路线图(上)&quot;&gt;&lt;/a&gt;m
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://djwwj.top/categories/Mybatis/"/>
    
    
      <category term="数据持久化" scheme="http://djwwj.top/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
      <category term="orm" scheme="http://djwwj.top/tags/orm/"/>
    
      <category term="半自动" scheme="http://djwwj.top/tags/%E5%8D%8A%E8%87%AA%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nginx使用</title>
    <link href="http://djwwj.top/2019/08/23/2019-09-10-Nginx/"/>
    <id>http://djwwj.top/2019/08/23/2019-09-10-Nginx/</id>
    <published>2019-08-23T06:10:39.412Z</published>
    <updated>2019-10-09T09:05:21.344Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是一个非常优秀的服务器,它的魅力不仅是负载均衡,动静分离等等.</p><h1 id="Nginx使用"><a href="#Nginx使用" class="headerlink" title="Nginx使用"></a>Nginx使用</h1><ol><li>Nginx 简介</li><li>Nginx 安装与配置</li><li>部署 Nginx+Tomcat集群负载均衡</li><li>Nginx+Tomcat 动静分离</li><li>Nginx 负载均衡策略</li></ol><h2 id="Nginx-简介"><a href="#Nginx-简介" class="headerlink" title="Nginx 简介"></a>Nginx 简介</h2><p><strong>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</strong></p><p><strong><em>正向代理:客户端是清楚目标服务器的地址的，而目标服务器是不清楚来自客户端，它只知道来自哪个代理服务器，所以正向代理可以屏蔽或隐藏客户端的信息.</em></strong></p><p><strong><em>反向代理:客户端发来请求，先由反向代理服务器，然后按一定的规则分发到明确的服务器，而客户端不知道是哪台服务器。常常用nginx来作反向代理</em></strong></p><h2 id="Nginx安装和配置"><a href="#Nginx安装和配置" class="headerlink" title="Nginx安装和配置"></a>Nginx安装和配置</h2><blockquote><p>1.安装需要的依赖</p></blockquote><ol><li><code>yum install gcc-c++</code>  </li><li><code>yum -y install pcre*</code>  </li><li><code>yum -y install openssl*</code></li></ol><blockquote><p>2.下载nginx与解压到指定目录</p></blockquote><p><code>wget http://nginx.org/download/nginx-1.9.9.tar.gz</code></p><p><img src="/images/resources/6F29BFFE0A6F69CBACBA8CE60D9423F0.jpg" alt="IMAGE"></p><p><code>tar -zxvf nginx-1.9.9.tar.gz -C /root/nginx</code></p><blockquote><p>3.进入nginx目录设置安装目录</p></blockquote><ol><li><code>./configure --prefix=/root/nginx</code></li><li>执行<code>make</code></li><li>执行<code>make install</code></li></ol><blockquote><p> 4.启动nginx服务(在安装目录下的Sbin目录下)</p></blockquote><ol><li><p>执行<code>./nginx</code></p></li><li><p>执行 <code>ps -ef | grep nginx</code> 查看工作进程</p></li><li><p>常见的命令<code>./nginx -s stop/reload/quit</code></p></li></ol><p><strong>注意:如果访问报403错误.更改nginx.conf文件设置用户保持与当前一致</strong></p><p><img src="/images/resources/CBEE7854201BECC5CEC346091D59B51D.jpg" alt="IMAGE"></p><blockquote><p>最终结果:</p></blockquote><p><img src="/images/resources/ED552C278728E92A55EB620BB8A00B48.jpg" alt="IMAGE"></p><h2 id="部署-Nginx-Tomcat集群与负载均衡"><a href="#部署-Nginx-Tomcat集群与负载均衡" class="headerlink" title="部署 Nginx+Tomcat集群与负载均衡"></a>部署 Nginx+Tomcat集群与负载均衡</h2><blockquote><p>1.安装2个tomcat并修改端口号 (10088和10089)</p></blockquote><blockquote><p>2.在2个tomcat的root文件下放入index.jsp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"> &lt;%@ page isELIgnored =&quot;false&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Tomcat 10089&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>3.配置下nginx</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream wwj &#123;    </span><br><span class="line">   server    144.202.3.120:10088  weight=1; </span><br><span class="line">   server   144.202.3.120:10089  weight=2;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">        # root   html;</span><br><span class="line">         # index  index.html index.htm;</span><br><span class="line">          proxy_pass http://wwj;  </span><br><span class="line">          proxy_redirect default;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.依次启动tomcat以及nginx进行操作</p></blockquote><h2 id="Nginx-Tomcat-动静分离"><a href="#Nginx-Tomcat-动静分离" class="headerlink" title="Nginx+Tomcat 动静分离"></a>Nginx+Tomcat 动静分离</h2><p><strong>将一些常用的静态资源存放到nginx服务中,减轻tomcat本身的压力</strong></p><blockquote><p>1.先将一张图片1.jpg传入到ngnix的static目录下(/root/nginx/static）</p></blockquote><ol><li><code>scp /Users/Yun/Desktop/1.jpg  root@144.202.3.120:/root/nginx/static</code></li></ol><p><img src="/images/resources/977F44D0A256745E05C08FD3BB6633AC.jpg" alt="IMAGE"></p><ol start="2"><li>配置nginx配置文件拦截静态资源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ &#123;</span><br><span class="line">  root /root/nginx/static;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在tomcat的jsp中加入<code>&lt;img src=&quot;1.jpg&quot; alt=&quot;wwj&quot;/&gt;</code></p></li><li><p>结果如下:</p></li></ol><p><img src="/images/resources/95F14282EEF59143202FAA223589C2C9.jpg" alt="IMAGE"></p><h2 id="Nginx-负载均衡策略"><a href="#Nginx-负载均衡策略" class="headerlink" title="Nginx 负载均衡策略"></a>Nginx 负载均衡策略</h2><p>1.weight轮询（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值（weight），用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</p><p>2.ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</p><p>3.least_conn: 把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同;但是有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效。</p><p>4.fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</p><p>5.url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装nginx的hash软件包。</p><p><strong>配置在上游服务器设置中</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx是一个非常优秀的服务器,它的魅力不仅是负载均衡,动静分离等等.&lt;/p&gt;
&lt;h1 id=&quot;Nginx使用&quot;&gt;&lt;a href=&quot;#Nginx使用&quot; class=&quot;headerlink&quot; title=&quot;Nginx使用&quot;&gt;&lt;/a&gt;Nginx使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="服务器" scheme="http://djwwj.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="容器" scheme="http://djwwj.top/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="服务器" scheme="http://djwwj.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="负载均衡" scheme="http://djwwj.top/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Redis2</title>
    <link href="http://djwwj.top/2019/08/20/2019-09-10-Redis(%E4%BB%BD)/"/>
    <id>http://djwwj.top/2019/08/20/2019-09-10-Redis(份)/</id>
    <published>2019-08-20T07:57:46.122Z</published>
    <updated>2019-10-09T09:04:44.292Z</updated>
    
    <content type="html"><![CDATA[<p>Redis是一个很棒的产品,单线程,高读写是它的核心</p><h1 id="spring整合redis"><a href="#spring整合redis" class="headerlink" title="spring整合redis"></a>spring整合redis</h1><ol><li>Spring使用原生redisTemplate(数据一致性要求不高)</li><li>Spring基于注解整合Redis实现内容缓存(要求一致性高)</li></ol><h2 id="统一配置项目pom-xml文件-在整合项目dao层"><a href="#统一配置项目pom-xml文件-在整合项目dao层" class="headerlink" title="统一配置项目pom.xml文件(在整合项目dao层)"></a>统一配置项目pom.xml文件(在整合项目dao层)</h2><blockquote><p>1.添加redis依赖版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;small&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;artifactId&gt;small-dao&lt;/artifactId&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;!--jar包版本 --&gt;</span><br><span class="line">&lt;mybatis.version&gt;3.4.5&lt;/mybatis.version&gt;</span><br><span class="line">&lt;mybatis-spring.version&gt;1.3.1&lt;/mybatis-spring.version&gt;</span><br><span class="line">&lt;pagehelper.version&gt;4.1.4&lt;/pagehelper.version&gt;</span><br><span class="line">&lt;mysql-connector.version&gt;5.1.41&lt;/mysql-connector.version&gt;</span><br><span class="line">&lt;c3p0&gt;0.9.5.3&lt;/c3p0&gt;</span><br><span class="line">&lt;spring-redis&gt;1.6.0.RELEASE&lt;/spring-redis&gt;</span><br><span class="line">&lt;jredis-version&gt;2.7.3&lt;/jredis-version&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--编译级别 --&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- mybatis核心包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybatis集成spring包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Mysql数据库链接jar包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mysql-connector.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- c3p0 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;c3p0&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--Spring redis 缓存 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-redis&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--redis 客户端 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;jredis-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.添加redis配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Redis settings  </span><br><span class="line">redis.host=144.202.3.120</span><br><span class="line">redis.port=6379  </span><br><span class="line">redis.pass=redis</span><br><span class="line">redis.dbIndex=0  </span><br><span class="line">redis.expiration=3000  </span><br><span class="line">redis.maxIdle=300  </span><br><span class="line">redis.maxActive=600  </span><br><span class="line">redis.maxWait=1000</span><br><span class="line"># check data  有效性</span><br><span class="line">redis.testOnBorrow=true</span><br></pre></td></tr></table></figure><blockquote><p>3.在web层添加utils</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.utils;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line">import org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line">import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">/**</span><br><span class="line"> * 重写的generate（）方法为数据存入缓存的无参的方法指定存入缓存中的数据的key</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableCaching</span><br><span class="line">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class="line">private volatile JedisConnectionFactory jedisConnectionFactory;</span><br><span class="line">private volatile RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">private volatile RedisCacheManager redisCacheManager;</span><br><span class="line"> </span><br><span class="line">public RedisCacheConfig() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 带参数的构造方法 初始化所有的成员变量</span><br><span class="line"> * </span><br><span class="line"> * @param jedisConnectionFactory</span><br><span class="line"> * @param redisTemplate</span><br><span class="line"> * @param redisCacheManager</span><br><span class="line"> */</span><br><span class="line">public RedisCacheConfig(JedisConnectionFactory jedisConnectionFactory, RedisTemplate&lt;String, String&gt; redisTemplate,</span><br><span class="line">RedisCacheManager redisCacheManager) &#123;</span><br><span class="line">this.jedisConnectionFactory = jedisConnectionFactory;</span><br><span class="line">this.redisTemplate = redisTemplate;</span><br><span class="line">this.redisCacheManager = redisCacheManager;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public JedisConnectionFactory getJedisConnecionFactory() &#123;</span><br><span class="line">return jedisConnectionFactory;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public RedisTemplate&lt;String, String&gt; getRedisTemplate() &#123;</span><br><span class="line">return redisTemplate;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public RedisCacheManager getRedisCacheManager() &#123;</span><br><span class="line">return redisCacheManager;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Bean</span><br><span class="line">public KeyGenerator keyGenerator() &#123;</span><br><span class="line">return new KeyGenerator() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object generate(Object target, Method method, Object... objects) &#123;</span><br><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">//sb.append(target.getClass().getName());</span><br><span class="line">sb.append(method.getName());</span><br><span class="line">if(objects.length != 0)&#123;</span><br><span class="line">sb.append(&quot;_&quot;);</span><br><span class="line">for (Object obj : objects) &#123;</span><br><span class="line">sb.append(obj.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.在容器中配置redis实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span><br><span class="line">                        http://www.springframework.org/schema/context</span><br><span class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 自动扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.wwj&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入配置文件 --&gt;</span><br><span class="line">    &lt;bean id=&quot;propertyConfigurer&quot;</span><br><span class="line">          class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;    </span><br><span class="line">        &lt;property name=&quot;locations&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;classpath:redis.properties&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置c3p0数据源 --&gt;</span><br><span class="line">&lt;bean class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; id=&quot;dataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    &lt;!-- spring和MyBatis整合 --&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;!--mybatis分页插件--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:spring/mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:Mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.wwj.mapper&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 事务管理 --&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">          class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--支持事务注解的（@Transactional）--&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- redis config start --&gt;</span><br><span class="line">    &lt;!-- 配置JedisPoolConfig实例 --&gt;</span><br><span class="line">    &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxActive&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;maxWaitMillis&quot; value=&quot;$&#123;redis.maxWait&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;redis.testOnBorrow&#125;&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 配置JedisConnectionFactory --&gt;</span><br><span class="line">    &lt;bean id=&quot;jedisConnectionFactory&quot;</span><br><span class="line">        class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;hostName&quot; value=&quot;$&#123;redis.host&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;port&quot; value=&quot;$&#123;redis.port&#125;&quot; /&gt;</span><br><span class="line">        &lt;!-- &lt;property name=&quot;password&quot; value=&quot;$&#123;redis.pass&#125;&quot; /&gt; --&gt;</span><br><span class="line">        &lt;property name=&quot;database&quot; value=&quot;$&#123;redis.dbIndex&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;poolConfig&quot; ref=&quot;poolConfig&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;bean id=&quot;stringRedisSerializer&quot; class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 配置RedisTemplate --&gt;</span><br><span class="line">    &lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;jedisConnectionFactory&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;hashKeySerializer&quot; ref=&quot;stringRedisSerializer&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;keySerializer&quot; ref=&quot;stringRedisSerializer&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 配置RedisCacheManager --&gt;</span><br><span class="line">    &lt;bean id=&quot;redisCacheManager&quot; class=&quot;org.springframework.data.redis.cache.RedisCacheManager&quot;&gt;</span><br><span class="line">        &lt;constructor-arg name=&quot;redisOperations&quot; ref=&quot;redisTemplate&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;defaultExpiration&quot; value=&quot;$&#123;redis.expiration&#125;&quot; /&gt;</span><br><span class="line">        &lt;!-- 可选配置缓存区间</span><br><span class="line">        &lt;property name=&quot;cacheNames&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">        &lt;value&gt;xxx&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt; --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;!-- 配置RedisCacheConfig --&gt;</span><br><span class="line">&lt;bean id=&quot;redisCacheConfig&quot; class=&quot;com.wwj.utils.RedisCacheConfig&quot;&gt;</span><br><span class="line">&lt;constructor-arg ref=&quot;jedisConnectionFactory&quot;/&gt;</span><br><span class="line">&lt;constructor-arg ref=&quot;redisTemplate&quot;/&gt;</span><br><span class="line">&lt;constructor-arg ref=&quot;redisCacheManager&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="注解含义"><a href="#注解含义" class="headerlink" title="注解含义"></a>注解含义</h2><ol><li>@Cacheable：表明在进入方法之前，Spring会先去缓存服务器中查找对应key的缓存值，如果找到缓存值，那么Spring将不会再调用方法，而是将缓存值独处，返回给调用者；如果没有找到缓存值，那么Spring就会执行你的方法，将最后的结果通过key保存到缓存服务器中。</li><li>@CachePut：表明Spring会将该方法返回的值缓存到缓存服务器中，这里需要注意的是，Spring不会事先去缓存服务器中查找，而是直接执行方法，然后缓存。换句话说，该方法始终会被Spring所调用。</li><li>@CacheEvict：表示执行方法后从缓存服务器移除对应key的值；</li></ol><h2 id="加深理解"><a href="#加深理解" class="headerlink" title="加深理解"></a>加深理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value=&quot;xxx&quot; key=&quot;zzz&quot;)注解：标注该方法查询的结果进入缓存，再次访问时直接读取缓存中的数据</span><br><span class="line">1.对于有参数的方法，指定value(缓存区间)和key(缓存的key)；</span><br><span class="line">对于无参数的方法，只需指定value,存到数据库中数据的key通过重写的generate()方法生成。</span><br><span class="line">2.调用该注解标识的方法时，会根据value和key去redis缓存中查找数据，如果查找不到，则去数据库中查找，然后将查找到的数据存放入redis缓存中；</span><br><span class="line">3.向redis中填充的数据分为两部分：</span><br><span class="line">1).用来记录xxx缓存区间中的缓存数据的key的xxx~keys(zset类型)</span><br><span class="line">2).缓存的数据，key：数据的key；value：序列化后的从数据库中得到的数据</span><br><span class="line">4.第一次执行@Cacheable注解标识的方法，会在redis中新增上面两条数据</span><br><span class="line">5.非第一次执行@Cacheable注解标识的方法，若未从redis中查找到数据，则执行从数据库中查询</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* @CacheEvict()注解:移除指定缓存区间的一个或者多个缓存对象</span><br><span class="line"> * @param value + key 或者 value + allEntries=true</span><br><span class="line"> * 1.value + key 移除value缓存区间内的键为key的数据</span><br><span class="line"> * 2.value + allEntries=true 移除value缓存区间内的所有数据</span><br></pre></td></tr></table></figure><h3 id="代码操作示例-数据一致性不高"><a href="#代码操作示例-数据一致性不高" class="headerlink" title="代码操作示例(数据一致性不高)"></a>代码操作示例(数据一致性不高)</h3><blockquote><p>1.建一张用户表模拟数据以及封装的resultmap对应的vo对象(需要被序列化)</p></blockquote><p><img src="/images/resources/F9F1BC9AD73A862E67C5CCA5FF7843AB.jpg" alt="IMAGE"></p><blockquote><p>2.构建服务层以及dao层和controller层</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.controller;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import com.wwj.service.RedisService;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class RedisController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  RedisService  redisService;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/selectRedis1&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String   selectRedis1()&#123;</span><br><span class="line">String personCount = null;</span><br><span class="line">personCount= (String) redisTemplate.opsForValue().get(&quot;person_count&quot;);</span><br><span class="line"></span><br><span class="line">if(personCount == null)&#123;</span><br><span class="line">    //redis缓存中无数据，从数据库中查询，并放入redis缓存中，设置生存时间为1小时</span><br><span class="line">    personCount = Integer.toString(redisService.getPersonCount());</span><br><span class="line">    redisTemplate.opsForValue().set(&quot;person_count&quot;, personCount, 1, TimeUnit.HOURS);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    System.out.println(&quot;从redis拿取数据&quot;);</span><br><span class="line">    personCount=  (String) redisTemplate.opsForValue().get(&quot;person_count&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">return personCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码操作示例-数据一致性高-以及增加或者删除修改数据后清空缓存"><a href="#代码操作示例-数据一致性高-以及增加或者删除修改数据后清空缓存" class="headerlink" title="代码操作示例(数据一致性高)以及增加或者删除修改数据后清空缓存"></a>代码操作示例(数据一致性高)以及增加或者删除修改数据后清空缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.service.impl;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.annotation.CacheEvict;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.wwj.mapper.PersonMapper;</span><br><span class="line">import com.wwj.model.Person;</span><br><span class="line">import com.wwj.service.RedisService;</span><br><span class="line"></span><br><span class="line">@Service(&quot;redisService&quot;)</span><br><span class="line">public class RedisServiceImpl  implements  RedisService&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  PersonMapper  personMapper;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Integer getPersonCount() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.selectCountOfPerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Cacheable(value=&quot;getPersons&quot;)</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Person&gt; getPersons() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.selectPersons();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Cacheable(value=&quot;getPersonById&quot;,key=&quot;&apos;getPersonById_&apos;+#id&quot;)</span><br><span class="line">@Override</span><br><span class="line">public Person getPersonById(Integer id) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.selectPersonById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@CacheEvict(value=&quot;getPersons&quot;,allEntries=true)</span><br><span class="line">@Override</span><br><span class="line">public int savePerson(String name) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.insertPerson(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码地址详见</p></blockquote><p><a href="https://github.com/djwangweijie/small" target="_blank" rel="noopener">SSM整合</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Redis是一个很棒的产品,单线程,高读写是它的核心&lt;/p&gt;
&lt;h1 id=&quot;spring整合redis&quot;&gt;&lt;a href=&quot;#spring整合redis&quot; class=&quot;headerlink&quot; title=&quot;spring整合redis&quot;&gt;&lt;/a&gt;spring整合redis
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://djwwj.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据持久化" scheme="http://djwwj.top/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
      <category term="分关系型数据库" scheme="http://djwwj.top/tags/%E5%88%86%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="内存型数据库" scheme="http://djwwj.top/tags/%E5%86%85%E5%AD%98%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="缓存" scheme="http://djwwj.top/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis1</title>
    <link href="http://djwwj.top/2019/08/17/2019-09-10-Redis(%E7%BC%98)/"/>
    <id>http://djwwj.top/2019/08/17/2019-09-10-Redis(缘)/</id>
    <published>2019-08-17T14:34:10.955Z</published>
    <updated>2019-10-09T09:04:50.348Z</updated>
    
    <content type="html"><![CDATA[<p>Redis是一个很棒的产品,单线程,高读写是它的核心</p><h1 id="redis数据库初识"><a href="#redis数据库初识" class="headerlink" title="redis数据库初识"></a>redis数据库初识</h1><ol><li>Redis 简介</li><li>Redis 的安装配置</li><li>Redis 的常见操作</li><li>Redis 的数据类型</li><li>Redis 的事务控制</li><li>Java 操作 Redis 数据库</li></ol><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><h3 id="redis的作用"><a href="#redis的作用" class="headerlink" title="redis的作用"></a>redis的作用</h3><p><strong>Redis:REmote DIctionary Server( 远程字典服务器 ) 是完全开源免费的，用 C 语言编写的，遵守 BSD协议，是一个高性能的 (key/value) 分布式内存数据库，基于内存运行并支持持久化的 NoSQL 数据库，是当前最热门的 NoSql 数据库之一 , 也被人们称为数据结构服务器</strong></p><p><strong><em>BSD协议简单的说就是开源自由最大化,不以商业为中心</em></strong></p><h3 id="redis的优缺点"><a href="#redis的优缺点" class="headerlink" title="redis的优缺点"></a>redis的优缺点</h3><p><strong>优点</strong></p><ol><li>性能极高 – Redis能支持超过 100K+ 每秒的读写频率。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ol><p><strong>缺点</strong></p><ol><li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li></ol><h2 id="Redis-的安装-Linux下"><a href="#Redis-的安装-Linux下" class="headerlink" title="Redis 的安装(Linux下)"></a>Redis 的安装(Linux下)</h2><blockquote><p>1.下载<code>wget -P /root/softdev http://download.redis.io/releases/redis-5.0.5.tar.gz</code>  </p></blockquote><blockquote><p>2.解压<code>tar zxvf redis-5.0.5.tar.gz -C /root/redis</code></p></blockquote><blockquote><p>3.安装C语言环境<code>yum install gcc-c++</code></p></blockquote><blockquote><p>4.切换到redis安装目录下.执行make命令</p></blockquote><p><img src="/images/resources/04A596943847657E0031CDE5F53A352F.jpg" alt="IMAGE"></p><blockquote><p>5.配置目录下的redis.conf文件.主要的目的</p></blockquote><ol><li><p><img src="/images/resources/B354A8B44554E947E239988E71B4E5E3.jpg" alt="IMAGE">允许其他地址访问</p></li><li><p><img src="/images/resources/07C3439E94CE71AF88389AEC64BB7E8D.jpg" alt="IMAGE">关闭保护模式</p></li><li><p><img src="/images/resources/1E11D42BEC017B91D721E7EBF435F30A.jpg" alt="IMAGE">设置密码</p></li></ol><blockquote><p>6.切换到目录下进行启动<code>src/redis-server redis.conf</code>  可检查是否存在<code>ps -ef |grep redis</code></p></blockquote><p><img src="/images/resources/4626C4E1B4BEB3877B39C1B7EDE23672.jpg" alt="IMAGE"></p><blockquote><p><strong><a href="http://www.pc6.com/mac/486661.html" target="_blank" rel="noopener">可视化工具下载</a></strong></p></blockquote><h2 id="Redis-的常见操作"><a href="#Redis-的常见操作" class="headerlink" title="Redis 的常见操作"></a>Redis 的常见操作</h2><ol><li>Keys *：指令 查看当前这个库中所有的key值</li><li>exists key 名字 : 判断某个 key 值是否存在 0 表示不存在 1 表示存在</li><li>move key 名字 数据库的索引下标： 将某个值移除到指定的库中</li><li>Redis 默认有 16 个库，我们可以通过修改 redis 配置文件 redis.conf 来改变库的数量</li><li>select 下标可以切换不同的数据库： select 下标</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(了解)</span><br><span class="line">flushdb : 删除当前库中所有的 key</span><br><span class="line">flushall : 删除所有库的信息</span><br><span class="line">Info：查看数据库的信息</span><br><span class="line">expire key 名字 秒：设定指定的 key 的存活时间</span><br><span class="line">ttl key 名字 : 查看当前的 key 还有多少存活时间 -1 表示永不过期，-2 表示已经过期</span><br><span class="line">type key 名字 : 查看当前 key 的类型（key String,Object）</span><br></pre></td></tr></table></figure><h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SET key 名字 value 值： 设置单一键值对 (key 值相同会覆盖原来的值 , 类似于map 集合 )</span><br><span class="line">GET key 名字：获取指定 key 的值</span><br><span class="line">DEL key 名字：删除指定名称 key</span><br><span class="line">APPEND key 名字 新值：在原有的值的基础上添加新的值</span><br><span class="line">STRLEN key 名字 : 获取字符串的长度</span><br><span class="line">(value 值必须是数字 )</span><br><span class="line">INCR(value 值自动加 1) ： incr key名字；</span><br><span class="line">DECR(value 值自动减 1) ：decr key名字；</span><br><span class="line">INCRBY 递增值： incrby key名字 数字；</span><br><span class="line">DECRBY 递减值：decrby key名字 数字 ;</span><br><span class="line">GETRANGE : GETRANGE key start end： 获取 value 值的一部分</span><br><span class="line">SETRANGE ：SETRANGE key 起始位置 值： 从起始位置开始替换值</span><br><span class="line">SETEX: SETEX key 名字 存活时间 值： 设定一组值同时设定存活时间；</span><br><span class="line">SETNX: SETNX key 名字 值： 设置永久存活的一组值。 (key 值冲突无法存入值 -- 返回值为 0)</span><br><span class="line">MSET: mset key 值 key 值 .... 一次设定多组值，如果 key 值存在也会覆盖</span><br><span class="line">MGET: mget key key 一次获取多个 key 的值</span><br><span class="line">MSETNX: 一次设定多组 key 值，如果有 key 值存在无法添加完成</span><br></pre></td></tr></table></figure><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LPUSH: 向集合中添加内容 lpush 集合的名字 值 显示的顺序和添加的顺序相反。</span><br><span class="line">RPUSH: 向集合中添加内容 rpush 集合的名字 值 添加顺序就是显示顺序</span><br><span class="line">LRANGE: 集合的名字 起始位置 结束位置 (-1 代表到集合的末尾 )</span><br><span class="line">LLEN: llen 集合的名字 查看集合的长度</span><br><span class="line">LPOP: lpop 集合的名称 移除集合中的第一个元素</span><br><span class="line">RPOP: rop 集合的名称移除集合中的最后一个元素</span><br><span class="line">LINDEX : 获取制定索引的值 lindex 集合的名称 索引数值</span><br><span class="line">LREM : 删除指定数量的值： lrem 集合的名称 个数 值 ( 集合中有重复值 )；</span><br></pre></td></tr></table></figure><h3 id="hash类型-hash表的基本操作与string一样-特别适合存储对象数据"><a href="#hash类型-hash表的基本操作与string一样-特别适合存储对象数据" class="headerlink" title="hash类型(hash表的基本操作与string一样.特别适合存储对象数据)"></a>hash类型(hash表的基本操作与string一样.特别适合存储对象数据)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HSET: 存放一组键值对 hset key 值的名称 具体的值；（重复添加会覆盖原来的值）</span><br><span class="line">HGET：获取一个值： hget key 值的名称</span><br><span class="line">HMSET： 设定多组键值对 HMSET customer id 1 name zs address beijing</span><br><span class="line">HMGET： 获取过个键对应的值 hmget customer id name address</span><br><span class="line">HGETALL： 获取所有的数据 hgetall key 值；</span><br><span class="line">HDEL: 删除某个指定的 key 的一组 value hdel customer id</span><br><span class="line">HLEN: 当前的 key 有几组对应的键值对</span><br><span class="line">HEXISTS: 判断当前 key 中是否有指定名称的键值对： hexists customer id;</span><br><span class="line">HKEYS：获取所有的 key</span><br><span class="line">HVALS: 获取所有的值</span><br><span class="line">HINCRBY: 增加指定步长的数据 hincrby customer age 2;</span><br><span class="line">HINCRBYFLOAT: 在原有的基础上增加指定的小数。 hincrbyfloat customer course 0.5</span><br><span class="line">HSETNX： 如果 value 中的 key 重复不能添加到集合中。</span><br></pre></td></tr></table></figure><h3 id="set类型-无序不重复"><a href="#set类型-无序不重复" class="headerlink" title="set类型(无序不重复)"></a>set类型(无序不重复)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SADD：添加值 sadd 集合名称 值 ....</span><br><span class="line">SMEMBERS：查看值 smembers 集合名称</span><br><span class="line">SCARD : 集合中元素个数 scard 集合名称</span><br><span class="line">SREM : 删除集合中的某个值 srem 集合名称 值；</span><br><span class="line">SPOP： 随机从集合中移除一个数据 spop 集合名称</span><br><span class="line">SMOVE: 将集合中的某个值赋给另外一个集合： SMOVE 集合 1 集合 2 值；</span><br><span class="line">SDIFF: 差集</span><br><span class="line">SINTER: 交集</span><br><span class="line">SUNION: 并集</span><br></pre></td></tr></table></figure><h3 id="Zset类型-是-string-类型的有序集合，也不可重复"><a href="#Zset类型-是-string-类型的有序集合，也不可重复" class="headerlink" title="Zset类型(是 string 类型的有序集合，也不可重复)"></a>Zset类型(是 string 类型的有序集合，也不可重复)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sorted set 中的每个元素都需要指定一个分数，根据分数对元素进行升序排序，如果多个元素有相同的分数，则以字典序进行升序排序</span><br><span class="line">Zadd：创建集合并设定标准 zadd zset01 60 v1 70 v2 80 v3 90 v4 100 v5（等级划分的数据）</span><br><span class="line">ZRANGE: 查询所有的标准 ZRANGE zset01 0 -1 , ZRANGE zset01 0 -1 withscores</span><br><span class="line">ZRANGEBYSCORE : 根据分数查询内容</span><br><span class="line">ZRANGEBYSCORE zset01 60 90 ( 注意如果前面添加”(” 表示不包含节点的意思 )</span><br><span class="line">withscores limit 起始位置 数量 .</span><br><span class="line">ZREM : 删除元素 zrem 集合 某 score 下对应的 value 值。ZREM zset01 v5</span><br><span class="line">ZCARD: 统计有几个键值对 zcard 集合</span><br><span class="line">ZCOUNT: zcount 集合 数值 1 数值 2 统计区间的值</span><br><span class="line">ZRANK : 统计对应的下标 zrank 集合名 values</span><br><span class="line">ZSCORE : zscore 集合名 values 获取对应的分数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 1 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 2 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 4 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZRANGE runoobkey 0 10 WITHSCORES</span><br></pre></td></tr></table></figure><h2 id="5-redis的事务规则"><a href="#5-redis的事务规则" class="headerlink" title="5.redis的事务规则"></a>5.redis的事务规则</h2><ol><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:7000&gt; multi</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:7000&gt; set a aaa</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:7000&gt; set b bbb</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:7000&gt; set c ccc</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:7000&gt; exec</span><br></pre></td></tr></table></figure><h2 id="maven项目下使用java操作redis数据库"><a href="#maven项目下使用java操作redis数据库" class="headerlink" title="maven项目下使用java操作redis数据库"></a>maven项目下使用java操作redis数据库</h2><p>1.创建一个简单的maven项目pom.xml如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>2.使用jredis模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line">public class TestRedis &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testJedis() &#123;</span><br><span class="line">// 创建一个 Jedis 的连接</span><br><span class="line">Jedis jedis = new Jedis(&quot;144.202.3.120&quot;, 6379);</span><br><span class="line">// 密码认证 如果设置了密码，就需要进行认证</span><br><span class="line">jedis.auth(&quot;redis&quot;);</span><br><span class="line">// 执行 redis 命令</span><br><span class="line">jedis.set(&quot;mytest&quot;, &quot;hello world, this is jedis client!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testJedisPool() &#123;</span><br><span class="line">// 创建一连接池对象</span><br><span class="line">JedisPool jedisPool = new JedisPool(&quot;144.202.3.120&quot;, 6379);</span><br><span class="line">// 从连接池中获得连接</span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line">// 密码认证 如果设置了密码，就需要进行认证</span><br><span class="line">jedis.auth(&quot;redis&quot;);</span><br><span class="line">String result = jedis.get(&quot;mytest&quot;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">// 关闭连接</span><br><span class="line">jedis.close();</span><br><span class="line">// 关闭连接池</span><br><span class="line">jedisPool.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://try.redis.io/" target="_blank" rel="noopener">redis练习操作</a><br><a href="https://www.cnblogs.com/VitoYi/p/8726070.html" target="_blank" rel="noopener">分布式锁参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Redis是一个很棒的产品,单线程,高读写是它的核心&lt;/p&gt;
&lt;h1 id=&quot;redis数据库初识&quot;&gt;&lt;a href=&quot;#redis数据库初识&quot; class=&quot;headerlink&quot; title=&quot;redis数据库初识&quot;&gt;&lt;/a&gt;redis数据库初识&lt;/h1&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://djwwj.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据持久化" scheme="http://djwwj.top/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
      <category term="分关系型数据库" scheme="http://djwwj.top/tags/%E5%88%86%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="内存型数据库" scheme="http://djwwj.top/tags/%E5%86%85%E5%AD%98%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="缓存" scheme="http://djwwj.top/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统使用</title>
    <link href="http://djwwj.top/2019/08/09/2019-09-10-Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://djwwj.top/2019/08/09/2019-09-10-Linux操作系统/</id>
    <published>2019-08-09T08:33:14.481Z</published>
    <updated>2019-10-09T08:52:56.618Z</updated>
    
    <content type="html"><![CDATA[<p>Linux操作系统是一个开源的命令行系统,没有消息就是一个好的消息</p><h1 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h1><ol><li>Linux 操作系统简介</li><li>VM 虚拟机和 linux 操作系统安装</li><li>Linux 的目录结构解析</li><li>Linux 的常用指令</li><li>Vim 文本编辑器使用</li><li>Linux 用户和组的管理</li><li>Linux 中的文件权限</li><li>Linux 操作系统安装 Jdk</li><li>Linux 操作系统下 Tomcat 的安装</li><li>Linux 操作系统安装 Mysql</li><li>Linux 系统下 Shell 脚本的编写和运行</li></ol><h2 id="Linux操作系统-1"><a href="#Linux操作系统-1" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2><blockquote><p>开源,安全,使用的时候,最好全部使用命令的方式进行操作</p></blockquote><h2 id="VM-虚拟机和-linux-操作系统安装"><a href="#VM-虚拟机和-linux-操作系统安装" class="headerlink" title="VM 虚拟机和 linux 操作系统安装"></a>VM 虚拟机和 linux 操作系统安装</h2><blockquote><p> 安装可在虚拟机或者开一个远程服务器</p></blockquote><h2 id="Linux目录结构解析-服务器系统centos6-64位"><a href="#Linux目录结构解析-服务器系统centos6-64位" class="headerlink" title="Linux目录结构解析(服务器系统centos6-64位)"></a>Linux目录结构解析(服务器系统centos6-64位)</h2><blockquote><p>目录是一个树形结构,会有一个根(/)</p></blockquote><ol><li>切换到根目录。</li></ol><p><img src="/images/resources/F8F4071E27824039E6D6487FB9F7EA47.jpg" alt="IMAGE"></p><blockquote><p>/bin存放的二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里</p></blockquote><blockquote><p>/etc存放系统管理和配置文件 （比较重要）</p></blockquote><blockquote><p>/home 存放所有用户文件的根目录 (不含root)</p></blockquote><blockquote><p>/root单独的root,可以看到里面root用户下的文件</p></blockquote><p><img src="/images/resources/AD8F5D95D23F2B471D9EDE77EE6B176A.jpg" alt="IMAGE"></p><blockquote><p>/usr 用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录（安装系统级的应用）</p></blockquote><blockquote><p>/tmp 用于存放各种临时文件，是公用的临时文件存储点。</p></blockquote><blockquote><p>/var 各种服务的日志文件(当然,一般项目中,我们都是自己有一个固定的地方存放日志文件)</p></blockquote><blockquote><p>最终形成的目录结构如下:</p></blockquote><p><img src="/images/resources/6F1451A494BD3BD4686CECB8F30A2D57.jpg" alt="IMAGE"></p><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="一些常用的命令"><a href="#一些常用的命令" class="headerlink" title="一些常用的命令"></a>一些常用的命令</h3><ul><li>pwd 查看当前所在的目录</li></ul><p><img src="/images/resources/6E5EFAE2634ABE3745AF604F01E37D22.jpg" alt="IMAGE"></p><ul><li><p>cd  (change dic)更换目录</p></li><li><p>ls  查看目录 -f(查看当前目录下的文件,含隐藏文件)  -l(查看文件和目录详细) </p></li></ul><p><img src="/images/resources/0CC244F68ADDF495F8CBA7A220BB7AF2.jpg" alt="IMAGE"></p><ul><li><p>cat 查看文件  cat 文件名(全路径)</p></li><li><p>mkdir 创建文件目录</p></li><li><p>rm -rf 目录名字</p></li></ul><p><img src="/images/resources/2374E51A3CFDB27EC5DF767F7E3E9705.jpg" alt="IMAGE"></p><ul><li>touch创建一个文件或者使用vim直接进行创建</li></ul><p><img src="/images/resources/97063ED0780F2E58B62E74CFD940BAED.jpg" alt="IMAGE"></p><p><strong>注意:未安装vim可以使用<code>yum install vim</code></strong></p><ul><li><p>echo代表输入命令(echo ‘内容’ &gt; 文件名),如不想覆盖则用&gt;&gt;</p></li><li><p>删除文件rm -f  文件名</p></li><li><p>(Mv 文件名 新文件名)可以给文件重命名(Mv 文件名 一个有效的文件目录)可以将某个文件移动到指定目录中</p></li></ul><p><img src="/images/resources/AE9B9E51639E80B3B919B179815F2F63.jpg" alt="IMAGE"></p><ul><li>cp复制命令</li></ul><ol><li>cp dir/* . 复制一个目录下的所有文件到当前工作目录</li><li>cp -a /tmp/dir1 路径 复制一个目录到当前工作目录</li><li>cp -a file1 file2 # 连同文件的所有特性把文件 file1 复制成文件 file2</li><li>cp file1 file2 file3 dir # 把文件 file1、file2、file3 复制到目录 dir 中</li></ol><p><img src="/images/resources/E15CC57CD9B066FA4B98668D856C0629.jpg" alt="IMAGE"></p><ul><li>find命令查找命令</li></ul><p><code>find 指令 基本格式：语法： find [ 查找文件的路径 ] [ 查找条件 ] [ 处理动作 ]</code></p><p><img src="/images/resources/4FD3550DB09CE5AE60B707D72907677F.jpg" alt="IMAGE"></p><ul><li>grep 文件内容查找(了解)</li></ul><p><img src="/images/resources/9E4E2C86DC6F37655CDC2973295EF20E.jpg" alt="IMAGE"></p><ul><li><p>关机重启(shutdown 和 reboot)</p></li><li><p>su -root 指令切换到管理员</p></li></ul><p><strong>注意引号内为正则表达式即可</strong></p><h3 id="zip解压缩"><a href="#zip解压缩" class="headerlink" title="zip解压缩"></a>zip解压缩</h3><ol><li>压缩<code>zip -r archive_name.zip filename</code></li><li>解压在当前 <code>unzip archive_name.zip</code></li><li>解压到指定 <code>unzip archive_name.zip -d new_dir</code></li></ol><h3 id="tar打包"><a href="#tar打包" class="headerlink" title="tar打包"></a>tar打包</h3><ol><li>打包一个目录(含文件)<code>tar -cvf archive_name.tar directory_to_compress</code></li></ol><p><img src="/images/resources/BFC4D3B3479E12507BE9CC9813B16B13.jpg" alt="IMAGE"></p><ol start="2"><li><p>解包<code>tar -zxvf archive_name.tar.gz</code></p></li><li><p>解包到指定目录<code>tar -xvf archive_name.tar -C new_dir</code></p></li></ol><h3 id="tar-gz格式压缩"><a href="#tar-gz格式压缩" class="headerlink" title="tar.gz格式压缩"></a>tar.gz格式压缩</h3><ol><li>压缩<code>tar -zcvf archive_name.tar.gz filename</code></li><li>解压缩 <code>tar -zxvf archive_name.tar.gz</code></li><li>解压缩到指定 <code>tar -zxvf archive_name.tar.gz -C new_dir</code></li></ol><h2 id="使用vim编辑器"><a href="#使用vim编辑器" class="headerlink" title="使用vim编辑器"></a>使用vim编辑器</h2><p><img src="/images/resources/E6FE16260C12D0254045CC342D77577E.jpg" alt="IMAGE"></p><blockquote><p>注意</p></blockquote><ol><li>进入之后按i或者a即可根据光标位置进行操作</li><li>按esc切换到命令模式:可以设置行号 <code>:set nu</code> 也可以用<code>/需要查找的内容</code> 是n或者N查看下一个或者上一个</li><li><code>:wq或者:w 强制写入或者写入</code> <code>:q 或者 :q! 退出或者强制退出</code></li></ol><h2 id="Linux-用户和组的管理"><a href="#Linux-用户和组的管理" class="headerlink" title="Linux 用户和组的管理"></a>Linux 用户和组的管理</h2><blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。<br>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。<br>每个用户账号都拥有一个唯一的用户名和各自的口令。</p></blockquote><blockquote><p>通过cat /etc/passwd</p></blockquote><p><img src="/images/resources/226871FDCD8093B8E791D829FAD5E4C2.jpg" alt="IMAGE"></p><p>分别代表用户名,密码,用户ID,组ID,用户全称,用户目录,用户使用的shell</p><h3 id="1-添加用户-和-删除用户"><a href="#1-添加用户-和-删除用户" class="headerlink" title="1.添加用户 和 删除用户"></a>1.添加用户 和 删除用户</h3><p><img src="/images/resources/715AF930EFA903C3B4BD728F3F36AACE.jpg" alt="IMAGE"></p><p><img src="/images/resources/020499E64B6F17F80046A64EAD17BA2A.jpg" alt="IMAGE"></p><p><img src="/images/resources/AFB7221791A26A8566160A07527F64BD.jpg" alt="IMAGE"></p><p><img src="/images/resources/18D1732A539B3E9887B5A99C03E2D5A9.jpg" alt="IMAGE"></p><p>删除用户<code>userdel -r -f wangweijie</code></p><p><code>userdel -r 用户名</code>  删除用户以及下面所有的目录</p><h3 id="2-用户组添加管理"><a href="#2-用户组添加管理" class="headerlink" title="2.用户组添加管理"></a>2.用户组添加管理</h3><p><img src="/images/resources/A6A20110194297A90D7BC3D8D36D8F34.jpg" alt="IMAGE"></p><p><img src="/images/resources/51DD2D66C4F832996823C64228D945AE.jpg" alt="IMAGE"></p><blockquote><p>需要移除用户的话  gpasswd -d 用户账户 用户组名</p></blockquote><h2 id="Linux中文件权限"><a href="#Linux中文件权限" class="headerlink" title="Linux中文件权限"></a>Linux中文件权限</h2><p><img src="/images/resources/1A89865F14FDD4B5E2DDA829E3B0EE60.jpg" alt="IMAGE"></p><blockquote><p>10个字符 第一个文件类型  后面每3个一组 (r=4， w=2， x=1)  然后是用户,用户组,大小</p></blockquote><blockquote><p>每一组权限分别对应当前用户,用户组,非该用户组</p></blockquote><blockquote><p>更改abc.txt 当前用户为可读</p></blockquote><p><img src="/images/resources/B8D01010A3E2F479C568181C99FC72E8.jpg" alt="IMAGE"></p><p><img src="/images/resources/451B78AC2DA3CFF79E358797556A01AC.jpg" alt="IMAGE"></p><h2 id="linux安装jdk"><a href="#linux安装jdk" class="headerlink" title="linux安装jdk"></a>linux安装jdk</h2><blockquote><p>1.现在root下构建一个专门存放jdk和tomcat的等一系列的软件目录 softdev</p></blockquote><blockquote><p>2.上传安装包到softdev中 <code>scp /path/local_filename username@servername:/path</code> </p></blockquote><blockquote><p>3.如果是从服务器下载则<code>scp username@servername:/path/filename /tmp/local_destinationr</code></p></blockquote><blockquote><p>4.也可以考虑使用 yum install -y lrzsz （使用rz上传或则sz下载）</p></blockquote><blockquote><p>5.执行解压的命令 tar -zxvf jdk-8u162-linux-x64.tar.gz -C /root/java8/</p></blockquote><blockquote><p>6.配置在全局环境变量中（执行 source /etc/profile）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/java8/jdk1.8.0_162</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p><img src="/images/resources/2CAC83B110FFA4417AFCDFD6CE41F183.jpg" alt="IMAGE"></p><h2 id="linux下安装tomcat"><a href="#linux下安装tomcat" class="headerlink" title="linux下安装tomcat"></a>linux下安装tomcat</h2><blockquote><p>1.分别新建2个文件夹存放tomcat （tomcat1和tomcat2）</p></blockquote><blockquote><p>2.tar -zxvf apache-tomcat-8.5.43.tar.gz -C /root/tomcat1</p></blockquote><blockquote><p>3.修改2个tomcat的端口号 10088和10089(文件位于/root/tomcat1/apache-tomcat-8.5.43/conf)</p></blockquote><blockquote><p>4.开启：service iptables start  关闭：service iptables stop(防火墙)service iptables status</p></blockquote><blockquote><p>5.在bin目录下启动tomact(<code>./startup.sh</code>)</p></blockquote><p><img src="/images/resources/75468ED66410BFD40DB96BBDF8FA5BA3.jpg" alt="IMAGE"></p><h2 id="linux下安装-Mysql"><a href="#linux下安装-Mysql" class="headerlink" title="linux下安装 Mysql"></a>linux下安装 Mysql</h2><blockquote><p>1.<code>yum list installed | grep mysql</code>查看是否安装mysql</p></blockquote><blockquote><p>2.<code>yum -y remove mysql</code> (删除已安装的mysql)</p></blockquote><blockquote><p>3.下载小容量mysql(<code>wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm</code>)</p></blockquote><blockquote><p>4.<code>rpm -ivh mysql-community-release-el6-5.noarch.rpm</code>(类似解压出安装文件可通过<code>yum repolist all | grep mysql</code>)</p></blockquote><blockquote><p>5.<code>yum install mysql-community-server</code> 安装</p></blockquote><blockquote><p>6.<code>service mysqld start</code> 启动  关闭<code>service mysqld stop</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root</span><br><span class="line"># use mysql;</span><br><span class="line"># update user set password=PASSWORD(&quot;这里输入root用户密码&quot;) where User=&apos;root&apos;;</span><br><span class="line"># GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION; </span><br><span class="line"># flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/720153B5426BF11108B70C13CB1E834A.jpg" alt="IMAGE"></p><h2 id="linux下的-Shell-脚本的编写和运行"><a href="#linux下的-Shell-脚本的编写和运行" class="headerlink" title="linux下的 Shell 脚本的编写和运行"></a>linux下的 Shell 脚本的编写和运行</h2><blockquote><p>1.touch HelloWorld.sh</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo Hello World!</span><br></pre></td></tr></table></figure><blockquote><p>1.1 #!/bin/bash #!是代表这是一个解释程序 /bin/bash是bash的绝对路径。</p></blockquote><blockquote><p>2.bash HelloWrold.sh</p></blockquote><p><img src="/images/resources/E8C826ACCAF72920B8EF996443C17DC2.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux操作系统是一个开源的命令行系统,没有消息就是一个好的消息&lt;/p&gt;
&lt;h1 id=&quot;Linux操作系统&quot;&gt;&lt;a href=&quot;#Linux操作系统&quot; class=&quot;headerlink&quot; title=&quot;Linux操作系统&quot;&gt;&lt;/a&gt;Linux操作系统&lt;/h1&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://djwwj.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="命令行操作系统" scheme="http://djwwj.top/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="命令行" scheme="http://djwwj.top/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Oracle2</title>
    <link href="http://djwwj.top/2019/08/02/2019-09-10-Oracle(%E4%BB%BD)/"/>
    <id>http://djwwj.top/2019/08/02/2019-09-10-Oracle(份)/</id>
    <published>2019-08-02T08:22:57.706Z</published>
    <updated>2019-10-09T09:04:02.144Z</updated>
    
    <content type="html"><![CDATA[<p>Oracle数据库也是一个数据库的中间力量</p><h1 id="oracle数据库操作"><a href="#oracle数据库操作" class="headerlink" title="oracle数据库操作"></a>oracle数据库操作</h1><ol><li>Oracle 常用数据类型</li><li>Oracle 中常用的操作符</li><li>Oracle 常用函数</li><li>Oracle 中的序列 和 Oracle 中的查询</li><li>Oracle 中的视图</li><li>Oracle 中的触发器</li><li>Oracle 中的存储过程</li></ol><h2 id="oracle常用的数据类型"><a href="#oracle常用的数据类型" class="headerlink" title="oracle常用的数据类型"></a>oracle常用的数据类型</h2><p><strong>分为字符型,数字类型,日期,blob</strong></p><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p><strong>VARCHAR2 (n)：可变长度的字符,最大长度4000bytes,即1&lt;=n&lt;=4000,VARCHAR2(10)，表示占10个字节的字符串，当长度小于10字节时,不会自动补空格,占实际大小,大于则报错</strong></p><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p><strong>NUMBER(P,S):P为整数位+S小数位数.例如NUMBER(5,3),表示整数位数为2,小数位数为3的数字,如25.112</strong></p><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p><strong>data缺省格式为DD-MON-YY,timestamp同样,精确到纳秒</strong></p><h3 id="LOB类型"><a href="#LOB类型" class="headerlink" title="LOB类型"></a>LOB类型</h3><p><strong>BLOB：二进制数据,最大长度4G. CLOB:字符数据,最大长度4G，一般音视频类就BLOB,文献就CLOB</strong></p><h2 id="oracle常用的操作符"><a href="#oracle常用的操作符" class="headerlink" title="oracle常用的操作符"></a>oracle常用的操作符</h2><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><ol><li>=、!=、&lt;、&gt;、&lt;=、&gt;=、BETWEEN AND （检查是否在两个值之间）</li><li>[NOT] IN（与列表中的值匹配）</li><li>[NOT] LIKE（匹配字符模式， * _ 通配符）</li><li>[NOT] IS NULL（检查是否为空）</li></ol><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><ol><li>and or not </li><li>如果and和or混用,and的优先级高于or,所以尽量的使用括号来表明优先级</li></ol><h3 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h3><ol><li>UNION（联合） 返回两个查询选定不重复的行。( 删除重复的行 )</li><li>UNION ALL（联合所有） 合并两个查询选定的所有行，包括重复的行。</li><li>INTERSECT（交集） 只返回两个查询都有的行。</li><li>MINUS（减集） 在第一个查询结果中排除第二个查询结果中出现的行。 （第一 – 第二）</li></ol><p><strong><em>注意:使用集合操作符的时候列的数量和数据类型,都要保持一致</em></strong></p><h3 id="连接操作符"><a href="#连接操作符" class="headerlink" title="连接操作符"></a>连接操作符</h3><ol><li>使用||进行连接,返回字符串</li><li><code>SELECT (&#39;wwj&#39; || &#39;hello&#39;) as str1 FROM dual</code></li></ol><h2 id="oracle常用的函数"><a href="#oracle常用的函数" class="headerlink" title="oracle常用的函数"></a>oracle常用的函数</h2><h3 id="字符串函数-subsrt-和-replace-和-decode"><a href="#字符串函数-subsrt-和-replace-和-decode" class="headerlink" title="字符串函数 (subsrt 和 replace 和 decode)"></a>字符串函数 (subsrt 和 replace 和 decode)</h3><ol><li><p><code>SELECT SUBSTR(ch, pos, length) as str1 FROM dual</code></p></li><li><p>pos代表等于0或1时,都是从第一位开始截取</p></li><li><p>length代表要截取的字符串的长度</p></li><li><p>如果pos填写为负数,为倒着截取</p></li><li><p><code>SELECT REPLACE(&#39;wwj&#39;,&#39;j&#39;,&#39;q&#39;)  as  str1 FROM dual</code></p></li><li><p>将字符串中包含j的替换成q</p></li><li><p>decode(条件,值1,返回值1,值2,返回值2) 等同于 if elseif</p></li></ol><p><img src="/images/resources/5250B3965CC33D9ED6BD0DB958BEB994.jpg" alt="IMAGE"></p><h3 id="数学函数-round-和-trunc"><a href="#数学函数-round-和-trunc" class="headerlink" title="数学函数  (round 和 trunc )"></a>数学函数  (round 和 trunc )</h3><ol><li><p><code>SELECT ROUND(n, int)  as  num1 FROM dual</code></p></li><li><p>int位置代表保留几位小数,并且四舍五入</p></li><li><p><code>SELECT TRUNC(n1, n2)  as  num1 FROM dual</code></p></li><li><p>n2代表保留几位小数,并不四舍五入</p></li></ol><h3 id="转换函数-tochar-和-todate"><a href="#转换函数-tochar-和-todate" class="headerlink" title="转换函数(tochar 和  todate)"></a>转换函数(tochar 和  todate)</h3><ol><li><p><code>SELECT  to_char(SYSDATE,&#39;Day, HH12:MI:SS&#39;) FROM dual;</code><br> <code>SELECT  TO_CHAR(99,&#39;$99.9999&#39;) FROM dual;</code></p></li><li><p><code>SELECT  to_date(&#39;2089-5-7 17:09:37&#39;,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual</code></p></li></ol><h3 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h3><ol><li><p>nal(expr1,expr2)代表 oracle第一个参数为空那么显示第二个参数的值，如果第一个参数的值不为空，则显示第一个参数本来的值。</p></li><li><p>比如:<code>select ename,NVL(comm, -1) from emp;</code> 如何comm没值,则取-1</p></li></ol><h2 id="Oracle-中的序列-和-Oracle-中的查询"><a href="#Oracle-中的序列-和-Oracle-中的查询" class="headerlink" title="Oracle 中的序列 和 Oracle 中的查询"></a>Oracle 中的序列 和 Oracle 中的查询</h2><ol><li>mysql数据中提供了数据库自增的选项,但是oracle中没有提供,只有利用序列实现主键自增的功能</li><li>sequence 就是序号,也可以说是序列</li></ol><h3 id="序列创建的语法"><a href="#序列创建的语法" class="headerlink" title="序列创建的语法"></a>序列创建的语法</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE seq1</span><br><span class="line"></span><br><span class="line">INCREMENT BY 1 -- 每次加几个</span><br><span class="line"></span><br><span class="line">START WITH 1 -- 从1开始计数</span><br><span class="line"></span><br><span class="line">NOMAXvalue -- 不设置最大值</span><br><span class="line"></span><br><span class="line">NOCYCLE -- 一直累加,不循环</span><br><span class="line"></span><br><span class="line">CACHE 10; --设置缓存cache个序列，如果系统down掉了或者其它情况将会导致序列不连续，也可以设置为---------NOCACHE</span><br></pre></td></tr></table></figure><h4 id="查看与操作序列信息"><a href="#查看与操作序列信息" class="headerlink" title="查看与操作序列信息"></a>查看与操作序列信息</h4><ol><li><p><code>select * from user_sequences;</code></p></li><li><p><code>Select * from all_sequences;</code></p></li><li><p>使用序列名.CurrVal：返回 sequence的当前值</p></li><li><p>使用序列名.NextVal：增加sequence的值，然后返回 增加后sequence值</p></li></ol><p><code>select seq1.currval from dual</code></p><ol><li>重新初始化seq的序号(可以使用修改)</li></ol><p><code>alter sequence seq1 increment by 1</code></p><ol><li>删除seq <code>drop sequence seq1</code></li></ol><h3 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h3><blockquote><p>emp 员工表（empno 员工号/ename 员工姓名/job 工作/mgr 上级编号/hiredate 受雇日期/sal 薪金/comm 佣金/deptno 部门编号）</p></blockquote><blockquote><p>dept 部门表（deptno 部门编号/dname 部门名称/loc 地点）</p></blockquote><h4 id="创建部门表"><a href="#创建部门表" class="headerlink" title="创建部门表"></a>创建部门表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">       deptno number(10) primary key,</span><br><span class="line">       dname varchar2(30),</span><br><span class="line">       loc varchar2(30)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="创建员工表"><a href="#创建员工表" class="headerlink" title="创建员工表"></a>创建员工表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">       empno number(10) primary key,</span><br><span class="line">       ename varchar2(30),</span><br><span class="line">       job varchar2(30),</span><br><span class="line">       mgr varchar2(30),</span><br><span class="line">       hiredate number(10),</span><br><span class="line">       sal number(10),</span><br><span class="line">       comm number(10),</span><br><span class="line">       deptno number(10),</span><br><span class="line">       foreign key(deptno) references dept(deptno)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">insert into dept values(seq1.nextval, &apos;技术部&apos; ,&apos;南泥湾&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;SALES&apos; ,&apos;深圳市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;事业部&apos; ,&apos;北京市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;服务部&apos; ,&apos;延安&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;生产部&apos; ,&apos;南京市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;宣传部&apos; ,&apos;上海市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;打杂部&apos; ,&apos;广州市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;司令部&apos; ,&apos;重庆市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;卫生部&apos; ,&apos;长沙市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;文化部&apos; ,&apos;武冈市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;娱乐部&apos; ,&apos;纽约&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;管理部&apos; ,&apos;伦敦&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;行政部&apos; ,&apos;天津市&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;1&apos;, &apos;关羽羽&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20011109&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;2&apos;, &apos;SMITH&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20120101&apos;, &apos;2000&apos;, &apos;800&apos;, &apos;6&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;3&apos;, &apos;刘备备&apos;, &apos;MANAGER&apos;, &apos;宋祖英&apos;, &apos;20080808&apos;, &apos;9000&apos;, &apos;4000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;4&apos;, &apos;TOM&apos;, &apos;ENGINEER&apos;, &apos;Steve&apos;, &apos;20050612&apos;, &apos;3000&apos;, &apos;1000&apos;, &apos;4&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;5&apos;, &apos;Steve&apos;, &apos;MANAGER&apos;, &apos;宋祖英&apos;, &apos;20110323&apos;, &apos;80000&apos;, &apos;9000&apos;, &apos;4&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;6&apos;, &apos;张飞飞&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20101010&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;7&apos;, &apos;SCOTT&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20071204&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;8&apos;, &apos;宋祖英&apos;, &apos;Boss&apos;, &apos;无&apos;, &apos;20060603&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;8&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;9&apos;, &apos;曹仁人&apos;, &apos;SALESMAN&apos;, &apos;曹操操&apos;, &apos;20120130&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;5&apos;);</span><br></pre></td></tr></table></figure><h4 id="rownum分页"><a href="#rownum分页" class="headerlink" title="rownum分页"></a>rownum分页</h4><p><code>SELECT  ROWNUM , dept.*  FROM dept</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM </span><br><span class="line">(</span><br><span class="line">SELECT  ROWNUM , dept.*  FROM dept </span><br><span class="line">WHERE  ROWNUM &lt; endNum</span><br><span class="line">)</span><br><span class="line">WHERE  ROWNUM &gt; startNum</span><br></pre></td></tr></table></figure><blockquote><p>计算起始位置和结束位置<br><code>startNum = (pageNo - 1) * pageSize</code><br><code>endNum = (pageNo * pageSize) + 1</code></p></blockquote><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><blockquote><p>分组查询使用group by  和  having 进行过滤条件筛选</p></blockquote><blockquote><p>子查询也就是条件中加入查询语句</p></blockquote><blockquote><p>连接查询,内连接（利用where或者inner join）,左和右连接(left join 和 right join),自连接(树菜单结构)</p></blockquote><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><blockquote><p>1.列出至少有一个员工的所有部门。<br><code>select deptno,dname,loc from dept where deptno in (select deptno from emp);</code></p></blockquote><blockquote><p>2.列出薪金比“SMITH”多的所有员工。（大于最大薪水SMITH员工）<br><code>select empno,ename,sal from emp where emp.sal&gt;(select sal from emp emp1 where emp1.ename = &#39;SMITH&#39;)</code></p></blockquote><blockquote><p>3.列出所有员工的姓名及其直接上级的姓名。<br><code>select a.ename,b.ename from emp a,emp b where a.mgr=b.ename;</code></p></blockquote><blockquote><p>4.列出受雇日期早于其直接上级的所有员工。<br><code>select a.empno, a.ename from emp a, emp b where a.mgr=b.ename and a.hiredate&lt;b.hiredate;</code></p></blockquote><blockquote><p>5.列出部门名称和这些部门的员工信息，包括那些没有员工的部门。<br><code>select dept.dname,emp.* from dept left join emp on dept.deptno = emp.deptno;</code></p></blockquote><blockquote><p>6.列出所有job为“CLERK”（办事员）的姓名及其部门名称。<br><code>select emp.ename,emp.job,dept.dname from emp,dept where emp.job = &#39;CLERK&#39; and emp.deptno = dept.deptno;</code></p></blockquote><blockquote><p>7.列出最低薪金大于1500的各种工作。<br><code>select job from emp group by job having min(sal)&gt;1500;</code></p></blockquote><blockquote><p>8.列出在部门“SALES”（销售部）工作的员工的姓名，假定不知道销售部的部门编号。<br><code>select emp.ename from emp  where emp.deptno =  (select deptno from dept  where dept.dname = &#39;SALES&#39;);</code></p></blockquote><blockquote><p>9.列出薪金高于公司平均薪金的所有员工。<br><code>select * from emp where emp.sal &gt; (select avg(sal) from emp)</code></p></blockquote><blockquote><p>10.列出与“SCOTT”从事相同工作的所有员工。<br><code>select * from emp where emp.job = (select job from emp e  where e.ename = &#39;SCOTT&#39;);</code></p></blockquote><blockquote><p>11.列出薪金等于部门3中员工的薪金的所有员工的姓名和薪金。<br><code>select ename,sal from emp where sal in (select sal from emp where deptno=3);</code></p></blockquote><blockquote><p>12.列出薪金高于在部门3工作的所有员工的薪金的员工姓名和薪金。<br><code>select ename,sal from emp where sal &gt; (select max(sal) from emp where deptno=3);</code></p></blockquote><blockquote><p>13.列出在每个部门工作的员工数量、平均工资。<br><code>select deptno,count(empno),avg(sal) from emp group by deptno</code></p></blockquote><blockquote><p>14.列出所有员工的姓名、部门名称和工资。<br><code>select emp.ename as 姓名, dept.dname as 部门, emp.sal+emp.comm as 工资 from emp,dept where dept.deptno = emp.deptno;</code></p></blockquote><blockquote><p>15.列出从事同一种工作但属于不同部门的员工的一种组合。<br><code>select a.ename, b.ename, a.job, b.job, a.deptno, b.deptno from emp a,emp b where a.job=b.job and a.deptno$amp;</code></p></blockquote><blockquote><p>16.列出所有部门的详细信息和部门人数。<br><code>select dept.*,(select count(*) from emp where dept.deptno = emp.deptno) as pop from dept;</code></p></blockquote><blockquote><p>17.列出各种工作的最低工资。<br><code>select job,min((nvl(comm,0)+sal)) from emp group by job</code></p></blockquote><blockquote><p>18.列出各个部门的MANAGER（经理）的最低薪金（job为MANAGER）。<br><code>select emp.deptno, min(sal) from emp,dept where job = &#39;MANAGER&#39; group by emp.deptno</code></p></blockquote><blockquote><p>19.列出所有员工的年工资，按年薪从低到高排序。<br><code>select ename,(nvl(comm,0)+sal)*12 年薪 from emp</code></p></blockquote><h2 id="oracle视图"><a href="#oracle视图" class="headerlink" title="oracle视图"></a>oracle视图</h2><blockquote><p>当某个业务需要多个数据融合在一起展现的时候,可以利用视图</p></blockquote><ol><li>视图只查不改</li><li>其实就是一张虚拟表</li></ol><blockquote><p>语法(切换到sys  grant CREATE any view to WANGWEIJIE)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create or replace view v1 (maxsal,minsal,avgsal)</span><br><span class="line">                              As</span><br><span class="line">                          select max(sal),min(sal),avg(sal)from emp</span><br></pre></td></tr></table></figure><h2 id="oracle触发器"><a href="#oracle触发器" class="headerlink" title="oracle触发器"></a>oracle触发器</h2><h3 id="订单表和仓库表"><a href="#订单表和仓库表" class="headerlink" title="订单表和仓库表"></a>订单表和仓库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table sorder(</span><br><span class="line">       orderNo number(10) primary key,</span><br><span class="line">       proDuctNo number(10),</span><br><span class="line">       orderNum number(30)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table sproduct(</span><br><span class="line">       pNo number(10) primary key,</span><br><span class="line">       pNum number(10)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>场景一:新增一个订单的时候,库存表数量减少  :new代表新行  和  :old代表删除和更新</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER abc1</span><br><span class="line">AFTER INSERT ON SORDER</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">  UPDATE SPRODUCT SET SPRODUCT.PNUM = SPRODUCT.PNUM-:NEW.ORDERNUM  WHERE SPRODUCT.PNO = :NEW.PRODUCTNO;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><blockquote><p>场景二: 删除一个订单</p></blockquote><blockquote><p>场景三: 修改一个订单</p></blockquote><h2 id="Oracle-中的存储过程"><a href="#Oracle-中的存储过程" class="headerlink" title="Oracle 中的存储过程"></a>Oracle 中的存储过程</h2><blockquote><p>无参数存储过程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure p1</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">dbms_output.put_line(&apos; 执行了 &apos;);</span><br><span class="line">end p1;</span><br><span class="line">call p1()</span><br></pre></td></tr></table></figure><blockquote><p>有参数的存储</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure p2(newname in varchar2)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">dbms_output.put_line(&apos; 执行了 &apos;||newname);</span><br><span class="line">end p2;</span><br></pre></td></tr></table></figure><blockquote><p>输出参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure p3(newname out varchar2)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">select 5 into newname from dual;</span><br><span class="line">end p3;</span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line">newname number;</span><br><span class="line">begin</span><br><span class="line">p3(newname);</span><br><span class="line">dbms_output.put_line(&apos; 数据库中一共有 &apos;||newname||&apos; 条数据 &apos;);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Oracle数据库也是一个数据库的中间力量&lt;/p&gt;
&lt;h1 id=&quot;oracle数据库操作&quot;&gt;&lt;a href=&quot;#oracle数据库操作&quot; class=&quot;headerlink&quot; title=&quot;oracle数据库操作&quot;&gt;&lt;/a&gt;oracle数据库操作&lt;/h1&gt;&lt;ol&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://djwwj.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据持久化" scheme="http://djwwj.top/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
      <category term="关系型数据库" scheme="http://djwwj.top/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
