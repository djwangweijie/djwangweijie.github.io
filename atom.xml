<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael_Wang</title>
  
  <subtitle>JavaAndKafka_Streams</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangweijie.vip/"/>
  <updated>2020-03-12T09:55:54.257Z</updated>
  <id>https://wangweijie.vip/</id>
  
  <author>
    <name>Michael_Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据分析之数据加载,存储与文件格式一</title>
    <link href="https://wangweijie.vip/2020/03/12/2020-03-12-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD,%E5%AD%98%E5%82%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%80/"/>
    <id>https://wangweijie.vip/2020/03/12/2020-03-12-数据分析之数据加载,存储与文件格式一/</id>
    <published>2020-03-12T09:51:23.602Z</published>
    <updated>2020-03-12T09:55:54.257Z</updated>
    
    <content type="html"><![CDATA[<p>越来越有意思了,坚持坚持</p><h1 id="数据加载-存储与文件格式"><a href="#数据加载-存储与文件格式" class="headerlink" title="数据加载,存储与文件格式"></a>数据加载,存储与文件格式</h1><ol><li>读写文本格式的数据</li></ol><h1 id="读写文本格式的数据"><a href="#读写文本格式的数据" class="headerlink" title="读写文本格式的数据"></a>读写文本格式的数据</h1><p><strong>利用pandas的数据输入和输出,输入和输出划分几个大类:读取文本文件,加载数据库中的数据,利用webapi操作网络资源</strong></p><p><em>pandas提供了一些用于将表格型数据读取为DataFrame对象的函数,其中readcsv和readtable是比较常用的</em></p><p><img src="/images/resources/23D189EEE4C6C444D185612801F3A4D3.jpg" alt="IMAGE"></p><h2 id="读取逗号分隔"><a href="#读取逗号分隔" class="headerlink" title="读取逗号分隔"></a>读取逗号分隔</h2><p><img src="/images/resources/357A130395CF4D4041DA632EBFDDFC63.jpg" alt="IMAGE"></p><h2 id="指定分隔符读取"><a href="#指定分隔符读取" class="headerlink" title="指定分隔符读取"></a>指定分隔符读取</h2><p><img src="/images/resources/E0E71DD5AF3431FC44948BB4DCE9CBC7.jpg" alt="IMAGE"></p><h2 id="针对无标题行的文件"><a href="#针对无标题行的文件" class="headerlink" title="针对无标题行的文件"></a>针对无标题行的文件</h2><p><img src="/images/resources/BBE50F2C8E1D1628662678FEBC588844.jpg" alt="IMAGE"></p><h2 id="多个列层次化索引"><a href="#多个列层次化索引" class="headerlink" title="多个列层次化索引"></a>多个列层次化索引</h2><p><img src="/images/resources/42A540AE135196981C90A3F4D16B5E12.jpg" alt="IMAGE"></p><h2 id="有些表格并未用特定的分隔符"><a href="#有些表格并未用特定的分隔符" class="headerlink" title="有些表格并未用特定的分隔符"></a>有些表格并未用特定的分隔符</h2><p><img src="/images/resources/D6D6005EE8006E6984971737006188B6.jpg" alt="IMAGE"></p><h2 id="跳过注释"><a href="#跳过注释" class="headerlink" title="跳过注释"></a>跳过注释</h2><p><img src="/images/resources/B448267808D01A37EBB5108B8E168F17.jpg" alt="IMAGE"></p><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><p><em>一般来说缺失值要么为空,要么没有.pandas会用一组经常出现的标记值进行识别.比如NA或者Null</em></p><p><img src="/images/resources/796A4385C946C618C0DBE10C16C85EBA.jpg" alt="IMAGE"></p><blockquote><p>通过na_value替换值</p></blockquote><p><img src="/images/resources/0B70D91BF50B5ED9C74C29061231C9F8.jpg" alt="IMAGE"></p><h1 id="逐块读取文本文件"><a href="#逐块读取文本文件" class="headerlink" title="逐块读取文本文件"></a>逐块读取文本文件</h1><p><em>在处理很大的文件时,找出大文件中参数以便后续处理.</em></p><p><img src="/images/resources/60D263B08F79D99C7C208D6EB3FB84F3.jpg" alt="IMAGE"></p><blockquote><p>通过nrows指定读取几行</p></blockquote><p><img src="/images/resources/41FED0784D2AD073C8AC69D0C6CC3687.jpg" alt="IMAGE"></p><blockquote><p>逐块读取</p></blockquote><p><img src="/images/resources/5AEECA7965A4633CDCAEE5AFD4D30DB5.jpg" alt="IMAGE"></p><h1 id="将数据学出到文本格式"><a href="#将数据学出到文本格式" class="headerlink" title="将数据学出到文本格式"></a>将数据学出到文本格式</h1><p><img src="/images/resources/F20041ABEE7C7CE345D535D84C844D0F.jpg" alt="IMAGE"></p><h2 id="弥补缺失值"><a href="#弥补缺失值" class="headerlink" title="弥补缺失值"></a>弥补缺失值</h2><p><img src="/images/resources/F92B1C8FE8C79CBDAFD81CBEF311BA86.jpg" alt="IMAGE"></p><h2 id="Series中使用"><a href="#Series中使用" class="headerlink" title="Series中使用"></a>Series中使用</h2><p><img src="/images/resources/1E06F16E7995F44712988C2BA06273B8.jpg" alt="IMAGE"></p><h1 id="处理分隔符格式"><a href="#处理分隔符格式" class="headerlink" title="处理分隔符格式"></a>处理分隔符格式</h1><p><img src="/images/resources/5627B5D9C1C3BA814BF586DD2DAF138F.jpg" alt="IMAGE"></p><h2 id="转化为符合要求的数据格式"><a href="#转化为符合要求的数据格式" class="headerlink" title="转化为符合要求的数据格式"></a>转化为符合要求的数据格式</h2><p><img src="/images/resources/2290E16C74C0D981CBB2D0B64BA75FAE.jpg" alt="IMAGE"></p><h1 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj = &quot;&quot;&quot;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Wes&quot;,</span><br><span class="line"> &quot;places_lived&quot;: [&quot;United States&quot;, &quot;Spain&quot;, &quot;Germany&quot;],</span><br><span class="line"> &quot;pet&quot;: null,</span><br><span class="line"> &quot;siblings&quot;: [&#123;&quot;name&quot;: &quot;Scott&quot;, &quot;age&quot;: 30, &quot;pets&quot;: [&quot;Zeus&quot;, &quot;Zuko&quot;]&#125;,</span><br><span class="line">              &#123;&quot;name&quot;: &quot;Katie&quot;, &quot;age&quot;: 38,</span><br><span class="line">               &quot;pets&quot;: [&quot;Sixes&quot;, &quot;Stache&quot;, &quot;Cisco&quot;]&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>json之间的转换</p></blockquote><p><img src="/images/resources/B4642409C5BDA4E662A1A0BB3A3211C3.jpg" alt="IMAGE"></p><p><em>向一个DataFrame传入一个字典列表</em></p><p><img src="/images/resources/C11761008907A190F414B36232E217F8.jpg" alt="IMAGE"></p><h2 id="特殊json"><a href="#特殊json" class="headerlink" title="特殊json"></a>特殊json</h2><p><em>假定json数组中每个对象是表格中的一行</em></p><p><img src="/images/resources/6EB53048023D8991EB7C054A8CCE7C4B.jpg" alt="IMAGE"></p><h1 id="web信息收集"><a href="#web信息收集" class="headerlink" title="web信息收集"></a>web信息收集</h1><p><em>安装所需要的库</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml -i http://pypi.douban.com/simple/</span><br><span class="line">pip3 install bs4 html5lib -i  https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><img src="/images/resources/21586CCA9869613663D9B3138DCDB1AE.jpg" alt="IMAGE"></p><blockquote><p>小例子看出现频率最高的</p></blockquote><p><img src="/images/resources/98A2A27DAEB73604AAB75DF9F5253846.jpg" alt="IMAGE"></p><h1 id="解析html"><a href="#解析html" class="headerlink" title="解析html"></a>解析html</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests -i  https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><blockquote><p>有待改进</p></blockquote><p><img src="/images/resources/B1FD16DD45E34A3F0D76FB729F453463.jpg" alt="IMAGE"></p><p><img src="/images/resources/B7E8395E04CD9E34F48A3FB6DA0F0437.jpg" alt="IMAGE"></p><blockquote><p>再次优化</p></blockquote><p><img src="/images/resources/5ED7ABACCA992D196669BBE9508A48DE.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;越来越有意思了,坚持坚持&lt;/p&gt;
&lt;h1 id=&quot;数据加载-存储与文件格式&quot;&gt;&lt;a href=&quot;#数据加载-存储与文件格式&quot; class=&quot;headerlink&quot; title=&quot;数据加载,存储与文件格式&quot;&gt;&lt;/a&gt;数据加载,存储与文件格式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;读写文本
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据加载" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="爬取数据" scheme="https://wangweijie.vip/tags/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    
      <category term="推导式转换" scheme="https://wangweijie.vip/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础三</title>
    <link href="https://wangweijie.vip/2020/03/11/2020-03-11-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://wangweijie.vip/2020/03/11/2020-03-11-数据分析之Pandas基础三/</id>
    <published>2020-03-11T10:29:02.482Z</published>
    <updated>2020-03-11T10:32:26.509Z</updated>
    
    <content type="html"><![CDATA[<p>协方差和相关系数非常的有意思,可以让你衍生出现在就想关心数据应该怎么组合</p><h1 id="pandas基础三"><a href="#pandas基础三" class="headerlink" title="pandas基础三"></a>pandas基础三</h1><ol><li>汇总和计算描述统计</li></ol><h1 id="汇总和计算描述统计"><a href="#汇总和计算描述统计" class="headerlink" title="汇总和计算描述统计"></a>汇总和计算描述统计</h1><p><em>pandas对象拥有一组常用的数学和统计方法,大部分是属于约简和汇总统计。用于从series提取单个值或者从DataFrame的行或者列中提取一个series,都是基于没有缺失数据假设构建的</em></p><h2 id="返回一个列的所有的和"><a href="#返回一个列的所有的和" class="headerlink" title="返回一个列的所有的和"></a>返回一个列的所有的和</h2><p><img src="/images/resources/397D5DE6F47AAA4469F869F9E2F2F680.jpg" alt="IMAGE"></p><h2 id="按照行进行求和运算"><a href="#按照行进行求和运算" class="headerlink" title="按照行进行求和运算"></a>按照行进行求和运算</h2><p><img src="/images/resources/502E320217EEDFE8D99CA0350862F280.jpg" alt="IMAGE"></p><h2 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h2><p><img src="/images/resources/72B6F078302860EDCAAF9DA90AC09A88.jpg" alt="IMAGE"></p><h1 id="间接统计和累计统计-以及多次汇总"><a href="#间接统计和累计统计-以及多次汇总" class="headerlink" title="间接统计和累计统计,以及多次汇总"></a>间接统计和累计统计,以及多次汇总</h1><p><img src="/images/resources/BD2EED97C03311D91A77FE78ADC85E4E.jpg" alt="IMAGE"></p><p><img src="/images/resources/64D422CBA1611CBDB6C16A3DD2E94B63.jpg" alt="IMAGE"></p><p><em>例如，两组数的集合{0,5,9,14}和{5,6,8,9}其平均值都是7，但第二个集合具有较小的标准差。标准差可以当作不确定性的一种测量。例如在物理科学中，做重复性测量时，测量数值集合的标准差代表这些测量的精确度。当要决定测量值是否符合预测值，测量值的标准差占有决定性重要角色：如果测量平均值与预测值相差太远（同时与标准差数值做比较），则认为测量值与预测值互相矛盾。这很容易理解，因为如果测量值都落在一定数值范围之外，可以合理推论预测值是否正确。标准差应用于投资上，可作为量度回报稳定性的指标。标准差数值越大，代表回报远离过去平均数值，回报较不稳定故风险越高。相反，标准差数值越小，代表回报较为稳定，风险亦较小</em></p><p><strong>计算均方差，要看样本量是等概率，还有概率的。如果没有概率，直接计算离差的平方=（样本金额-平均值）的平方，然后所以样本量的离差平方求和，再除以（样本个数-1），然后开根号，就是标准差。如果有概率的话，只需要在计算合计数时考虑加权平均，不用再除以个数-1，直接开根号。</strong></p><h2 id="对于非数值的统计"><a href="#对于非数值的统计" class="headerlink" title="对于非数值的统计"></a>对于非数值的统计</h2><p><img src="/images/resources/D53FACBC72803DCF6187EC2B7CED2994.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF9305827B4E7496535E25C6486F970C.jpg" alt="IMAGE"></p><h1 id="相关系数与协方差"><a href="#相关系数与协方差" class="headerlink" title="相关系数与协方差"></a>相关系数与协方差</h1><p><strong>1、协方差是一个用于测量投资组合中某一具体投资项目相对于另一投资项目风险的统计指标,通俗点就是投资组合中两个项目间收益率的相关程度,正数说明两个项目一个收益率上升,另一个也上升,收益率呈同方向变化.如果是负数,则一个上升另一个下降,表明收益率是反方向变化.协方差的绝对值越大,表示这两种资产收益率关系越密切；绝对值越小表明这两种资产收益率的关系越疏远.2、由于协方差比较难理解,所以将协方差除以两个投资方案投资收益率的标准差之积,得出一个与协方差具有相同性质却没有量化的数.这个数就是相关系数.计算公式为相关系数=协方差/两个项目标准差之积.</strong></p><p><img src="/images/resources/463511E3272F850757BE5223D5BFD9C1.jpg" alt="IMAGE"></p><p>关于相关系数可以参考如下2篇文章</p><p><a href="https://blog.csdn.net/qq_38788128/article/details/80662712" target="_blank" rel="noopener">协方差和相关系数</a></p><p><a href="https://www.cnblogs.com/ggzhangxiaochao/p/9100575.html" target="_blank" rel="noopener">计算相关系数</a></p><p><img src="/images/resources/08F110C7415F1511DBA885FC41F73175.jpg" alt="IMAGE"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实协方差和相关系数除了公式还要琢磨之外,更多的应该理解他们的作用。其实也是看待一件事物和另一件事物的紧密性,也可以叫做关联度.可以用到彩票,交易,产业发展组合</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;协方差和相关系数非常的有意思,可以让你衍生出现在就想关心数据应该怎么组合&lt;/p&gt;
&lt;h1 id=&quot;pandas基础三&quot;&gt;&lt;a href=&quot;#pandas基础三&quot; class=&quot;headerlink&quot; title=&quot;pandas基础三&quot;&gt;&lt;/a&gt;pandas基础三&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://wangweijie.vip/tags/Pandas/"/>
    
      <category term="汇总统计" scheme="https://wangweijie.vip/tags/%E6%B1%87%E6%80%BB%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="协方差和相关系数" scheme="https://wangweijie.vip/tags/%E5%8D%8F%E6%96%B9%E5%B7%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础二</title>
    <link href="https://wangweijie.vip/2020/03/06/2020-03-06-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://wangweijie.vip/2020/03/06/2020-03-06-数据分析之Pandas基础二/</id>
    <published>2020-03-06T10:11:33.343Z</published>
    <updated>2020-03-06T10:16:11.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas基础二"><a href="#pandas基础二" class="headerlink" title="pandas基础二"></a>pandas基础二</h1><ol><li>基本功能</li></ol><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><p><strong>介绍Series和DataFrame的数据的基本操作</strong></p><h2 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h2><p><strong>pandas对象的一个重要方法是reindex,其作用是创建一个新对象,它的数据符合新的索引</strong></p><p><em>索引会根据reindex进行重排.如果某个索引值不存在,引入缺失值</em></p><p><img src="/images/resources/9BDC0097F09DEA77D4E6CF2D0FA1B710.jpg" alt="IMAGE"></p><p><em>对于时间序列的有序数据,重新索引需要一些插值处理.method选项可以操作,ffill是使用前面的值填充，bfill是使用后面的值填充。</em></p><p><img src="/images/resources/C9E0944093E2CBE2E491AFFE621AE20E.jpg" alt="IMAGE"></p><p><em>如果使用dataFrame,reindex可以修改行索引和列.只传递一个序列时,会重新索引结果的行</em></p><p><img src="/images/resources/93FFF2D082F2D3890B63D0F7010B3D24.jpg" alt="IMAGE"></p><p><em>同样的可以用column重新索引</em></p><p><img src="/images/resources/0F000BE435E2EA1306B7D32A6C62808D.jpg" alt="IMAGE"></p><h2 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h2><p><em>丢弃某条轴上面的一个或多个项很简单,只要有一个索引数组和列表即可</em></p><blockquote><p>针对series</p></blockquote><p><img src="/images/resources/7353F34AF4358F5AC59CB1FB9F369DD9.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame</p></blockquote><p><img src="/images/resources/7A8C2C4FD804A1C7410452D34E7507A6.jpg" alt="IMAGE"></p><h2 id="索引-选取和过滤"><a href="#索引-选取和过滤" class="headerlink" title="索引,选取和过滤"></a>索引,选取和过滤</h2><p><em>Series索引的工作方式类似numpy的索引,不过Series索引不只是整数</em></p><p><img src="/images/resources/7351085614E730AFB16DE45308814F25.jpg" alt="IMAGE"></p><p><em>切片运算有一些不同,其尾部是包含的</em></p><p><img src="/images/resources/7A0331DEDD87362F3AEC3201C3EE9C01.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame进行索引就是获取一个或者多个列</p></blockquote><p><img src="/images/resources/7319D3EF1A4A8DE696F09B53389A590F.jpg" alt="IMAGE"></p><blockquote><p>通过布尔类型</p></blockquote><p><img src="/images/resources/22F4A8FE59FBCDEDF8B32AF6DF724996.jpg" alt="IMAGE"></p><h2 id="用loc和iloc进行选取"><a href="#用loc和iloc进行选取" class="headerlink" title="用loc和iloc进行选取"></a>用loc和iloc进行选取</h2><p><em>对于dataFrame的行的标签索引可以使用loc和iloc,从DataFrame选择行和列的子集</em></p><p><em>通过2个方法选择一行和多列</em></p><p><img src="/images/resources/894761833E06C016E74B82062734631E.jpg" alt="IMAGE"></p><blockquote><p>同样适用于一个标签或者多个标签的切片</p></blockquote><p><img src="/images/resources/6871D92ED768889804D363F2FEC2BF6B.jpg" alt="IMAGE"></p><h3 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h3><p><img src="/images/resources/B5ECFDA35DD96A84887265201CB4BB2B.jpg" alt="IMAGE"></p><h2 id="算术预算和数据对齐"><a href="#算术预算和数据对齐" class="headerlink" title="算术预算和数据对齐"></a>算术预算和数据对齐</h2><p><strong>pandas重要的功能可以对不同索引的对象进行算术运算.对象相加时,存在不同的索引对.结果的索引就是该索引对的并集.</strong></p><p><img src="/images/resources/768E050A7B25854EDF9B8845A27267C4.jpg" alt="IMAGE"></p><p><img src="/images/resources/2E2FD992E1E33DFD0E3161410BE581E4.jpg" alt="IMAGE"></p><p><em>注意:Dataframe相加,没有共用的列或者行标签.结果都会是空</em></p><h3 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h3><p><img src="/images/resources/CC2D1E9C2547EE128E311C6AF9367F17.jpg" alt="IMAGE"></p><p>现在出现了na值,我填充一个特殊值怎么做</p><p><img src="/images/resources/7D41E072E3FD6C92DC6331849927178C.jpg" alt="IMAGE"></p><h4 id="可用的方法"><a href="#可用的方法" class="headerlink" title="可用的方法"></a>可用的方法</h4><p><img src="/images/resources/48895A322DD3FB5F1045308877149C5A.jpg" alt="IMAGE"></p><h3 id="同理"><a href="#同理" class="headerlink" title="同理"></a>同理</h3><p><img src="/images/resources/C95328773A6D7823317007F7E36EDCE5.jpg" alt="IMAGE"></p><h2 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h2><p><em>先看一个二维数组和一维数组相加</em></p><p><img src="/images/resources/CF1037DF0C3A3A52A59EC87974E624DC.jpg" alt="IMAGE"></p><p><em>同理,2者相加也一样</em></p><p><img src="/images/resources/826D251964FBC4E8373EEBE0CF520901.jpg" alt="IMAGE"></p><blockquote><p> 如果某个索引值找不到,则形成并集</p></blockquote><p><img src="/images/resources/52B8A7FE27D199B9AE096E2FD8C84715.jpg" alt="IMAGE"></p><p><img src="/images/resources/5E495F1869604983BEDD4DF846A5A8D8.jpg" alt="IMAGE"></p><h2 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h2><p><em>Numpy的ufuncs也可以用于操作pandas对象</em></p><p><img src="/images/resources/DAD1B6459E2C11DB815B4F94E966E6E4.jpg" alt="IMAGE"></p><p><img src="/images/resources/C952B31738FE3A6228A48D0935B1B5AF.jpg" alt="IMAGE"></p><p><a href="https://www.cnblogs.com/rrttp/p/8028421.html" target="_blank" rel="noopener">附上重新对二维数组的理解</a></p><h2 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h2><p><em>根据条件对数据集进行排序也是一种重要的内置计算,对行和列索引进行排序可以使用sortindex,返回一个已排序的新对象</em></p><p><img src="/images/resources/A1CD6A6ECCD28CE0D359490DB5036DE6.jpg" alt="IMAGE"></p><p><img src="/images/resources/B3CD803CC76040FDFF17377BA92FF5C5.jpg" alt="IMAGE"></p><h3 id="升序或者降序"><a href="#升序或者降序" class="headerlink" title="升序或者降序"></a>升序或者降序</h3><p><img src="/images/resources/688E7830127A870F6F3CB52C85ACB0A5.jpg" alt="IMAGE"></p><h3 id="按值对series排列使用sortvalues"><a href="#按值对series排列使用sortvalues" class="headerlink" title="按值对series排列使用sortvalues"></a>按值对series排列使用sortvalues</h3><p><img src="/images/resources/3D1EBC84FE57EAE5C7BE86682DC2A961.jpg" alt="IMAGE"></p><h3 id="排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可"><a href="#排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可" class="headerlink" title="排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可"></a>排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可</h3><p><img src="/images/resources/10B0A26170E3C5E1756C1202A4E84A6F.jpg" alt="IMAGE"></p><h2 id="rank方法"><a href="#rank方法" class="headerlink" title="rank方法"></a>rank方法</h2><p><em>rank是通过为各组分配一个平均排名的方式破坏平级关系</em></p><p><img src="/images/resources/985131ED1CD51544359627ACB66474B1.jpg" alt="IMAGE"></p><blockquote><p>针对dataframe</p></blockquote><p><img src="/images/resources/E2ADE065F80F8E164F7F3A7B38F0B21D.jpg" alt="IMAGE"></p><p><img src="/images/resources/47F006D8E2560638A7017A96F8E4EBFB.jpg" alt="IMAGE"></p><p><img src="/images/resources/A62806819F26AADFC24D702AA9143EA9.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pandas基础二&quot;&gt;&lt;a href=&quot;#pandas基础二&quot; class=&quot;headerlink&quot; title=&quot;pandas基础二&quot;&gt;&lt;/a&gt;pandas基础二&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基本功能&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;基本功能&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://wangweijie.vip/tags/Pandas/"/>
    
      <category term="Series和DateFrame基本功能" scheme="https://wangweijie.vip/tags/Series%E5%92%8CDateFrame%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/"/>
    
      <category term="排序筛选和rank" scheme="https://wangweijie.vip/tags/%E6%8E%92%E5%BA%8F%E7%AD%9B%E9%80%89%E5%92%8Crank/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础一</title>
    <link href="https://wangweijie.vip/2020/03/04/2020-03-04-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://wangweijie.vip/2020/03/04/2020-03-04-数据分析之Pandas基础一/</id>
    <published>2020-03-04T08:07:47.340Z</published>
    <updated>2020-03-04T08:11:39.475Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析之路漫漫,贵在坚持.梅花香自苦寒来</p><h1 id="pandas基础一"><a href="#pandas基础一" class="headerlink" title="pandas基础一"></a>pandas基础一</h1><ol><li>pandas的数据结构说明</li><li>pandas的数据结构介绍</li></ol><h1 id="pandas的数据结构说明"><a href="#pandas的数据结构说明" class="headerlink" title="pandas的数据结构说明"></a>pandas的数据结构说明</h1><p><strong>pandas含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具</strong></p><p><em>pandas是基于Numpy数组构建的,特别是基于数组的函数和不适用for循环的数据处理</em></p><blockquote><p>特点</p></blockquote><ol><li>pandas是专门为处理表格和混杂数据设计的</li><li>而Numpy更适合处理统一的数值数组数据</li><li>用的最多的是使用Series 和 DataFrame</li></ol><p><em>注意:别忘记安装pandas库</em></p><p><img src="/images/resources/88CD09B313660A19B2FF379849FA20B2.jpg" alt="IMAGE"></p><h1 id="pandas数据结构介绍"><a href="#pandas数据结构介绍" class="headerlink" title="pandas数据结构介绍"></a>pandas数据结构介绍</h1><p><em>pandas主要有2个非常重要的数据结构,分别是Series和DataFrame,他们提供了一种可靠的易于使用的基础</em></p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><p><strong>Series类似于一维数组的对象,由一组数据以及一组与之相关的数据标签组成</strong></p><p><img src="/images/resources/A4142743805F1077B093A14B458BB029.jpg" alt="IMAGE"></p><h2 id="自定义索引"><a href="#自定义索引" class="headerlink" title="自定义索引"></a>自定义索引</h2><p><img src="/images/resources/6F6405959DB48E08CC1642CCC752CD57.jpg" alt="IMAGE"></p><h2 id="一些运算"><a href="#一些运算" class="headerlink" title="一些运算"></a>一些运算</h2><p><img src="/images/resources/7BE46C9893AB0FD3908A941678D102C2.jpg" alt="IMAGE"></p><h2 id="类比定长的有序字典"><a href="#类比定长的有序字典" class="headerlink" title="类比定长的有序字典"></a>类比定长的有序字典</h2><p><img src="/images/resources/3547579C9D9BA67EA5CF325065259CB7.jpg" alt="IMAGE"></p><h2 id="通过字典创建Series"><a href="#通过字典创建Series" class="headerlink" title="通过字典创建Series"></a>通过字典创建Series</h2><p><img src="/images/resources/7F502060F619168FD4C5F1427CEF9640.jpg" alt="IMAGE"></p><h2 id="检测缺失值"><a href="#检测缺失值" class="headerlink" title="检测缺失值"></a>检测缺失值</h2><p><img src="/images/resources/F697479E51D87F2756F7270FA876CA7B.jpg" alt="IMAGE"></p><h2 id="重要功能"><a href="#重要功能" class="headerlink" title="重要功能"></a>重要功能</h2><p><em>Series最重要的一个功能是会根据运算的索引标签自动对齐数据</em></p><p><img src="/images/resources/DB8A9349293AD3B3B65A44B7B558C9DE.jpg" alt="IMAGE"></p><p><em>Series对象本身和索引都有一个name属性,这个属性和pandas的其它关键功能非常密切</em></p><p><img src="/images/resources/A91A7465D6DD9BE1FA05F1CBA8C0070B.jpg" alt="IMAGE"></p><p><img src="/images/resources/FD5C2D5BBF43BB0341A628CBE34D8434.jpg" alt="IMAGE"></p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p><strong>DataFrame是一个表格型的数据结构,含有一组有序的列,每列可以是不同的值类型。</strong></p><p><strong>DataFrame既有行索引也有列索引.其中的数据是以一个或多个二维快存放的</strong></p><p><img src="/images/resources/FC8BE5DCDE41BD7B1F66E0523A4C009C.jpg" alt="IMAGE"></p><h2 id="通过head方法取前5行数据"><a href="#通过head方法取前5行数据" class="headerlink" title="通过head方法取前5行数据"></a>通过head方法取前5行数据</h2><p><img src="/images/resources/4FB1C62EBE27D09EA14245E2E3F9460F.jpg" alt="IMAGE"></p><h2 id="可以指定具体列进行排列"><a href="#可以指定具体列进行排列" class="headerlink" title="可以指定具体列进行排列"></a>可以指定具体列进行排列</h2><p><img src="/images/resources/7FA2BF24A53B211DE9BFDC215EDD2C8D.jpg" alt="IMAGE"></p><h2 id="如果传入列数据找不到产生缺失值"><a href="#如果传入列数据找不到产生缺失值" class="headerlink" title="如果传入列数据找不到产生缺失值"></a>如果传入列数据找不到产生缺失值</h2><p><img src="/images/resources/882E4D78E86BD8221CA1BB45D8936978.jpg" alt="IMAGE"></p><h2 id="通过字典表及或者属性方式可以获取一个series"><a href="#通过字典表及或者属性方式可以获取一个series" class="headerlink" title="通过字典表及或者属性方式可以获取一个series"></a>通过字典表及或者属性方式可以获取一个series</h2><p><img src="/images/resources/0B80E7821F7DA17AE427147A2A643072.jpg" alt="IMAGE"></p><h2 id="行值和列值得获取"><a href="#行值和列值得获取" class="headerlink" title="行值和列值得获取"></a>行值和列值得获取</h2><p><img src="/images/resources/2BD3FC96B668E81FEC2DF0BD6D91CF9B.jpg" alt="IMAGE"></p><p><img src="/images/resources/CCD83E6B1FF65BC80FE17989438CFF2F.jpg" alt="IMAGE"></p><p><img src="/images/resources/568D31C4F3DD6A95D43C1163ADDC30D1.jpg" alt="IMAGE"></p><h2 id="使用del删除列"><a href="#使用del删除列" class="headerlink" title="使用del删除列"></a>使用del删除列</h2><p><img src="/images/resources/19F16C6E44BC29A0C9F48CC33337C646.jpg" alt="IMAGE"></p><h2 id="处理另一种常见的数据-嵌套字典"><a href="#处理另一种常见的数据-嵌套字典" class="headerlink" title="处理另一种常见的数据(嵌套字典)"></a>处理另一种常见的数据(嵌套字典)</h2><p><em>嵌套字典转换为dataframe,外层字典的键作为列,内层键作为行索引</em></p><p><img src="/images/resources/0B783659837B4B45550DCD0A2D069CF4.jpg" alt="IMAGE"></p><blockquote><p>可以用T方法进行行和列的交换</p></blockquote><p><img src="/images/resources/165731CAF591EECFFA8792E7FB45B87C.jpg" alt="IMAGE"></p><p><img src="/images/resources/C520465EF26DA48624910E6EF27C9015.jpg" alt="IMAGE"></p><h2 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h2><p><strong>pandas的索引对象负责管理元数据,无论构建哪种类型,用到的任何数组和序列都会转换成一个Index</strong></p><p><em>注意:与集合不同,pandas的索引是可以包含重复的标签</em></p><h3 id="索引一些方法和属性"><a href="#索引一些方法和属性" class="headerlink" title="索引一些方法和属性"></a>索引一些方法和属性</h3><p><img src="/images/resources/0B23645E7219188A633CD06D6395594D.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据分析之路漫漫,贵在坚持.梅花香自苦寒来&lt;/p&gt;
&lt;h1 id=&quot;pandas基础一&quot;&gt;&lt;a href=&quot;#pandas基础一&quot; class=&quot;headerlink&quot; title=&quot;pandas基础一&quot;&gt;&lt;/a&gt;pandas基础一&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pandas的
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas初始" scheme="https://wangweijie.vip/tags/Pandas%E5%88%9D%E5%A7%8B/"/>
    
      <category term="Series和DateFrame" scheme="https://wangweijie.vip/tags/Series%E5%92%8CDateFrame/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础三</title>
    <link href="https://wangweijie.vip/2020/03/03/2020-03-03-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://wangweijie.vip/2020/03/03/2020-03-03-数据分析之python Numpy基础三/</id>
    <published>2020-03-03T13:23:33.855Z</published>
    <updated>2020-03-03T13:29:51.741Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy数组的基础就结束了,让我们进入更高级的pandas(盼达)学习。</p><h1 id="Numpy基础三"><a href="#Numpy基础三" class="headerlink" title="Numpy基础三"></a>Numpy基础三</h1><ol><li>线性代数</li><li>伪随机数生成</li><li>随机漫步示例</li></ol><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><p><em>Numpy提供了一个用于矩阵乘法的dot函数.</em></p><p><img src="/images/resources/362A8F715792CAFBF2B9F7A3B7E7E7E8.jpg" alt="IMAGE"></p><p><em>关于线性代数,现在熟知dot函数.后续分析中涉及到线性代数在回来补充</em></p><h1 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h1><p><strong>numpy.random模块对python内置的random进行了补充,增加了一些用于高效生成多种概率分布的样本值的函数</strong></p><p><img src="/images/resources/8EC7A1805DAF15F41E4036B717D10648.jpg" alt="IMAGE"></p><h2 id="随机数生成种子"><a href="#随机数生成种子" class="headerlink" title="随机数生成种子"></a>随机数生成种子</h2><p><em>通过np.random.seed(1234)更改随机数生成种子</em></p><p><img src="/images/resources/C54E2D7CAACE815DD007F54DCA1856D8.jpg" alt="IMAGE"></p><p><em>numpy.random的数据生成函数使用了全局的随机种子,要避免全局状态.可以使用numpy.random.RandomState</em></p><p><img src="/images/resources/D16BB939E186B4872430CE085155327B.jpg" alt="IMAGE"></p><p><img src="/images/resources/7A94C00607D582EEB9E6358C63557EBF.jpg" alt="IMAGE"></p><h1 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h1><p><a href="http://www.360doc.com/content/18/0103/13/48634131_718673400.shtml" target="_blank" rel="noopener">随机漫步理论</a></p><p><img src="/images/resources/34B14C90E36B18C003D482B8172E021F.jpg" alt="IMAGE"></p><p><img src="/images/resources/2D3973E5E0D27F6BAA0D59B25339CE61.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Numpy数组的基础就结束了,让我们进入更高级的pandas(盼达)学习。&lt;/p&gt;
&lt;h1 id=&quot;Numpy基础三&quot;&gt;&lt;a href=&quot;#Numpy基础三&quot; class=&quot;headerlink&quot; title=&quot;Numpy基础三&quot;&gt;&lt;/a&gt;Numpy基础三&lt;/h1&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://wangweijie.vip/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Numpy简单结束" scheme="https://wangweijie.vip/tags/Numpy%E7%AE%80%E5%8D%95%E7%BB%93%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础二</title>
    <link href="https://wangweijie.vip/2020/03/02/2020-03-02-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://wangweijie.vip/2020/03/02/2020-03-02-数据分析之python Numpy基础二/</id>
    <published>2020-03-02T14:41:27.052Z</published>
    <updated>2020-03-03T13:25:59.819Z</updated>
    
    <content type="html"><![CDATA[<p>打好基础,再接再厉</p><h1 id="Numpy基础二"><a href="#Numpy基础二" class="headerlink" title="Numpy基础二"></a>Numpy基础二</h1><ol><li>通用函数:快速的元素级数组函数</li><li>利用数组进行数据处理</li><li>用于数组的文件输入输出</li></ol><h1 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h1><p><em>通用函数是一种对ndarray中数据执行元素级运算的函数</em></p><p><strong>意味着这些函数都是简单的元素级的变体</strong></p><p><img src="/images/resources/B4C2E49F862549A0D05822F4B4154450.jpg" alt="IMAGE"></p><h2 id="返回浮点数数组的小数和整数部分"><a href="#返回浮点数数组的小数和整数部分" class="headerlink" title="返回浮点数数组的小数和整数部分"></a>返回浮点数数组的小数和整数部分</h2><p><img src="/images/resources/D12B9EED4A943291BD1F34DC02943C5C.jpg" alt="IMAGE"></p><h2 id="常用的一元函数和二元函数"><a href="#常用的一元函数和二元函数" class="headerlink" title="常用的一元函数和二元函数"></a>常用的一元函数和二元函数</h2><p><img src="/images/resources/AC90DE595FF8CCC057E1A4584C0341B2.jpg" alt="IMAGE"></p><p><img src="/images/resources/D3D9EE17516757B0B21171AD73BB5077.jpg" alt="IMAGE"></p><h1 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h1><p><em>Numpy数组可以将许多种数据处理任务表述为见解的数据表达式</em></p><p><em>用数组表达式代替循环的做法通常叫做矢量化</em></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>二维坐标系中,X轴可以取三个值1,2,3, Y轴可以取三个值7,8, 请问可以获得多少个点的坐标?<br>显而易见是6个:(1,7)(2,7)(3,7)(1,8)(2,8)(3,8)</p><p><img src="/images/resources/84E2DDE622F52D2721B12CF82DE9C42A.jpg" alt="IMAGE"></p><blockquote><p>同理</p></blockquote><p><img src="/images/resources/72CD7C9AF8509AA0B9E0A147EEED3836.jpg" alt="IMAGE"></p><h2 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h2><p><strong>np.where函数是三元表达式矢量化版本</strong></p><blockquote><p>示例1</p></blockquote><p><img src="/images/resources/1DD93E080A4DBB84A77416995B838C9B.jpg" alt="IMAGE"></p><p><strong>np.where第二个和第三个参数不必是数组.where通常用于根据另一数组产生一个新的数组</strong></p><blockquote><p>示例2</p></blockquote><p><img src="/images/resources/97D6AD816E15EEDFEBC2D8EF91418D2D.jpg" alt="IMAGE"></p><p><img src="/images/resources/18EF14277B0F5735712190CD90FE852A.jpg" alt="IMAGE"></p><h2 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h2><p><strong>通过数组上的一组数学函数对整个数组或者某个轴向的数据进行统计计算</strong></p><p><img src="/images/resources/45DD2579270F072E6CFBA4C0FB2412D1.jpg" alt="IMAGE"></p><h3 id="累加函数"><a href="#累加函数" class="headerlink" title="累加函数"></a>累加函数</h3><p><img src="/images/resources/AC380099DCBAB4226AD87CA4755D79F8.jpg" alt="IMAGE"></p><h3 id="用于布尔类型数组的方法"><a href="#用于布尔类型数组的方法" class="headerlink" title="用于布尔类型数组的方法"></a>用于布尔类型数组的方法</h3><p><img src="/images/resources/E6720DC66940B94A9A11EB0AD5599BC1.jpg" alt="IMAGE"></p><h2 id="np数组的排序"><a href="#np数组的排序" class="headerlink" title="np数组的排序"></a>np数组的排序</h2><p><em>和python内置的列表类型一样,Numpy也可以通过sort方法进行排序</em></p><p><img src="/images/resources/1A281F79633FC71DD7AE70E52774823C.jpg" alt="IMAGE"></p><h3 id="多维数组以及定位"><a href="#多维数组以及定位" class="headerlink" title="多维数组以及定位"></a>多维数组以及定位</h3><p><img src="/images/resources/A5A27EF88BC7B537965014B0DF17F999.jpg" alt="IMAGE"></p><h2 id="唯一化以及其他集合逻辑"><a href="#唯一化以及其他集合逻辑" class="headerlink" title="唯一化以及其他集合逻辑"></a>唯一化以及其他集合逻辑</h2><p><em>通过unique用于找出数组中唯一值,并返回已排序的结果</em></p><p><img src="/images/resources/E2DE6434620F241B300CDE577C7DD4F6.jpg" alt="IMAGE"></p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p><em>通过np.in1d用于测试一个数组中的值在另一数组中的成员资格,返回布尔类型数组</em></p><p><img src="/images/resources/4C5DD070851221955F8E20569F9EA4DA.jpg" alt="IMAGE"></p><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><p><em>np.save和np.load是读写磁盘数组数据的2个主要函数,保存的扩展名为.npy</em></p><p><img src="/images/resources/73478F71A9C34879AD93B344FED9A451.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打好基础,再接再厉&lt;/p&gt;
&lt;h1 id=&quot;Numpy基础二&quot;&gt;&lt;a href=&quot;#Numpy基础二&quot; class=&quot;headerlink&quot; title=&quot;Numpy基础二&quot;&gt;&lt;/a&gt;Numpy基础二&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通用函数:快速的元素级数组函数&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://wangweijie.vip/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="文件的输入输出读写" scheme="https://wangweijie.vip/tags/%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础一</title>
    <link href="https://wangweijie.vip/2020/02/28/2020-02-28-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://wangweijie.vip/2020/02/28/2020-02-28-数据分析之python Numpy基础一/</id>
    <published>2020-02-28T11:04:41.920Z</published>
    <updated>2020-02-28T11:18:27.626Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy可以好好补补数学.捡起了儿时的快乐</p><h1 id="数组和矢量计算"><a href="#数组和矢量计算" class="headerlink" title="数组和矢量计算"></a>数组和矢量计算</h1><ol><li>Numpy介绍</li><li>Numpy中ndarray:一种多维数组对象</li></ol><p><strong>备注:矢量（vector）是一种既有大小又有方向的量，又称为向量。一般来说，在物理学中称作矢量，例如速度、加速度、力等等就是这样的量。舍弃实际含义，就抽象为数学中的概念──向量。在计算机中，矢量图可以无限放大永不变形.</strong></p><h1 id="Numpy的功能"><a href="#Numpy的功能" class="headerlink" title="Numpy的功能"></a>Numpy的功能</h1><ol><li>ndarray,一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组</li><li>用于对整组数据进行快速运算的标准数学函数(无需编写循环)</li><li>用于读写磁盘数据的工具以及用于操作内容映射文件的工具</li><li>线性代数,随机数生成以及傅里叶变换功能</li></ol><h2 id="主要的功能"><a href="#主要的功能" class="headerlink" title="主要的功能"></a>主要的功能</h2><ol><li>用于数据整理和清算,子集构造和过滤,转换等快速的矢量化数据运算</li><li>常用的数组算法,如排序,唯一化,集合运算等</li><li>高效的描述统计和数据聚合/摘要运算</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li><li>将条件逻辑表述为数组表达式</li><li>数据的分组运算(聚合,转换,函数应用等)</li></ol><h2 id="Numpy的优势"><a href="#Numpy的优势" class="headerlink" title="Numpy的优势"></a>Numpy的优势</h2><ol><li>Numpy是在一个连续的内存块中存储数据,独立于其他的python内置对象</li><li>Numpy可以在整个数组上执行复杂的计算,而不需要python的for循环</li></ol><p><img src="/images/resources/814B5A8180B8A56781164924BAC0F297.jpg" alt="IMAGE"></p><h1 id="Numpy中的ndarray"><a href="#Numpy中的ndarray" class="headerlink" title="Numpy中的ndarray"></a>Numpy中的ndarray</h1><p>一种多维数组对象,关于多维数组可以参考</p><p><a href="https://baijiahao.baidu.com/s?id=1637508222888888267&wfr=spider&for=pc" target="_blank" rel="noopener">关于多维数组解释好的文章</a></p><h2 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h2><p><img src="/images/resources/C2EE448D7BFAA4DFFA9C5A0589E0B7E1.jpg" alt="IMAGE"></p><h2 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h2><p>ndarray是一个通用的同构数据多位容器,所有元素必须是相同类型的,每个数组都一个shape(一个表示各维度大小的元组)和一个dtype(用于描述数组数据类型的对象)</p><p><img src="/images/resources/AE989534ADFEE5AAC55436657FD517D3.jpg" alt="IMAGE"></p><h1 id="创建ndarray-从零开始"><a href="#创建ndarray-从零开始" class="headerlink" title="创建ndarray(从零开始)"></a>创建ndarray(从零开始)</h1><p><em>创建数组最简单的方法就是使用array函数</em></p><p><img src="/images/resources/CA0831578007D96B95C5182AC5B58DE2.jpg" alt="IMAGE"></p><p><img src="/images/resources/77015D7A890D3AA4D4D28693444D72A8.jpg" alt="IMAGE"></p><h2 id="通过其他方式创建数组"><a href="#通过其他方式创建数组" class="headerlink" title="通过其他方式创建数组"></a>通过其他方式创建数组</h2><p><strong>在np.array可以通过zeros和ones创建指定长度和形状的全0或者全1数组</strong></p><p><img src="/images/resources/AA5CB582A14C4BBF37EF5446224B45AE.jpg" alt="IMAGE"></p><h1 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h1><p><em>dtype是一个特殊的对象,讲一块内容解释为特定数据类型所需的信息</em></p><p><img src="/images/resources/27DF3A546AA0E2017E9F709E2FA2EF3F.jpg" alt="IMAGE"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><img src="/images/resources/39EFB133FF0731C89CF63C09FA41B0CE.jpg" alt="IMAGE"></p><h1 id="Numpy数组的运算"><a href="#Numpy数组的运算" class="headerlink" title="Numpy数组的运算"></a>Numpy数组的运算</h1><p><em>数组很重要,不用编写循环即可对数据执行批量运算</em></p><p><img src="/images/resources/2AC5F7394B93D9FD9BF60F6EF1384DC7.jpg" alt="IMAGE"><br><img src="/images/resources/EADE09AE9703ECFF57D37D730CE90AC0.jpg" alt="IMAGE"></p><p>不同大小数组之间的运算叫做广播</p><h2 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h2><p><strong>数组切片是原始数组的视图,视图上的任何修改都会直接反应到源数组上</strong></p><p><img src="/images/resources/690596B719569E350FF99926E39D6AC7.jpg" alt="IMAGE"></p><p><strong>在进行切片的时候该值会自动传播,以为着跟列表的区别在,数组切片是原始数据的修改。数据不会被复制</strong></p><p><img src="/images/resources/0AF3E10A049F8BD8F6C26106D00BDD19.jpg" alt="IMAGE"></p><p><em>如果明确要复制,使用arr[5:8].copy</em></p><p><em>对于高维度数组,在一个二维数组中,各索引位置上的元素不再是标量而是一维数组</em></p><p><img src="/images/resources/71C6531079D6B2E9EA1FEB5260039AEE.jpg" alt="IMAGE"></p><p><strong>对于各个元素进行递归访问,可以传入一个以逗号隔开的索引列表选取单个元素</strong></p><p><img src="/images/resources/35D0134E8BD96F98A32832FD84AEB436.jpg" alt="IMAGE"></p><h2 id="二维数组索引方式"><a href="#二维数组索引方式" class="headerlink" title="二维数组索引方式"></a>二维数组索引方式</h2><p><img src="/images/resources/7DBC68B452EEA322D859F67C5C49D5F6.jpg" alt="IMAGE"></p><h2 id="三维数组索引方式"><a href="#三维数组索引方式" class="headerlink" title="三维数组索引方式"></a>三维数组索引方式</h2><p><img src="/images/resources/3D26592DADF3C21B0374A98B45075EF9.jpg" alt="IMAGE"></p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p><img src="/images/resources/E16280A90E66D9290676E87CE4D23D84.jpg" alt="IMAGE"></p><h2 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h2><p><em>ndarray的切片语法和列表的一维对象差不多,二维稍微有点区别</em></p><p><img src="/images/resources/7F52A498D14A9558AD27D9C80226E2FA.jpg" alt="IMAGE"></p><p><img src="/images/resources/3FB98072A91656B8C58AAB4FA40F5943.jpg" alt="IMAGE"></p><h2 id="布尔类型索引"><a href="#布尔类型索引" class="headerlink" title="布尔类型索引"></a>布尔类型索引</h2><p><img src="/images/resources/5A51BA2CEB9478B9C02FAC6A02F07EBD.jpg" alt="IMAGE"></p><p><em>通知在匹配完后,同样可以进行切片的操作</em></p><p><img src="/images/resources/9276F96AD69C62E01FF92C49CB59009E.jpg" alt="IMAGE"></p><p><em>一些常见操作</em></p><p><img src="/images/resources/D6297700F707A2E4CA3EEE8522DEDF23.jpg" alt="IMAGE"></p><h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><p><strong>花式索引是一个Numpy术语,利用整数数组进行索引</strong></p><p><img src="/images/resources/47CD0607F4BC614300A7A15A9C06F844.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF4F4FD99B39454CF5470521BA9AB7D3.jpg" alt="IMAGE"></p><p><strong>花式索引和切片不一样,总是将数据复制到新数组中</strong></p><h2 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h2><p><strong>转置是重塑的一种特殊形式,数组不仅有transpose方法,还有一个特殊的T属性</strong></p><p><img src="/images/resources/48EFB15DA1DF601E1AE3114D009598C5.jpg" alt="IMAGE"></p><p><img src="/images/resources/75C86806DA08A724C7E19559E32E4AE1.jpg" alt="IMAGE"></p><h3 id="三轴转换"><a href="#三轴转换" class="headerlink" title="三轴转换"></a>三轴转换</h3><p><img src="/images/resources/FB0262F8F1D97BD5CB277857C5E73FAA.jpg" alt="IMAGE"></p><p><a href="https://blog.csdn.net/theITcat/article/details/100026068" target="_blank" rel="noopener">如何理解轴转换</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Numpy可以好好补补数学.捡起了儿时的快乐&lt;/p&gt;
&lt;h1 id=&quot;数组和矢量计算&quot;&gt;&lt;a href=&quot;#数组和矢量计算&quot; class=&quot;headerlink&quot; title=&quot;数组和矢量计算&quot;&gt;&lt;/a&gt;数组和矢量计算&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Numpy介绍&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://wangweijie.vip/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="矩阵相乘" scheme="https://wangweijie.vip/tags/%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python文件和操作系统</title>
    <link href="https://wangweijie.vip/2020/02/21/2020-02-21-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPython%E6%96%87%E4%BB%B6%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wangweijie.vip/2020/02/21/2020-02-21-数据分析之Python文件和操作系统/</id>
    <published>2020-02-21T07:28:54.288Z</published>
    <updated>2020-02-21T07:30:56.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件和操作系统"><a href="#文件和操作系统" class="headerlink" title="文件和操作系统"></a>文件和操作系统</h1><ol><li>文件的读写操作</li><li>文件的字节与编码</li></ol><h1 id="文件的读写操作"><a href="#文件的读写操作" class="headerlink" title="文件的读写操作"></a>文件的读写操作</h1><p><em>打开一个文件以便读写,可以使用内置的open函数填充一个相对路径或者是绝对路径</em></p><p><img src="/images/resources/21CA280ADDD5BE786A7CD57CF732044D.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r:读取文件，若文件不存在则会报错</span><br><span class="line">w:写入文件，若文件不存在则会先创建再写入，会覆盖原文件</span><br><span class="line">a:写入文件，若文件不存在则会先创建再写入，但不会覆盖原文件，而是追加在文件末尾</span><br><span class="line">rb,wb:分别于r,w类似，但是用于读写二进制文件</span><br><span class="line">r+:可读、可写，文件不存在也会报错，写操作时会覆盖</span><br><span class="line">w+:可读，可写，文件不存在先创建，会覆盖</span><br><span class="line">a+:可读、可写，文件不存在先创建，不会覆盖，追加在末尾</span><br></pre></td></tr></table></figure><p><strong>注意：这里的覆盖是指每次重新打开文件进行操作时覆盖原来的，如果是在打开文件中则不会覆盖</strong></p><h1 id="文件的字节和编码"><a href="#文件的字节和编码" class="headerlink" title="文件的字节和编码"></a>文件的字节和编码</h1><p><img src="/images/resources/7D247662CDCFE9E85AD384245142E586.jpg" alt="IMAGE"></p><h1 id="前期回顾"><a href="#前期回顾" class="headerlink" title="前期回顾"></a>前期回顾</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件和操作系统&quot;&gt;&lt;a href=&quot;#文件和操作系统&quot; class=&quot;headerlink&quot; title=&quot;文件和操作系统&quot;&gt;&lt;/a&gt;文件和操作系统&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;文件的读写操作&lt;/li&gt;
&lt;li&gt;文件的字节与编码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="文件操作" scheme="https://wangweijie.vip/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="字符编码" scheme="https://wangweijie.vip/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python函数</title>
    <link href="https://wangweijie.vip/2020/02/20/2020-02-20-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%87%BD%E6%95%B0/"/>
    <id>https://wangweijie.vip/2020/02/20/2020-02-20-数据分析之python函数/</id>
    <published>2020-02-20T12:25:07.558Z</published>
    <updated>2020-02-20T12:30:07.949Z</updated>
    
    <content type="html"><![CDATA[<p>函数即是对象,函数也可以叫做方法</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol><li>函数的定义</li><li>命名空间,作用域和局部函数</li><li>函数即是对象</li><li>匿名函数</li><li>错误和异常处理</li></ol><h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><p><strong>函数是在python中最重要的代码组织和复用手段,如果需要重读的使用或者非常类似的代码,就需要写一个函数,通过给函数起一个名字,可以提高代码的可读性</strong></p><p><img src="/images/resources/777C32F6B336976812AC094355178630.jpg" alt="IMAGE"></p><h2 id="命名空间-作用域和局部函数"><a href="#命名空间-作用域和局部函数" class="headerlink" title="命名空间,作用域和局部函数"></a>命名空间,作用域和局部函数</h2><p><strong>函数可以访问到不同作用域中的变量:全局(global) 和 局部(local)</strong></p><p><em>注意:任何函数中赋值的变量默认都是被分配到局部命名空间(local namespace)中的,局部空间是在函数被调用时创建的,函数参数会立即填入该命名空间</em></p><p><img src="/images/resources/FAB357288CC2FF086A600FC5773BC8E8.jpg" alt="IMAGE"></p><h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><p><img src="/images/resources/14060CAB55BB20B68A46011B9F28FAD2.jpg" alt="IMAGE"></p><h2 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h2><p>详见代码示例:</p><p>第一种:常规方式</p><p><img src="/images/resources/75F2EE1A746CC28223D9CBA784D621F8.jpg" alt="IMAGE"></p><p>第二种:将需要执行的方法作为操作列表</p><p><img src="/images/resources/32066ADE961BA76B43353336B2123FC4.jpg" alt="IMAGE"></p><p>第三种:通过内置的map函数,可以在一组数据上应用一个函数</p><p><img src="/images/resources/3B5EF6C4BE7CED93727DADBB1FEC66F3.jpg" alt="IMAGE"></p><h2 id="匿名函数-就是函数没有名字"><a href="#匿名函数-就是函数没有名字" class="headerlink" title="匿名函数(就是函数没有名字)"></a>匿名函数(就是函数没有名字)</h2><p><img src="/images/resources/57EB28B40163B2AED7D58EDB35C8026C.jpg" alt="IMAGE"></p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="迭代器和生成器对比"><a href="#迭代器和生成器对比" class="headerlink" title="迭代器和生成器对比"></a>迭代器和生成器对比</h3><p><img src="/images/resources/7C774E7CAC907D0FF8EC8F4EA6FB828B.jpg" alt="IMAGE"></p><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><p><em>生成器表达式就是将列表推导式两端的方括号改为圆括号</em></p><p><img src="/images/resources/012FFC11BC72C4EBA72E6EE35E83DA24.jpg" alt="IMAGE"></p><h2 id="itertoole模块"><a href="#itertoole模块" class="headerlink" title="itertoole模块"></a>itertoole模块</h2><p><em>itertoole有许多常见的算法生成器</em></p><p><img src="/images/resources/3CAAD0D25E4BA9CD03E2E1E929B24C51.jpg" alt="IMAGE"></p><p><strong>注意:其余功能可以参考相关文档</strong></p><h2 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h2><pre><code>f = open(path,&apos;w&apos;)try:    xxx_to()except:    print(&apos;xxx&apos;)finally:    f.close()</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数即是对象,函数也可以叫做方法&lt;/p&gt;
&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;函数的定义&lt;/li&gt;
&lt;li&gt;命名空间,作用域和局部函数&lt;/li&gt;
&lt;li&gt;函数
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="函数和方法" scheme="https://wangweijie.vip/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    
      <category term="异常机制" scheme="https://wangweijie.vip/tags/%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python数据结构和序列</title>
    <link href="https://wangweijie.vip/2020/02/18/2020-02-18-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%8F%E5%88%97/"/>
    <id>https://wangweijie.vip/2020/02/18/2020-02-18-数据分析之python数据结构和序列/</id>
    <published>2020-02-18T14:00:09.011Z</published>
    <updated>2020-02-18T14:05:43.787Z</updated>
    
    <content type="html"><![CDATA[<p>每个数据结构都是语言设计者的精心设计,推导式也是有趣的部分</p><h1 id="python的数据结构-函数和文件"><a href="#python的数据结构-函数和文件" class="headerlink" title="python的数据结构,函数和文件"></a>python的数据结构,函数和文件</h1><ol><li>数据结构和序列,函数,文件讲分为3个部分进行叙述</li></ol><h1 id="数据结构和序列"><a href="#数据结构和序列" class="headerlink" title="数据结构和序列"></a>数据结构和序列</h1><p><strong>python的数据结构有元组,列表,字典,集合</strong></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><em>元组是一个固定长度,不可改变的python序列对象,创建元组最简单的方式就是用逗号进行分隔</em></p><p><img src="/images/resources/2ADB91417B20DC838C193A4ACDF1A6A1.jpg" alt="IMAGE"></p><p><em>如何元组中某个对象是可变的,可以在原位上进行修改</em></p><p><img src="/images/resources/4687ABDDABDE1152358DE012E5CBC3C7.jpg" alt="IMAGE"></p><p><em>元组可以相接与复制</em></p><p><img src="/images/resources/755E5FA05748213CCA82761CBE40B6C5.jpg" alt="IMAGE"></p><h3 id="拆分元组"><a href="#拆分元组" class="headerlink" title="拆分元组"></a>拆分元组</h3><h4 id="拆分和数值交换"><a href="#拆分和数值交换" class="headerlink" title="拆分和数值交换"></a>拆分和数值交换</h4><p><img src="/images/resources/92858794DECE6DAD07EE673BBD4FDCC7.jpg" alt="IMAGE"></p><h4 id="拆分迭代元组或者列表序列"><a href="#拆分迭代元组或者列表序列" class="headerlink" title="拆分迭代元组或者列表序列"></a>拆分迭代元组或者列表序列</h4><p><img src="/images/resources/22F732D23D4E4917BA09FC95F66DB0F3.jpg" alt="IMAGE"></p><h4 id="tuple方法"><a href="#tuple方法" class="headerlink" title="tuple方法"></a>tuple方法</h4><p><em>元组有一个方法和列表保持一致是叫做count,可以统计某个值出现的频率</em></p><p><img src="/images/resources/F5BFB1E3646A723755FB1A2C2303A8D3.jpg" alt="IMAGE"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><em>与元组对比,列表的长度可变,内容可以被修改,可以用方括号定义,或者用list函数</em></p><p><img src="/images/resources/3FA6147CEEC6591A8FF02FEA84DD0682.jpg" alt="IMAGE"></p><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><p><img src="/images/resources/C74934A48935FB96A9827AE4CF762EB1.jpg" alt="IMAGE"></p><h3 id="通过in或者not-in可以检查列表是否包含该数据"><a href="#通过in或者not-in可以检查列表是否包含该数据" class="headerlink" title="通过in或者not in可以检查列表是否包含该数据"></a>通过in或者not in可以检查列表是否包含该数据</h3><p><img src="/images/resources/5FE59F4596DF44F604E9EF46372515A7.jpg" alt="IMAGE"></p><h3 id="串联和组合列表"><a href="#串联和组合列表" class="headerlink" title="串联和组合列表"></a>串联和组合列表</h3><p><img src="/images/resources/3AAC6E0B610071462195D4AD879D36A2.jpg" alt="IMAGE"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><em>通过使用sort函数对一个列表原地排序</em></p><p><img src="/images/resources/BEFDED1B684DFB66AD6B773B661DCE7B.jpg" alt="IMAGE"></p><h3 id="二分搜索和维护已排序的列表"><a href="#二分搜索和维护已排序的列表" class="headerlink" title="二分搜索和维护已排序的列表"></a>二分搜索和维护已排序的列表</h3><p><em>在python中bisect模块支持二分查找和向已排序的列表插入值</em></p><p><img src="/images/resources/39F97B38573F4D1D30B11FCAB79E7D92.jpg" alt="IMAGE"></p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p><em>切片的目的主要选取大多数序列类型的一部分,切片的基本形式就是strat:stop</em></p><p><em>切片的起始元素是包含的,但不包含结束元素,因此结果中包含的元素个数为stop-start</em></p><p><img src="/images/resources/8AB835212447CFEFA8F40535D85F72E2.jpg" alt="IMAGE"></p><h4 id="递进切片"><a href="#递进切片" class="headerlink" title="递进切片"></a>递进切片</h4><p><img src="/images/resources/66ADF11715DBDE531B2283C4AE59EFE0.jpg" alt="IMAGE"></p><h2 id="切片的规律可以如下图所示"><a href="#切片的规律可以如下图所示" class="headerlink" title="切片的规律可以如下图所示"></a>切片的规律可以如下图所示</h2><p><img src="/images/resources/185AADC5CACCF64F386E5769BB564A2A.jpg" alt="IMAGE"></p><h2 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a>序列函数</h2><h3 id="enumerate函数"><a href="#enumerate函数" class="headerlink" title="enumerate函数"></a>enumerate函数</h3><p><em>迭代一个序列的时候,想知道当前项的序号</em></p><p><img src="/images/resources/AA3852DD100C8F45ACF57882952A231D.jpg" alt="IMAGE"></p><h3 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h3><p><em>sorted函数可以从任意序列的元素返回一个新的排好序的列表</em></p><p><img src="/images/resources/5657F65F4C8FD5441E3C3916E3A54A6C.jpg" alt="IMAGE"></p><h3 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h3><p><em>zip函数可以将多个列表，元组或其它序列组合成一个元组列表</em></p><p><img src="/images/resources/272D7629905D0F009F37B257463A591A.jpg" alt="IMAGE"></p><h3 id="reversed函数"><a href="#reversed函数" class="headerlink" title="reversed函数"></a>reversed函数</h3><p><em>reversed可以从后向前迭代一个序列</em></p><p><img src="/images/resources/D5154AC437784C34B97FF8A39087B138.jpg" alt="IMAGE"></p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><em>字典是python最为重要的数据结构,也可以叫做哈希映射或关联数组.以键值的方式构成,键值都可以是python对象</em></p><p><em>创建字典的方法之一是使用尖括号,用冒号进行键和值的分隔</em></p><p><img src="/images/resources/A5C76341228517851E00CDB816CA3A39.jpg" alt="IMAGE"></p><h3 id="删除的2种方式"><a href="#删除的2种方式" class="headerlink" title="删除的2种方式"></a>删除的2种方式</h3><p><img src="/images/resources/6599F1C98711F040F7CA77A780A1E9FF.jpg" alt="IMAGE"></p><h3 id="键值的迭代与字典融合"><a href="#键值的迭代与字典融合" class="headerlink" title="键值的迭代与字典融合"></a>键值的迭代与字典融合</h3><p><img src="/images/resources/E4C4DCF8FAC151BC5DE3BF0BF54A4E22.jpg" alt="IMAGE"></p><h3 id="通过序列创建字典"><a href="#通过序列创建字典" class="headerlink" title="通过序列创建字典"></a>通过序列创建字典</h3><p><img src="/images/resources/FD763C5F0162EAF6F5E9DB2AA875E2AC.jpg" alt="IMAGE"></p><h3 id="对单词进行分类"><a href="#对单词进行分类" class="headerlink" title="对单词进行分类"></a>对单词进行分类</h3><p><img src="/images/resources/5160274AFDB6C56B59E6D2265426568D.jpg" alt="IMAGE"></p><h3 id="关于有效的键类型"><a href="#关于有效的键类型" class="headerlink" title="关于有效的键类型"></a>关于有效的键类型</h3><p><strong>键通常是不可变的标量类型,list是不被允许的</strong></p><p><img src="/images/resources/B428C73E1B1025035FC0E7C5D866631C.jpg" alt="IMAGE"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><em>集合是无序,不可重复的元素的集合,可以理解为字典,只有键没有值,创建集合有2种方式,通过set函数或者使用尖括号set语句</em></p><p><img src="/images/resources/D87BD1A35015B4AF0A8C72053B521F42.jpg" alt="IMAGE"></p><h3 id="集合支持合并-交集-等集合运算"><a href="#集合支持合并-交集-等集合运算" class="headerlink" title="集合支持合并,交集,等集合运算"></a>集合支持合并,交集,等集合运算</h3><p><img src="/images/resources/411E63BDE36BE3DC7D014E840F5F96B5.jpg" alt="IMAGE"></p><h3 id="集合中常用的方法"><a href="#集合中常用的方法" class="headerlink" title="集合中常用的方法"></a>集合中常用的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S.add(e) 在集合中添加一个新的元素e；如果元素已经存在，则不添加</span><br><span class="line">S.remove(e) 从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误</span><br><span class="line">S.discard(e) 从集合S中移除一个元素e;</span><br><span class="line">S.clear() 清空集合内的所有元素</span><br><span class="line">S.copy() 将集合进行一次浅拷贝</span><br><span class="line">S.pop() 从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常</span><br><span class="line">S.update(s2) 用 S与s2得到的全集更新变量S</span><br><span class="line">以下内容可以用运算符操作代替  </span><br><span class="line">S.difference(s2) 用S - s2 运算，返回存在于在S中，但不在s2中的所有元素的集合</span><br><span class="line">S.difference_update(s2) 等同于 S = S - s2</span><br><span class="line">S.intersection(s2) 等同于S &amp; s2</span><br><span class="line">S.intersection_update(s2) 等同于S = S &amp; s2</span><br><span class="line">S.isdisjoint(s2) 如果S与s2交集为空返回True,非空则返回False</span><br><span class="line">S.issubset(s2) 如果S与s2交集为非空返回True,空则返回False</span><br><span class="line">S.issuperset(...) 如果S为s2的子集返回True,否则返回False</span><br><span class="line">S.symmetric_difference(s2) 返回对称补集,等同于 S ^ s2</span><br><span class="line">S.symmetric_difference_update(s2) 用S 与 s2的对称补集更新 S</span><br><span class="line">S.union(s2) 生成 S 与 s2的全集</span><br></pre></td></tr></table></figure><h2 id="列表-集合-字典推导式以及嵌套推导式"><a href="#列表-集合-字典推导式以及嵌套推导式" class="headerlink" title="列表,集合,字典推导式以及嵌套推导式"></a>列表,集合,字典推导式以及嵌套推导式</h2><p><em>语法格式如下:[expr for val in colletion if condition]</em></p><p><img src="/images/resources/19E78E4840C00686CC94012669B01D67.jpg" alt="IMAGE"></p><h3 id="嵌套推导式-稍难"><a href="#嵌套推导式-稍难" class="headerlink" title="嵌套推导式(稍难)"></a>嵌套推导式(稍难)</h3><p><img src="/images/resources/8AF0CADA6EAE4D2EAE8968C87A325DCB.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个数据结构都是语言设计者的精心设计,推导式也是有趣的部分&lt;/p&gt;
&lt;h1 id=&quot;python的数据结构-函数和文件&quot;&gt;&lt;a href=&quot;#python的数据结构-函数和文件&quot; class=&quot;headerlink&quot; title=&quot;python的数据结构,函数和文件&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据结构" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="序列" scheme="https://wangweijie.vip/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="推导式" scheme="https://wangweijie.vip/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python基础语法2</title>
    <link href="https://wangweijie.vip/2020/02/17/2020-02-17-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/"/>
    <id>https://wangweijie.vip/2020/02/17/2020-02-17-数据分析之python基础语法2/</id>
    <published>2020-02-17T08:03:14.622Z</published>
    <updated>2020-02-17T08:19:36.569Z</updated>
    
    <content type="html"><![CDATA[<p>继续前进,这是python基础知识的完结,后续我们将进阶到数据结构,函数和文件</p><h1 id="python数据类型和控制流"><a href="#python数据类型和控制流" class="headerlink" title="python数据类型和控制流"></a>python数据类型和控制流</h1><ol><li>标量类型是什么,如何使用</li><li>控制流式什么,如何使用</li></ol><h1 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h1><p><em>在python的标准库中,有一些内建的类型,用来处理数值数据,字符串,布尔值,日期类型.单值类型成为标量类型</em></p><ol><li>None         表明python里面的控制</li><li>str          字符串类型,有以UTF-8为基准</li><li>bytes        原生的ascii字节</li><li>float        双精度浮点数</li><li>bool         True或false值</li><li>int          任意精度整数</li></ol><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="int可以存储任意大的数"><a href="#int可以存储任意大的数" class="headerlink" title="int可以存储任意大的数"></a>int可以存储任意大的数</h3><p><img src="/images/resources/BCEB5560ADDBFD33CEFA045B1FE0F0CC.jpg" alt="IMAGE"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><em>字符串的表现,可以用单引号和双引号,有换行的可以用三引号</em></p><p><img src="/images/resources/302597F360B28DB47883A85B37C57F71.jpg" alt="IMAGE"></p><p><em>python的字符串是不可变的,不能修改字符串</em></p><p><img src="/images/resources/D58AE7B29D7594EC5F157E8E855256B5.jpg" alt="IMAGE"></p><p><em>许多python对象可以转换为字符串,字符串是一个有序列的unicode字符,可以像列表和元组一样处理(用于切片)</em></p><p><img src="/images/resources/B8B3839B489398E76BBC35787E77A93F.jpg" alt="IMAGE"></p><p><em>用r来表示字符本身,字符串合并,字符串格式化</em></p><p><img src="/images/resources/2DE7E3EAC6027725B02131A41F6BAC1F.jpg" alt="IMAGE"></p><p><em>字节和Unicode</em></p><p><img src="/images/resources/D7C95EC8DABD2198462AD9B0D31094A7.jpg" alt="IMAGE"></p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p><img src="/images/resources/00762643AC8645079A66413E2FF4FFD2.jpg" alt="IMAGE"></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><img src="/images/resources/24C0806F8555931DBFDFD0AC4791BB6C.jpg" alt="IMAGE"></p><h3 id="关于特殊的None"><a href="#关于特殊的None" class="headerlink" title="关于特殊的None"></a>关于特殊的None</h3><p><em>None是python的空值类型,一个函数没有明确的返回值,就默认返回为none</em></p><p><img src="/images/resources/9D1235D92D422E3FB6449AF2FBEB275C.jpg" alt="IMAGE"></p><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p><em>python内建的datetime模块提供了datetime,date,time类型,datetime结合date和time是常使用的</em></p><p><img src="/images/resources/A625D02AB8ECB7A603FAEDFC0DFE59C5.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%a星期的英文单词的缩写：如星期一， 则返回 Mon</span><br><span class="line">%A星期的英文单词的全拼：如星期一，返回 Monday</span><br><span class="line">%b月份的英文单词的缩写：如一月， 则返回 Jan</span><br><span class="line">%B月份的引文单词的缩写：如一月， 则返回 January</span><br><span class="line">%c返回datetime的字符串表示，如03/08/15 23:01:26</span><br><span class="line">%d返回的是当前时间是当前月的第几天</span><br><span class="line">%f微秒的表示： 范围: [0,999999]</span><br><span class="line">%H以24小时制表示当前小时</span><br><span class="line">%I以12小时制表示当前小时</span><br><span class="line">%j返回 当天是当年的第几天 范围[001,366]</span><br><span class="line">%m返回月份 范围[0,12]</span><br><span class="line">%M返回分钟数 范围 [0,59]</span><br><span class="line">%P返回是上午还是下午–AM or PM</span><br><span class="line">%S返回秒数 范围 [0,61]。。。手册说明的</span><br><span class="line">%U返回当周是当年的第几周 以周日为第一天</span><br><span class="line">%W返回当周是当年的第几周 以周一为第一天</span><br><span class="line">%w当天在当周的天数，范围为[0, 6]，6表示星期天</span><br><span class="line">%x日期的字符串表示 ：03/08/15</span><br><span class="line">%X时间的字符串表示 ：23:22:08</span><br><span class="line">%y两个数字表示的年份 15</span><br><span class="line">%Y四个数字表示的年份 2015</span><br><span class="line">%z与utc时间的间隔 （如果是本地时间，返回空字符串）</span><br><span class="line">%Z时区名称（如果是本地时间，返回空字符串）</span><br></pre></td></tr></table></figure><h4 id="时间替换和时间差"><a href="#时间替换和时间差" class="headerlink" title="时间替换和时间差"></a>时间替换和时间差</h4><p><img src="/images/resources/726822CE28F6DAE65F3A4D73632E21CC.jpg" alt="IMAGE"></p><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><p><em>在python中有若干的关键字进行条件逻辑,循环,以及其他控制流操作</em></p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if,elif,else"></a>if,elif,else</h2><p><img src="/images/resources/47EC1A063113F928740E64748596D507.jpg" alt="IMAGE"></p><p><img src="/images/resources/0D86D52E143AA8D621CE3BFFF2856E7C.jpg" alt="IMAGE"></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="contiune"><a href="#contiune" class="headerlink" title="contiune"></a>contiune</h3><p><em>contiune代表着当次循环跳过,继续进行下一次的循环</em></p><p><img src="/images/resources/B8D21E133AE0C982129F7B9098A78436.jpg" alt="IMAGE"></p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><em>break代表着跳出整个循环,并结束循环的过程</em></p><p><img src="/images/resources/6945B396B8E12DBF4E67B8BC838E4C73.jpg" alt="IMAGE"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><img src="/images/resources/6A11357229210DA6A177A2B96B4A543D.jpg" alt="IMAGE"></p><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><p><em>pass是python中的非操作语句,代码块不需要执行任何动作</em></p><p><img src="/images/resources/7953034C9AB1DA6CC980D6029A4F3D35.jpg" alt="IMAGE"></p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p><em>rang函数返回一个迭代器,用来产生一个均匀分布的整数序列</em></p><p><img src="/images/resources/D551EBF7FB2492428B00937256A0BE99.jpg" alt="IMAGE"></p><p><img src="/images/resources/9AE7D1020C0B8A6FDC404A681543A2E9.jpg" alt="IMAGE"></p><p><strong>注意:虽然range可以产生任意大的序号.所耗用的时长和内容比较小</strong></p><p><img src="/images/resources/FC805DC118C375042C3DCEB08C855B1D.jpg" alt="IMAGE"></p><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p><img src="/images/resources/D784B98ADA87F900AF14C9E03FDBB05E.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续前进,这是python基础知识的完结,后续我们将进阶到数据结构,函数和文件&lt;/p&gt;
&lt;h1 id=&quot;python数据类型和控制流&quot;&gt;&lt;a href=&quot;#python数据类型和控制流&quot; class=&quot;headerlink&quot; title=&quot;python数据类型和控制流&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="面向对象" scheme="https://wangweijie.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="语言基础2" scheme="https://wangweijie.vip/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%802/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python基础语法1</title>
    <link href="https://wangweijie.vip/2020/02/16/2020-02-15-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/"/>
    <id>https://wangweijie.vip/2020/02/16/2020-02-15-数据分析之python基础语法1/</id>
    <published>2020-02-16T09:03:27.058Z</published>
    <updated>2020-02-16T09:27:28.389Z</updated>
    
    <content type="html"><![CDATA[<p>从语言思维来牢记基础,对于我们用语言来创造是必要的.</p><h1 id="python语言基础"><a href="#python语言基础" class="headerlink" title="python语言基础"></a>python语言基础</h1><ol><li>语言的艺术</li><li>语言的标准</li></ol><h1 id="语言的艺术"><a href="#语言的艺术" class="headerlink" title="语言的艺术"></a>语言的艺术</h1><blockquote><p>语言的语义</p></blockquote><p><strong>python语言在编写的时候强调的是可读性,简洁,清晰.</strong></p><blockquote><p>语言使用缩进而不是括号</p></blockquote><ol><li>使用tab或者4个空格来组织自己的代码</li><li>增加可读性,简洁</li></ol><p><img src="/images/resources/CABF027DF32BB72242382DCD94299087.jpg" alt="IMAGE"></p><blockquote><p>万物皆对象</p></blockquote><p><strong>在python所构建的数据都是对象,而这个对象拥有一致性也就是目标和目的是一致的</strong></p><p><em>每个数字,字符串,数据结构等都是对象,对象中都有自己的数据类型和内部数据</em></p><blockquote><p>注释</p></blockquote><ol><li>注释注重解释</li></ol><p><img src="/images/resources/249CBE5EA473D4C1AB847514449F4C41.jpg" alt="IMAGE"></p><blockquote><p>函数和对象上的方法调用</p></blockquote><ol><li>定义函数,调用函数,定义对象,对象方法调用</li></ol><p><img src="/images/resources/E78BDD7B30D1C7AE2ADFE5F043151BE3.jpg" alt="IMAGE"></p><h1 id="语言的标准"><a href="#语言的标准" class="headerlink" title="语言的标准"></a>语言的标准</h1><h2 id="变量和参数的传递"><a href="#变量和参数的传递" class="headerlink" title="变量和参数的传递"></a>变量和参数的传递</h2><ol><li>变量即是创建一个名字,而等号右边则是这个变量所代表的含义即是数据</li></ol><p><img src="/images/resources/4CABE6DC8BA41177D66FF4EB6B59E005.jpg" alt="IMAGE"></p><p><em>a和b都是同一个引用,指向的是具体的对象</em></p><h3 id="赋值-绑定-传递对象"><a href="#赋值-绑定-传递对象" class="headerlink" title="赋值=绑定,传递对象"></a>赋值=绑定,传递对象</h3><p><em>赋值称作为绑定,把一个名字绑定给一个对象,变量名可能被称为绑定变量</em></p><p><em>把对象传递给函数的时候,不会复制,而是直接引用</em></p><p><img src="/images/resources/09640B27C22D97CABE93AF55534FCB04.jpg" alt="IMAGE"></p><h3 id="动态引用和强类型"><a href="#动态引用和强类型" class="headerlink" title="动态引用和强类型"></a>动态引用和强类型</h3><p><img src="/images/resources/3E769A6E9B8C16189DBEC3D12804ACF9.jpg" alt="IMAGE"></p><p><em>注意知晓元组类型</em></p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p><em>对象都拥有属性和方法</em></p><p><strong>对象拥有属性和方法</strong></p><p><img src="/images/resources/CF718DF421AB02EDB230CB55BA654466.jpg" alt="IMAGE"></p><h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><p><em>如果不关心对象的类型,只关心是否有些方法和用途,这种称作为鸭子类型,比如你只想关心这个对象是否可以迭代.那么可以</em></p><p><img src="/images/resources/DEF5DA99ABBEBB8E238A50B26AD26348.jpg" alt="IMAGE"></p><h3 id="关于模块的引入"><a href="#关于模块的引入" class="headerlink" title="关于模块的引入"></a>关于模块的引入</h3><p><strong>引入模块有三种形式</strong></p><ol><li>引入整个模块</li><li>引入模块中的某个部分</li><li>引入的模块构建一个别名</li></ol><p><img src="/images/resources/F9DF1ABBA17F2D2FE6522B8482904CB0.jpg" alt="IMAGE"></p><h3 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h3><p><img src="/images/resources/4975BC58F07B92BE658ECB9EBF8CDC02.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a+b : a加b</span><br><span class="line"></span><br><span class="line">a-b :  a减b</span><br><span class="line"></span><br><span class="line">a*b :  a乘b</span><br><span class="line"></span><br><span class="line">a/b : a除以b</span><br><span class="line"></span><br><span class="line">a//b:a整除以b,表示的是返回a除以b的结果的整数部分，而不是证明了a能被b整除。要证明a能被b整除，可以是if a%b==0: 或者a/b＝int 等等</span><br><span class="line"></span><br><span class="line">a**b : a的b次方</span><br><span class="line"></span><br><span class="line">a&amp;b : a与b,对于整数则是按位AND</span><br><span class="line"></span><br><span class="line">a|b :  a或b,对于整数则是按位OR</span><br><span class="line"></span><br><span class="line">a^b :  对布尔值，a异或b,对于整数则是按位异或</span><br><span class="line"></span><br><span class="line">a==b : a和b相等则为Ture</span><br><span class="line"></span><br><span class="line">a!=b: a和b不相等则为Ture</span><br><span class="line"></span><br><span class="line">a&lt;=b,a&lt;b : 小于等于，小于</span><br><span class="line"></span><br><span class="line">a&gt;=b,a&gt;b : 大于等于，大于</span><br><span class="line"></span><br><span class="line">a is b: a和b是同一个python对象则为Ture</span><br><span class="line"></span><br><span class="line">a is not b: a和b不是同一个python对象则为Ture</span><br></pre></td></tr></table></figure><p><strong>在python中is是判断对象,==才是判断对象里面的内容是否一样</strong></p><h3 id="可变和不可编对象"><a href="#可变和不可编对象" class="headerlink" title="可变和不可编对象"></a>可变和不可编对象</h3><p><em>在python的大多数对象中,如:列表,字典,Numpy数组和用户自定义类型都是可变的</em></p><p><img src="/images/resources/7BFA7F926936CAC7642A7A70526A81DE.jpg" alt="IMAGE"></p><p><em>但是对于字符串和元组是不可变的</em></p><p><img src="/images/resources/3CA0B3E0025D142C615B4B917C590694.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从语言思维来牢记基础,对于我们用语言来创造是必要的.&lt;/p&gt;
&lt;h1 id=&quot;python语言基础&quot;&gt;&lt;a href=&quot;#python语言基础&quot; class=&quot;headerlink&quot; title=&quot;python语言基础&quot;&gt;&lt;/a&gt;python语言基础&lt;/h1&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="语言基础" scheme="https://wangweijie.vip/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
      <category term="面向对象" scheme="https://wangweijie.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之常用操作</title>
    <link href="https://wangweijie.vip/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://wangweijie.vip/2020/02/14/2020-02-14-数据分析之常用操作/</id>
    <published>2020-02-14T14:24:13.202Z</published>
    <updated>2020-02-14T14:43:48.642Z</updated>
    
    <content type="html"><![CDATA[<p>熟知一些基本操作,能够加快你的学习效率。</p><h1 id="python日常操作"><a href="#python日常操作" class="headerlink" title="python日常操作"></a>python日常操作</h1><ol><li>python交互工具jupyter_notebook日常使用</li></ol><h1 id="notebook的使用"><a href="#notebook的使用" class="headerlink" title="notebook的使用"></a>notebook的使用</h1><h2 id="命令窗口中输入jupyter-notebook"><a href="#命令窗口中输入jupyter-notebook" class="headerlink" title="命令窗口中输入jupyter notebook"></a>命令窗口中输入jupyter notebook</h2><p><strong>可以在切换到自己要写笔记的目录中</strong></p><p><img src="/images/resources/B53284DA6C7F0A216CDE866AB9B635A6.jpg" alt="IMAGE"></p><h2 id="在notenook中第一次操作"><a href="#在notenook中第一次操作" class="headerlink" title="在notenook中第一次操作"></a>在notenook中第一次操作</h2><p><img src="/images/resources/53861EE5B0A4F68971F8688B99F8D47C.jpg" alt="IMAGE"></p><p><em>注意:我们在使用的时候可以输入关键字的用Tab键进行补全操作</em></p><h3 id="Tab补全说明"><a href="#Tab补全说明" class="headerlink" title="Tab补全说明"></a>Tab补全说明</h3><p>1.Tab补全不是万能的,会尽可能的补全你的代码.按下Tab会搜索已输入的变量(对象,函数等等)</p><p><img src="/images/resources/92C3982A52F89E66DE166DBA8974181E.jpg" alt="IMAGE"></p><p><img src="/images/resources/42AD3F735B677C78D1EE45BC13000A74.jpg" alt="IMAGE"></p><p>2.同样的tab也适应于模块</p><p><img src="/images/resources/C2CCD872AD89C00E60B2F26A4BE7E001.jpg" alt="IMAGE"></p><p>3.同样适用与函数</p><p><img src="/images/resources/B9DE29D92317E46F3F2CEB3F20AA4D99.jpg" alt="IMAGE"></p><h2 id="自省操作"><a href="#自省操作" class="headerlink" title="自省操作"></a>自省操作</h2><p><strong>通过自省可以关注对象的类型</strong></p><p><img src="/images/resources/63C327928CBF5FA6B1D5B905C127226D.jpg" alt="IMAGE"></p><p><strong>针对自定义函数</strong></p><p><img src="/images/resources/5616539F0C89B3FED84CE97BFB5580E1.jpg" alt="IMAGE"></p><p><img src="/images/resources/B8036F487C114A4937BCD63D830106F9.jpg" alt="IMAGE"></p><h2 id="其余额外的命令"><a href="#其余额外的命令" class="headerlink" title="其余额外的命令"></a>其余额外的命令</h2><ol><li>%run命令可以用来执行某一个位置上的py文件</li><li>%load命令可以将代码导入到某一个位置中</li><li>使用Ctrl+C可以随时终端执行中的程序</li></ol><h2 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h2><p><em>魔术命令是指在指令面前加上%,可以是普通任务更快捷,更方便</em></p><p><strong>注意:没下载numpy的话可以执行 pip3 install numpy</strong></p><p><img src="/images/resources/1572ECAE3810677FBED5CAFB70B50E64.jpg" alt="IMAGE"></p><p><img src="/images/resources/B760556E4AF6D26DF497A3189EFDEBB1.jpg" alt="IMAGE"></p><h3 id="常用的魔术命令"><a href="#常用的魔术命令" class="headerlink" title="常用的魔术命令"></a>常用的魔术命令</h3><p>%quickref       显示IPython的快速参考</p><p>%magic          显示所有魔术命令的详细文档</p><p>%debug          从最新的异常跟踪的底部进入交互式调试器</p><p>%hist           打开命令的输入（可选输出）历史</p><p>%pdb            在异常发生后自动进入调试器</p><p>%paste          执行剪贴板中的Python代码</p><p>%cpaste         打开一个特殊的提示符以便于手工粘贴待执行的Python代码</p><p>%reset          删除interactive命名空间中的全部变量、名称</p><p>%page OBJECT    通过分页器打印出OBJECT</p><p>%run script.py  执行Python脚本文件</p><p>%prun statement 通过cProfile执行statement,并打印分析器的输出结果</p><p>%time statement 报告statement的执行时间</p><p>%timeit statement 多次执行statement以计算系综合平均执行时间。对那些执行时间非常小的代码有用</p><p>%who、%who_ls、whos 显示interactive命名空间中定义的变量，信息级别/冗余度可变</p><p>%xdel variable 删除variable,并尝试清除其在IPython中的对象上的一切引用</p><p><strong>后面在使用的时候可以在回过来进行查找</strong></p><h2 id="集成美丽的制图"><a href="#集成美丽的制图" class="headerlink" title="集成美丽的制图"></a>集成美丽的制图</h2><p><em>同样的需要安装制图执行命令:pip3 install matplotlib -i <a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a></em></p><p><img src="/images/resources/9163D86D2540DF9C66DF020EB18231C8.jpg" alt="IMAGE"></p><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p>1.np.random.randn(50) 代表着返回一组标准正态分布的随机值,范围在-1.96～+1.96</p><p><img src="/images/resources/1E7AF91A912DEA021CBF628480AE1DE8.jpg" alt="IMAGE"></p><p>2.numpy.cumsum()代表着累加求和 1 1+2 1+2+3 依次类推</p><p><img src="/images/resources/E16A45C8AC4BB3BF79964275A0CA50DA.jpg" alt="IMAGE"></p><p>3.plt.plot()代表着线性制图</p><p><img src="/images/resources/3FD580DCF3524851AEF1217B9566B66D.jpg" alt="IMAGE"></p><ol start="4"><li>%matplotlib inline 用于省掉plt.show()</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熟知一些基本操作,能够加快你的学习效率。&lt;/p&gt;
&lt;h1 id=&quot;python日常操作&quot;&gt;&lt;a href=&quot;#python日常操作&quot; class=&quot;headerlink&quot; title=&quot;python日常操作&quot;&gt;&lt;/a&gt;python日常操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pyth
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据的禅意" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A6%85%E6%84%8F/"/>
    
      <category term="日常操作" scheme="https://wangweijie.vip/tags/%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/"/>
    
      <category term="初次接触" scheme="https://wangweijie.vip/tags/%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据分析前的准备工作</title>
    <link href="https://wangweijie.vip/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://wangweijie.vip/2020/02/14/2020-02-14-数据分析前的准备工作/</id>
    <published>2020-02-14T08:37:39.234Z</published>
    <updated>2020-02-14T14:24:49.339Z</updated>
    
    <content type="html"><![CDATA[<p>做好数据分析,先好好理解数据和工具</p><h1 id="数据分析前的准备工作"><a href="#数据分析前的准备工作" class="headerlink" title="数据分析前的准备工作"></a>数据分析前的准备工作</h1><ol><li>数据与python</li><li>python处理数据问题上面重要的库</li><li>环境安装以及常用的学习工具与开发工具</li></ol><h1 id="数据与python"><a href="#数据与python" class="headerlink" title="数据与python"></a>数据与python</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><strong>数据这个词是抽象的,我们如何认识数据,有2个点我们需要我们作为前提</strong></p><ol><li>数据有可能代表是世界,人等一切事物,及时杂乱无序,但是也在当中存在规律</li><li>从数据中找到合适的规律和特点,那么我们需要结构化数据。那么结构化的数据有哪些？比如:表格类型的数据,多维数组,通过关键列构建的表格类型数据等</li></ol><p><strong><em>注意:大部分数据集都能转换成结构化的数据,结构化只是一种形式,更多的还是人自主的思维能力.比如:一组新闻文章里面的内容可以提取出词频表,而这个表就可以对于以后的情感进行分析</em></strong></p><h2 id="为什么选择用python"><a href="#为什么选择用python" class="headerlink" title="为什么选择用python"></a>为什么选择用python</h2><ol><li>python作为胶水语言可以随时沾和随时撕掉</li><li>python语言在设计的过程中就是构建以数据为中心的应用型数据</li><li>python适用于构建分析应用和一些常见的通用系统(日常的管理系统)</li></ol><p><strong>注:python作为一种解释性语言没有编译性语言的运行时间效率要高.这也是python的不足之处</strong></p><h1 id="python重要的库"><a href="#python重要的库" class="headerlink" title="python重要的库"></a>python重要的库</h1><blockquote><p>Numpy (数值处理)</p></blockquote><ol><li>可以构建快速高效的多维数组对象(ndarray)</li><li>可以用于对数组执行数学运算和计算.提供了大量的函数</li><li>可以用于读写硬盘中基于数组的数据集的工具</li><li>常见的线性代数等包含随机数的生成</li></ol><blockquote><p>pandas (面板数据)</p></blockquote><ol><li>能够处理大量结构化数据</li><li>常用的2个对象一个是DataFrame和Series,分别是面向列的二维表结构以及一个一维的标签化数组对象</li><li>提供复杂精细的索引功能,能够快速的完成重塑,切片,切块,聚合以及选取数据子集等操作</li></ol><blockquote><p>matplotlib</p></blockquote><ol><li>绘制图表以及其他二维数据可视化的工具</li></ol><blockquote><p>ipython与jupyter</p></blockquote><ol><li>2个都是良好的交互工具</li><li>ipython用于运行，调试，测试等操作</li><li>jupyter良好的学习笔记工具</li></ol><blockquote><p>Scipy与scikit-learn与statsmodels</p></blockquote><ol><li>Scipy解决计算中各种标准问题域</li><li>scikit-learn机器学习的工具包,偏重于预测</li><li>statsmodels统计分析包,偏重于统计与推断</li></ol><h1 id="环境安装以及常用的学习工具"><a href="#环境安装以及常用的学习工具" class="headerlink" title="环境安装以及常用的学习工具"></a>环境安装以及常用的学习工具</h1><h2 id="python环境的安装"><a href="#python环境的安装" class="headerlink" title="python环境的安装"></a>python环境的安装</h2><p><strong><em>python环境的安装不在进行说明,只是需要注意的是检查不同系统的变量设置,macos系统比较特殊,需要检查.bash_prifile中是否添加</em></strong></p><blockquote><p>ipython</p></blockquote><p><img src="/images/resources/0F0228205486739552A6EC6780BA2B68.jpg" alt="IMAGE"></p><blockquote><p>jupyter</p></blockquote><p>1.更新pip<br>python -m pip install -U pip setuptools</p><p>2.安装,使用国内源满速安装<br>pip install jupyter -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>3.在命令中直接jupyter notebook</p><p><img src="/images/resources/2A5E8FE12AE7421DA99315DFC30983A7.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做好数据分析,先好好理解数据和工具&lt;/p&gt;
&lt;h1 id=&quot;数据分析前的准备工作&quot;&gt;&lt;a href=&quot;#数据分析前的准备工作&quot; class=&quot;headerlink&quot; title=&quot;数据分析前的准备工作&quot;&gt;&lt;/a&gt;数据分析前的准备工作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;数据与pyth
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://wangweijie.vip/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://wangweijie.vip/tags/python/"/>
    
      <category term="数据分析" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据的禅意" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A6%85%E6%84%8F/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(归约和聚合)</title>
    <link href="https://wangweijie.vip/2020/01/08/2020-01-08-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E5%BD%92%E7%BA%A6%E5%92%8C%E8%81%9A%E5%90%88)/"/>
    <id>https://wangweijie.vip/2020/01/08/2020-01-08-kafkaStream晋阶之路(归约和聚合)/</id>
    <published>2020-01-08T02:54:40.026Z</published>
    <updated>2020-01-08T03:02:12.113Z</updated>
    
    <content type="html"><![CDATA[<p>归约比聚合相对容易,但是聚合可以做更多的事情</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>归约和聚合概念</li><li>解决实际需求</li><li>如何归约</li><li>如何聚合</li></ol><h2 id="归约和聚合概念"><a href="#归约和聚合概念" class="headerlink" title="归约和聚合概念"></a>归约和聚合概念</h2><p>1.归约即是reduce,代表着累加求和，无论是在现在的python已经jdk新特性中都有体现</p><p>2.聚合即是aggregate,代表着聚集合并在一起的操作,一般来说归约和聚合在一起是一种完美的搭配</p><p><a href="http://www.pianshen.com/article/2852280086/" target="_blank" rel="noopener">相对参考的文章</a></p><h2 id="解决实际需求"><a href="#解决实际需求" class="headerlink" title="解决实际需求"></a>解决实际需求</h2><ol><li>比如股票在不断的交易。累计计算从开始成交的总和</li><li>总和有的情况下,获取交易量前5.(按照成交量决定)</li></ol><h2 id="如何归约-代码示例-reduce"><a href="#如何归约-代码示例-reduce" class="headerlink" title="如何归约(代码示例)reduce"></a>如何归约(代码示例)reduce</h2><h3 id="构建一个普通的用户交易记录"><a href="#构建一个普通的用户交易记录" class="headerlink" title="构建一个普通的用户交易记录"></a>构建一个普通的用户交易记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StockTransaction &#123;</span><br><span class="line">//股票标记</span><br><span class="line">    private String symbol;</span><br><span class="line">    //股票领域</span><br><span class="line">    private String sector;</span><br><span class="line">    //股票分类</span><br><span class="line">    private String industry;</span><br><span class="line">    //成交量</span><br><span class="line">    private int shares;</span><br><span class="line">    //成交价格</span><br><span class="line">    private double sharePrice;</span><br><span class="line">    //用户编号</span><br><span class="line">    private String customerId;</span><br><span class="line">    //交易时间</span><br><span class="line">    private Date transactionTimestamp;</span><br><span class="line">    //是否成交</span><br><span class="line">    private boolean purchase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建一个提取交易量的记录类"><a href="#构建一个提取交易量的记录类" class="headerlink" title="构建一个提取交易量的记录类"></a>构建一个提取交易量的记录类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class ShareVolume &#123;</span><br><span class="line">//股票标记</span><br><span class="line">    private String symbol;</span><br><span class="line">    //成交量</span><br><span class="line">    private int shares;</span><br><span class="line">    //股票领域</span><br><span class="line">    private String industry;</span><br><span class="line">public String getSymbol() &#123;</span><br><span class="line">return symbol;</span><br><span class="line">&#125;</span><br><span class="line">public void setSymbol(String symbol) &#123;</span><br><span class="line">this.symbol = symbol;</span><br><span class="line">&#125;</span><br><span class="line">public int getShares() &#123;</span><br><span class="line">return shares;</span><br><span class="line">&#125;</span><br><span class="line">public void setShares(int shares) &#123;</span><br><span class="line">this.shares = shares;</span><br><span class="line">&#125;</span><br><span class="line">public String getIndustry() &#123;</span><br><span class="line">return industry;</span><br><span class="line">&#125;</span><br><span class="line">public void setIndustry(String industry) &#123;</span><br><span class="line">this.industry = industry;</span><br><span class="line">&#125;</span><br><span class="line">    public ShareVolume() &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public ShareVolume(String symbol, int shares, String industry) &#123;</span><br><span class="line">super();</span><br><span class="line">this.symbol = symbol;</span><br><span class="line">this.shares = shares;</span><br><span class="line">this.industry = industry;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    //构建一个shareVolume对象</span><br><span class="line">public  static  ShareVolume  buildInstance(StockTransaction  st) &#123;</span><br><span class="line">   ShareVolume  sv  = new  ShareVolume(st.getSymbol(), st.getShares(), st.getIndustry());</span><br><span class="line">   return sv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//构建一个统计总和对象</span><br><span class="line">public static ShareVolume sum(ShareVolume  s1,ShareVolume s2) &#123;</span><br><span class="line"> ShareVolume  sv =  new ShareVolume();</span><br><span class="line"> sv.setIndustry(s2.getIndustry());</span><br><span class="line"> sv.setSymbol(s1.getSymbol());</span><br><span class="line"> sv.setShares(s1.getShares()+s2.getShares());</span><br><span class="line"> return  sv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分别构建对应的序列化器"><a href="#分别构建对应的序列化器" class="headerlink" title="分别构建对应的序列化器"></a>分别构建对应的序列化器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ShareVolumeSerde  extends WrapperSerde&lt;ShareVolume&gt; &#123;</span><br><span class="line"></span><br><span class="line">public ShareVolumeSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(ShareVolume.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">public class StockTransactionSerde  extends WrapperSerde&lt;StockTransaction&gt; &#123;</span><br><span class="line"></span><br><span class="line">public StockTransactionSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(StockTransaction.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建流程序"><a href="#构建流程序" class="headerlink" title="构建流程序"></a>构建流程序</h3><blockquote><p>先看下reduce接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface Reducer&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 合二为一</span><br><span class="line">     * Aggregate the two given values into a single one.</span><br><span class="line">     *</span><br><span class="line">     * @param value1 the first value for the aggregation</span><br><span class="line">     * @param value2 the second value for the aggregation</span><br><span class="line">     * @return the aggregated value</span><br><span class="line">     */</span><br><span class="line">    V apply(final V value1, final V value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程序代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class RG_Stream &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">        props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KTable-aggregations&quot;);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KTable-aggregations-id&quot;);</span><br><span class="line">        props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KTable-aggregations-client&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">        props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">        props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockTransactionSerde().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">        </span><br><span class="line">    /**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line"></span><br><span class="line">KeyValueMapper&lt;String, ShareVolume, String&gt; classKey1 = (key, sharevolume) -&gt; sharevolume.getSymbol();</span><br><span class="line">KStream&lt;String, ShareVolume&gt; shareStream = streamsBuilder.stream(&quot;STTOPIC&quot;,Consumed.with(Serdes.String(),new StockTransactionSerde()))</span><br><span class="line">.mapValues(st -&gt;ShareVolume.buildInstance(st));</span><br><span class="line"></span><br><span class="line">shareStream.print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">KTable&lt;String, ShareVolume&gt;  shareKTable = shareStream</span><br><span class="line"> .selectKey(classKey1)</span><br><span class="line"> .groupByKey(Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line"> .reduce(ShareVolume::sum);</span><br><span class="line">shareKTable.toStream().print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票成交量总量变更&quot;));</span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:在流内部设置从最先开始消费,这个配置大于初始配置。</p><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><ol><li>开起zookeeper</li><li>开起kafka</li><li>创建主题”STTOPIC”</li><li>启动流程序</li><li>模拟数据发送</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">StockTransaction  record  = new  StockTransaction();</span><br><span class="line">record.setSymbol(&quot;好当家&quot;);</span><br><span class="line">record.setSector(&quot;食品&quot;);</span><br><span class="line">record.setIndustry(&quot;生产类&quot;);</span><br><span class="line">record.setShares(1000);</span><br><span class="line">record.setSharePrice(5.00);</span><br><span class="line">record.setCustomerId(&quot;001&quot;);</span><br><span class="line">record.setTransactionTimestamp(new Date());</span><br><span class="line">record.setPurchase(true);</span><br><span class="line"></span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, StockTransaction&gt; kp =  new KafkaProducer&lt;String,StockTransaction&gt;(properties,new StringSerializer(),new JsonSerializer&lt;StockTransaction&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockTransaction&gt;(&quot;STTOPIC&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论如下:</p></blockquote><p><img src="/images/resources/BBBEE3B9D53E02E604FC5D581655A5B4.jpg" alt="IMAGE"></p><p>即使是断掉程序，在重启程序后，计算依然保持从头开始</p><h2 id="如何聚合-代码示例-aggregate"><a href="#如何聚合-代码示例-aggregate" class="headerlink" title="如何聚合(代码示例)aggregate"></a>如何聚合(代码示例)aggregate</h2><p><strong><em>在聚合之前,归约是聚合的一种形式。归约操作是将产生相同类型的对象,聚合也是对结果求和。但是可以返回不同的类型</em></strong></p><p>现在有一个需求,获取股票交易量前5的，降序产生</p><blockquote><p> 构建一个降序的优先级队列并构建序列化器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueue&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private  TreeSet&lt;T&gt; inner;</span><br><span class="line"></span><br><span class="line">private  int  maxSize;</span><br><span class="line"></span><br><span class="line">    public FixedSizePriorityQueue(Comparator&lt;T&gt; comparator, int maxSize) &#123;</span><br><span class="line">        this.inner = new TreeSet&lt;&gt;(comparator);</span><br><span class="line">        this.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public FixedSizePriorityQueue&lt;T&gt; add(T element) &#123;</span><br><span class="line">        inner.add(element);</span><br><span class="line">        if (inner.size() &gt; maxSize) &#123;</span><br><span class="line">            inner.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FixedSizePriorityQueue&lt;T&gt; remove(T element) &#123;</span><br><span class="line">        if (inner.contains(element)) &#123;</span><br><span class="line">            inner.remove(element);</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Iterator&lt;T&gt; iterator() &#123;</span><br><span class="line">        return inner.iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 改进流式程序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">public class RG_Stream &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">        props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KTable-aggregation&quot;);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KTable-aggregations-i&quot;);</span><br><span class="line">        props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KTable-aggregations-clien&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">        props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">        props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockTransactionSerde().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">        </span><br><span class="line">    /**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用reduce</span><br><span class="line"> */</span><br><span class="line">KeyValueMapper&lt;String, ShareVolume, String&gt; classKey1 = (key, sharevolume) -&gt; sharevolume.getSymbol();</span><br><span class="line">KStream&lt;String, ShareVolume&gt; shareStream = streamsBuilder.stream(&quot;ST2&quot;,Consumed.with(Serdes.String(),new StockTransactionSerde()))</span><br><span class="line">.mapValues(st -&gt;ShareVolume.buildInstance(st));</span><br><span class="line"></span><br><span class="line">shareStream.print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">KTable&lt;String, ShareVolume&gt;  shareKTable = shareStream</span><br><span class="line"> .selectKey(classKey1)</span><br><span class="line"> .groupByKey(Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line"> .reduce(ShareVolume::sum);</span><br><span class="line">shareKTable.toStream().print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票成交量总量变更&quot;));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用aggreate</span><br><span class="line"> */</span><br><span class="line">Comparator&lt;ShareVolume&gt; comparator = (s1,s2) -&gt; s2.getShares()-s1.getShares();</span><br><span class="line">FixedSizePriorityQueue&lt;ShareVolume&gt; fixedQueue  = new FixedSizePriorityQueue&lt;&gt;(comparator, 5);</span><br><span class="line">    ValueMapper&lt;FixedSizePriorityQueue, String&gt; valueMapper = </span><br><span class="line">    fpq -&gt;&#123;</span><br><span class="line">    StringBuilder builder = new StringBuilder();</span><br><span class="line">                Iterator&lt;ShareVolume&gt; iterator = fpq.iterator();</span><br><span class="line">                int counter= 1;</span><br><span class="line">                while (iterator.hasNext()) &#123;</span><br><span class="line">                    ShareVolume stockVolume = iterator.next();</span><br><span class="line">                    if (stockVolume != null) &#123;</span><br><span class="line">                        builder.append(counter++).append(&quot;)&quot;).append(stockVolume.getSymbol())</span><br><span class="line">                                .append(&quot;:&quot;).append(NumberFormat.getInstance().format(stockVolume.getShares())).append(&quot; &quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return builder.toString();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//pair重新生成 new key-value pair</span><br><span class="line">    KTable&lt;String, String&gt; fixKTable = shareKTable.groupBy((k, v) -&gt; KeyValue.pair(v.getIndustry(), v), Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line">                .aggregate(() -&gt; fixedQueue,</span><br><span class="line">                        (k, v, agg) -&gt; agg.add(v),</span><br><span class="line">                        (k, v, agg) -&gt; agg.remove(v),</span><br><span class="line">                        Materialized.with(Serdes.String(), new FixedSizePriorityQueueSerde()))</span><br><span class="line">                .mapValues(valueMapper);</span><br><span class="line"></span><br><span class="line">//peek可用于作日志记录  .peek((k,v) -&gt; System.out.println(&quot;key值&quot;+k+&quot;------value&quot;+v)); </span><br><span class="line">fixKTable.toStream()</span><br><span class="line">.print(Printed.&lt;String, String&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">                    </span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 额外附属的操作(添加对复杂对象的序列化适配器)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueueAdapter extends TypeAdapter&lt;FixedSizePriorityQueue&lt;ShareVolume&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 需要被序列化的对象</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void write(JsonWriter writer, FixedSizePriorityQueue&lt;ShareVolume&gt; value) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        if (value == null) &#123;</span><br><span class="line">            writer.nullValue();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator&lt;ShareVolume&gt; iterator = value.iterator();</span><br><span class="line">        List&lt;ShareVolume&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            ShareVolume stockTransaction = iterator.next();</span><br><span class="line">            if (stockTransaction != null) &#123;</span><br><span class="line">                list.add(stockTransaction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.beginArray();</span><br><span class="line">        for (ShareVolume transaction : list) &#123;</span><br><span class="line">            writer.value(gson.toJson(transaction));</span><br><span class="line">        &#125;</span><br><span class="line">        writer.endArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 反序列化实例</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public FixedSizePriorityQueue&lt;ShareVolume&gt; read(JsonReader reader) throws IOException &#123;</span><br><span class="line">        List&lt;ShareVolume&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        reader.beginArray();</span><br><span class="line">        while (reader.hasNext()) &#123;</span><br><span class="line">            list.add(gson.fromJson(reader.nextString(), ShareVolume.class));</span><br><span class="line">        &#125;</span><br><span class="line">        reader.endArray();</span><br><span class="line"></span><br><span class="line">        Comparator&lt;ShareVolume&gt; c = (c1, c2) -&gt; c2.getShares() - c1.getShares();</span><br><span class="line">        FixedSizePriorityQueue&lt;ShareVolume&gt; fixedSizePriorityQueue = new FixedSizePriorityQueue&lt;&gt;(c, 5);</span><br><span class="line"></span><br><span class="line">        for (ShareVolume transaction : list) &#123;</span><br><span class="line">            fixedSizePriorityQueue.add(transaction);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return fixedSizePriorityQueue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注册到反序列化器中(修订)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class JsonDeserializer&lt;T&gt; implements Deserializer&lt;T&gt; &#123;</span><br><span class="line"> private Gson gson;</span><br><span class="line">    private Class&lt;T&gt; deserializedClass;</span><br><span class="line">    private Type reflectionTypeToken;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer(Class&lt;T&gt; deserializedClass) &#123;</span><br><span class="line">        this.deserializedClass = deserializedClass;</span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer(Type reflectionTypeToken) &#123;</span><br><span class="line">        this.reflectionTypeToken = reflectionTypeToken;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void init () &#123;</span><br><span class="line">        GsonBuilder builder = new GsonBuilder();</span><br><span class="line">        builder.registerTypeAdapter(FixedSizePriorityQueue.class, new FixedSizePriorityQueueAdapter().nullSafe());</span><br><span class="line">        gson = builder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">        if(deserializedClass == null) &#123;</span><br><span class="line">            deserializedClass = (Class&lt;T&gt;) map.get(&quot;serializedClass&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public T deserialize(String s, byte[] bytes) &#123;</span><br><span class="line">         if(bytes == null)&#123;</span><br><span class="line">             return null;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         Type deserializeFrom = deserializedClass != null ? deserializedClass : reflectionTypeToken;</span><br><span class="line"></span><br><span class="line">         return gson.fromJson(new String(bytes),deserializeFrom);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FixedSizePriorityQueueSerde修订</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueueSerde extends WrapperSerde&lt;FixedSizePriorityQueue&gt;&#123;</span><br><span class="line"></span><br><span class="line">  public FixedSizePriorityQueueSerde() &#123;</span><br><span class="line">          super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(new TypeToken&lt;FixedSizePriorityQueue&lt;ShareVolume&gt;&gt;() &#123;&#125;.getType()));</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: ShareVolume同时实现compareble</p><p><strong><em>后续代码改进:可以考虑修订comparetor</em></strong></p><blockquote><p>测试代码通过</p></blockquote><p><img src="/images/resources/DAF74D20FE4A8CD93F0C4069681F42CC.jpg" alt="IMAGE"></p><blockquote><p>关机重启</p></blockquote><p><img src="/images/resources/3CC9639E141CD067CFB8B5615588F0E5.jpg" alt="IMAGE"></p><p>数据计算保持一致</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;归约比聚合相对容易,但是聚合可以做更多的事情&lt;/p&gt;
&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;归约和聚合概念&lt;/li&gt;
&lt;li&gt;解决实际需求&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="聚合" scheme="https://wangweijie.vip/tags/%E8%81%9A%E5%90%88/"/>
    
      <category term="归约" scheme="https://wangweijie.vip/tags/%E5%BD%92%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(KTable)</title>
    <link href="https://wangweijie.vip/2020/01/03/2020-01-03-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(KTable)/"/>
    <id>https://wangweijie.vip/2020/01/03/2020-01-03-kafkaStream晋阶之路(KTable)/</id>
    <published>2020-01-03T07:34:44.906Z</published>
    <updated>2020-01-03T07:40:22.752Z</updated>
    
    <content type="html"><![CDATA[<p>只有清晰的明白流和表，你才有可能明白聚合以及开窗</p><h1 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h1><ol><li>流与表的关系</li><li>记录流概念</li><li>更新记录和日志</li><li>2者之间的对比</li><li>工作原理</li></ol><h2 id="流与表的关系"><a href="#流与表的关系" class="headerlink" title="流与表的关系"></a>流与表的关系</h2><p>在生活中,我们无时无刻都在产生一些事件,每个事件上面都可以看成在历史的记录中不断的添加一笔新的操作.而这些记录与其他的记录无关，都是独立的。</p><h2 id="记录流的概念"><a href="#记录流的概念" class="headerlink" title="记录流的概念"></a>记录流的概念</h2><p><strong>流被定义为无限的事件序列</strong></p><p>例如股票市场中,每只股票的报价都是一个离散时间,它们彼此之间没有任何关联。即使一家公司股票有多次报价。在某个时候我们称作为记录流,如图:</p><p><img src="/images/resources/2344A96518B42F8D06C8C4D2A79CAB99.jpg" alt="IMAGE"></p><p>每个时间就是一个插入项，为表中每个插入项建立一个地增量为1的key</p><h2 id="更定记录和变更日志"><a href="#更定记录和变更日志" class="headerlink" title="更定记录和变更日志"></a>更定记录和变更日志</h2><p>如果讲事件流看成是一个日志,更新流可以看成是一个不断在变更的日志。</p><p><strong><em>如上图所示，如果以股票名字作为主键。那么动作发生将是更新操作。</em></strong></p><p>注意:日志和变更日志都是讲记录追加到文件末尾,在日志中可以看到所有的记录.但是在变更日志中,对任何一个给定键只保留最新记录。</p><p>对于变更日志和更新流来说,我们用KTable进行抽象的表现与描述</p><h2 id="2者之间的对比"><a href="#2者之间的对比" class="headerlink" title="2者之间的对比"></a>2者之间的对比</h2><h3 id="通过代码我们来进行呈现说明"><a href="#通过代码我们来进行呈现说明" class="headerlink" title="通过代码我们来进行呈现说明"></a>通过代码我们来进行呈现说明</h3><blockquote><p>构建股票信息类StockMsg</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class StockMsg &#123;</span><br><span class="line">//股票价格</span><br><span class="line">private  double  stockPrice;</span><br><span class="line">//股票名字</span><br><span class="line">private  String    stockName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改进通用化序列器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class WrapperSerde&lt;T&gt;  implements  Serde&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    private JsonSerializer&lt;T&gt; serializer;</span><br><span class="line">    private JsonDeserializer&lt;T&gt; deserializer;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public WrapperSerde() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public  WrapperSerde(JsonSerializer&lt;T&gt; serializer, JsonDeserializer&lt;T&gt; deserializer) &#123;</span><br><span class="line">        this.serializer = serializer;</span><br><span class="line">        this.deserializer = deserializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Serializer&lt;T&gt; serializer() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return serializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Deserializer&lt;T&gt; deserializer() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return deserializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类序列器的构建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class StockSerde extends WrapperSerde&lt;StockMsg&gt;&#123;</span><br><span class="line"></span><br><span class="line">public StockSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(StockMsg.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建流式程序"><a href="#构建流式程序" class="headerlink" title="构建流式程序"></a>构建流式程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class KTVSKS_Stream &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">// stream流的名字</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KStreamVSKTable_app&quot;);</span><br><span class="line">// 消费者组名字</span><br><span class="line">props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KStreamVSKTable_group&quot;);</span><br><span class="line">// 消费者名字</span><br><span class="line">props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KStreamVSKTable_client&quot;);</span><br><span class="line">// 每次消费最新的数据</span><br><span class="line">props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;latest&quot;);</span><br><span class="line">// 自动提交偏移</span><br><span class="line">props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;15000&quot;);</span><br><span class="line">// 服务器地址</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">// 并行的线程数</span><br><span class="line">props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockSerde().getClass().getName());</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">/**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 分别创建KStream和KTable实例并打印</span><br><span class="line">KeyValueMapper&lt;String, StockMsg, String&gt; classKey1 = (key, stock) -&gt; stock.getStockName();</span><br><span class="line">KStream&lt;String, StockMsg&gt; stockStream = streamsBuilder.stream(&quot;STOCKTOPIC&quot;);</span><br><span class="line">    KStream&lt;String, StockMsg&gt;  ssKStream  =stockStream.selectKey(classKey1);</span><br><span class="line">    ssKStream.to(&quot;STOCKTOPICTABLE&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssKStream.print(Printed.&lt;String, StockMsg&gt;toSysOut().withLabel(&quot;股市交易流&quot;));</span><br><span class="line"></span><br><span class="line">KTable&lt;String, StockMsg&gt; stocKTable = streamsBuilder.table(&quot;STOCKTOPICTABLE&quot;);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">stocKTable.toStream().print(Printed.&lt;String, StockMsg&gt;toSysOut().withLabel(&quot;股市交易表&quot;));</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟生产者</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">StockMsg  record  = new StockMsg();</span><br><span class="line">record.setStockName(&quot;好当家&quot;);</span><br><span class="line">record.setStockPrice(3.09);</span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, StockMsg&gt; kp =  new KafkaProducer&lt;String,StockMsg&gt;(properties,new StringSerializer(),new JsonSerializer&lt;StockMsg&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockMsg&gt;(&quot;STOCKTOPIC&quot;, record));</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockMsg&gt;(&quot;STOCKTOPICTABLE&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ol><li>启动zookeeper</li><li>启动kafka</li><li>创建主题–STOCKTOPIC 和 STOCKTOPICTABLE</li><li>启动流程序 (需要指定key值)</li><li>模拟数据发送</li></ol><p><img src="/images/resources/D0DE6D193FCC74CD47A9F1515A472783.jpg" alt="IMAGE"></p><p>注意:表始终在更新以最新的标准被基准，当然前提是流有进行过选择对应的key值</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>1.在创建KTable的时候,同时在后台创建了一个追踪流状态的状态存储,从而创建了一个更新流。创建后会有一个内容名称，但是 不能显式的进行交互式访问。但是KTable通过使用Materialized(计量)可以进行显式的查询</p><p>2.KTable何时进行更新,并发往下游处理器.</p><blockquote><p>因素</p></blockquote><ol><li>较高的数据流入速率将增加发送更新记录的频率</li><li>不同键越多</li><li>通过配置cache.max.bytes.buffering以及commit.intrval.ms达到更新的设置</li></ol><blockquote><p>cache.max.bytes.buffering设置缓存缓冲大小</p></blockquote><p>设置该缓存用于删除具有相同键重复的更新记录。使用持久化存储时就可以显著提升性能</p><blockquote><p>commit.intrval.ms设置提交时间间隔</p></blockquote><p>提交间隔参数用来指定保存数据的频率，它会强制刷新，将最新的记录更新，并发送到下游</p><p>注意:默认的提交时间是30秒以及默认10M缓存，当然在上线之前，肯定要平衡大小和时间以及处理的线程数。这个是需要进行考量的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只有清晰的明白流和表，你才有可能明白聚合以及开窗&lt;/p&gt;
&lt;h1 id=&quot;知识要点&quot;&gt;&lt;a href=&quot;#知识要点&quot; class=&quot;headerlink&quot; title=&quot;知识要点&quot;&gt;&lt;/a&gt;知识要点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;流与表的关系&lt;/li&gt;
&lt;li&gt;记录流概念&lt;/l
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="数据表" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    
      <category term="遇见未来聚合和开窗" scheme="https://wangweijie.vip/tags/%E9%81%87%E8%A7%81%E6%9C%AA%E6%9D%A5%E8%81%9A%E5%90%88%E5%92%8C%E5%BC%80%E7%AA%97/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(连接能力)</title>
    <link href="https://wangweijie.vip/2019/12/30/2019-12-30-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E8%BF%9E%E6%8E%A5)/"/>
    <id>https://wangweijie.vip/2019/12/30/2019-12-30-kafkaStream晋阶之路(连接)/</id>
    <published>2019-12-30T07:36:09.580Z</published>
    <updated>2019-12-30T07:41:58.295Z</updated>
    
    <content type="html"><![CDATA[<p>连接以为可以观测时间,有了时间,我们才会具有洞察力.</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>连接的目的,增加洞察力</li><li>时间戳的定义以及分类</li></ol><h2 id="连接的目的"><a href="#连接的目的" class="headerlink" title="连接的目的"></a>连接的目的</h2><p>在前期我们通过给定谓词(也就是加入筛选条件)将流分为了2类，比如钥匙类和小五金类</p><p><img src="/images/resources/FAD029DB2ADEB215979E02FB75036856.jpg" alt="IMAGE"></p><p>如何让这2个不同的流连接在一起,能够观察增加需求能力。</p><h2 id="连接的要求"><a href="#连接的要求" class="headerlink" title="连接的要求"></a>连接的要求</h2><ol><li>2个流以上</li><li>有一个相同的key,作为连接的条件</li></ol><blockquote><p>前期code如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class JoinStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(JoinStream.class);</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">//初次屏蔽处理器</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">//定义谓词,以及选择key键</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//获得分流的集合,并且在之前选择相同的key值</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[]  branchesStream =</span><br><span class="line">PurchaseRecordStream.selectKey((k,v)-&gt; v.getFirstName()+v.getLastName())</span><br><span class="line">.branch(isOne,isTwo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何建立连接"><a href="#如何建立连接" class="headerlink" title="如何建立连接"></a>如何建立连接</h2><ol><li>连接的记录,需要创建一个ValueJoiner&lt;V1,V2,R&gt;对象.V1和V2代表着接收的2个连接对象,他们应该有相同的key.类型可以不同。R代表着可以选择组合后返回的新的对象</li></ol><h3 id="新的合并对象设计"><a href="#新的合并对象设计" class="headerlink" title="新的合并对象设计"></a>新的合并对象设计</h3><blockquote><p>对象设计如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class CorrelatedPurchase &#123;</span><br><span class="line"></span><br><span class="line">     private  Date  firstDate;</span><br><span class="line">     private  Date  seconDate;</span><br><span class="line">     private  List&lt;String&gt; purchaseListItem;</span><br><span class="line">     private  double  totalAmount;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ValueJoiner设计代码如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseJoiner  implements ValueJoiner&lt;PurchaseRecord, PurchaseRecord, CorrelatedPurchase&gt; &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CorrelatedPurchase apply(PurchaseRecord value1, PurchaseRecord value2) &#123;</span><br><span class="line">Date date1 = </span><br><span class="line">value1 != null ? value1.getPurchaseDate():null;</span><br><span class="line">Date date2 =</span><br><span class="line">value2 != null ? value2.getPurchaseDate():null;</span><br><span class="line"></span><br><span class="line">String purchaseName1 = </span><br><span class="line">value1 != null ? value1.getItemPurchased():null;</span><br><span class="line">String purchaseName2 = </span><br><span class="line">value2 != null ? value2.getItemPurchased():null;</span><br><span class="line">List&lt;String&gt; purchasedItem =  new ArrayList&lt;String&gt;();</span><br><span class="line">if (purchaseName1 != null) &#123;</span><br><span class="line">purchasedItem.add(purchaseName1);</span><br><span class="line">&#125;</span><br><span class="line">if (purchaseName2 != null) &#123;</span><br><span class="line">purchasedItem.add(purchaseName2);</span><br><span class="line">&#125;</span><br><span class="line">Double  price1 = value1 !=null ? value1.getPrice():0.0;</span><br><span class="line">Double  price2 = value2 !=null ? value2.getPrice():0.0;</span><br><span class="line"></span><br><span class="line">return ActionUtil.getNewFace(date1, date2, purchasedItem, price1+price2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现连接"><a href="#实现连接" class="headerlink" title="实现连接"></a>实现连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">public class JoinStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(JoinStream.class);</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">//初次屏蔽处理器</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">//定义谓词,以及选择key键</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//获得分流的集合,并且在之前选择相同的key值</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[]  branchesStream =</span><br><span class="line">PurchaseRecordStream.selectKey((k,v)-&gt; v.getFirstName()+v.getLastName())</span><br><span class="line">.branch(isOne,isTwo);</span><br><span class="line"></span><br><span class="line">// 连接流</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;   stream1 = branchesStream[0];</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;   stream2 = branchesStream[1];</span><br><span class="line">/**</span><br><span class="line"> * 1.设置时间窗口</span><br><span class="line"> * 2.构建连接器</span><br><span class="line"> * 3.调用join产生连接.joined分别代表着key值序列化器,以及2个流value值的序列化器</span><br><span class="line"> */</span><br><span class="line">JoinWindows  f15sWindow = JoinWindows.of(60*1000);</span><br><span class="line">ValueJoiner&lt;PurchaseRecord, PurchaseRecord, CorrelatedPurchase&gt;  joiner = new PurchaseJoiner();</span><br><span class="line">KStream&lt;String, CorrelatedPurchase&gt; joinedKStream = </span><br><span class="line">stream1.join(stream2, joiner,f15sWindow,Joined.with(stringSerde, PurchaseRecordSerde, PurchaseRecordSerde));</span><br><span class="line"></span><br><span class="line">joinedKStream.print(Printed.&lt;String, CorrelatedPurchase&gt;toSysOut().withLabel(&quot;joinedStream&quot;));</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">         * 开起流</span><br><span class="line">         */</span><br><span class="line">    // 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 代码测试</p></blockquote><p>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:18:12 CST 2019, seconDate=Mon Dec 30 11:18:21 CST 2019, purchaseListItem=[小小锅, 小小锅], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:18:45 CST 2019, seconDate=Mon Dec 30 11:18:21 CST 2019, purchaseListItem=[小小锅1, 小小锅], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:19:30 CST 2019, seconDate=Mon Dec 30 11:19:58 CST 2019, purchaseListItem=[榔头, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:19:46 CST 2019, seconDate=Mon Dec 30 11:19:58 CST 2019, purchaseListItem=[打榔头, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:21:12 CST 2019, seconDate=Mon Dec 30 11:20:57 CST 2019, purchaseListItem=[锤子1, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:31:31 CST 2019, seconDate=Mon Dec 30 11:31:09 CST 2019, purchaseListItem=[锤子4, 锤子2], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:31:31 CST 2019, seconDate=Mon Dec 30 11:31:17 CST 2019, purchaseListItem=[锤子4, 锤子3], totalAmount=40.0]</p><p><strong>只要符合交易时间,都会出发对应的链接操作.只要满足连接操作,可用foreachAction或者发送主题信息做对应的逻辑动作</strong></p><h2 id="连接的进阶"><a href="#连接的进阶" class="headerlink" title="连接的进阶"></a>连接的进阶</h2><h3 id="记录的先后顺序"><a href="#记录的先后顺序" class="headerlink" title="记录的先后顺序"></a>记录的先后顺序</h3><p>从上面结果可以看到，数据的时间并没有关注先来后到,只要满足1分钟之内及产生逻辑</p><p>如何要指定顺序:</p><p>需要使用 JoinWindows.after 或者  JoinWindows.before</p><p>分别代表着  streamA.join(streamB)  B的记录时间戳比A的记录时间滞后或者是提前.</p><h3 id="连接的前提首要条件"><a href="#连接的前提首要条件" class="headerlink" title="连接的前提首要条件"></a>连接的前提首要条件</h3><p>在Stream中执行连接操作,必要要保证数据具有相同数量的分区,按键分区且键的类型相同<br>通过selectKey出发了重新分区的要求。这个是被自动处理的.这个动作我们归纳为协同分区</p><h3 id="连接的动作"><a href="#连接的动作" class="headerlink" title="连接的动作"></a>连接的动作</h3><ol><li>join 等同于 innerjoin</li><li>outerJoin 等同于左右连接都满足</li><li>leftJoin  只需要左连接</li></ol><h2 id="kafkaStreams中时间戳"><a href="#kafkaStreams中时间戳" class="headerlink" title="kafkaStreams中时间戳"></a>kafkaStreams中时间戳</h2><p>时间戳的作用有3点:</p><ol><li>连接流</li><li>更新变更日志</li><li>决定方法合适被触发</li></ol><p>时间戳被kafkaStreams分为了三类</p><blockquote><p>事件发生时间</p></blockquote><p>特指事件发生时候的时间,通常设置在内置对象中,当然也可以考虑创建生产者的时间为事件时间</p><blockquote><p>摄取时间</p></blockquote><p>特指数据首次进入数据处理管道时设置的时间戳。可以考虑日志追加时间LogAppendTime作为摄取时间</p><blockquote><p>处理时间</p></blockquote><p>特指数据或者记录首次开始流经处理管道时设置的时间戳。</p><h3 id="处理不同的时间语义"><a href="#处理不同的时间语义" class="headerlink" title="处理不同的时间语义"></a>处理不同的时间语义</h3><ol><li>时间戳提取器 TimeStampExtractor接口</li><li>kafkaStreams自带一个处理时间语义WallclockTimestampExtractor本质是通过调用系统当前时间,以毫秒数返回当前时间</li></ol><h3 id="自定义时间戳"><a href="#自定义时间戳" class="headerlink" title="自定义时间戳"></a>自定义时间戳</h3><blockquote><p>代码示例如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class TransactionTimestampExtractor  implements  TimestampExtractor&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public long extract(ConsumerRecord&lt;Object, Object&gt; record, long previousTimestamp) &#123;</span><br><span class="line">// 获取发到kafka中的数据对象</span><br><span class="line">PurchaseRecord   ptRecord  = (PurchaseRecord) record.value();</span><br><span class="line">//返回数据本省所内置的时间</span><br><span class="line">return ptRecord.getPurchaseDate().getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ol><li>一种是在流程序中统一添加</li></ol><p><code>props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, TransactionTimestampExtractor.class);</code></p><ol start="2"><li>一种是在Consumed中配置</li></ol><p><code>Consumed.with(Serdes.1,Serdes.2).withTimestampExtractor(new TransactionTimestampExtractor());</code></p><h1 id="梳理当前的DAG"><a href="#梳理当前的DAG" class="headerlink" title="梳理当前的DAG"></a>梳理当前的DAG</h1><p><img src="/images/resources/C5116DD7C25D8F0ACE6E6B75C19FD157.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;连接以为可以观测时间,有了时间,我们才会具有洞察力.&lt;/p&gt;
&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;连接的目的,增加洞察力&lt;/li&gt;
&lt;li&gt;时间戳的定
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="连接形态" scheme="https://wangweijie.vip/tags/%E8%BF%9E%E6%8E%A5%E5%BD%A2%E6%80%81/"/>
    
      <category term="洞察力" scheme="https://wangweijie.vip/tags/%E6%B4%9E%E5%AF%9F%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams晋阶之路(数据状态)</title>
    <link href="https://wangweijie.vip/2019/12/26/2019-12-26-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E7%8A%B6%E6%80%81)/"/>
    <id>https://wangweijie.vip/2019/12/26/2019-12-26-kafkaStream晋阶之路(状态)/</id>
    <published>2019-12-26T07:23:52.884Z</published>
    <updated>2019-12-26T07:29:19.782Z</updated>
    
    <content type="html"><![CDATA[<p>数据本来平淡无奇,一旦有了思想,数据变成为了有想法的一种境界状态</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>状态在流中的重要性</li><li>状态存储阅读历史,展望未来</li><li>分区一致.数据正确</li><li>状态存储的选择前置条件</li><li>使用状态存储</li><li>代码示例</li></ol><h2 id="状态在流中的重要性"><a href="#状态在流中的重要性" class="headerlink" title="状态在流中的重要性"></a>状态在流中的重要性</h2><ol><li>什么是状态？</li></ol><p>状态是人赋予的主观意识判断。本身数据是无状态的。举个例子:股票的买卖交易，每天的交易买入卖出是一件很正常的事情。<br>比如:9点30分买入1000只股票。10点买入1000只股票。 这个数据流现在无状态的。</p><p><strong>但是如果在10点30分的时候如果该只股票出现了重大利好重组交易,数据从无变为了有状态。而这时候我们的主观意识已经在判断,是否前面这个买卖交易是否正常,这也可以说明这个是我们的价值观</strong></p><ol start="2"><li>流是否需要状态?</li></ol><p>一个事件本身产生的流没有特别的特殊性,但是如果产生一些额外的上下文,那么可能会错过一些关键的机会，甚至于你可能会以全新的视角来看待这个事情.</p><p>很多时候流式处理意味着:彼此之间没有关联。源源不断的数据,当发生时就一定要加以时间处理。而状态的概念可能会产生静态的资源映像,比如对应到数据库中。</p><p>数据流的变化速度往往比数据表更新的更快更频繁。有些情况下,离散的数据已经携带了足够多的数据。但是通常情况下,数据流需要从某类存储的数据来加以丰富。</p><h3 id="将状态操作应用到kafka-Stream中"><a href="#将状态操作应用到kafka-Stream中" class="headerlink" title="将状态操作应用到kafka_Stream中"></a>将状态操作应用到kafka_Stream中</h3><p>在前期的奖励节点中.对于每次客户的消费累计的奖励点数未做任何要求,如果假定现在用户的每一次消费达到一点奖励点数,我们会附上额外的动作,也是将本来不带状态的值，变为有状态的意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line"></span><br><span class="line">private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>转变为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line"></span><br><span class="line">private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    //添加当前这笔消费的奖励点数</span><br><span class="line">    private  int currentRewardPoints;</span><br><span class="line">    //添加最后一次最后购买的时间</span><br><span class="line">    private int daysFromLastPurchase;</span><br><span class="line">    //累计的奖励总点数</span><br><span class="line">    private long totalRewardPoints;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意:设置奖励点的总数代码为:</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void addRewardPoints(int previousTotalPoints) &#123;</span><br><span class="line">    this.totalRewardPoints += previousTotalPoints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态存储阅读历史-展望未来"><a href="#状态存储阅读历史-展望未来" class="headerlink" title="状态存储阅读历史,展望未来"></a>状态存储阅读历史,展望未来</h2><h3 id="如何进行存储"><a href="#如何进行存储" class="headerlink" title="如何进行存储"></a>如何进行存储</h3><ol><li>在kafkaStream中提供了一个基本的有状态的函数 transformvalues()</li><li>提供一个值转换器，转换器接口为ValueTransformer&lt;V,R&gt;,设置状态储存</li></ol><blockquote><p>构建一个值转换器代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseRewardTransformer  implements  ValueTransformer&lt;PurchaseRecord, RewardAccumulator&gt;&#123;</span><br><span class="line">//声明一个状态存储变量</span><br><span class="line">private KeyValueStore&lt;String, Integer&gt;  stateStore;</span><br><span class="line">//声明一个状态存储的名字</span><br><span class="line">private final String storeName;</span><br><span class="line">//声明上下文容器</span><br><span class="line">private ProcessorContext context;</span><br><span class="line"></span><br><span class="line">public PurchaseRewardTransformer(String storeName) &#123;</span><br><span class="line"></span><br><span class="line">this.storeName = storeName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void init(ProcessorContext context) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">this.context  = context;</span><br><span class="line">stateStore = (KeyValueStore&lt;String, Integer&gt;) this.context.getStateStore(storeName);             </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 执行值转换时.会进入到transform方法中</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public RewardAccumulator transform(PurchaseRecord value) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//1. 执行和mapvalues一样的动作</span><br><span class="line">RewardAccumulator  reward = ActionUtil.getReward(value);</span><br><span class="line">System.out.println(reward.hashCode());</span><br><span class="line">//2.使用状态存储总的奖励点数 </span><br><span class="line">   Integer  x = stateStore.get(reward.getCustomerId());</span><br><span class="line">   if (x !=null) &#123;</span><br><span class="line">   System.out.println(&quot;进入条件判断&quot;);</span><br><span class="line">   System.out.println(x);</span><br><span class="line">   int total = x+reward.getCurrentRewardPoints();</span><br><span class="line">   System.out.println(total);</span><br><span class="line">   stateStore.put(reward.getCustomerId(), total);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">stateStore.put(reward.getCustomerId(), (int) reward.getCurrentRewardPoints());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;当前用户&quot;+reward.getCustomerId()+&quot;的奖励点数为&quot;+stateStore.get(reward.getCustomerId()));</span><br><span class="line">System.out.println(&quot;执行相信的逻辑操作&quot;);</span><br><span class="line">return reward;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public RewardAccumulator punctuate(long timestamp) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分区一致-数据正确"><a href="#分区一致-数据正确" class="headerlink" title="分区一致,数据正确"></a>分区一致,数据正确</h2><p><strong><em>在kafkaStreams中在没有指定分区的时候,是按照轮询进行分区。而分区中有着对应的StreamTask.每个Task中有自己不同状态存储.对于上面我们使用存储,有可能客户的交易信息不会在同一个分区中.那么这个时候只有指定到相同的分区进行解决</em></strong></p><h3 id="使用流分区器解决"><a href="#使用流分区器解决" class="headerlink" title="使用流分区器解决"></a>使用流分区器解决</h3><ol><li>通过kafkaStream中的through可以创建一个中间主题,达到无缝分区</li><li>通过自定义分区器,解决数据分配到不同地方的问题</li></ol><blockquote><p>自定义流分区器如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RewardsStreamPartitioner  implements StreamPartitioner&lt;String, PurchaseRecord&gt;&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据用户的姓氏进行匹配对应的分区</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public Integer partition(String key, PurchaseRecord value, int numPartitions) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return value.getFirstName().hashCode()%numPartitions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态存储的选择前置条件"><a href="#状态存储的选择前置条件" class="headerlink" title="状态存储的选择前置条件"></a>状态存储的选择前置条件</h2><ol><li>数据本地化</li><li>故障恢复和容错</li></ol><blockquote><p>数据本地化</p></blockquote><p><strong><em>数据本地化对性能至关重要,通过一个流式程序处理百万级以上的数据,即使很小的网络延迟也会产生巨大的影响</em></strong></p><p>流式程序尽管需要状态但是不是绝对的必要,但是应该设计在本地。应用程序的每个服务器和节点都应该有一个单独的数据存储</p><p>进程和线程之间不共享,即便一个进程失败,但不会影响其它的进程和线程</p><blockquote><p>故障恢复和容错</p></blockquote><p>在kafkaStreams中每个处理器都它的本地存储和一个用于备份状态存储的变更日志主题</p><h2 id="使用状态存储"><a href="#使用状态存储" class="headerlink" title="使用状态存储"></a>使用状态存储</h2><ol><li>kafka添加状态存储使用stores类静态工厂创建storesupplier实例.</li><li>用于定制存储的附加类使用Meterialized(计量类)以及StoreBuilder类,高阶推荐用前者,低阶推荐后者。</li><li>除了本身这2个类之外,还分别提供了persistentKeyValueStore和lruMap,persistentWindowStore,persistentSeesionStore</li></ol><h3 id="状态存储容错以及改变日志主题"><a href="#状态存储容错以及改变日志主题" class="headerlink" title="状态存储容错以及改变日志主题"></a>状态存储容错以及改变日志主题</h3><blockquote><p>状态存储容错</p></blockquote><ol><li>所有的stateStoreSupplier默认都启用了日志,日志即是一个主题,该主题的作用是变更日志用来被封存储中的值,提供容错</li></ol><blockquote><p>配置变更日志主题</p></blockquote><ol><li>用于状态的变更日志采用压缩策略的主题.可以使用withLoggingEnabled进行配置</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>注意:重写奖励类的equals方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">public class StoreStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(StoreStream.class);</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;Store-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">JsonSerializer&lt;RewardAccumulator&gt; rs = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;RewardAccumulator&gt; rds = new JsonDeserializer&lt;&gt;(RewardAccumulator.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">Serde&lt;RewardAccumulator&gt; RewardAccumulatorSerde = Serdes.serdeFrom(rs, rds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 加入状态处理器</span><br><span class="line">     */</span><br><span class="line">//状态名字</span><br><span class="line">String rewardsStateStoreName = &quot;rewardsPointsStore&quot;;</span><br><span class="line">//指定分区规则,集群环境下</span><br><span class="line">RewardsStreamPartitioner streamPartitioner = new RewardsStreamPartitioner();</span><br><span class="line">//选择存储状态的类型</span><br><span class="line">KeyValueBytesStoreSupplier storeSupplier = Stores.inMemoryKeyValueStore(rewardsStateStoreName);</span><br><span class="line">        StoreBuilder&lt;KeyValueStore&lt;String, Integer&gt;&gt; storeBuilder = Stores.keyValueStoreBuilder(storeSupplier, Serdes.String(), Serdes.Integer());</span><br><span class="line">        /**</span><br><span class="line">         * storeBuilder.withLoggingEnabled(config)  可以使用该方法进行日志主题的配置</span><br><span class="line">         */</span><br><span class="line">        //添加到拓扑中</span><br><span class="line">        streamsBuilder.addStateStore(storeBuilder);</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 将原本的流设计重新分区的方式,通过产生一个中间主题进行操作</span><br><span class="line">         * 因为现在只有一个分区。故不配置分区</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //KStream&lt;String, PurchaseRecord&gt; transByCustomerStream = PurchaseRecordStream.through( &quot;customer_transactions&quot;, Produced.with(stringSerde, PurchaseRecordSerde, streamPartitioner));</span><br><span class="line">        KStream&lt;String, PurchaseRecord&gt; transByCustomerStream = PurchaseRecordStream.through( &quot;customer_transactions&quot;, Produced.with(stringSerde, PurchaseRecordSerde));</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 转换为有状态的流</span><br><span class="line">         */</span><br><span class="line">        KStream&lt;String, RewardAccumulator&gt; statefulRewardAccumulator = transByCustomerStream.transformValues(() -&gt;  new PurchaseRewardTransformer(rewardsStateStoreName),</span><br><span class="line">                rewardsStateStoreName);</span><br><span class="line"></span><br><span class="line">        statefulRewardAccumulator.print(Printed.&lt;String, RewardAccumulator&gt;toSysOut().withLabel(&quot;rewards&quot;));</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 开起流</span><br><span class="line">         */</span><br><span class="line">    // 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码测试观察结果</p></blockquote><ol><li>启动zookeeper</li><li>启动kafka</li><li>启动流</li><li>模拟数据</li></ol><blockquote><p>数据结果如下:（包含服务器断掉重连,依旧保持先前的记录）</p></blockquote><p><img src="/images/resources/E86DFC6F43B455C49C75A323F6845BEA.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据本来平淡无奇,一旦有了思想,数据变成为了有想法的一种境界状态&lt;/p&gt;
&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;状态在流中的重要性&lt;/li&gt;
&lt;li&gt;状
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="数据状态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81/"/>
    
      <category term="主观意识形态" scheme="https://wangweijie.vip/tags/%E4%B8%BB%E8%A7%82%E6%84%8F%E8%AF%86%E5%BD%A2%E6%80%81/"/>
    
      <category term="数据形态" scheme="https://wangweijie.vip/tags/%E6%95%B0%E6%8D%AE%E5%BD%A2%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-4)</title>
    <link href="https://wangweijie.vip/2019/12/16/2019-12-16-%E5%BC%80%E5%8F%91kafka_Stream(3-4)/"/>
    <id>https://wangweijie.vip/2019/12/16/2019-12-16-开发kafka_Stream(3-4)/</id>
    <published>2019-12-16T08:37:49.250Z</published>
    <updated>2019-12-16T08:40:30.853Z</updated>
    
    <content type="html"><![CDATA[<p>kafka实时计算出版效果.</p><h1 id="springboot结合kafkaStream流推送消息Echart图形展示-3-4"><a href="#springboot结合kafkaStream流推送消息Echart图形展示-3-4" class="headerlink" title="springboot结合kafkaStream流推送消息Echart图形展示(3-4)"></a>springboot结合kafkaStream流推送消息Echart图形展示(3-4)</h1><ol><li>实现要求(学生名字,学生年龄,班级) (班级多少人,年龄分布人数,实时)</li><li>构建流式程序2个步骤(一个处理统计班级人数,一个统计年龄分布人数)</li><li>从studentMsg主题源获取数据,通过2个处理器处理输出到classCount和ageCount主题源中</li><li>Echarts采取使用南丁玫瑰图</li><li>存放数据采取使用ConcurrentSkipListMap&lt;&gt;();</li></ol><h2 id="构建DAG图"><a href="#构建DAG图" class="headerlink" title="构建DAG图"></a>构建DAG图</h2><p><img src="/images/resources/ABF98E88D5B754798D81B2A3E80E22E8.jpg" alt="IMAGE"></p><h2 id="构建一个普通的maven项目"><a href="#构建一个普通的maven项目" class="headerlink" title="构建一个普通的maven项目"></a>构建一个普通的maven项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h2><blockquote><p>在producer中随机录入数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function randomData()&#123;</span><br><span class="line">var x = 100;</span><br><span class="line">    var y = 0;</span><br><span class="line">    var z = 10;</span><br><span class="line">    var studentAge = (parseInt(Math.random() * (x - y + 1) + y)).toString();</span><br><span class="line">    var studentClassNo = &quot;00&quot;+parseInt(Math.random() * (z - y + 1) + z);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:&apos;$&#123;pageContext.request.contextPath&#125;/mock&apos;,</span><br><span class="line">type:&apos;post&apos;,</span><br><span class="line">dataType:&apos;json&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">studentName:&apos;小小王&apos;,</span><br><span class="line">studentAge:studentAge,</span><br><span class="line">studentClassNo:studentClassNo</span><br><span class="line">&#125;,</span><br><span class="line">success:function(resp)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  t = setInterval(&quot;randomData()&quot;, 1000);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="构建一个模块编写流式程序"><a href="#构建一个模块编写流式程序" class="headerlink" title="构建一个模块编写流式程序"></a>构建一个模块编写流式程序</h2><ol><li>项目结构</li><li>构建必要的序列化器</li><li>创建流式程序选择必要的序列器</li><li>流式程序设置必要的序列器</li></ol><blockquote><p>项目结构</p></blockquote><p><img src="/images/resources/16B7786B14984F744BD9C8B7EF5FA432.jpg" alt="IMAGE"></p><blockquote><p>必要的序列化器代码</p></blockquote><p>序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class StudentSer implements Closeable, AutoCloseable, Serializer&lt;Student&gt;&#123;</span><br><span class="line"></span><br><span class="line"> private static final Charset CHARSET = Charset.forName(&quot;UTF-8&quot;);</span><br><span class="line">    static private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public byte[] serialize(String s, Student person) &#123;</span><br><span class="line">        // Transform the Person object to String</span><br><span class="line">        String line = gson.toJson(person);</span><br><span class="line">        // Return the bytes from the String &apos;line&apos;</span><br><span class="line">        return line.getBytes(CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class StudentDser implements Closeable, AutoCloseable, Deserializer&lt;Student&gt;  &#123;</span><br><span class="line"></span><br><span class="line">private static final Charset CHARSET = Charset.forName(&quot;UTF-8&quot;);</span><br><span class="line">    static private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Student deserialize(String topic, byte[] bytes) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // Transform the bytes to String</span><br><span class="line">            String student = new String(bytes, CHARSET);</span><br><span class="line">            // Return the Person object created from the String &apos;person&apos;</span><br><span class="line">            return gson.fromJson(student, Student.class);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Error reading bytes&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>序列化组合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class StudentSerde implements Serde&lt;Student&gt;&#123;</span><br><span class="line">private StudentSer serializer = new StudentSer();</span><br><span class="line">    private StudentDser deserializer = new StudentDser();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">        serializer.configure(configs, isKey);</span><br><span class="line">        deserializer.configure(configs, isKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line">        serializer.close();</span><br><span class="line">        deserializer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Serializer&lt;Student&gt; serializer() &#123;</span><br><span class="line">        return serializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Deserializer&lt;Student&gt; deserializer() &#123;</span><br><span class="line">        return deserializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流式计算程序代码"><a href="#流式计算程序代码" class="headerlink" title="流式计算程序代码"></a>流式计算程序代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public class ClassCountStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(ClassCountStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;Count-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, &quot;exactly_once&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        // Here we set the Seder for the values that we are going to process.</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, StudentSerde.class);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">  StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">Serde&lt;Long&gt;  longSerde = Serdes.Long();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">/**</span><br><span class="line"> * 统计班级人数</span><br><span class="line"> */</span><br><span class="line">// 声明键值</span><br><span class="line">// 声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">//根据班级进行人数归类</span><br><span class="line">KeyValueMapper&lt;String, Student, String&gt; classKey0 = (key, student) -&gt; student.getStudentClassNo();</span><br><span class="line">KStream&lt;String, Student&gt; ClassCountStream = streamsBuilder.stream(&quot;studentMsg&quot;);</span><br><span class="line">KTable&lt;String, Long&gt;  ClassCounTable = ClassCountStream.selectKey(classKey0)</span><br><span class="line">.groupByKey()</span><br><span class="line">.count();</span><br><span class="line"></span><br><span class="line">//根据年龄筛选20-25岁的人均分布</span><br><span class="line">KeyValueMapper&lt;String, Student, String&gt; classKey1 = (key, student) -&gt; student.getStudentAge();</span><br><span class="line">KStream&lt;String, Student&gt; AgeCountStream = ClassCountStream;</span><br><span class="line">KTable&lt;String, Long&gt;     AgeCountTable = AgeCountStream.filter((key,student) -&gt; Integer.parseInt(student.getStudentAge()) &gt; 0)</span><br><span class="line">.selectKey(classKey1)</span><br><span class="line">.groupByKey()</span><br><span class="line">.count();</span><br><span class="line"></span><br><span class="line"> ClassCounTable.toStream().to(&quot;classCount&quot;, Produced.with(stringSerde, longSerde));</span><br><span class="line"> AgeCountTable.toStream().to(&quot;ageCount&quot;, Produced.with(stringSerde, longSerde));</span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>启动zookeeper</li><li>启动kafka</li><li>启动计算程序</li><li>启动消费者  (消费者序列化分别为String和Long)</li><li>启动生产者</li></ol><h2 id="通过websocket推送至前台"><a href="#通过websocket推送至前台" class="headerlink" title="通过websocket推送至前台"></a>通过websocket推送至前台</h2><ol><li>推送详见前期代码</li><li>消费监听数据源需要更改value值,以及去重判断</li></ol><blockquote><p>消费者代码如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KafkaConsumer &#123;</span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KafkaConsumer.class);</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Long&gt; rs2 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Object&gt; rs3 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static List&lt;ClassMsg&gt; rs = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Object&gt; rs6 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Long&gt; rs4 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static List&lt;String&gt; rs001 =new ArrayList&lt;&gt;();</span><br><span class="line">private static List&lt;Long&gt; rs002 = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">//@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">//public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">//System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">//try &#123;</span><br><span class="line">//WebSocketServer.sendInfo(record.value().toString(),&quot;all&quot;);</span><br><span class="line">//&#125; catch (IOException e) &#123;</span><br><span class="line">//// TODO Auto-generated catch block</span><br><span class="line">//e.printStackTrace();</span><br><span class="line">//&#125;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123; &quot;classCount&quot; &#125;)</span><br><span class="line">public void receiveClassCount(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">String classname = &quot;班级&quot; + record.key();</span><br><span class="line">Long classCountLong = (Long) record.value();</span><br><span class="line">rs2.put(classname, classCountLong);</span><br><span class="line">rs3.put(&quot;dataType&quot;, 1);</span><br><span class="line">rs3.put(&quot;data1&quot;, rs2.keySet());</span><br><span class="line">Set&lt;Map.Entry&lt;String, Long&gt;&gt; entryseSet = rs2.entrySet();</span><br><span class="line">for (Map.Entry&lt;String, Long&gt; entry : entryseSet) &#123;</span><br><span class="line">ClassMsg cms = new ClassMsg();</span><br><span class="line">cms.setName(entry.getKey());</span><br><span class="line">cms.setValue(entry.getValue());</span><br><span class="line">if (!rs.contains(cms)) &#123;</span><br><span class="line">rs.add(cms);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">rs.get(rs.indexOf(cms)).setValue(cms.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs3.put(&quot;data2&quot;, rs);</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(JSON.toJSONString(rs3), &quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123; &quot;ageCount&quot; &#125;)</span><br><span class="line">public void receiveClassCount1(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">rs001.clear();</span><br><span class="line">rs002.clear();</span><br><span class="line">String agename = &quot;年龄&quot; + record.key();</span><br><span class="line">Long classCountLong = (Long) record.value();</span><br><span class="line">rs6.put(&quot;dataType&quot;, 2);</span><br><span class="line">rs4.put(agename,classCountLong);</span><br><span class="line">Set&lt;Map.Entry&lt;String, Long&gt;&gt; entryseSet = rs4.entrySet();</span><br><span class="line">for (Map.Entry&lt;String, Long&gt; entry : entryseSet) &#123;</span><br><span class="line">rs001.add(entry.getKey());</span><br><span class="line">rs002.add(entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">rs6.put(&quot;data1&quot;,rs001 );</span><br><span class="line">rs6.put(&quot;data2&quot;, rs002);</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(JSON.toJSONString(rs6), &quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最终结果如下：</p></blockquote><p><img src="/images/resources/demo.gif" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kafka实时计算出版效果.&lt;/p&gt;
&lt;h1 id=&quot;springboot结合kafkaStream流推送消息Echart图形展示-3-4&quot;&gt;&lt;a href=&quot;#springboot结合kafkaStream流推送消息Echart图形展示-3-4&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="webscoket推送" scheme="https://wangweijie.vip/tags/webscoket%E6%8E%A8%E9%80%81/"/>
    
      <category term="群发消息" scheme="https://wangweijie.vip/tags/%E7%BE%A4%E5%8F%91%E6%B6%88%E6%81%AF/"/>
    
      <category term="图形实时展示" scheme="https://wangweijie.vip/tags/%E5%9B%BE%E5%BD%A2%E5%AE%9E%E6%97%B6%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>开发Kafka_Streams(3-3)</title>
    <link href="https://wangweijie.vip/2019/12/06/2019-12-06-%E5%BC%80%E5%8F%91kafka_Stream(3-3)/"/>
    <id>https://wangweijie.vip/2019/12/06/2019-12-06-开发kafka_Stream(3-3)/</id>
    <published>2019-12-06T06:10:58.650Z</published>
    <updated>2019-12-06T06:15:49.848Z</updated>
    
    <content type="html"><![CDATA[<p>推送是必不可少的一个环节。做好推送,即将进入实时计算的体系中。</p><h1 id="springboot整合websocket推送数据消息"><a href="#springboot整合websocket推送数据消息" class="headerlink" title="springboot整合websocket推送数据消息"></a>springboot整合websocket推送数据消息</h1><ol><li>整合websocket</li><li>结合3-2进行消息的推送</li></ol><h2 id="springboot整合websocket"><a href="#springboot整合websocket" class="headerlink" title="springboot整合websocket"></a>springboot整合websocket</h2><blockquote><p>1.添加依赖文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>实例化websockt提供的对象</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebSocketConfig &#123;</span><br><span class="line">    @Bean  </span><br><span class="line">    public ServerEndpointExporter serverEndpointExporter() &#123;  </span><br><span class="line">        return new ServerEndpointExporter();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.构建服务端对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.websocket;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line">import javax.websocket.OnClose;</span><br><span class="line">import javax.websocket.OnError;</span><br><span class="line">import javax.websocket.OnMessage;</span><br><span class="line">import javax.websocket.OnOpen;</span><br><span class="line">import javax.websocket.Session;</span><br><span class="line">import javax.websocket.server.PathParam;</span><br><span class="line">import javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.wwj.consumer.action.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">@ServerEndpoint(&quot;/websocket/&#123;sid&#125;&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class WebSocketServer &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LogManager.getLogger(WebSocketServer.class);</span><br><span class="line">    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span><br><span class="line">    private static int onlineCount = 0;</span><br><span class="line">    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span><br><span class="line">    private static CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = new CopyOnWriteArraySet&lt;WebSocketServer&gt;();</span><br><span class="line"></span><br><span class="line">    //与某个客户端的连接会话，需要通过它来给客户端发送数据</span><br><span class="line">    private Session session;</span><br><span class="line"></span><br><span class="line">    //接收sid</span><br><span class="line">    private String sid=&quot;&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * 连接建立成功调用的方法*/</span><br><span class="line">    @OnOpen</span><br><span class="line">    public void onOpen(Session session,@PathParam(&quot;sid&quot;) String sid) &#123;</span><br><span class="line">        this.session = session;</span><br><span class="line">        webSocketSet.add(this);     //加入set中</span><br><span class="line">        addOnlineCount();           //在线数加1</span><br><span class="line">        LOG.info(&quot;有新窗口开始监听:&quot;+sid+&quot;,当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">        this.sid=sid;</span><br><span class="line">        try &#123;</span><br><span class="line">         sendMessage(&quot;连接成功&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.error(&quot;websocket IO异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接关闭调用的方法</span><br><span class="line">     */</span><br><span class="line">    @OnClose</span><br><span class="line">    public void onClose() &#123;</span><br><span class="line">        webSocketSet.remove(this);  //从set中删除</span><br><span class="line">        subOnlineCount();           //在线数减1</span><br><span class="line">        LOG.info(&quot;有一连接关闭！当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收到客户端消息后调用的方法</span><br><span class="line">     *</span><br><span class="line">     * @param message 客户端发送过来的消息*/</span><br><span class="line">    @OnMessage</span><br><span class="line">    public void onMessage(String message, Session session) &#123;</span><br><span class="line">    LOG.info(&quot;收到来自窗口&quot;+sid+&quot;的信息:&quot;+message);</span><br><span class="line">        //群发消息</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param session</span><br><span class="line"> * @param error</span><br><span class="line"> */</span><br><span class="line">    @OnError</span><br><span class="line">    public void onError(Session session, Throwable error) &#123;</span><br><span class="line">    LOG.error(&quot;发生错误&quot;);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">/**</span><br><span class="line"> * 实现服务器主动推送</span><br><span class="line"> */</span><br><span class="line">    public void sendMessage(String message) throws IOException &#123;</span><br><span class="line">        this.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 群发自定义消息</span><br><span class="line">     * */</span><br><span class="line">    public static void sendInfo(String message,@PathParam(&quot;sid&quot;) String sid) throws IOException &#123;</span><br><span class="line">    LOG.info(&quot;推送消息到窗口&quot;+sid+&quot;，推送内容:&quot;+message);</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">            //这里可以设定只推送给这个sid的，为null则全部推送</span><br><span class="line">            if(sid==null) &#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;else if(item.sid.equals(sid))&#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized int getOnlineCount() &#123;</span><br><span class="line">        return onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void addOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void subOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加入jsp支持,构建controlle,先跳转到需要建立连接的页面</p></blockquote><p>建立连接页面代码示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line"> var socket;  </span><br><span class="line">    if(typeof(WebSocket) == &quot;undefined&quot;) &#123;  </span><br><span class="line">        console.log(&quot;您的浏览器不支持WebSocket&quot;);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        console.log(&quot;您的浏览器支持WebSocket&quot;);  </span><br><span class="line">        //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  </span><br><span class="line">            //等同于socket = new WebSocket(&quot;ws://localhost:8083/checkcentersys/websocket/20&quot;);  </span><br><span class="line">            socket = new WebSocket(&quot;ws://localhost:10888/websocket/20&quot;);  </span><br><span class="line">            //打开事件  </span><br><span class="line">            socket.onopen = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket 已打开&quot;);  </span><br><span class="line">                //socket.send(&quot;这是来自客户端的消息&quot; + location.href + new Date());  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //获得消息事件  </span><br><span class="line">            socket.onmessage = function(msg) &#123;  </span><br><span class="line">                console.log(msg.data);  </span><br><span class="line">                //发现消息进入    开始处理前端触发逻辑</span><br><span class="line">            &#125;;  </span><br><span class="line">            //关闭事件  </span><br><span class="line">            socket.onclose = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket已关闭&quot;);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //发生了错误事件  </span><br><span class="line">            socket.onerror = function() &#123;  </span><br><span class="line">                alert(&quot;Socket发生了错误&quot;);  </span><br><span class="line">                //此时可以尝试刷新页面</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">我是首页</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong><em>测试通过</em></strong></p><h2 id="结合3-2进行消息的推送"><a href="#结合3-2进行消息的推送" class="headerlink" title="结合3-2进行消息的推送"></a>结合3-2进行消息的推送</h2><ol><li>写一个api进行消息推送</li><li>实验kafka接收到消息后进行推送</li></ol><h3 id="写一个restController"><a href="#写一个restController" class="headerlink" title="写一个restController"></a>写一个restController</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class PushController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/socket/push/&#123;cid&#125;&quot;)</span><br><span class="line">public void pushToWeb(@PathVariable String cid,String message) &#123;  </span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(message,cid);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>*如图所示,统一接收到推送消息</strong></p><p><img src="/images/resources/E347103244A1C7F9FA0B07FB4F6ED096.jpg" alt="IMAGE"></p><h3 id="消费者接收到消息后-调用发送消息"><a href="#消费者接收到消息后-调用发送消息" class="headerlink" title="消费者接收到消息后,调用发送消息"></a>消费者接收到消息后,调用发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(record.value.toString(),&quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/4A43B37A99094065B179770AF9CA753D.jpg" alt="IMAGE"></p><p><strong><em>代码均已测试</em></strong></p><p><strong><em>单机单例未见zookeeper和kafka出现异常</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推送是必不可少的一个环节。做好推送,即将进入实时计算的体系中。&lt;/p&gt;
&lt;h1 id=&quot;springboot整合websocket推送数据消息&quot;&gt;&lt;a href=&quot;#springboot整合websocket推送数据消息&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="KafkaStreams" scheme="https://wangweijie.vip/categories/KafkaStreams/"/>
    
    
      <category term="kafkaStreams" scheme="https://wangweijie.vip/tags/kafkaStreams/"/>
    
      <category term="流式计算" scheme="https://wangweijie.vip/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="大数据分析" scheme="https://wangweijie.vip/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="解决方案" scheme="https://wangweijie.vip/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="webscoket推送" scheme="https://wangweijie.vip/tags/webscoket%E6%8E%A8%E9%80%81/"/>
    
      <category term="群发消息" scheme="https://wangweijie.vip/tags/%E7%BE%A4%E5%8F%91%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
</feed>
