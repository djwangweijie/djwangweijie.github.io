<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael_Wang</title>
  
  <subtitle>JavaAndKafka_Streams</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://djwangweijie.github.io/"/>
  <updated>2021-01-25T21:13:42.331Z</updated>
  <id>https://djwangweijie.github.io/</id>
  
  <author>
    <name>Michael_Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ消息队列</title>
    <link href="https://djwangweijie.github.io/2021/01/26/2021-01-26-RabbitMQ/"/>
    <id>https://djwangweijie.github.io/2021/01/26/2021-01-26-RabbitMQ/</id>
    <published>2021-01-25T21:07:09.001Z</published>
    <updated>2021-01-25T21:13:42.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ消息队列"><a href="#RabbitMQ消息队列" class="headerlink" title="RabbitMQ消息队列"></a>RabbitMQ消息队列</h1><ol><li>消息队列的概念</li><li>windows下面安装RabbitMQ</li><li>RabbitMQ的初步使用</li><li>RabbitMQ的几种模式</li><li>springboot整合RabbitMQ</li><li>关于持久化操作,消息确认(自动和手动)，事务管理</li></ol><h2 id="消息队列的概念"><a href="#消息队列的概念" class="headerlink" title="消息队列的概念"></a>消息队列的概念</h2><p><strong>首先消息队列是应用程序之间的一种通信办法,其次，在应用程序中可以将一些无需及时返回的以及耗时的业务提取出来,通过异步的方式,当然异步的方式主要就是节省了服务器的响应时间，从而提高系统的吞吐量</strong></p><p><em>消息队列的应用场景一般在应用解耦、异步处理(提高系统响应速度)、流量削峰(高峰堆积消息，峰后继续处理消息)、日志处理、通讯上面。</em></p><h3 id="消息队列模型-AMQP和JMS"><a href="#消息队列模型-AMQP和JMS" class="headerlink" title="消息队列模型(AMQP和JMS)"></a>消息队列模型(AMQP和JMS)</h3><p>AMQP高级消息队列协议，是一个进程间传递异步消息的网络协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式.</p><p>JMS即Java消息服务（JavaMessage Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><p>注意:JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式,JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。JMS规定了两种消息模式；而AMQP的消息模式更加丰富,简单的说就好比一个是已经开发好的应用,一个定义了一系列的标准。</p><h3 id="关于消息队列的产品"><a href="#关于消息队列的产品" class="headerlink" title="关于消息队列的产品"></a>关于消息队列的产品</h3><blockquote><p>kafka</p></blockquote><p>Apache下的一个子项目，使用scala实现的一个高性能分布式Publish/Subscribe消息队列系统。</p><ol><li>快速持久化：通过磁盘顺序读写与零拷贝机制，可以在O(1)的系统开销下进行消息持久化</li><li>高吞吐：在一台普通的服务器上既可以达到10W/s的吞吐速率</li><li>高堆积：支持topic下消费者较长时间离线，消息堆积量大；</li><li>完全的分布式系统：Broker、Producer、Consumer都原生自动支持分布式，依赖zookeeper自动实现复杂均衡</li></ol><blockquote><p>rabbitmq</p></blockquote><p>RocketMQ是一款分布式、队列模型的消息中间件，具有以下特点 ：</p><ol><li>能够保证严格的消息顺序,提供丰富的消息拉取模式</li><li>高效的订阅者水平扩展能力.实时的消息订阅机制</li><li>支持事务消息，亿级消息堆积能力.</li><li>生产者不会将消息直接发送给队列，消息在发送给客户端时先在中心队列排队。对路由(Routing)，负载均衡(Load balance)、数据持久化都有很好的支持</li></ol><p>支持的模式有以下(来源于官网):</p><p><img src="/images/resources/20210126/image-20210125214506194.png" alt="image-20210125214506194"></p><p><img src="/images/resources/20210126/image-20210125214611902.png" alt="image-20210125214611902"></p><p><img src="/images/resources/20210126/image-20210125214630439.png" alt="image-20210125214630439"></p><h2 id="windows下面安装RabbitMQ"><a href="#windows下面安装RabbitMQ" class="headerlink" title="windows下面安装RabbitMQ"></a>windows下面安装RabbitMQ</h2><p>因为RabbitMQ基于erlang语言,所以首先先安装erlang语言，安装过程主要为</p><ol><li><p>下载并安装erlang语言，配置相应的环境变量。CMD执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl <span class="comment"># 截图如下</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210125225309280.png" alt="image-20210125225309280"></p></li></ol><p>2.下载并安装rabbitmq,然后在sbin目录下执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management <span class="comment"># 截图如下</span></span><br><span class="line">rabbitmq-plugins disable rabbitmq_management <span class="comment"># 该命令为关闭</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210125230927166.png" alt="image-20210125230927166"></p><p>3.在此目录下查看rabbitmq状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status <span class="comment"># 截图如下</span></span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210125231404437.png" alt="image-20210125231404437"></p><p>4.输入地址<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a>  默认账户密码guest</p><p><img src="/images/resources/20210126/image-20210125231613526.png" alt="image-20210125231613526"></p><h3 id="关于用户"><a href="#关于用户" class="headerlink" title="关于用户"></a>关于用户</h3><p><img src="/images/resources/20210126/image-20210125231702280.png" alt="image-20210125231702280"></p><p>角色说明：</p><ol><li><p><strong><em>超级管理员(administrator)</em></strong>  可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p><strong><em>监控者(monitoring)</em></strong> 可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p><strong><em>策略制定者(policymaker)</em></strong>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p><strong><em>普通管理者(management)</em></strong>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li></ol><h3 id="关于-Virtual-Hosts配置"><a href="#关于-Virtual-Hosts配置" class="headerlink" title="关于 Virtual Hosts配置"></a>关于 Virtual Hosts配置</h3><p>Virtual Hosts就是虚拟主机的意思.相当于一个独立的数据库，数据库之间不受影响.一般以/开头</p><p><img src="/images/resources/20210126/image-20210125232301322.png" alt="image-20210125232301322"></p><p>当然同理可以不同的用户能访问的虚拟注意不一样</p><h2 id="RabbitMQ的初步使用"><a href="#RabbitMQ的初步使用" class="headerlink" title="RabbitMQ的初步使用"></a>RabbitMQ的初步使用</h2><p>1.创建一个maven项目,pom.xml文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wwj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建生产者和消费者都需要提供一个连接对象。先封装一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建链接工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2、设置RabbitMQ服务主机地址</span></span><br><span class="line">        factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="comment">//3、设置RabbitMQ服务端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//4、设置虚拟主机名字，默认/-factory.setVirtualHost("szitheima")</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">//5、设置用户连接名</span></span><br><span class="line">        factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//6、设置链接密码</span></span><br><span class="line">        factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//7、创建链接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">Connection  con  = Util.getConnection();</span><br><span class="line">   System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="/images/resources/20210126/image-20210125235252704.png" alt="image-20210125235252704"></p><h2 id="RabbitMQ的几种模式"><a href="#RabbitMQ的几种模式" class="headerlink" title="RabbitMQ的几种模式"></a>RabbitMQ的几种模式</h2><h3 id="模式一简单发送消息"><a href="#模式一简单发送消息" class="headerlink" title="模式一简单发送消息"></a>模式一简单发送消息</h3><p>生产者:也就是要发送消息的程序.</p><p>消费者：消息的接受者，会一直等待消息到来.</p><p>消息队列:生产者向其中投递消息，消费者从其中取出消息.</p><p>生产者代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//定义队列.分别对应名字,持久化,独占连接,自动删除,附加参数</span></span><br><span class="line">channel.queueDeclare(<span class="string">"hello1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//构建消息</span></span><br><span class="line">String message = <span class="string">"第一条消息"</span>;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">""</span>,<span class="string">"hello1"</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到有一条消息待读</p><p><img src="/images/resources/20210126/image-20210126001101869.png" alt="image-20210126001101869"></p><p>消费者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"hello1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"hello1"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/20210126/image-20210126002157514.png" alt="image-20210126002157514"></p><p>以下可以看到消息在被读取后就删除了,消费者一直挂起中</p><p><img src="/images/resources/20210126/image-20210126002323551.png" alt="image-20210126002323551"></p><h3 id="模式二多个消费者-有竞争关系的"><a href="#模式二多个消费者-有竞争关系的" class="headerlink" title="模式二多个消费者(有竞争关系的)"></a>模式二多个消费者(有竞争关系的)</h3><p>生产者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//定义队列.分别对应名字,持久化,独占连接,自动删除,附加参数</span></span><br><span class="line">channel.queueDeclare(<span class="string">"hello1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">""</span>,<span class="string">"hello1"</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建多个消费者，代码一样，参照模式一</p><p>先启动消费者，然后启动生产者，观察</p><p><img src="/images/resources/20210126/image-20210126003314899.png" alt="image-20210126003314899"></p><p><img src="/images/resources/20210126/image-20210126003413596.png" alt="image-20210126003413596"></p><p>相当于10个相同的任务,被雇佣的2个员工分担了</p><h3 id="模式三-发布订阅模式"><a href="#模式三-发布订阅模式" class="headerlink" title="模式三(发布订阅模式)"></a>模式三(发布订阅模式)</h3><p>注意：生产者是通过发布消息是通过交换机传递到队列中</p><blockquote><p>关于交换机的说明</p></blockquote><p>交换机，。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：</p><p>​    Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>​    Direct：定向，把消息交给符合指定routing key 的队列</p><p>​    Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</p><p>生产者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//改为定义交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"exchange1"</span>, BuiltinExchangeType.FANOUT);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">"exchange1"</span>,<span class="string">""</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"q1"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//通过绑定的方式将主题绑定到交换机中</span></span><br><span class="line">channel.queueBind(<span class="string">"q1"</span>, <span class="string">"exchange1"</span>, <span class="string">""</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"q1"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样启动消费者,然后观察结果</p><p><img src="/images/resources/20210126/image-20210126005606249.png" alt="image-20210126005606249"></p><p><img src="/images/resources/20210126/image-20210126005650320.png" alt="image-20210126005650320"></p><p>可以看到消费者都消费了10条消息。q1和q2主题绑定在了同一个交换机上面</p><h3 id="模式四-有选择性的接收"><a href="#模式四-有选择性的接收" class="headerlink" title="模式四(有选择性的接收)"></a>模式四(有选择性的接收)</h3><p>主要是在exchange交换上加上了路由值。可以将路由值理解为分类值</p><p>生产者代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//需要将交换机类型改为定向</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"exchange1"</span>, BuiltinExchangeType.DIRECT);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//定义分类值</span></span><br><span class="line">String rk = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//代表rk为不同的类型</span></span><br><span class="line">            <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">            rk = <span class="string">"apple"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            rk = <span class="string">"huawei"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">            rk = <span class="string">"xiaomi"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">"exchange1"</span>,rk,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码如下：消费者1消费apple  消费者2消费huawei和xiaomi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"q2"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//通过绑定的方式将主题绑定到交换机中</span></span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"huawei"</span>);</span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"xiaomi"</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"q2"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样观察结果</p><p><img src="/images/resources/20210126/image-20210126012017799.png" alt="image-20210126012017799"></p><p><img src="/images/resources/20210126/image-20210126012551797.png" alt="image-20210126012551797"></p><p>可以不同的类别分发到了不同主题中</p><h3 id="模式伍-基于特定规则的接收"><a href="#模式伍-基于特定规则的接收" class="headerlink" title="模式伍(基于特定规则的接收)"></a>模式伍(基于特定规则的接收)</h3><p>在模式四的基础上，增加了通配符，也就是类别可以无限细化.因为routingkey 一般都是有一个或多个单词组成，多个单词之间以“ . ”分割</p><ol><li>#：匹配一个或多个词</li><li>*：匹配不多不少恰好1个词</li></ol><p>比如item.#：能够匹配item.insert.abc 或者 item.insert,item.*：只能匹配item.insert</p><p>生产者代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.wwj.util.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line"><span class="comment">//需要将交换机类型改为主题</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"exchange1"</span>, BuiltinExchangeType.TOPIC);</span><br><span class="line"><span class="comment">//构建10条消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"第"</span>+i+<span class="string">"条消息"</span>;</span><br><span class="line"><span class="comment">//定义分类值</span></span><br><span class="line">String rk = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//代表rk为不同的类型</span></span><br><span class="line">            <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">            rk = <span class="string">"apple"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            rk = <span class="string">"huawei"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">            rk = <span class="string">"xiaomi"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: </span><br><span class="line">            rk = <span class="string">"huawei.rongyao"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//分别对应交换机,路由值,其他参数,消息主题</span></span><br><span class="line">channel.basicPublish(<span class="string">"exchange1"</span>,rk,<span class="keyword">null</span>,message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Connection  con = Util.getConnection();</span><br><span class="line">Channel channel = con.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">"q2"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//通过绑定的方式将主题绑定到交换机中</span></span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"huawei.#"</span>);</span><br><span class="line">channel.queueBind(<span class="string">"q2"</span>, <span class="string">"exchange1"</span>, <span class="string">"xiaomi"</span>);</span><br><span class="line">Consumer c = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="comment">//重写处理传递的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(</span><br><span class="line">                        <span class="string">"routingKey:"</span> + routingKey +</span><br><span class="line">                        <span class="string">",exchange:"</span> + exchange +</span><br><span class="line">                        <span class="string">",deliveryTag:"</span> + deliveryTag +</span><br><span class="line">                        <span class="string">",message:"</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建消费者 分别对应主题,应答策略,消费者回调方法</span></span><br><span class="line">channel.basicConsume(<span class="string">"q2"</span>,<span class="keyword">true</span>,c);</span><br><span class="line"><span class="comment">//如果不关闭.消费者一直存在</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察结果</p><p><img src="/images/resources/20210126/image-20210126013353769.png" alt="image-20210126013353769"></p><p><img src="/images/resources/20210126/image-20210126013433116.png" alt="image-20210126013433116"></p><h2 id="Springboot整合RabbitMQ"><a href="#Springboot整合RabbitMQ" class="headerlink" title="Springboot整合RabbitMQ"></a>Springboot整合RabbitMQ</h2><h3 id="创建springboot项目"><a href="#创建springboot项目" class="headerlink" title="创建springboot项目"></a>创建springboot项目</h3><p>pom.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wwj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>srb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别在src/main/java下构建启动程序</p><p><img src="/images/resources/20210126/image-20210126023802653.png" alt="image-20210126023802653"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">SpringApplication.run(App.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"t"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">t</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.port=<span class="number">8032</span></span><br></pre></td></tr></table></figure><h3 id="整合RabbitMQ"><a href="#整合RabbitMQ" class="headerlink" title="整合RabbitMQ"></a>整合RabbitMQ</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改springboot的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#rabbitmq连接参数</span><br><span class="line">spring.rabbitmq.host=localhost</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line"># 开启发送确认</span><br><span class="line">spring.rabbitmq.publisher-confirms=true</span><br><span class="line"># 开启发送失败退回</span><br><span class="line">spring.rabbitmq.publisher-returns=true</span><br><span class="line"># 开启ACK</span><br><span class="line">spring.rabbitmq.listener.direct.acknowledge-mode=manual</span><br><span class="line">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span><br></pre></td></tr></table></figure><p>初始化交换机和主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列可以设置以下参数</span></span><br><span class="line"><span class="comment"> * durable: 是否持久化；exclusive: 是否独享、排外的；autoDelete: 是否自动删除 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">firstQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"q1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">secondQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"q2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//具体用什么模式在这里定义不同的交换机类型 FanoutExchange   DirectExchange  TopicExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"exchage1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置不同队列到交换机上(选择不同的策略)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingExchangeMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(firstQueue()).to(exchange()).with(<span class="string">"q1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingExchangeMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(secondQueue()).to(exchange()).with(<span class="string">"q2.#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Produce</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sen1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"生产者发送消息，序号为: "</span> + i);</span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">"exchage1"</span>, <span class="string">"q1"</span>, String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"生产者发送消息，序号为: "</span> + i);</span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">"exchage1"</span>, <span class="string">"q2.#"</span>, String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"q1"</span>, autoDelete = <span class="string">"false"</span>), exchange = <span class="meta">@Exchange</span>(value = <span class="string">"exchange1"</span>, type = ExchangeTypes.TOPIC), key = <span class="string">"q1.#"</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"q1"</span>, autoDelete = <span class="string">"false"</span>), exchange = <span class="meta">@Exchange</span>(value = <span class="string">"exchange1"</span>, type = ExchangeTypes.TOPIC), key = <span class="string">"q1.#"</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"拒绝消息"</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"q2"</span>, autoDelete = <span class="string">"false"</span>), exchange = <span class="meta">@Exchange</span>(value = <span class="string">"exchange1"</span>, type = ExchangeTypes.TOPIC), key = <span class="string">"q2.#"</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process3</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在启动文件中加入@EnableRabbit</p><p>观察如下：</p><p><img src="/images/resources/20210126/image-20210126043328416.png" alt="image-20210126043328416"></p><p>调用send2发送消息</p><p><img src="/images/resources/20210126/image-20210126043956076.png" alt="image-20210126043956076"></p><p>接下来调用send1</p><p><img src="/images/resources/20210126/image-20210126044505203.png" alt="image-20210126044505203"></p><p><img src="/images/resources/20210126/image-20210126044756877.png" alt="image-20210126044756877"></p><h2 id="关于持久化操作-消息确认-自动和手动-，事务管理"><a href="#关于持久化操作-消息确认-自动和手动-，事务管理" class="headerlink" title="关于持久化操作,消息确认(自动和手动)，事务管理"></a>关于持久化操作,消息确认(自动和手动)，事务管理</h2><ol><li>持久化操作。如果队列与消息不持久化，那么服务在崩溃了之后，消息会丢失。所以可以在构建队列的时候设置durable，以及auto-delete设置为false</li><li>消息确认自动和手动：rabbitmq默认确认方式为自动，也就是消息一旦发出立即认为本次投递已经被正确处理，不管消费者端是否成功处理本次投递,那么有可能的情况就是消费者崩掉以后，消息丢失的情况会产生</li><li>选择手动，通过channel.basicAck 确认 和channel.basicReject 拒绝。一般出现异常的时候，catch异常再拒绝入列</li><li>事务管理:。生产中不建议使用事务模式，性能比较低，尽量使用手动确认模式</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ消息队列&quot;&gt;&lt;a href=&quot;#RabbitMQ消息队列&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ消息队列&quot;&gt;&lt;/a&gt;RabbitMQ消息队列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;消息队列的概念&lt;/li&gt;
&lt;li&gt;windows
      
    
    </summary>
    
    
      <category term="消息队列" scheme="https://djwangweijie.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="消息队列" scheme="https://djwangweijie.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="web开发" scheme="https://djwangweijie.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://djwangweijie.github.io/tags/java/"/>
    
      <category term="解耦" scheme="https://djwangweijie.github.io/tags/%E8%A7%A3%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>django开发第一次</title>
    <link href="https://djwangweijie.github.io/2021/01/17/2021-01-17-django%E5%BC%80%E5%8F%91%E5%88%9D%E8%AF%86/"/>
    <id>https://djwangweijie.github.io/2021/01/17/2021-01-17-django开发初识/</id>
    <published>2021-01-17T14:02:32.463Z</published>
    <updated>2021-01-17T14:10:54.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django开发"><a href="#django开发" class="headerlink" title="django开发"></a>django开发</h1><h2 id="需求的描述"><a href="#需求的描述" class="headerlink" title="需求的描述"></a>需求的描述</h2><h3 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h3><ol><li>可以通过搜索到博客内容</li><li>能够根据关键词进行搜索。然后展示出文章列表</li><li>能够根据某个分类查看所有关于这一分类的文章</li><li>首页看到新到旧的文章列表</li><li>能够订阅，能够评论，能够配置友链</li></ol><h3 id="作者端"><a href="#作者端" class="headerlink" title="作者端"></a>作者端</h3><ol><li>后台需登录进入</li><li>创建分类和标签</li><li>能够用markdown进行编写</li><li>上传文章配图</li><li>配置导航</li><li>及时更新,收到对应的订阅</li></ol><h2 id="ER关系说明"><a href="#ER关系说明" class="headerlink" title="ER关系说明"></a>ER关系说明</h2><p><img src="/images/resources/01/image-20210116204419728.png" alt="image-20210116204419728"></p><blockquote><p>sql语句如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE `category` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `is_nav` INTEGER,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_category__owner` ON `category` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `category` ADD CONSTRAINT `fk_category__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `link` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `title` VARCHAR(255) NOT NULL,</span><br><span class="line">  `href` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `weight` INTEGER,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_link__owner` ON `link` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `link` ADD CONSTRAINT `fk_link__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `post` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY,</span><br><span class="line">  `title` VARCHAR(255) NOT NULL,</span><br><span class="line">  `description` VARCHAR(255) NOT NULL,</span><br><span class="line">  `content` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` VARCHAR(255) NOT NULL,</span><br><span class="line">  `create_time` DATETIME,</span><br><span class="line">  `updated_time` DATETIME,</span><br><span class="line">  `category` INTEGER,</span><br><span class="line">  `user` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_post__category` ON `post` (`category`);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_post__user` ON `post` (`user`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post` ADD CONSTRAINT `fk_post__category` FOREIGN KEY (`category`) REFERENCES `category` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post` ADD CONSTRAINT `fk_post__user` FOREIGN KEY (`user`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `comment` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `nickname` VARCHAR(255) NOT NULL,</span><br><span class="line">  `email` VARCHAR(255) NOT NULL,</span><br><span class="line">  `website` VARCHAR(255) NOT NULL,</span><br><span class="line">  `content` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `post` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_comment__post` ON `comment` (`post`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `comment` ADD CONSTRAINT `fk_comment__post` FOREIGN KEY (`post`) REFERENCES `post` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `sidebar` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `type` VARCHAR(255) NOT NULL,</span><br><span class="line">  `title` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` INTEGER,</span><br><span class="line">  `content` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_time` DATETIME,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_sidebar__owner` ON `sidebar` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `sidebar` ADD CONSTRAINT `fk_sidebar__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `tag` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(255) NOT NULL,</span><br><span class="line">  `status` VARCHAR(255) NOT NULL,</span><br><span class="line">  `created_tinme` DATETIME,</span><br><span class="line">  `owner` INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_tag__owner` ON `tag` (`owner`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `tag` ADD CONSTRAINT `fk_tag__owner` FOREIGN KEY (`owner`) REFERENCES `user` (`id`) ON DELETE SET NULL;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `post_tag` (</span><br><span class="line">  `post` INTEGER NOT NULL,</span><br><span class="line">  `tag` INTEGER NOT NULL,</span><br><span class="line">  PRIMARY KEY (`post`, `tag`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX `idx_post_tag` ON `post_tag` (`tag`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post_tag` ADD CONSTRAINT `fk_post_tag__post` FOREIGN KEY (`post`) REFERENCES `post` (`id`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `post_tag` ADD CONSTRAINT `fk_post_tag__tag` FOREIGN KEY (`tag`) REFERENCES `tag` (`id`)</span><br></pre></td></tr></table></figure><h2 id="框架基础"><a href="#框架基础" class="headerlink" title="框架基础"></a>框架基础</h2><h3 id="关于django的几个模块"><a href="#关于django的几个模块" class="headerlink" title="关于django的几个模块"></a>关于django的几个模块</h3><p>参考官方的文档<a href="https://docs.djangoproject.com/en/3.1/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/3.1/</a></p><ol><li><p>Model部分包含</p><p>1.1 models 模型的定义相关使用说明</p><p>1.2 querysets 在model的基础上查看数据以及定义过滤</p><p>1.3 model instances  单个记录，如果CRUD操作</p><p>1.4 Migrations 表结构的调整，迁移等操作</p><p>1.5 Advanced 使用原生sql，聚合，事务，搜索等相关操作</p><p>1.6 其他:数据库优化等操作</p></li><li><p>View部分包含</p><p>2.1 The basics：url配置，增加缓存以及增加限制等</p><p>2.2 reference 静态文件和404页面处理。请求和回复对象</p><p>2.3 File uploads 文件上传下载存储等</p><p>2.4 class-based views 构建和复用view</p><p>2.5 advanced 导出csv和pdf格式</p><p>2.6 中间件涉及安全和session，缓存等</p></li><li><p>模版</p><p>3.1 the basics 基本配置模版和语法</p><p>3.2 逻辑操作</p><p>3.3 高效的配置渲染模版</p></li><li><p>form表单</p><p>4.1 基础语法使用</p><p>4.2 进阶 与model一起操作</p></li></ol><h2 id="编写一个简单的学员管理系统"><a href="#编写一个简单的学员管理系统" class="headerlink" title="编写一个简单的学员管理系统"></a>编写一个简单的学员管理系统</h2><p>先安装虚拟环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>创建一个文件夹student-env为虚拟环境目录,并执行初始化虚拟环境  （默认构建在用户下面的ENV环境下。可以做更改,需要新增系统变量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv student-env</span><br></pre></td></tr></table></figure><p>激活虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon student-env</span><br></pre></td></tr></table></figure><p>停止或者删除环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br><span class="line">rmvirtualenv student-env</span><br></pre></td></tr></table></figure><p>安装django1.11</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.11</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>切换到自己喜欢的目录，构建django项目（注意在虚拟环境进行操作）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir student_house</span><br><span class="line">django-admin startproject student_sys</span><br></pre></td></tr></table></figure><p>创建App（创建模块）(出现错误可参考<a href="https://blog.csdn.net/qq_28194001/article/details/86709006" target="_blank" rel="noopener">https://blog.csdn.net/qq_28194001/article/details/86709006</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd student_sys</span><br><span class="line">python manage.py startapp student</span><br></pre></td></tr></table></figure><p><img src="/images/resources/01/image-20210117120725798.png" alt="image-20210117120725798"></p><h3 id="编写模块代码"><a href="#编写模块代码" class="headerlink" title="编写模块代码"></a>编写模块代码</h3><p>VS配置环境参照<a href="https://blog.csdn.net/cierlongbu/article/details/103753452" target="_blank" rel="noopener">https://blog.csdn.net/cierlongbu/article/details/103753452</a></p><p>在model.py中编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SEX_ITEMS = [</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'女'</span>),</span><br><span class="line">        (<span class="number">0</span>,<span class="string">'未知'</span>)</span><br><span class="line">    ]</span><br><span class="line">    STATUS_ITEMS = [</span><br><span class="line">        (<span class="number">0</span>,<span class="string">'申请'</span>),</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'通过'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'拒绝'</span>)</span><br><span class="line">    ]</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'姓名'</span>)</span><br><span class="line">    sex = models.IntegerField(choices=SEX_ITEMS, verbose_name=<span class="string">'性别'</span>)</span><br><span class="line">    profession = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'职业'</span>)</span><br><span class="line">    email =models.EmailField(verbose_name= <span class="string">'Email'</span>)</span><br><span class="line">    qq = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'QQ'</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'电话'</span>)</span><br><span class="line">    status = models.IntegerField(choices=STATUS_ITEMS,default=<span class="number">0</span>,verbose_name=<span class="string">'审核状态'</span>)</span><br><span class="line">    created_time = models.DateField(auto_now_add=<span class="literal">True</span>,editable=<span class="literal">False</span>,verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Student: &#123;&#125;&gt;'</span>.format(self.name)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">'学员信息'</span></span><br></pre></td></tr></table></figure><p>在admin.py中编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'sex'</span>,<span class="string">'profession'</span>,<span class="string">'email'</span>,<span class="string">'qq'</span>,<span class="string">'phone'</span>,<span class="string">'status'</span>,<span class="string">'created_time'</span>)</span><br><span class="line">    list_filter = (<span class="string">'sex'</span>,<span class="string">'status'</span>,<span class="string">'created_time'</span>)</span><br><span class="line">    search_fields = (<span class="string">'name'</span>,<span class="string">'profession'</span>)</span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>,&#123;</span><br><span class="line">            <span class="string">'fields'</span>:(</span><br><span class="line">                <span class="string">'name'</span>,</span><br><span class="line">                (<span class="string">'sex'</span>,<span class="string">'prefession'</span>),</span><br><span class="line">                (<span class="string">'email'</span>,<span class="string">'qq'</span>,<span class="string">'phone'</span>),</span><br><span class="line">                <span class="string">'status'</span>,</span><br><span class="line">            )</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">admin.site.register(Student, StudentAdmin)</span><br></pre></td></tr></table></figure><p>注册到setting文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'student'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;zh-Hans&apos;</span><br><span class="line"></span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line"></span><br><span class="line">USE_I18N = True</span><br><span class="line"></span><br><span class="line">USE_L10N = True</span><br><span class="line"></span><br><span class="line">USE_TZ = True</span><br></pre></td></tr></table></figure><p>在项目的根目录下执行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigreations <span class="comment"># 创建数据库迁移文件</span></span><br><span class="line">python manage.py migrate <span class="comment"># 创建表</span></span><br><span class="line">python manage.py createsuperuser <span class="comment">#创建超级用户</span></span><br><span class="line">python manage.py runserver <span class="comment">#启动服务</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/resources/01/image-20210117152057036.png" alt="image-20210117152057036"></p><h3 id="关于前台页面的开发"><a href="#关于前台页面的开发" class="headerlink" title="关于前台页面的开发"></a>关于前台页面的开发</h3><p>在student.py 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义了一个index方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    words = <span class="string">'World!'</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,context=&#123;<span class="string">'words'</span>:words&#125;)  <span class="comment"># 在student的templates中寻找index.html,并且上下文内容包含words</span></span><br></pre></td></tr></table></figure><p>注意：在工作空间的json中加入可以解决在django中编写html的问题</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"files.associations": &#123;</span><br><span class="line">     "**/*.html": "html",</span><br><span class="line">     "**/templates/**/*.html": "django-html",</span><br><span class="line">     "**/templates/**/*": "django-txt",</span><br><span class="line">     "**/requirements&#123;/**,*&#125;.&#123;txt,in&#125;": "pip-requirements"</span><br><span class="line"> &#125;,</span><br><span class="line"> "emmet.includeLanguages": &#123;"django-html": "html"&#125;</span><br></pre></td></tr></table></figure><p>在创建的templates的index.html中编写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学员管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello &#123;&#123; words &#125;&#125;!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在urls.py中配置映射目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> student.views <span class="keyword">import</span> index</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^$'</span>,index,name=<span class="string">'index'</span>)  <span class="comment"># 匹配所有映射给index函数处理 r代表使用原生字符</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="重新调整"><a href="#重新调整" class="headerlink" title="重新调整"></a>重新调整</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义了一个index方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># words = 'World!'</span></span><br><span class="line">    <span class="comment"># return render(request,'index.html',context=&#123;'words':words&#125;)  # 在student的templates中寻找index.html,并且上下文内容包含words</span></span><br><span class="line">    students = Student.objects.all() <span class="comment"># 获取所有学员信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,context=&#123;<span class="string">'students'</span>:students&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for student in students %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;student.name&#125;&#125; - &#123;&#123;student.get_status_display&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>get_status_display自动调用带有choices</em></p><p>效果如下：</p><p><img src="/images/resources/01/image-20210117162744822.png" alt="image-20210117162744822"></p><h2 id="提交数据-使用form"><a href="#提交数据-使用form" class="headerlink" title="提交数据(使用form)"></a>提交数据(使用form)</h2><p>创建一个forms.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line"><span class="comment"># 定义元数据,模型参照student，并且设置显示的字段</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = (</span><br><span class="line">            <span class="string">'name'</span>,<span class="string">'sex'</span>,<span class="string">'profession'</span>,</span><br><span class="line">            <span class="string">'email'</span>,<span class="string">'qq'</span>,<span class="string">'phone'</span></span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检验QQ必须为数据(示例)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_qq</span><span class="params">(self)</span>:</span></span><br><span class="line">        cleaned_data = self.cleaned_data[<span class="string">'qq'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cleaned_data.isdigit():</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">'必须为数字'</span>)</span><br><span class="line">        <span class="keyword">return</span> int(cleaned_data)</span><br></pre></td></tr></table></figure><p>修改view.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义了一个index方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># words = 'World!'</span></span><br><span class="line">    <span class="comment"># return render(request,'index.html',context=&#123;'words':words&#125;)  # 在student的templates中寻找index.html,并且上下文内容包含words</span></span><br><span class="line">    students = Student.objects.all() <span class="comment"># 获取所有学员信息</span></span><br><span class="line">    <span class="comment"># 以下为新增代码</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = StudentForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 对于手动创建student 可以利用form直接进行保存</span></span><br><span class="line">            <span class="comment"># cleaned_data = form.cleaned_data</span></span><br><span class="line">            <span class="comment"># student = Student()</span></span><br><span class="line">            <span class="comment"># student.name = cleaned_data['name']</span></span><br><span class="line">            <span class="comment"># student.sex = cleaned_data['sex']</span></span><br><span class="line">            <span class="comment"># student.email = cleaned_data['email']</span></span><br><span class="line">            <span class="comment"># student.profession = cleaned_data['profession']</span></span><br><span class="line">            <span class="comment"># student.qq = cleaned_data['qq']</span></span><br><span class="line">            <span class="comment"># student.phone = cleaned_data['phone']</span></span><br><span class="line">            <span class="comment"># student.save()</span></span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = StudentForm()</span><br><span class="line">    </span><br><span class="line">    context =&#123;</span><br><span class="line">        <span class="string">'students'</span>:students,</span><br><span class="line">        <span class="string">'form'</span>:form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>页面调整如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> student <span class="keyword">in</span> students %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123;student.name&#125;&#125; - &#123;&#123;student.get_status_display&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form &#125;&#125;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>注意:csrf_token是对安全性进行检验</strong></p><p>最终效果如下：</p><p><img src="/images/resources/01/image-20210117170653853.png" alt="image-20210117170653853"></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>一般将数据操作逻辑封装到model层中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cls.objects.all()</span><br></pre></td></tr></table></figure><h3 id="使用class-based-view复用"><a href="#使用class-based-view复用" class="headerlink" title="使用class-based view复用"></a>使用class-based view复用</h3><p>在views.py中构建以下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用class-based view 复用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(View)</span>:</span></span><br><span class="line">    template_name = <span class="string">'index.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context</span><span class="params">(self)</span>:</span></span><br><span class="line">        students = Student.get_all()</span><br><span class="line">        context =&#123;</span><br><span class="line">            <span class="string">'students'</span>:students</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 匹配get请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        context = self.get_context()</span><br><span class="line">        form = StudentForm()</span><br><span class="line">        context.update(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'form'</span>:form</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> render(request,self.template_name,context=context)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 匹配post请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        form = StudentForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'index'</span>))</span><br><span class="line">        context =self.get_context()</span><br><span class="line">        context.update(&#123;</span><br><span class="line">            <span class="string">'form'</span>:form</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> render(request,self.template_name,context=context)</span><br></pre></td></tr></table></figure><p>urls.py中引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> student.views <span class="keyword">import</span> index</span><br><span class="line"><span class="keyword">from</span> student.views <span class="keyword">import</span> IndexView</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment">## url(r'^$',index,name='index')</span></span><br><span class="line">    url(<span class="string">r'^$'</span>,IndexView.as_view(),name=<span class="string">'index'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意：as_view 就是对get和post方法的包装</p><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><p>构建一个middlewares.py文件，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeItMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        strs = <span class="string">"1. 处理requset请求，第一个被调用，"</span></span><br><span class="line">        <span class="string">"处理request中认证头之类"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request,func,*args,**kwargs)</span>:</span></span><br><span class="line">        strs = <span class="string">"2. 用于view处理,其中func即是调用的view"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">if</span> request.path != reverse(<span class="string">'index'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="comment">#这里调用了view做处理</span></span><br><span class="line">        response  = func(request)</span><br><span class="line">        costed = time.time() - start</span><br><span class="line">        print(<span class="string">"process view used  %d seconds"</span> % (costed,))</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request,Exception)</span>:</span></span><br><span class="line">        strs = <span class="string">"0. 用来处理全部流程中的异常"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        strs = <span class="string">"3. 如果处理渲染模板使用了render,就会调用到这里"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        strs = <span class="string">"4. 所有的流程执行完后会返回response给浏览器,在返回之前会调用到这里"</span></span><br><span class="line">        print(strs)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>加入到setting配置中的中间件中:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    'student.middlewares.TimeItMiddleware', </span><br><span class="line">    'django.middleware.security.SecurityMiddleware',</span><br><span class="line">    'django.contrib.sessions.middleware.SessionMiddleware',</span><br><span class="line">    'django.middleware.common.CommonMiddleware',</span><br><span class="line">    'django.middleware.csrf.CsrfViewMiddleware',</span><br><span class="line">    'django.contrib.auth.middleware.AuthenticationMiddleware',</span><br><span class="line">    'django.contrib.messages.middleware.MessageMiddleware',</span><br><span class="line">    'django.middleware.clickjacking.XFrameOptionsMiddleware',</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="关于单元测试"><a href="#关于单元测试" class="headerlink" title="关于单元测试"></a>关于单元测试</h3><p>参考的文章很多,可以参考<a href="https://www.cnblogs.com/fiona-zhong/p/10554197.html" target="_blank" rel="noopener">https://www.cnblogs.com/fiona-zhong/p/10554197.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;django开发&quot;&gt;&lt;a href=&quot;#django开发&quot; class=&quot;headerlink&quot; title=&quot;django开发&quot;&gt;&lt;/a&gt;django开发&lt;/h1&gt;&lt;h2 id=&quot;需求的描述&quot;&gt;&lt;a href=&quot;#需求的描述&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="django开发" scheme="https://djwangweijie.github.io/categories/django%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="web开发" scheme="https://djwangweijie.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="快速构建" scheme="https://djwangweijie.github.io/tags/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA/"/>
    
      <category term="ORM" scheme="https://djwangweijie.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>数据分析完结</title>
    <link href="https://djwangweijie.github.io/2020/09/29/2020-09-29-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%8C%E7%BB%93%E7%AB%A0/"/>
    <id>https://djwangweijie.github.io/2020/09/29/2020-09-29-数据分析完结章/</id>
    <published>2020-09-29T07:49:36.114Z</published>
    <updated>2020-10-09T05:29:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据分析完结章"><a href="#数据分析完结章" class="headerlink" title="数据分析完结章"></a>数据分析完结章</h1><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p><img src="/images/resources/20200929/image-20200929095444399.png" alt="image-20200929095444399"></p><h2 id="纯python时区计数"><a href="#纯python时区计数" class="headerlink" title="纯python时区计数"></a>纯python时区计数</h2><p><img src="/images/resources/20200929/image-20200929101915101.png" alt="image-20200929101915101"></p><h2 id="使用pandas进行时区计数"><a href="#使用pandas进行时区计数" class="headerlink" title="使用pandas进行时区计数"></a>使用pandas进行时区计数</h2><p><img src="/images/resources/20200929/image-20200929102222199.png" alt="image-20200929102222199"></p><p><img src="/images/resources/20200929/image-20200929102234993.png" alt="image-20200929102234993"></p><blockquote><p>处理缺失值</p></blockquote><p><img src="/images/resources/20200929/image-20200929102730104.png" alt="image-20200929102730104"></p><blockquote><p>可视化操作</p></blockquote><p><img src="/images/resources/20200929/image-20200929102908833.png" alt="image-20200929102908833"></p><h3 id="处理复杂字符串"><a href="#处理复杂字符串" class="headerlink" title="处理复杂字符串"></a>处理复杂字符串</h3><p><img src="/images/resources/20200929/image-20200929103516946.png" alt="image-20200929103516946"></p><p><img src="/images/resources/20200929/image-20200929104806177.png" alt="image-20200929104806177"></p><p><img src="/images/resources/20200929/image-20200929105539064.png" alt="image-20200929105539064"></p><p><img src="/images/resources/20200929/image-20200929105916586.png" alt="image-20200929105916586"></p><blockquote><p>可视化操作</p></blockquote><p><img src="/images/resources/20200929/image-20200929110709018.png" alt="image-20200929110709018"></p><p><img src="/images/resources/20200929/image-20200929111432477.png" alt="image-20200929111432477"></p><h2 id="分析电影"><a href="#分析电影" class="headerlink" title="分析电影"></a>分析电影</h2><p><img src="/images/resources/20200929/image-20200929120052889.png" alt="image-20200929120052889"></p><p><img src="/images/resources/20200929/image-20200929121024924.png" alt="image-20200929121024924"></p><p><img src="/images/resources/20200929/image-20200929121120775.png" alt="image-20200929121120775"></p><p><img src="/images/resources/20200929/image-20200929121302878.png" alt="image-20200929121302878"></p><h3 id="测量评价分歧"><a href="#测量评价分歧" class="headerlink" title="测量评价分歧"></a>测量评价分歧</h3><p><em>假设想找到男性和女性观众最具分歧的电影</em><br><img src="/images/resources/20200929/image-20200929121753333.png" alt="image-20200929121753333"></p><p><em>假设通过评分的方差或者标准差来衡量</em></p><p><img src="/images/resources/20200929/image-20200929122144330.png" alt="image-20200929122144330"></p><p><img src="/images/resources/20200929/image-20200929123844632.png" alt="image-20200929123844632"></p><h2 id="分析婴儿名字"><a href="#分析婴儿名字" class="headerlink" title="分析婴儿名字"></a>分析婴儿名字</h2><blockquote><p>目标</p></blockquote><ol><li>根据给定的名字,对婴儿名字随时间比例进行可视化</li><li>确定一个名字的相对排位</li><li>每年最受欢迎的名字或者流行度最好或者最低的名字</li><li>分析名字的趋势</li><li>分析名字的来源</li></ol><p><img src="/images/resources/20200929/image-20200929124834423.png" alt="image-20200929124834423"></p><h3 id="整理数据集"><a href="#整理数据集" class="headerlink" title="整理数据集"></a>整理数据集</h3><p><img src="/images/resources/20200929/image-20200929125528800.png" alt="image-20200929125528800"></p><p><img src="/images/resources/20200929/image-20200929130624338.png" alt="image-20200929130624338"></p><p><img src="/images/resources/20200929/image-20200929131045948.png" alt="image-20200929131045948"></p><p><img src="/images/resources/20200929/image-20200929131615520.png" alt="image-20200929131615520"></p><h3 id="分析名字趋势"><a href="#分析名字趋势" class="headerlink" title="分析名字趋势"></a>分析名字趋势</h3><p><img src="/images/resources/20200929/image-20200929132644570.png" alt="image-20200929132644570"></p><h3 id="计算命名的多样性"><a href="#计算命名的多样性" class="headerlink" title="计算命名的多样性"></a>计算命名的多样性</h3><p><img src="/images/resources/20200929/image-20200929133735933.png" alt="image-20200929133735933"></p><p><img src="/images/resources/20200929/image-20200929134529776.png" alt="image-20200929134529776"></p><h3 id="最后一个字母"><a href="#最后一个字母" class="headerlink" title="最后一个字母"></a>最后一个字母</h3><p><img src="/images/resources/20200929/image-20200929135508417.png" alt="image-20200929135508417"></p><p><img src="/images/resources/20200929/image-20200929135520001.png" alt="image-20200929135520001"></p><p><img src="/images/resources/20200929/image-20200929135936555.png" alt="image-20200929135936555"></p><p><img src="/images/resources/20200929/image-20200929140202763.png" alt="image-20200929140202763"></p><h3 id="男孩名字变成女孩名字"><a href="#男孩名字变成女孩名字" class="headerlink" title="男孩名字变成女孩名字"></a>男孩名字变成女孩名字</h3><p><img src="/images/resources/20200929/image-20200929140915728.png" alt="image-20200929140915728"></p><h2 id="农业数据分析"><a href="#农业数据分析" class="headerlink" title="农业数据分析"></a>农业数据分析</h2><p><img src="/images/resources/20200929/image-20200929141802330.png" alt="image-20200929141802330"></p><p><img src="/images/resources/20200929/image-20200929141812142.png" alt="image-20200929141812142"></p><p><img src="/images/resources/20200929/image-20200929144432227.png" alt="image-20200929144432227"></p><p><img src="/images/resources/20200929/image-20200929145237933.png" alt="image-20200929145237933"></p><p><img src="/images/resources/20200929/image-20200929150302933.png" alt="image-20200929150302933"></p><h2 id="选举分析"><a href="#选举分析" class="headerlink" title="选举分析"></a>选举分析</h2><p><img src="/images/resources/20200929/image-20200929151557059.png" alt="image-20200929151557059"></p><p><img src="/images/resources/20200929/image-20200929152112283.png" alt="image-20200929152112283"></p><h3 id="按雇主和职业进行统计"><a href="#按雇主和职业进行统计" class="headerlink" title="按雇主和职业进行统计"></a>按雇主和职业进行统计</h3><p><img src="/images/resources/20200929/image-20200929153055725.png" alt="image-20200929153055725"></p><p><img src="/images/resources/20200929/image-20200929153747022.png" alt="image-20200929153747022"></p><h3 id="捐赠金额分桶"><a href="#捐赠金额分桶" class="headerlink" title="捐赠金额分桶"></a>捐赠金额分桶</h3><p><img src="/images/resources/20200929/image-20200929154255437.png" alt="image-20200929154255437"></p><h3 id="按州进行计算"><a href="#按州进行计算" class="headerlink" title="按州进行计算"></a>按州进行计算</h3><p><img src="/images/resources/20200929/image-20200929154622418.png" alt="image-20200929154622418"></p><p><img src="/images/resources/20200929/image-20200929154640914.png" alt="image-20200929154640914"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据分析完结章&quot;&gt;&lt;a href=&quot;#数据分析完结章&quot; class=&quot;headerlink&quot; title=&quot;数据分析完结章&quot;&gt;&lt;/a&gt;数据分析完结章&lt;/h1&gt;&lt;h2 id=&quot;数据准备&quot;&gt;&lt;a href=&quot;#数据准备&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据建模</title>
    <link href="https://djwangweijie.github.io/2020/09/28/2020-09-28-python%E5%BB%BA%E6%A8%A1/"/>
    <id>https://djwangweijie.github.io/2020/09/28/2020-09-28-python建模/</id>
    <published>2020-09-28T06:44:56.290Z</published>
    <updated>2020-10-09T05:28:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python建模"><a href="#python建模" class="headerlink" title="python建模"></a>python建模</h1><p><strong><em>在机器学习的学习库中,有2个比较流行的建模数据包statsmodel和大名鼎鼎的scikit-learn.statsmodels更关注统计推断，提供不确定估计和参数p-value。相反的，scikit-learn注重预测。</em></strong></p><h2 id="pandas与建模代码结合"><a href="#pandas与建模代码结合" class="headerlink" title="pandas与建模代码结合"></a>pandas与建模代码结合</h2><p><img src="/images/resources/20200928/image-20200928124523739.png" alt="image-20200928124523739"></p><p><img src="/images/resources/20200928/image-20200928125150294.png" alt="image-20200928125150294"></p><p><img src="/images/resources/20200928/image-20200928125410631.png" alt="image-20200928125410631"></p><h2 id="评估线性模型"><a href="#评估线性模型" class="headerlink" title="评估线性模型"></a>评估线性模型</h2><h3 id="泰坦尼克代码示例"><a href="#泰坦尼克代码示例" class="headerlink" title="泰坦尼克代码示例"></a>泰坦尼克代码示例</h3><p><img src="/images/resources/20200928/image-20200928130852833.png" alt="image-20200928130852833"></p><p><img src="/images/resources/20200928/image-20200928131043151.png" alt="image-20200928131043151"></p><blockquote><p>简单示例</p></blockquote><p><img src="/images/resources/20200928/image-20200928134320807.png" alt="image-20200928134320807"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python建模&quot;&gt;&lt;a href=&quot;#python建模&quot; class=&quot;headerlink&quot; title=&quot;python建模&quot;&gt;&lt;/a&gt;python建模&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;在机器学习的学习库中,有2个比较流行的建模数据包statsmodel
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之高阶pandas</title>
    <link href="https://djwangweijie.github.io/2020/09/27/2020-09-27-%E9%AB%98%E7%BA%A7pandas/"/>
    <id>https://djwangweijie.github.io/2020/09/27/2020-09-27-高级pandas/</id>
    <published>2020-09-27T06:53:25.055Z</published>
    <updated>2020-10-09T05:37:00.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高阶pandas"><a href="#高阶pandas" class="headerlink" title="高阶pandas"></a>高阶pandas</h1><h2 id="背景和目标"><a href="#背景和目标" class="headerlink" title="背景和目标"></a>背景和目标</h2><p><strong><em>一个列经常会包含重复值,汇聚成了一个小型的不同值的集合。通过unique和values_counts,允许从一个数组中提取不同的值,并计算这些不同值的频率</em></strong></p><p><img src="/images/resources/20200927/image-20200927110638900.png" alt="image-20200927110638900"></p><p><strong>在数据库的操作中,使用维度表示一种最佳实践，维度包含了不同的值,并将主要观测值存储为引用维度表的整数键</strong></p><p><img src="/images/resources/20200927/image-20200927110935427.png" alt="image-20200927110935427"></p><p><strong><em>这种按照整数展现的方式成为分类或者字典编码的实现</em></strong></p><h2 id="pandas中的Categorical类型-可分类类型"><a href="#pandas中的Categorical类型-可分类类型" class="headerlink" title="pandas中的Categorical类型(可分类类型)"></a>pandas中的Categorical类型(可分类类型)</h2><p><img src="/images/resources/20200927/image-20200927111800297.png" alt="image-20200927111800297"></p><h3 id="通过函数转为categorical对象"><a href="#通过函数转为categorical对象" class="headerlink" title="通过函数转为categorical对象"></a>通过函数转为categorical对象</h3><p><img src="/images/resources/20200927/image-20200927130954583.png" alt="image-20200927130954583"></p><blockquote><p>其他方式</p></blockquote><p><img src="/images/resources/20200927/image-20200927131403599.png" alt="image-20200927131403599"></p><h3 id="使用categorical对象进行计算"><a href="#使用categorical对象进行计算" class="headerlink" title="使用categorical对象进行计算"></a>使用categorical对象进行计算</h3><p><img src="/images/resources/20200927/image-20200927132408678.png" alt="image-20200927132408678"></p><h3 id="使用分类获得更高性能"><a href="#使用分类获得更高性能" class="headerlink" title="使用分类获得更高性能"></a>使用分类获得更高性能</h3><p><img src="/images/resources/20200927/image-20200927133450474.png" alt="image-20200927133450474"></p><h3 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h3><p><img src="/images/resources/20200927/image-20200927134537131.png" alt="image-20200927134537131"></p><p><img src="/images/resources/20200927/image-20200927134554599.png" alt="image-20200927134554599"></p><h3 id="创建虚拟替换变量"><a href="#创建虚拟替换变量" class="headerlink" title="创建虚拟替换变量"></a>创建虚拟替换变量</h3><p><img src="/images/resources/20200927/image-20200927134717366.png" alt="image-20200927134717366"></p><h2 id="高阶的groupby应用"><a href="#高阶的groupby应用" class="headerlink" title="高阶的groupby应用"></a>高阶的groupby应用</h2><p>在分组操作中有一个内建方法叫做transform,可以达到:</p><ol><li>产生一个标量值,广播到个分组的尺寸数据中</li><li>产生一个与输入分组尺寸相同的对象</li><li>不可改变它的输入</li></ol><p><img src="/images/resources/20200927/image-20200927135545587.png" alt="image-20200927135545587"></p><p><img src="/images/resources/20200927/image-20200927135852507.png" alt="image-20200927135852507"></p><h3 id="分组的时间重新采样"><a href="#分组的时间重新采样" class="headerlink" title="分组的时间重新采样"></a>分组的时间重新采样</h3><p><img src="/images/resources/20200927/image-20200927140302739.png" alt="image-20200927140302739"></p><blockquote><p>其他方式</p></blockquote><p><img src="/images/resources/20200927/image-20200927141652657.png" alt="image-20200927141652657"></p><p><em>注:还有一个pipe管道的方法暂时没有用.后续代码有涉及到在进行查阅</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高阶pandas&quot;&gt;&lt;a href=&quot;#高阶pandas&quot; class=&quot;headerlink&quot; title=&quot;高阶pandas&quot;&gt;&lt;/a&gt;高阶pandas&lt;/h1&gt;&lt;h2 id=&quot;背景和目标&quot;&gt;&lt;a href=&quot;#背景和目标&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据的时间序列</title>
    <link href="https://djwangweijie.github.io/2020/09/25/2020-09-24-%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    <id>https://djwangweijie.github.io/2020/09/25/2020-09-24-时间序列/</id>
    <published>2020-09-25T06:10:42.118Z</published>
    <updated>2020-10-09T05:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><blockquote><p>说明</p></blockquote><ol><li>时间序列的数据是比较重要的结构化数据形式,在多个时间观测或者测量的数据形成了时间序列</li><li>许多的时间序列是固定频率的,也就表明数据是根据相同规则出现的.同样的时间序列可以是不规则的,没有固定的时间单位和偏移量</li><li>标记时间的方式可能有时间戳;固定的时间区间;时间间隔;实验时间或消耗时间</li></ol><h1 id="日期和时间数据的类型以及工具"><a href="#日期和时间数据的类型以及工具" class="headerlink" title="日期和时间数据的类型以及工具"></a>日期和时间数据的类型以及工具</h1><p>在python的标准库中包含了日期和时间数据的类型.有datetime,time,calendar等</p><p><img src="/images/resources/20200924/image-20200924111529527.png" alt="image-20200924111529527"></p><h2 id="字符串和datetime互相转换"><a href="#字符串和datetime互相转换" class="headerlink" title="字符串和datetime互相转换"></a>字符串和datetime互相转换</h2><p><img src="/images/resources/20200924/image-20200924122533490.png" alt="image-20200924122533490"></p><h3 id="使用pd中的to-datetime进行格式转换"><a href="#使用pd中的to-datetime进行格式转换" class="headerlink" title="使用pd中的to_datetime进行格式转换"></a>使用pd中的to_datetime进行格式转换</h3><p><img src="/images/resources/20200924/image-20200924122835232.png" alt="image-20200924122835232"></p><h2 id="时间序列基础"><a href="#时间序列基础" class="headerlink" title="时间序列基础"></a>时间序列基础</h2><p><strong><em>pandas的基础时间序列是由时间戳索引的Series,通常表示为字符串或者是datetime对象</em></strong></p><p><img src="/images/resources/20200924/image-20200925100223177.png" alt="image-20200925100223177"></p><h3 id="索引-子集-选择"><a href="#索引-子集-选择" class="headerlink" title="索引,子集,选择"></a>索引,子集,选择</h3><p><img src="/images/resources/20200924/image-20200925100611997.png" alt="image-20200925100611997"></p><p><img src="/images/resources/20200924/image-20200925101106079.png" alt="image-20200925101106079"></p><p><img src="/images/resources/20200924/image-20200925101651782.png" alt="image-20200925101651782"></p><p><img src="/images/resources/20200924/image-20200925102625533.png" alt="image-20200925102625533"></p><h3 id="含有重复索引的时间序列"><a href="#含有重复索引的时间序列" class="headerlink" title="含有重复索引的时间序列"></a>含有重复索引的时间序列</h3><p>在某些情况下,可能会有多个数据观察值落在特定的时间戳上.</p><p><img src="/images/resources/20200924/image-20200925103954285.png" alt="image-20200925103954285"></p><h2 id="日期范围-频率和移位"><a href="#日期范围-频率和移位" class="headerlink" title="日期范围,频率和移位"></a>日期范围,频率和移位</h2><p>时间序列的频率不是固定的,但是经常有需要处理固定频率的场景,例如每日,每月.这意味着在必要的时候向时间序列引入缺失值。比如通过resample方法将样本时间序列转换为固定的每日频率数据</p><p><img src="/images/resources/20200924/image-20200925104955378.png" alt="image-20200925104955378"></p><p><img src="/images/resources/20200924/image-20200925105846336.png" alt="image-20200925105846336"></p><h3 id="频率和日期偏置"><a href="#频率和日期偏置" class="headerlink" title="频率和日期偏置"></a>频率和日期偏置</h3><p><strong><em>pandas中频率是由基础频率和倍数组成的.基础频率通常会有字符串别名.</em></strong></p><p><img src="/images/resources/20200924/image-20200925112737059.png" alt="image-20200925112737059"></p><h3 id="移位日期"><a href="#移位日期" class="headerlink" title="移位日期"></a>移位日期</h3><p>在Serise和DataFrame中都有一个shift方法进行简单日期前后位移</p><p><img src="/images/resources/20200924/image-20200925113638466.png" alt="image-20200925113638466"></p><h3 id="使用偏移进行移位日期"><a href="#使用偏移进行移位日期" class="headerlink" title="使用偏移进行移位日期"></a>使用偏移进行移位日期</h3><p><img src="/images/resources/20200924/image-20200925114716564.png" alt="image-20200925114716564"></p><h2 id="时区处理"><a href="#时区处理" class="headerlink" title="时区处理"></a>时区处理</h2><p><img src="/images/resources/20200924/image-20200925115647627.png" alt="image-20200925115647627"></p><h2 id="时间区间和区间算术"><a href="#时间区间和区间算术" class="headerlink" title="时间区间和区间算术"></a>时间区间和区间算术</h2><p>时间区间表示的是时间范围,Period类表示的正式这种数据类型<br><img src="/images/resources/20200924/image-20200925123909605.png" alt="image-20200925123909605"></p><blockquote><p>示例</p></blockquote><p><img src="/images/resources/20200924/image-20200925124505804.png" alt="image-20200925124505804"></p><h2 id="重新采样和频率转换"><a href="#重新采样和频率转换" class="headerlink" title="重新采样和频率转换"></a>重新采样和频率转换</h2><p>重新采样指的是将时间序列从一个频率转换到另一个频率的过程,将高频率聚合到低频率为向下采样,反之为向上采样</p><p><img src="/images/resources/20200924/image-20200925124953715.png" alt="image-20200925124953715"></p><h3 id="向下采样"><a href="#向下采样" class="headerlink" title="向下采样"></a>向下采样</h3><p><img src="/images/resources/20200924/image-20200925130523640.png" alt="image-20200925130523640"></p><blockquote><p>开端-峰值-谷值-结束</p></blockquote><p><img src="/images/resources/20200924/image-20200925130719301.png" alt="image-20200925130719301"></p><h3 id="向上采样"><a href="#向上采样" class="headerlink" title="向上采样"></a>向上采样</h3><p><img src="/images/resources/20200924/image-20200925131305982.png" alt="image-20200925131305982"></p><h3 id="使用区间进行重新采样"><a href="#使用区间进行重新采样" class="headerlink" title="使用区间进行重新采样"></a>使用区间进行重新采样</h3><p><img src="/images/resources/20200924/image-20200925132008194.png" alt="image-20200925132008194"></p><h2 id="移动窗口函数"><a href="#移动窗口函数" class="headerlink" title="移动窗口函数"></a>移动窗口函数</h2><p>统计和其他通过移动窗口或指数衰减而运行的函数是用于时间序列操作的数组变换的一个重要类别。这些函数称作为移动窗口函数。函数会自动排除缺失数据<br><img src="/images/resources/20200924/image-20200925134253670.png" alt="image-20200925134253670"></p><p><img src="/images/resources/20200924/image-20200925134309212.png" alt="image-20200925134309212"></p><p><img src="/images/resources/20200924/image-20200925134324416.png" alt="image-20200925134324416"></p><p><img src="/images/resources/20200924/image-20200925134517202.png" alt="image-20200925134517202"></p><h3 id="指数加权函数"><a href="#指数加权函数" class="headerlink" title="指数加权函数"></a>指数加权函数</h3><p>指定一个常数衰减因子以向更多近期观测值提供更多权重值,可以替代使用具有相等加权观察值的静态窗口尺寸的方法</p><p><img src="/images/resources/20200924/image-20200925135940944.png" alt="image-20200925135940944"></p><h3 id="二元移动窗口函数"><a href="#二元移动窗口函数" class="headerlink" title="二元移动窗口函数"></a>二元移动窗口函数</h3><p><img src="/images/resources/20200924/image-20200925140716378.png" alt="image-20200925140716378"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;时间序列&quot;&gt;&lt;a href=&quot;#时间序列&quot; class=&quot;headerlink&quot; title=&quot;时间序列&quot;&gt;&lt;/a&gt;时间序列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;时间序列的数据是比较重要的结构化数据形
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据序列" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/"/>
    
      <category term="数据时间" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>数据分组和聚合操作</title>
    <link href="https://djwangweijie.github.io/2020/09/11/2020-09-11-%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84%E5%92%8C%E8%81%9A%E5%90%88/"/>
    <id>https://djwangweijie.github.io/2020/09/11/2020-09-11-数据分组和聚合/</id>
    <published>2020-09-11T09:51:34.633Z</published>
    <updated>2020-09-11T11:07:29.508Z</updated>
    
    <content type="html"><![CDATA[<p>通过将数据进行分组以及聚合,能够更加能够看到数据的重要性,越来越接近我的想法了.</p><h1 id="数据聚合和分组操作"><a href="#数据聚合和分组操作" class="headerlink" title="数据聚合和分组操作"></a>数据聚合和分组操作</h1><p>​    <strong>对数据及进行分类，在每一组数据应用聚合函数或者转换函数,这是非常重要的一个部分.一般在数据载入,合并,准备数据集之后,可能需要计算分组统计或者数据透视表用于报告或可视化的目的。pandas提供一个灵活的groupby接口,允许一种自然的方式对数据集进行切片,切块和总结。</strong></p><p>​    <strong>我们可以通过pandas对象或者Numpy数据执行复杂的组操作</strong></p><pre><code>1. 使用一个或者多个键将pandas对象拆分为多块  2. 计算组汇总统计信息以及应用组内变化或其他操作        3. 计算数据透视表和交叉表            4. 执行分位数分析以及其他统计组分析</code></pre><h2 id="GroupBy机制"><a href="#GroupBy机制" class="headerlink" title="GroupBy机制"></a>GroupBy机制</h2><p><em>一般聚合操作中所有的动作为拆分-应用-联合,数据包含在pandas对象中,可以是不同的数据结构.之后可以根据一个或者多个键分离到各组中,可以沿着行或者列</em>.分组操作后，一个函数就可以应用到各个组中,产生新的值。<br><strong>注意:axis=0 代表着以行为单位从上至下计算,axis=1代表着以列为单位从左至右计算</strong></p><blockquote><p>分组键</p></blockquote><p>分组键可以是多种形式的,不一定是完全相同的类型:</p><ol><li>与需要分组的轴长度一致的值列表或者值数组</li><li>DataFrame的列名的值</li><li>可以将分组轴向上的值和分组名称相匹配的字典或者Series</li><li>可以在轴索引或者索引中单个标签上调用的函数</li></ol><blockquote><p>示例说明</p></blockquote><p><img src="/images/resources/20200911/image-20200909103353013.png" alt="image-20200909103353013"></p><p><img src="/images/resources/20200911/image-20200909104105962.png" alt="image-20200909104105962"></p><p><img src="/images/resources/20200911/image-20200909105648809.png" alt="image-20200909105648809"></p><h2 id="遍历分组对象"><a href="#遍历分组对象" class="headerlink" title="遍历分组对象"></a>遍历分组对象</h2><p><strong>group对象支持迭代</strong><br><img src="/images/resources/20200911/image-20200909111834130.png" alt="image-20200909111834130"></p><p><img src="/images/resources/20200911/image-20200909144033641.png" alt="image-20200909144033641"></p><h2 id="选择一列或者所有列的子集"><a href="#选择一列或者所有列的子集" class="headerlink" title="选择一列或者所有列的子集"></a>选择一列或者所有列的子集</h2><p><img src="/images/resources/20200911/image-20200909145559991.png" alt="image-20200909145559991"></p><h2 id="使用字典和Serise进行分组"><a href="#使用字典和Serise进行分组" class="headerlink" title="使用字典和Serise进行分组"></a>使用字典和Serise进行分组</h2><p><img src="/images/resources/20200911/image-20200909150813382.png" alt="image-20200909150813382"></p><h2 id="使用函数分组"><a href="#使用函数分组" class="headerlink" title="使用函数分组"></a>使用函数分组</h2><p><img src="/images/resources/20200911/image-20200909152030886.png" alt="image-20200909152030886"></p><h2 id="根据索引层级进行分组"><a href="#根据索引层级进行分组" class="headerlink" title="根据索引层级进行分组"></a>根据索引层级进行分组</h2><p><img src="/images/resources/20200911/image-20200909152936829.png" alt="image-20200909152936829"></p><h1 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h1><p><strong>聚合是指所有根据数组产生标量值的数据转换过程，也就是类似统计函数一样.</strong></p><p><img src="/images/resources/20200911/image-20200910101011063.png" alt="image-20200910101011063"></p><h2 id="逐列以及多函数应用"><a href="#逐列以及多函数应用" class="headerlink" title="逐列以及多函数应用"></a>逐列以及多函数应用</h2><p><img src="/images/resources/20200911/image-20200910102227086.png" alt="image-20200910102227086"></p><blockquote><p>不同的操作方式0</p></blockquote><p><img src="/images/resources/20200911/image-20200910110002305.png" alt="image-20200910110002305"></p><blockquote><p>不同的操作方式1</p></blockquote><p><img src="/images/resources/20200911/image-20200910112800591.png" alt="image-20200910112800591"></p><h2 id="返回不带行索引的聚合数据"><a href="#返回不带行索引的聚合数据" class="headerlink" title="返回不带行索引的聚合数据"></a>返回不带行索引的聚合数据</h2><p><img src="/images/resources/20200911/image-20200910113311844.png" alt="image-20200910113311844"></p><h1 id="apply应用-通用拆分-应用-联合"><a href="#apply应用-通用拆分-应用-联合" class="headerlink" title="apply应用:通用拆分-应用-联合"></a>apply应用:通用拆分-应用-联合</h1><p><img src="/images/resources/20200911/image-20200910120817368.png" alt="image-20200910120817368"></p><p><img src="/images/resources/20200911/image-20200910121023235.png" alt="image-20200910121023235"></p><h2 id="压缩分组键"><a href="#压缩分组键" class="headerlink" title="压缩分组键"></a>压缩分组键</h2><p><img src="/images/resources/20200911/image-20200910121328100.png" alt="image-20200910121328100"></p><h2 id="分位数以及桶分析"><a href="#分位数以及桶分析" class="headerlink" title="分位数以及桶分析"></a>分位数以及桶分析</h2><p><img src="/images/resources/20200911/image-20200910122422983.png" alt="image-20200910122422983"></p><blockquote><p>根据分位数</p></blockquote><p><img src="/images/resources/20200911/image-20200910122807996.png" alt="image-20200910122807996"></p><h1 id="使用指定分组值填充缺失值"><a href="#使用指定分组值填充缺失值" class="headerlink" title="使用指定分组值填充缺失值"></a>使用指定分组值填充缺失值</h1><p><strong>在清除缺失值，有时候可以用dropna去除缺失值,有时候可能需要进行修正.fillna是一个可以填充缺失值的方法</strong><br><img src="/images/resources/20200911/image-20200910123245007.png" alt="image-20200910123245007"></p><blockquote><p>其他示例</p></blockquote><p><img src="/images/resources/20200911/image-20200911103318344.png" alt="image-20200911103318344"></p><h1 id="随机采样和排列"><a href="#随机采样和排列" class="headerlink" title="随机采样和排列"></a>随机采样和排列</h1><p><strong>在Series中有sample方法可以帮助我们进行随机采样</strong><br><img src="/images/resources/20200911/image-20200911131223808.png" alt="image-20200911131223808"></p><p><img src="/images/resources/20200911/image-20200911131647332.png" alt="image-20200911131647332"></p><h1 id="分组加权平均和相关性"><a href="#分组加权平均和相关性" class="headerlink" title="分组加权平均和相关性"></a>分组加权平均和相关性</h1><p><a href="https://jingyan.baidu.com/article/d2b1d1029a99a45c7f37d442.html" target="_blank" rel="noopener">加权平均连接</a><br><img src="/images/resources/20200911/image-20200911132440209.png" alt="image-20200911132440209"></p><blockquote><p>相关示例</p></blockquote><p><img src="/images/resources/20200911/image-20200911135445793.png" alt="image-20200911135445793"></p><p><img src="/images/resources/20200911/image-20200911135500821.png" alt="image-20200911135500821"></p><p><img src="/images/resources/20200911/image-20200911135656979.png" alt="image-20200911135656979"></p><h1 id="逐组线性回归-了解"><a href="#逐组线性回归-了解" class="headerlink" title="逐组线性回归(了解)"></a>逐组线性回归(了解)</h1><p><img src="/images/resources/20200911/image-20200911140808291.png" alt="image-20200911140808291"></p><h1 id="数据透视表和数据交叉表"><a href="#数据透视表和数据交叉表" class="headerlink" title="数据透视表和数据交叉表"></a>数据透视表和数据交叉表</h1><p><img src="/images/resources/20200911/image-20200911141427551.png" alt="image-20200911141427551"></p><p><strong>交叉表是用于统计分组频率的特殊透视表</strong><br><img src="/images/resources/20200911/image-20200911141622302.png" alt="image-20200911141622302"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过将数据进行分组以及聚合,能够更加能够看到数据的重要性,越来越接近我的想法了.&lt;/p&gt;
&lt;h1 id=&quot;数据聚合和分组操作&quot;&gt;&lt;a href=&quot;#数据聚合和分组操作&quot; class=&quot;headerlink&quot; title=&quot;数据聚合和分组操作&quot;&gt;&lt;/a&gt;数据聚合和分组操作&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E7%BB%84/"/>
    
      <category term="数据聚合" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    
      <category term="数据分组" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据制图</title>
    <link href="https://djwangweijie.github.io/2020/08/26/2020-08-26-%E6%95%B0%E6%8D%AE%E5%88%B6%E5%9B%BE/"/>
    <id>https://djwangweijie.github.io/2020/08/26/2020-08-26-数据制图/</id>
    <published>2020-08-26T07:00:25.252Z</published>
    <updated>2020-08-26T07:12:06.406Z</updated>
    
    <content type="html"><![CDATA[<p>通过将数据进行可视化操作,数据就变得越来越美丽了</p><h1 id="绘图与可视化"><a href="#绘图与可视化" class="headerlink" title="绘图与可视化"></a>绘图与可视化</h1><ol><li>python提供了很多可以制作静态或者动态的可视化文件的库</li><li>python中提供了一个库叫做matplotlib库</li><li>可视化数据能够直观的展现数据分析的结果</li></ol><h1 id="简明的matplotlib入门"><a href="#简明的matplotlib入门" class="headerlink" title="简明的matplotlib入门"></a>简明的matplotlib入门</h1><p><img src="/images/resources/20200826/image-20200810154643872.png" alt="image-20200810154643872"></p><h2 id="图片与子图"><a href="#图片与子图" class="headerlink" title="图片与子图"></a>图片与子图</h2><p><strong>matplotlib绘制的图片位于Figure对象中,使用plt.figure生成一个新的图片</strong></p><p><strong>通常是不能用新的空白图片进行绘图的,需要使用add_subplot创建一个或者多个子图</strong></p><p><strong><em>说明:也就是Figure对象中可以允许有多个子图</em></strong></p><p><img src="/images/resources/20200826/image-20200826085630754.png" alt="image-20200826085630754"></p><h2 id="制图的补充说明"><a href="#制图的补充说明" class="headerlink" title="制图的补充说明"></a>制图的补充说明</h2><p><img src="/images/resources/20200826/image-20200826091725105.png" alt="image-20200826091725105"></p><p><img src="/images/resources/20200826/image-20200826091746370.png" alt="image-20200826091746370"></p><h2 id="获取制图对象"><a href="#获取制图对象" class="headerlink" title="获取制图对象"></a>获取制图对象</h2><p><img src="/images/resources/20200826/image-20200826092309660.png" alt="image-20200826092309660"></p><p><strong>这个时候就可以通过索引方便的获取制图对象</strong>、</p><h2 id="调整子图之间的间距"><a href="#调整子图之间的间距" class="headerlink" title="调整子图之间的间距"></a>调整子图之间的间距</h2><p><img src="/images/resources/20200826/image-20200826093403567.png" alt="image-20200826093403567"></p><h1 id="颜色-标记和线类型"><a href="#颜色-标记和线类型" class="headerlink" title="颜色,标记和线类型"></a>颜色,标记和线类型</h1><p><strong>matplotlib的主函数plot接收带有x和y轴的数组。以及一些可选的字符串缩写参数来指明颜色和线类型</strong></p><p><img src="/images/resources/20200826/image-20200826095950780.png" alt="image-20200826095950780"></p><p><a href="https://blog.csdn.net/weixin_40683253/article/details/87375020" target="_blank" rel="noopener">参考文章</a></p><p><img src="/images/resources/20200826/image-20200826100940107.png" alt="image-20200826100940107"></p><h1 id="刻度-标签和图例"><a href="#刻度-标签和图例" class="headerlink" title="刻度,标签和图例"></a>刻度,标签和图例</h1><p><strong>在pyplot接口设计为交互式使用,包含了像xlim,xticks和xticklabels等方法,分别控制了绘图范围,刻度位置以及刻度标签</strong></p><h2 id="设置标题-轴标签-刻度和刻度标签"><a href="#设置标题-轴标签-刻度和刻度标签" class="headerlink" title="设置标题,轴标签,刻度和刻度标签"></a>设置标题,轴标签,刻度和刻度标签</h2><p><img src="/images/resources/20200826/image-20200826102724278.png" alt="image-20200826102724278"></p><h2 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h2><p><img src="/images/resources/20200826/image-20200826103050299.png" alt="image-20200826103050299"></p><h2 id="注释与子图加工"><a href="#注释与子图加工" class="headerlink" title="注释与子图加工"></a>注释与子图加工</h2><p><strong>在plt中使用text,arrow和annote方法用来添加注释和文本</strong></p><p><strong><em>text方式用于给定坐标x和y并绘制对应的说明</em></strong></p><p><img src="/images/resources/20200826/image-20200826103838031.png" alt="image-20200826103838031"></p><h3 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h3><p><strong><em>注释可以同时绘制文本和箭头,示例中展现标普500指数从2007年以来的收盘价。并标注2008到2009金融危机的重要日期</em></strong><br><img src="/images/resources/20200826/image-20200826105956949.png" alt="image-20200826105956949"></p><p><img src="/images/resources/20200826/image-20200826112613289.png" alt="image-20200826112613289"></p><p><strong><em>除此之外还可以绘制多种常见的图形对象</em></strong></p><p><img src="/images/resources/20200826/image-20200826113153981.png" alt="image-20200826113153981"></p><h3 id="图片保存到文件"><a href="#图片保存到文件" class="headerlink" title="图片保存到文件"></a>图片保存到文件</h3><p><img src="/images/resources/20200826/image-20200826113608529.png" alt="image-20200826113608529"></p><h1 id="使用pandas和seaborn进行绘图"><a href="#使用pandas和seaborn进行绘图" class="headerlink" title="使用pandas和seaborn进行绘图"></a>使用pandas和seaborn进行绘图</h1><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p><strong><em>Series和DateFrame都有一个plot的属性。默认情况下绘制的是折线图</em></strong></p><p><img src="/images/resources/20200826/image-20200826114325983.png" alt="image-20200826114325983"></p><p><img src="/images/resources/20200826/image-20200826114644795.png" alt="image-20200826114644795"></p><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p><strong><em>bar()和barh()方法分别绘制垂直和水平的柱状图,Series和DataFrame索引将会被用作x的刻度或者是y的刻度</em></strong></p><p><img src="/images/resources/20200826/image-20200826115817852.png" alt="image-20200826115817852"></p><blockquote><p>DataFrame<img src="/images/resources/20200826/image-20200826120310342.png" alt="image-20200826120310342"></p></blockquote><p><img src="/images/resources/20200826/image-20200826120426030.png" alt="image-20200826120426030"></p><h2 id="相关示例-1"><a href="#相关示例-1" class="headerlink" title="相关示例"></a>相关示例</h2><p><strong>* 根据星期日期和派对规模形成交叉表*</strong></p><p><img src="/images/resources/20200826/image-20200826133823949.png" alt="image-20200826133823949"></p><p><img src="/images/resources/20200826/image-20200826134015163.png" alt="image-20200826134015163"></p><h2 id="使用seaborn进行制图"><a href="#使用seaborn进行制图" class="headerlink" title="使用seaborn进行制图"></a>使用seaborn进行制图</h2><p><img src="/images/resources/20200826/image-20200826141421493.png" alt="image-20200826141421493"></p><p><img src="/images/resources/20200826/image-20200826141545447.png" alt="image-20200826141545447"></p><h2 id="直方图和密度图"><a href="#直方图和密度图" class="headerlink" title="直方图和密度图"></a>直方图和密度图</h2><blockquote><p>直方图</p></blockquote><p>直方图是一种条形图,用于给出值频率的离散显示,数据点被分成离散的,均匀间隔的箱，并且绘制每个箱中数据点的数量</p><p><img src="/images/resources/20200826/image-20200826142521912.png" alt="image-20200826142521912"></p><blockquote><p>密度图</p></blockquote><p>密度图是一种与直方图相关的图形列表。通过计算可能产生的观测数据的连续概率分布</p><p><img src="/images/resources/20200826/image-20200826142728790.png" alt="image-20200826142728790"></p><blockquote><p>一次性绘制直方图和密度图</p></blockquote><p><img src="/images/resources/20200826/image-20200826143450683.png" alt="image-20200826143450683"></p><h2 id="散点图和点图"><a href="#散点图和点图" class="headerlink" title="散点图和点图"></a>散点图和点图</h2><p>散点图和点图可以用于检验两个一维数据序列之间的关系</p><p><img src="/images/resources/20200826/image-20200826144446267.png" alt="image-20200826144446267"></p><p><img src="/images/resources/20200826/image-20200826145006195.png" alt="image-20200826145006195"></p><p><a href="https://www.jianshu.com/p/c50cb4f1029f" target="_blank" rel="noopener">参考文章</a></p><h2 id="分面网格和分类数据"><a href="#分面网格和分类数据" class="headerlink" title="分面网格和分类数据"></a>分面网格和分类数据</h2><p><img src="/images/resources/20200826/image-20200826145713054.png" alt="image-20200826145713054"></p><p><img src="/images/resources/20200826/image-20200826145733211.png" alt="image-20200826145733211"></p><p><img src="/images/resources/20200826/image-20200826145748186.png" alt="image-20200826145748186"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过将数据进行可视化操作,数据就变得越来越美丽了&lt;/p&gt;
&lt;h1 id=&quot;绘图与可视化&quot;&gt;&lt;a href=&quot;#绘图与可视化&quot; class=&quot;headerlink&quot; title=&quot;绘图与可视化&quot;&gt;&lt;/a&gt;绘图与可视化&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;python提供了很多可以制作静
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重塑" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A1%91/"/>
    
      <category term="数据展现" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%B1%95%E7%8E%B0/"/>
    
      <category term="可视化操作" scheme="https://djwangweijie.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据规整之连接,联合与重塑</title>
    <link href="https://djwangweijie.github.io/2020/07/24/2020-07-23-%E6%95%B0%E6%8D%AE%E8%A7%84%E6%95%B4%E4%B9%8B%E8%BF%9E%E6%8E%A5%E8%81%94%E5%90%88%E9%87%8D%E5%A1%91/"/>
    <id>https://djwangweijie.github.io/2020/07/24/2020-07-23-数据规整之连接联合重塑/</id>
    <published>2020-07-24T15:26:36.000Z</published>
    <updated>2020-07-24T15:31:56.260Z</updated>
    
    <content type="html"><![CDATA[<p>这章可以在以后的数据分析案例中,慢慢的体会。但最终的目的就是为了组装自己想要的数据</p><h1 id="数据规整之连接-联合与重塑"><a href="#数据规整之连接-联合与重塑" class="headerlink" title="数据规整之连接,联合与重塑"></a>数据规整之连接,联合与重塑</h1><p><strong>首先数据可能分布在多个文件或者数据库中,或以某种不易于分析的格式进行排列。而现在我们要做的就是如何连接,联合与重塑</strong></p><h2 id="分层索引"><a href="#分层索引" class="headerlink" title="分层索引"></a>分层索引</h2><p><em>分层索引是pandas的重要特性,允许在一个轴向上拥有多个索引层级。分层索引提供了一种在更低维度的形式中处理更高维度数据的方式</em><br><img src="/images/resources/20200723/image-20200723215507558.png" alt="image-20200723215507558"></p><h3 id="筛选数据子集"><a href="#筛选数据子集" class="headerlink" title="筛选数据子集"></a>筛选数据子集</h3><p><img src="/images/resources/20200723/image-20200723220913394.png" alt="image-20200723220913394"></p><h4 id="DataFrame中分层索引"><a href="#DataFrame中分层索引" class="headerlink" title="DataFrame中分层索引"></a>DataFrame中分层索引</h4><p><img src="/images/resources/20200723/image-20200723221921025.png" alt="image-20200723221921025"></p><h3 id="重排序和层级排序"><a href="#重排序和层级排序" class="headerlink" title="重排序和层级排序"></a>重排序和层级排序</h3><p><strong>有时需要重新排列轴上的层级顺序，或者按照特定的层级对数据进行排序。使用swaplevel接收两个层级序号或者层级名称。返回一个层级变更的新对象，但是数据是不变的</strong><br><img src="/images/resources/20200723/image-20200723222834966.png" alt="image-20200723222834966"></p><h4 id="按层级进行汇总统计"><a href="#按层级进行汇总统计" class="headerlink" title="按层级进行汇总统计"></a>按层级进行汇总统计</h4><p><strong>DataFrame和Series有一个level选项。可以在某个特定的轴上面进行聚合</strong></p><p><img src="/images/resources/20200723/image-20200723223607440.png" alt="image-20200723223607440"></p><h3 id="使用DataFrame的列进行索引"><a href="#使用DataFrame的列进行索引" class="headerlink" title="使用DataFrame的列进行索引"></a>使用DataFrame的列进行索引</h3><p><img src="/images/resources/20200723/image-20200723224502583.png" alt="image-20200723224502583"></p><h2 id="联合与合并数据集"><a href="#联合与合并数据集" class="headerlink" title="联合与合并数据集"></a>联合与合并数据集</h2><ol><li>pandas.merge可以根据一个或者多个键进行连接。</li><li>pandas.concat是对象在轴向上进行黏合或堆叠</li><li>combine_first允许将重叠的数据拼接在一起。以使用一个对象中的值填充另一个对象中的缺失值</li></ol><h3 id="数据风格的连接"><a href="#数据风格的连接" class="headerlink" title="数据风格的连接"></a>数据风格的连接</h3><p><img src="/images/resources/20200723/image-20200723230135407.png" alt="image-20200723230135407"></p><h4 id="左右连接以及outer并集"><a href="#左右连接以及outer并集" class="headerlink" title="左右连接以及outer并集"></a>左右连接以及outer并集</h4><p><img src="/images/resources/20200723/image-20200723230934131.png" alt="image-20200723230934131"></p><blockquote><p>注意事项</p></blockquote><p><strong>多对多连接是行的笛卡尔积，使用多个键进行合并时传入一个列名的列表即可，在处理重叠的列名的时候可以使用suffixes进行重新命名</strong></p><h4 id="根据索引合并"><a href="#根据索引合并" class="headerlink" title="根据索引合并"></a>根据索引合并</h4><p><img src="/images/resources/20200723/image-20200723232316630.png" alt="image-20200723232316630"></p><h3 id="沿轴向连接"><a href="#沿轴向连接" class="headerlink" title="沿轴向连接"></a>沿轴向连接</h3><p>一个是通过Numpy的concatenate函数，也可以使用pandas的concat函数</p><p><img src="/images/resources/20200723/image-20200723234200939.png" alt="image-20200723234200939"></p><h3 id="联合重叠数据"><a href="#联合重叠数据" class="headerlink" title="联合重叠数据"></a>联合重叠数据</h3><p><strong>可以理解为填补Series或者DataFrame的缺失值,使用Combine_first</strong></p><p><img src="/images/resources/20200723/image-20200723234742072.png" alt="image-20200723234742072"></p><h2 id="重塑和透视"><a href="#重塑和透视" class="headerlink" title="重塑和透视"></a>重塑和透视</h2><p><strong>多层索引在DataFrame中提供一种一致性的方式用于重排列数据。</strong></p><ul><li>statck简单的说就是转为低维度多层级的Series(堆叠)  也可以叫做列中的数据透视到行</li><li>unstack简单的说就转为层级感强烈的DataFrame(拆堆) 也可以叫做行中的数据透视到列</li></ul><h3 id="长变宽"><a href="#长变宽" class="headerlink" title="长变宽"></a>长变宽</h3><p><img src="/images/resources/20200723/image-20200724225834544.png" alt="image-20200724225834544"></p><p><img src="/images/resources/20200723/image-20200724225904151.png" alt="image-20200724225904151"></p><p><img src="/images/resources/20200723/image-20200724230400324.png" alt="image-20200724230400324"></p><h3 id="宽变长"><a href="#宽变长" class="headerlink" title="宽变长"></a>宽变长</h3><p><strong>pivot方法的反操作是pandas.melt,需要注意的是，需要配置key哪些列是分组指标</strong><br><img src="/images/resources/20200723/image-20200724232356680.png" alt="image-20200724232356680"></p><p><img src="/images/resources/20200723/image-20200724232422708.png" alt="image-20200724232422708"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这章可以在以后的数据分析案例中,慢慢的体会。但最终的目的就是为了组装自己想要的数据&lt;/p&gt;
&lt;h1 id=&quot;数据规整之连接-联合与重塑&quot;&gt;&lt;a href=&quot;#数据规整之连接-联合与重塑&quot; class=&quot;headerlink&quot; title=&quot;数据规整之连接,联合与重塑&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据重塑" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A1%91/"/>
    
      <category term="层级拆分" scheme="https://djwangweijie.github.io/tags/%E5%B1%82%E7%BA%A7%E6%8B%86%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之清洗与准备2</title>
    <link href="https://djwangweijie.github.io/2020/07/23/2020-07-22-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%B8%85%E6%B4%97%E4%B8%8E%E5%87%86%E5%A4%872/"/>
    <id>https://djwangweijie.github.io/2020/07/23/2020-07-22-数据分析之清洗与准备2/</id>
    <published>2020-07-22T16:07:00.000Z</published>
    <updated>2020-07-22T16:11:37.808Z</updated>
    
    <content type="html"><![CDATA[<p>继续刚.</p><h1 id="数据清洗与准备2"><a href="#数据清洗与准备2" class="headerlink" title="数据清洗与准备2"></a>数据清洗与准备2</h1><p><strong>python在字符串和文本操作上具有很大的便利性,字符串对象是大部分的文本操作简单化,对于复杂的模式匹配和文本操作。正则表达式是可能需要的。pandas允许将字符串和正则表达式应用到整个数据数组上。同时也能处理数据缺失带来的问题</strong></p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="字符串对象方法"><a href="#字符串对象方法" class="headerlink" title="字符串对象方法"></a>字符串对象方法</h3><p><img src="/images/resources/20200722/image-20200722224044234.png" alt="image-20200722224044234"></p><h3 id="查找和定位字符串"><a href="#查找和定位字符串" class="headerlink" title="查找和定位字符串"></a>查找和定位字符串</h3><p><img src="/images/resources/20200722/image-20200722224326066.png" alt="image-20200722224326066"></p><p><em>index和find方法的区别在于,使用index方法没有找到时会抛出一个异常</em></p><h3 id="计数和替换字符串"><a href="#计数和替换字符串" class="headerlink" title="计数和替换字符串"></a>计数和替换字符串</h3><p><img src="/images/resources/20200722/image-20200722224612390.png" alt="image-20200722224612390"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong>python中提供了re模块进行正则表达式的使用，一般单个表达式称作为regex</strong><br><em>re模块主要有三个主题:匹配，替代，拆分</em><br><img src="/images/resources/20200722/image-20200722225807394.png" alt="image-20200722225807394"></p><h3 id="match和search和findall"><a href="#match和search和findall" class="headerlink" title="match和search和findall"></a>match和search和findall</h3><p><img src="/images/resources/20200722/image-20200722231848760.png" alt="image-20200722231848760"></p><h3 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h3><p>​    假设将每个地址分为三个部分.可以使用括号模式包起来<br><img src="/images/resources/20200722/image-20200722233042459.png" alt="image-20200722233042459"></p><h2 id="pandas中向量化字符串函数"><a href="#pandas中向量化字符串函数" class="headerlink" title="pandas中向量化字符串函数"></a>pandas中向量化字符串函数</h2><p><img src="/images/resources/20200722/image-20200722234500724.png" alt="image-20200722234500724"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续刚.&lt;/p&gt;
&lt;h1 id=&quot;数据清洗与准备2&quot;&gt;&lt;a href=&quot;#数据清洗与准备2&quot; class=&quot;headerlink&quot; title=&quot;数据清洗与准备2&quot;&gt;&lt;/a&gt;数据清洗与准备2&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;python在字符串和文本操作上具有很大的便利性,字
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据清洗" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之清洗与准备1</title>
    <link href="https://djwangweijie.github.io/2020/07/02/2020-07-02-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%B8%85%E6%B4%97%E4%B8%8E%E5%87%86%E5%A4%871/"/>
    <id>https://djwangweijie.github.io/2020/07/02/2020-07-02-数据分析之清洗与准备1/</id>
    <published>2020-07-02T03:32:38.000Z</published>
    <updated>2020-07-02T03:24:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据清洗也是我们的首要准备的，不完美的数据永远都是不完美的</p><h1 id="数据清洗与准备1"><a href="#数据清洗与准备1" class="headerlink" title="数据清洗与准备1"></a>数据清洗与准备1</h1><ol><li>数据分析和建模的过程中,大量的时间都花在了数据准备上</li><li>pandas和内置的python工具提供了一个高级,灵活和快速的工具集</li><li>着重关注于如何处理缺失值,重复值,字符串操作和其他分析数据转换工具</li></ol><h2 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h2><p>​    <strong>pandas对象的所有描述性统计信息默认情况下是排除缺失值的</strong></p><p>​    <em>pandas对象中表现缺失值的方式对大部分用户来说还是OK的。对于数值型数据,pandas使用浮点值NaN。一般称作为容易检测到的标识值</em></p><p><img src="/images/resources/20200702/image-20200628095655706.png" alt="image-20200628095655706"></p><ul><li><input disabled type="checkbox"> 注意:在统计应用学中,NA数据可以是不存在的数据或者是存在但不可观察的数据</li><li><input disabled type="checkbox"> python内建的None值在对象数组中也被当做NA处理</li></ul><h3 id="过滤缺失值"><a href="#过滤缺失值" class="headerlink" title="过滤缺失值"></a>过滤缺失值</h3><p>​    <code>使用pandas.isnull和布尔值索引手动的过滤缺失值,但dropna在过滤缺失值非常有用.在Series上使用dropna,它会返回Series中所有的费控数据与其索引值</code></p><h4 id="处理Series"><a href="#处理Series" class="headerlink" title="处理Series"></a>处理Series</h4><p><img src="/images/resources/20200702/image-20200628100907257.png" alt="image-20200628100907257"></p><h4 id="处理DateFrame"><a href="#处理DateFrame" class="headerlink" title="处理DateFrame"></a>处理DateFrame</h4><p>​    <em>处理DataFrame对象时,有可能需要删除全部为NA或者包含有NA的行或者列。dropna默认情况下会删除包含缺失值的行</em></p><p><img src="/images/resources/20200702/image-20200628101856142.png" alt="image-20200628101856142"></p><p><img src="/images/resources/20200702/image-20200628102416009.png" alt="image-20200628102416009"></p><p><em>过滤DataFrame的行的相关方法涉及时间序列数据。如果要保留一定数量的观察值的行。可以用thresh参数表示</em></p><p><img src="/images/resources/20200702/image-20200628103220183.png" alt="image-20200628103220183"></p><h3 id="补全缺失值"><a href="#补全缺失值" class="headerlink" title="补全缺失值"></a>补全缺失值</h3><p><strong>有时候我们可能需要多种方式补全数据,而不是单纯的过滤缺失值。我们可以使用fillna的方法补全缺失值,调用该方法时可以使用一个常数替代缺失值</strong></p><blockquote><p>fillna的基本操作</p></blockquote><p><img src="/images/resources/20200702/image-20200628104124802.png" alt="image-20200628104124802"></p><blockquote><p>额外操作</p></blockquote><p><img src="/images/resources/20200702/image-20200628104328888.png" alt="image-20200628104328888"></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200628104805642.png" alt="image-20200628104805642"></p><blockquote><p>Series填充(mean()平均值  median()中位数  max()最大值  min()最小值  sum()求和  std()标准差)</p></blockquote><p><img src="/images/resources/20200702/image-20200628105121830.png" alt="image-20200628105121830"></p><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="删除重复值"><a href="#删除重复值" class="headerlink" title="删除重复值"></a>删除重复值</h3><p>​    由于各种原因,DataFrame中会出现重复的行<br><img src="/images/resources/20200702/image-20200628110828906.png" alt="image-20200628110828906"></p><p>​    默认方法都是按照对列进行操作。可以指定数据的任何子集检测是否有重复</p><p><img src="/images/resources/20200702/image-20200628111504426.png" alt="image-20200628111504426"></p><h3 id="使用函数或映射进行数据转换"><a href="#使用函数或映射进行数据转换" class="headerlink" title="使用函数或映射进行数据转换"></a>使用函数或映射进行数据转换</h3><p><img src="/images/resources/20200702/image-20200628151456173.png" alt="image-20200628151456173"></p><p>​    <strong>Series的map方法接受一个函数或者一个包含映射关系的字典型对象</strong><br><img src="/images/resources/20200702/image-20200628152430269.png" alt="image-20200628152430269"></p><p><img src="/images/resources/20200702/image-20200628152452113.png" alt="image-20200628152452113"></p><h4 id="函数级操作"><a href="#函数级操作" class="headerlink" title="函数级操作"></a>函数级操作</h4><p><img src="/images/resources/20200702/image-20200628152746941.png" alt="image-20200628152746941"></p><h3 id="替代值"><a href="#替代值" class="headerlink" title="替代值"></a>替代值</h3><p><em>使用fillna填充缺失值,map可以用来修改一个对象中的子集的值。但是replace提供了更为简单的灵活的实现。对于Series使用map，对于DataFrame来说使用apply或者applymap</em></p><p><img src="/images/resources/20200702/image-20200628153834551.png" alt="image-20200628153834551"></p><h3 id="重命名轴索引"><a href="#重命名轴索引" class="headerlink" title="重命名轴索引"></a>重命名轴索引</h3><p><img src="/images/resources/20200702/image-20200628154824525.png" alt="image-20200628154824525"></p><blockquote><p>创建数据集转换后的版本,使用rename</p></blockquote><p><img src="/images/resources/20200702/image-20200628155604660.png" alt="image-20200628155604660"></p><h3 id="离散化和分箱"><a href="#离散化和分箱" class="headerlink" title="离散化和分箱"></a>离散化和分箱</h3><p>​    <strong>连续值经常需要离散化或者分离成‘箱子’进行分析。</strong></p><p>​    <em>现架设某项研究中一组人群的数据,你想将他们分组，放入离散的年龄框中</em></p><p><img src="/images/resources/20200702/image-20200628160547911.png" alt="image-20200628160547911"></p><p><strong>注意：pandas返回的对象是一个特殊的categorical对象，输出了描述由pandas.cut计算出的箱。里面指定了不同类别的名称以及codes属性中的ages</strong></p><p><img src="/images/resources/20200702/image-20200628161337302.png" alt="image-20200628161337302"></p><h4 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h4><p>​    pandas一般根据数据中的最大值和最小值计算出等长的箱</p><p><img src="/images/resources/20200702/image-20200702085505464.png" alt="image-20200702085505464"></p><p>​    使用qcut可以定义等长的箱以及自定义分位数</p><p><img src="/images/resources/20200702/image-20200702090658882.png" alt="image-20200702090658882"></p><h3 id="检测和过滤异常值"><a href="#检测和过滤异常值" class="headerlink" title="检测和过滤异常值"></a>检测和过滤异常值</h3><p>​    过滤和转换异常值一般是应用数组。比如</p><p><img src="/images/resources/20200702/image-20200702093806332.png" alt="image-20200702093806332"></p><p><img src="/images/resources/20200702/image-20200702093902391.png" alt="image-20200702093902391"></p><h2 id="置换和随机抽样"><a href="#置换和随机抽样" class="headerlink" title="置换和随机抽样"></a>置换和随机抽样</h2><p>​    使用np.random中的permutation可以对DataFrame中的Series或行进行置换（随机排序）,调用该操作可以根据需要的轴长度产生一个表示新顺序的整数数组</p><p>​    <img src="/images/resources/20200702/image-20200702095420315.png" alt="image-20200702095420315"></p><p><img src="/images/resources/20200702/image-20200702095441480.png" alt="image-20200702095441480"></p><h2 id="计算指标-虚拟变量"><a href="#计算指标-虚拟变量" class="headerlink" title="计算指标/虚拟变量"></a>计算指标/虚拟变量</h2><p>​    <strong>将分类变量转换为虚拟或者指标矩阵是另一种转换操作,如果DataFrame中的一列有K个不同的值,则可以衍生一个K列的值为1和0的矩阵或DataFrame，在pandas中有一个get_dummies函数可以实现</strong><br><img src="/images/resources/20200702/image-20200702101538216.png" alt="image-20200702101538216"></p><p><img src="/images/resources/20200702/image-20200702101706084.png" alt="image-20200702101706084"></p><h3 id="处理一行属于多类别的数据"><a href="#处理一行属于多类别的数据" class="headerlink" title="处理一行属于多类别的数据"></a>处理一行属于多类别的数据</h3><p><img src="/images/resources/20200702/image-20200702105633116.png" alt="image-20200702105633116"></p><p><img src="/images/resources/20200702/image-20200702105654240.png" alt="image-20200702105654240"></p><p><img src="/images/resources/20200702/image-20200702105719768.png" alt="image-20200702105719768"></p><p><img src="/images/resources/20200702/image-20200702105740651.png" alt="image-20200702105740651"></p><h3 id="与cut等离散化函数结合使用"><a href="#与cut等离散化函数结合使用" class="headerlink" title="与cut等离散化函数结合使用"></a>与cut等离散化函数结合使用</h3><p><img src="/images/resources/20200702/image-20200702110242568.png" alt="image-20200702110242568"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据清洗也是我们的首要准备的，不完美的数据永远都是不完美的&lt;/p&gt;
&lt;h1 id=&quot;数据清洗与准备1&quot;&gt;&lt;a href=&quot;#数据清洗与准备1&quot; class=&quot;headerlink&quot; title=&quot;数据清洗与准备1&quot;&gt;&lt;/a&gt;数据清洗与准备1&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;数据分
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="数据清洗" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Excel与WebApis交互</title>
    <link href="https://djwangweijie.github.io/2020/03/16/2020-03-16-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%AF%BB%E5%8F%96Excel%E4%B8%8EWebApis%E4%BA%A4%E4%BA%92/"/>
    <id>https://djwangweijie.github.io/2020/03/16/2020-03-16-数据分析之读取Excel与WebApis交互/</id>
    <published>2020-03-16T14:02:52.494Z</published>
    <updated>2020-03-16T14:19:29.048Z</updated>
    
    <content type="html"><![CDATA[<p>其实你会发现转来转去二维数组就在我们身边，json数组放对象，<br>table就是活生生的二维空间。真的是答案就在我们的身边。<br>继续前行，数据清洗和准备，我来了</p><h1 id="数据分析之读取Excel与WebApis交互"><a href="#数据分析之读取Excel与WebApis交互" class="headerlink" title="数据分析之读取Excel与WebApis交互"></a>数据分析之读取Excel与WebApis交互</h1><ol><li>读取Excel操作</li><li>WebApis交互</li></ol><h1 id="读取Excel操作"><a href="#读取Excel操作" class="headerlink" title="读取Excel操作"></a>读取Excel操作</h1><p><em>pandas的ExcelFile和readExcel支持读取和存储Excel</em></p><p><img src="/images/resources/97A2D506DDF9A0E90646C264192938BA.jpg" alt="IMAGE"></p><h2 id="数据写入Excel"><a href="#数据写入Excel" class="headerlink" title="数据写入Excel"></a>数据写入Excel</h2><p><img src="/images/resources/1F73A95B050B025C629BF77DAF21968B.jpg" alt="IMAGE"></p><h1 id="与webapi交互"><a href="#与webapi交互" class="headerlink" title="与webapi交互"></a>与webapi交互</h1><p><em>无论是国内还是国外,都可以找一些公共的api,并且尽量的根据逻辑转换为df或者series</em></p><p><strong>其实你会发现表格和json数据里面构建对象就是一个二维数组</strong></p><p><img src="/images/resources/84A3838F8D248D26CF90B353A25F031E.jpg" alt="IMAGE"></p><h1 id="数据库交互"><a href="#数据库交互" class="headerlink" title="数据库交互"></a>数据库交互</h1><p><em>有些数据来自与数据库,无论非关系还是关系数据库</em></p><p><img src="/images/resources/998D14BD15DEBC0E85FDB12FB987E96D.jpg" alt="IMAGE"></p><p><img src="/images/resources/9B24D703BB166BA5CA031E310757A21D.jpg" alt="IMAGE"></p><h2 id="转化为DataFrame的2种方式"><a href="#转化为DataFrame的2种方式" class="headerlink" title="转化为DataFrame的2种方式"></a>转化为DataFrame的2种方式</h2><p><img src="/images/resources/12D8976455DB3257FB7894E28C47E2F4.jpg" alt="IMAGE"></p><blockquote><p>安装源</p></blockquote><p><code>pip3  install sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p><img src="/images/resources/F8764BEC56E99389E8287C7B1E308F47.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实你会发现转来转去二维数组就在我们身边，json数组放对象，&lt;br&gt;table就是活生生的二维空间。真的是答案就在我们的身边。&lt;br&gt;继续前行，数据清洗和准备，我来了&lt;/p&gt;
&lt;h1 id=&quot;数据分析之读取Excel与WebApis交互&quot;&gt;&lt;a href=&quot;#数据分析之读
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据加载" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="数据处理" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Excel读取" scheme="https://djwangweijie.github.io/tags/Excel%E8%AF%BB%E5%8F%96/"/>
    
      <category term="mysql数据库读取" scheme="https://djwangweijie.github.io/tags/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之数据加载,存储与文件格式一</title>
    <link href="https://djwangweijie.github.io/2020/03/12/2020-03-12-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD,%E5%AD%98%E5%82%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%80/"/>
    <id>https://djwangweijie.github.io/2020/03/12/2020-03-12-数据分析之数据加载,存储与文件格式一/</id>
    <published>2020-03-12T09:51:23.602Z</published>
    <updated>2020-03-12T09:55:54.257Z</updated>
    
    <content type="html"><![CDATA[<p>越来越有意思了,坚持坚持</p><h1 id="数据加载-存储与文件格式"><a href="#数据加载-存储与文件格式" class="headerlink" title="数据加载,存储与文件格式"></a>数据加载,存储与文件格式</h1><ol><li>读写文本格式的数据</li></ol><h1 id="读写文本格式的数据"><a href="#读写文本格式的数据" class="headerlink" title="读写文本格式的数据"></a>读写文本格式的数据</h1><p><strong>利用pandas的数据输入和输出,输入和输出划分几个大类:读取文本文件,加载数据库中的数据,利用webapi操作网络资源</strong></p><p><em>pandas提供了一些用于将表格型数据读取为DataFrame对象的函数,其中readcsv和readtable是比较常用的</em></p><p><img src="/images/resources/23D189EEE4C6C444D185612801F3A4D3.jpg" alt="IMAGE"></p><h2 id="读取逗号分隔"><a href="#读取逗号分隔" class="headerlink" title="读取逗号分隔"></a>读取逗号分隔</h2><p><img src="/images/resources/357A130395CF4D4041DA632EBFDDFC63.jpg" alt="IMAGE"></p><h2 id="指定分隔符读取"><a href="#指定分隔符读取" class="headerlink" title="指定分隔符读取"></a>指定分隔符读取</h2><p><img src="/images/resources/E0E71DD5AF3431FC44948BB4DCE9CBC7.jpg" alt="IMAGE"></p><h2 id="针对无标题行的文件"><a href="#针对无标题行的文件" class="headerlink" title="针对无标题行的文件"></a>针对无标题行的文件</h2><p><img src="/images/resources/BBE50F2C8E1D1628662678FEBC588844.jpg" alt="IMAGE"></p><h2 id="多个列层次化索引"><a href="#多个列层次化索引" class="headerlink" title="多个列层次化索引"></a>多个列层次化索引</h2><p><img src="/images/resources/42A540AE135196981C90A3F4D16B5E12.jpg" alt="IMAGE"></p><h2 id="有些表格并未用特定的分隔符"><a href="#有些表格并未用特定的分隔符" class="headerlink" title="有些表格并未用特定的分隔符"></a>有些表格并未用特定的分隔符</h2><p><img src="/images/resources/D6D6005EE8006E6984971737006188B6.jpg" alt="IMAGE"></p><h2 id="跳过注释"><a href="#跳过注释" class="headerlink" title="跳过注释"></a>跳过注释</h2><p><img src="/images/resources/B448267808D01A37EBB5108B8E168F17.jpg" alt="IMAGE"></p><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><p><em>一般来说缺失值要么为空,要么没有.pandas会用一组经常出现的标记值进行识别.比如NA或者Null</em></p><p><img src="/images/resources/796A4385C946C618C0DBE10C16C85EBA.jpg" alt="IMAGE"></p><blockquote><p>通过na_value替换值</p></blockquote><p><img src="/images/resources/0B70D91BF50B5ED9C74C29061231C9F8.jpg" alt="IMAGE"></p><h1 id="逐块读取文本文件"><a href="#逐块读取文本文件" class="headerlink" title="逐块读取文本文件"></a>逐块读取文本文件</h1><p><em>在处理很大的文件时,找出大文件中参数以便后续处理.</em></p><p><img src="/images/resources/60D263B08F79D99C7C208D6EB3FB84F3.jpg" alt="IMAGE"></p><blockquote><p>通过nrows指定读取几行</p></blockquote><p><img src="/images/resources/41FED0784D2AD073C8AC69D0C6CC3687.jpg" alt="IMAGE"></p><blockquote><p>逐块读取</p></blockquote><p><img src="/images/resources/5AEECA7965A4633CDCAEE5AFD4D30DB5.jpg" alt="IMAGE"></p><h1 id="将数据学出到文本格式"><a href="#将数据学出到文本格式" class="headerlink" title="将数据学出到文本格式"></a>将数据学出到文本格式</h1><p><img src="/images/resources/F20041ABEE7C7CE345D535D84C844D0F.jpg" alt="IMAGE"></p><h2 id="弥补缺失值"><a href="#弥补缺失值" class="headerlink" title="弥补缺失值"></a>弥补缺失值</h2><p><img src="/images/resources/F92B1C8FE8C79CBDAFD81CBEF311BA86.jpg" alt="IMAGE"></p><h2 id="Series中使用"><a href="#Series中使用" class="headerlink" title="Series中使用"></a>Series中使用</h2><p><img src="/images/resources/1E06F16E7995F44712988C2BA06273B8.jpg" alt="IMAGE"></p><h1 id="处理分隔符格式"><a href="#处理分隔符格式" class="headerlink" title="处理分隔符格式"></a>处理分隔符格式</h1><p><img src="/images/resources/5627B5D9C1C3BA814BF586DD2DAF138F.jpg" alt="IMAGE"></p><h2 id="转化为符合要求的数据格式"><a href="#转化为符合要求的数据格式" class="headerlink" title="转化为符合要求的数据格式"></a>转化为符合要求的数据格式</h2><p><img src="/images/resources/2290E16C74C0D981CBB2D0B64BA75FAE.jpg" alt="IMAGE"></p><h1 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj = &quot;&quot;&quot;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Wes&quot;,</span><br><span class="line"> &quot;places_lived&quot;: [&quot;United States&quot;, &quot;Spain&quot;, &quot;Germany&quot;],</span><br><span class="line"> &quot;pet&quot;: null,</span><br><span class="line"> &quot;siblings&quot;: [&#123;&quot;name&quot;: &quot;Scott&quot;, &quot;age&quot;: 30, &quot;pets&quot;: [&quot;Zeus&quot;, &quot;Zuko&quot;]&#125;,</span><br><span class="line">              &#123;&quot;name&quot;: &quot;Katie&quot;, &quot;age&quot;: 38,</span><br><span class="line">               &quot;pets&quot;: [&quot;Sixes&quot;, &quot;Stache&quot;, &quot;Cisco&quot;]&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>json之间的转换</p></blockquote><p><img src="/images/resources/B4642409C5BDA4E662A1A0BB3A3211C3.jpg" alt="IMAGE"></p><p><em>向一个DataFrame传入一个字典列表</em></p><p><img src="/images/resources/C11761008907A190F414B36232E217F8.jpg" alt="IMAGE"></p><h2 id="特殊json"><a href="#特殊json" class="headerlink" title="特殊json"></a>特殊json</h2><p><em>假定json数组中每个对象是表格中的一行</em></p><p><img src="/images/resources/6EB53048023D8991EB7C054A8CCE7C4B.jpg" alt="IMAGE"></p><h1 id="web信息收集"><a href="#web信息收集" class="headerlink" title="web信息收集"></a>web信息收集</h1><p><em>安装所需要的库</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml -i http://pypi.douban.com/simple/</span><br><span class="line">pip3 install bs4 html5lib -i  https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><img src="/images/resources/21586CCA9869613663D9B3138DCDB1AE.jpg" alt="IMAGE"></p><blockquote><p>小例子看出现频率最高的</p></blockquote><p><img src="/images/resources/98A2A27DAEB73604AAB75DF9F5253846.jpg" alt="IMAGE"></p><h1 id="解析html"><a href="#解析html" class="headerlink" title="解析html"></a>解析html</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests -i  https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><blockquote><p>有待改进</p></blockquote><p><img src="/images/resources/B1FD16DD45E34A3F0D76FB729F453463.jpg" alt="IMAGE"></p><p><img src="/images/resources/B7E8395E04CD9E34F48A3FB6DA0F0437.jpg" alt="IMAGE"></p><blockquote><p>再次优化</p></blockquote><p><img src="/images/resources/5ED7ABACCA992D196669BBE9508A48DE.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;越来越有意思了,坚持坚持&lt;/p&gt;
&lt;h1 id=&quot;数据加载-存储与文件格式&quot;&gt;&lt;a href=&quot;#数据加载-存储与文件格式&quot; class=&quot;headerlink&quot; title=&quot;数据加载,存储与文件格式&quot;&gt;&lt;/a&gt;数据加载,存储与文件格式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;读写文本
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据加载" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="爬取数据" scheme="https://djwangweijie.github.io/tags/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    
      <category term="推导式转换" scheme="https://djwangweijie.github.io/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础三</title>
    <link href="https://djwangweijie.github.io/2020/03/11/2020-03-11-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://djwangweijie.github.io/2020/03/11/2020-03-11-数据分析之Pandas基础三/</id>
    <published>2020-03-11T10:29:02.482Z</published>
    <updated>2020-03-11T10:32:26.509Z</updated>
    
    <content type="html"><![CDATA[<p>协方差和相关系数非常的有意思,可以让你衍生出现在就想关心数据应该怎么组合</p><h1 id="pandas基础三"><a href="#pandas基础三" class="headerlink" title="pandas基础三"></a>pandas基础三</h1><ol><li>汇总和计算描述统计</li></ol><h1 id="汇总和计算描述统计"><a href="#汇总和计算描述统计" class="headerlink" title="汇总和计算描述统计"></a>汇总和计算描述统计</h1><p><em>pandas对象拥有一组常用的数学和统计方法,大部分是属于约简和汇总统计。用于从series提取单个值或者从DataFrame的行或者列中提取一个series,都是基于没有缺失数据假设构建的</em></p><h2 id="返回一个列的所有的和"><a href="#返回一个列的所有的和" class="headerlink" title="返回一个列的所有的和"></a>返回一个列的所有的和</h2><p><img src="/images/resources/397D5DE6F47AAA4469F869F9E2F2F680.jpg" alt="IMAGE"></p><h2 id="按照行进行求和运算"><a href="#按照行进行求和运算" class="headerlink" title="按照行进行求和运算"></a>按照行进行求和运算</h2><p><img src="/images/resources/502E320217EEDFE8D99CA0350862F280.jpg" alt="IMAGE"></p><h2 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h2><p><img src="/images/resources/72B6F078302860EDCAAF9DA90AC09A88.jpg" alt="IMAGE"></p><h1 id="间接统计和累计统计-以及多次汇总"><a href="#间接统计和累计统计-以及多次汇总" class="headerlink" title="间接统计和累计统计,以及多次汇总"></a>间接统计和累计统计,以及多次汇总</h1><p><img src="/images/resources/BD2EED97C03311D91A77FE78ADC85E4E.jpg" alt="IMAGE"></p><p><img src="/images/resources/64D422CBA1611CBDB6C16A3DD2E94B63.jpg" alt="IMAGE"></p><p><em>例如，两组数的集合{0,5,9,14}和{5,6,8,9}其平均值都是7，但第二个集合具有较小的标准差。标准差可以当作不确定性的一种测量。例如在物理科学中，做重复性测量时，测量数值集合的标准差代表这些测量的精确度。当要决定测量值是否符合预测值，测量值的标准差占有决定性重要角色：如果测量平均值与预测值相差太远（同时与标准差数值做比较），则认为测量值与预测值互相矛盾。这很容易理解，因为如果测量值都落在一定数值范围之外，可以合理推论预测值是否正确。标准差应用于投资上，可作为量度回报稳定性的指标。标准差数值越大，代表回报远离过去平均数值，回报较不稳定故风险越高。相反，标准差数值越小，代表回报较为稳定，风险亦较小</em></p><p><strong>计算均方差，要看样本量是等概率，还有概率的。如果没有概率，直接计算离差的平方=（样本金额-平均值）的平方，然后所以样本量的离差平方求和，再除以（样本个数-1），然后开根号，就是标准差。如果有概率的话，只需要在计算合计数时考虑加权平均，不用再除以个数-1，直接开根号。</strong></p><h2 id="对于非数值的统计"><a href="#对于非数值的统计" class="headerlink" title="对于非数值的统计"></a>对于非数值的统计</h2><p><img src="/images/resources/D53FACBC72803DCF6187EC2B7CED2994.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF9305827B4E7496535E25C6486F970C.jpg" alt="IMAGE"></p><h1 id="相关系数与协方差"><a href="#相关系数与协方差" class="headerlink" title="相关系数与协方差"></a>相关系数与协方差</h1><p><strong>1、协方差是一个用于测量投资组合中某一具体投资项目相对于另一投资项目风险的统计指标,通俗点就是投资组合中两个项目间收益率的相关程度,正数说明两个项目一个收益率上升,另一个也上升,收益率呈同方向变化.如果是负数,则一个上升另一个下降,表明收益率是反方向变化.协方差的绝对值越大,表示这两种资产收益率关系越密切；绝对值越小表明这两种资产收益率的关系越疏远.2、由于协方差比较难理解,所以将协方差除以两个投资方案投资收益率的标准差之积,得出一个与协方差具有相同性质却没有量化的数.这个数就是相关系数.计算公式为相关系数=协方差/两个项目标准差之积.</strong></p><p><img src="/images/resources/463511E3272F850757BE5223D5BFD9C1.jpg" alt="IMAGE"></p><p>关于相关系数可以参考如下2篇文章</p><p><a href="https://blog.csdn.net/qq_38788128/article/details/80662712" target="_blank" rel="noopener">协方差和相关系数</a></p><p><a href="https://www.cnblogs.com/ggzhangxiaochao/p/9100575.html" target="_blank" rel="noopener">计算相关系数</a></p><p><img src="/images/resources/08F110C7415F1511DBA885FC41F73175.jpg" alt="IMAGE"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实协方差和相关系数除了公式还要琢磨之外,更多的应该理解他们的作用。其实也是看待一件事物和另一件事物的紧密性,也可以叫做关联度.可以用到彩票,交易,产业发展组合</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;协方差和相关系数非常的有意思,可以让你衍生出现在就想关心数据应该怎么组合&lt;/p&gt;
&lt;h1 id=&quot;pandas基础三&quot;&gt;&lt;a href=&quot;#pandas基础三&quot; class=&quot;headerlink&quot; title=&quot;pandas基础三&quot;&gt;&lt;/a&gt;pandas基础三&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://djwangweijie.github.io/tags/Pandas/"/>
    
      <category term="汇总统计" scheme="https://djwangweijie.github.io/tags/%E6%B1%87%E6%80%BB%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="协方差和相关系数" scheme="https://djwangweijie.github.io/tags/%E5%8D%8F%E6%96%B9%E5%B7%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础二</title>
    <link href="https://djwangweijie.github.io/2020/03/06/2020-03-06-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://djwangweijie.github.io/2020/03/06/2020-03-06-数据分析之Pandas基础二/</id>
    <published>2020-03-06T10:11:33.343Z</published>
    <updated>2020-03-06T10:16:11.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas基础二"><a href="#pandas基础二" class="headerlink" title="pandas基础二"></a>pandas基础二</h1><ol><li>基本功能</li></ol><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><p><strong>介绍Series和DataFrame的数据的基本操作</strong></p><h2 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h2><p><strong>pandas对象的一个重要方法是reindex,其作用是创建一个新对象,它的数据符合新的索引</strong></p><p><em>索引会根据reindex进行重排.如果某个索引值不存在,引入缺失值</em></p><p><img src="/images/resources/9BDC0097F09DEA77D4E6CF2D0FA1B710.jpg" alt="IMAGE"></p><p><em>对于时间序列的有序数据,重新索引需要一些插值处理.method选项可以操作,ffill是使用前面的值填充，bfill是使用后面的值填充。</em></p><p><img src="/images/resources/C9E0944093E2CBE2E491AFFE621AE20E.jpg" alt="IMAGE"></p><p><em>如果使用dataFrame,reindex可以修改行索引和列.只传递一个序列时,会重新索引结果的行</em></p><p><img src="/images/resources/93FFF2D082F2D3890B63D0F7010B3D24.jpg" alt="IMAGE"></p><p><em>同样的可以用column重新索引</em></p><p><img src="/images/resources/0F000BE435E2EA1306B7D32A6C62808D.jpg" alt="IMAGE"></p><h2 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h2><p><em>丢弃某条轴上面的一个或多个项很简单,只要有一个索引数组和列表即可</em></p><blockquote><p>针对series</p></blockquote><p><img src="/images/resources/7353F34AF4358F5AC59CB1FB9F369DD9.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame</p></blockquote><p><img src="/images/resources/7A8C2C4FD804A1C7410452D34E7507A6.jpg" alt="IMAGE"></p><h2 id="索引-选取和过滤"><a href="#索引-选取和过滤" class="headerlink" title="索引,选取和过滤"></a>索引,选取和过滤</h2><p><em>Series索引的工作方式类似numpy的索引,不过Series索引不只是整数</em></p><p><img src="/images/resources/7351085614E730AFB16DE45308814F25.jpg" alt="IMAGE"></p><p><em>切片运算有一些不同,其尾部是包含的</em></p><p><img src="/images/resources/7A0331DEDD87362F3AEC3201C3EE9C01.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame进行索引就是获取一个或者多个列</p></blockquote><p><img src="/images/resources/7319D3EF1A4A8DE696F09B53389A590F.jpg" alt="IMAGE"></p><blockquote><p>通过布尔类型</p></blockquote><p><img src="/images/resources/22F4A8FE59FBCDEDF8B32AF6DF724996.jpg" alt="IMAGE"></p><h2 id="用loc和iloc进行选取"><a href="#用loc和iloc进行选取" class="headerlink" title="用loc和iloc进行选取"></a>用loc和iloc进行选取</h2><p><em>对于dataFrame的行的标签索引可以使用loc和iloc,从DataFrame选择行和列的子集</em></p><p><em>通过2个方法选择一行和多列</em></p><p><img src="/images/resources/894761833E06C016E74B82062734631E.jpg" alt="IMAGE"></p><blockquote><p>同样适用于一个标签或者多个标签的切片</p></blockquote><p><img src="/images/resources/6871D92ED768889804D363F2FEC2BF6B.jpg" alt="IMAGE"></p><h3 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h3><p><img src="/images/resources/B5ECFDA35DD96A84887265201CB4BB2B.jpg" alt="IMAGE"></p><h2 id="算术预算和数据对齐"><a href="#算术预算和数据对齐" class="headerlink" title="算术预算和数据对齐"></a>算术预算和数据对齐</h2><p><strong>pandas重要的功能可以对不同索引的对象进行算术运算.对象相加时,存在不同的索引对.结果的索引就是该索引对的并集.</strong></p><p><img src="/images/resources/768E050A7B25854EDF9B8845A27267C4.jpg" alt="IMAGE"></p><p><img src="/images/resources/2E2FD992E1E33DFD0E3161410BE581E4.jpg" alt="IMAGE"></p><p><em>注意:Dataframe相加,没有共用的列或者行标签.结果都会是空</em></p><h3 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h3><p><img src="/images/resources/CC2D1E9C2547EE128E311C6AF9367F17.jpg" alt="IMAGE"></p><p>现在出现了na值,我填充一个特殊值怎么做</p><p><img src="/images/resources/7D41E072E3FD6C92DC6331849927178C.jpg" alt="IMAGE"></p><h4 id="可用的方法"><a href="#可用的方法" class="headerlink" title="可用的方法"></a>可用的方法</h4><p><img src="/images/resources/48895A322DD3FB5F1045308877149C5A.jpg" alt="IMAGE"></p><h3 id="同理"><a href="#同理" class="headerlink" title="同理"></a>同理</h3><p><img src="/images/resources/C95328773A6D7823317007F7E36EDCE5.jpg" alt="IMAGE"></p><h2 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h2><p><em>先看一个二维数组和一维数组相加</em></p><p><img src="/images/resources/CF1037DF0C3A3A52A59EC87974E624DC.jpg" alt="IMAGE"></p><p><em>同理,2者相加也一样</em></p><p><img src="/images/resources/826D251964FBC4E8373EEBE0CF520901.jpg" alt="IMAGE"></p><blockquote><p> 如果某个索引值找不到,则形成并集</p></blockquote><p><img src="/images/resources/52B8A7FE27D199B9AE096E2FD8C84715.jpg" alt="IMAGE"></p><p><img src="/images/resources/5E495F1869604983BEDD4DF846A5A8D8.jpg" alt="IMAGE"></p><h2 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h2><p><em>Numpy的ufuncs也可以用于操作pandas对象</em></p><p><img src="/images/resources/DAD1B6459E2C11DB815B4F94E966E6E4.jpg" alt="IMAGE"></p><p><img src="/images/resources/C952B31738FE3A6228A48D0935B1B5AF.jpg" alt="IMAGE"></p><p><a href="https://www.cnblogs.com/rrttp/p/8028421.html" target="_blank" rel="noopener">附上重新对二维数组的理解</a></p><h2 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h2><p><em>根据条件对数据集进行排序也是一种重要的内置计算,对行和列索引进行排序可以使用sortindex,返回一个已排序的新对象</em></p><p><img src="/images/resources/A1CD6A6ECCD28CE0D359490DB5036DE6.jpg" alt="IMAGE"></p><p><img src="/images/resources/B3CD803CC76040FDFF17377BA92FF5C5.jpg" alt="IMAGE"></p><h3 id="升序或者降序"><a href="#升序或者降序" class="headerlink" title="升序或者降序"></a>升序或者降序</h3><p><img src="/images/resources/688E7830127A870F6F3CB52C85ACB0A5.jpg" alt="IMAGE"></p><h3 id="按值对series排列使用sortvalues"><a href="#按值对series排列使用sortvalues" class="headerlink" title="按值对series排列使用sortvalues"></a>按值对series排列使用sortvalues</h3><p><img src="/images/resources/3D1EBC84FE57EAE5C7BE86682DC2A961.jpg" alt="IMAGE"></p><h3 id="排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可"><a href="#排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可" class="headerlink" title="排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可"></a>排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可</h3><p><img src="/images/resources/10B0A26170E3C5E1756C1202A4E84A6F.jpg" alt="IMAGE"></p><h2 id="rank方法"><a href="#rank方法" class="headerlink" title="rank方法"></a>rank方法</h2><p><em>rank是通过为各组分配一个平均排名的方式破坏平级关系</em></p><p><img src="/images/resources/985131ED1CD51544359627ACB66474B1.jpg" alt="IMAGE"></p><blockquote><p>针对dataframe</p></blockquote><p><img src="/images/resources/E2ADE065F80F8E164F7F3A7B38F0B21D.jpg" alt="IMAGE"></p><p><img src="/images/resources/47F006D8E2560638A7017A96F8E4EBFB.jpg" alt="IMAGE"></p><p><img src="/images/resources/A62806819F26AADFC24D702AA9143EA9.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pandas基础二&quot;&gt;&lt;a href=&quot;#pandas基础二&quot; class=&quot;headerlink&quot; title=&quot;pandas基础二&quot;&gt;&lt;/a&gt;pandas基础二&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基本功能&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;基本功能&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://djwangweijie.github.io/tags/Pandas/"/>
    
      <category term="Series和DateFrame基本功能" scheme="https://djwangweijie.github.io/tags/Series%E5%92%8CDateFrame%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/"/>
    
      <category term="排序筛选和rank" scheme="https://djwangweijie.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AD%9B%E9%80%89%E5%92%8Crank/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Pandas基础一</title>
    <link href="https://djwangweijie.github.io/2020/03/04/2020-03-04-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://djwangweijie.github.io/2020/03/04/2020-03-04-数据分析之Pandas基础一/</id>
    <published>2020-03-04T08:07:47.340Z</published>
    <updated>2020-03-04T08:11:39.475Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析之路漫漫,贵在坚持.梅花香自苦寒来</p><h1 id="pandas基础一"><a href="#pandas基础一" class="headerlink" title="pandas基础一"></a>pandas基础一</h1><ol><li>pandas的数据结构说明</li><li>pandas的数据结构介绍</li></ol><h1 id="pandas的数据结构说明"><a href="#pandas的数据结构说明" class="headerlink" title="pandas的数据结构说明"></a>pandas的数据结构说明</h1><p><strong>pandas含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具</strong></p><p><em>pandas是基于Numpy数组构建的,特别是基于数组的函数和不适用for循环的数据处理</em></p><blockquote><p>特点</p></blockquote><ol><li>pandas是专门为处理表格和混杂数据设计的</li><li>而Numpy更适合处理统一的数值数组数据</li><li>用的最多的是使用Series 和 DataFrame</li></ol><p><em>注意:别忘记安装pandas库</em></p><p><img src="/images/resources/88CD09B313660A19B2FF379849FA20B2.jpg" alt="IMAGE"></p><h1 id="pandas数据结构介绍"><a href="#pandas数据结构介绍" class="headerlink" title="pandas数据结构介绍"></a>pandas数据结构介绍</h1><p><em>pandas主要有2个非常重要的数据结构,分别是Series和DataFrame,他们提供了一种可靠的易于使用的基础</em></p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><p><strong>Series类似于一维数组的对象,由一组数据以及一组与之相关的数据标签组成</strong></p><p><img src="/images/resources/A4142743805F1077B093A14B458BB029.jpg" alt="IMAGE"></p><h2 id="自定义索引"><a href="#自定义索引" class="headerlink" title="自定义索引"></a>自定义索引</h2><p><img src="/images/resources/6F6405959DB48E08CC1642CCC752CD57.jpg" alt="IMAGE"></p><h2 id="一些运算"><a href="#一些运算" class="headerlink" title="一些运算"></a>一些运算</h2><p><img src="/images/resources/7BE46C9893AB0FD3908A941678D102C2.jpg" alt="IMAGE"></p><h2 id="类比定长的有序字典"><a href="#类比定长的有序字典" class="headerlink" title="类比定长的有序字典"></a>类比定长的有序字典</h2><p><img src="/images/resources/3547579C9D9BA67EA5CF325065259CB7.jpg" alt="IMAGE"></p><h2 id="通过字典创建Series"><a href="#通过字典创建Series" class="headerlink" title="通过字典创建Series"></a>通过字典创建Series</h2><p><img src="/images/resources/7F502060F619168FD4C5F1427CEF9640.jpg" alt="IMAGE"></p><h2 id="检测缺失值"><a href="#检测缺失值" class="headerlink" title="检测缺失值"></a>检测缺失值</h2><p><img src="/images/resources/F697479E51D87F2756F7270FA876CA7B.jpg" alt="IMAGE"></p><h2 id="重要功能"><a href="#重要功能" class="headerlink" title="重要功能"></a>重要功能</h2><p><em>Series最重要的一个功能是会根据运算的索引标签自动对齐数据</em></p><p><img src="/images/resources/DB8A9349293AD3B3B65A44B7B558C9DE.jpg" alt="IMAGE"></p><p><em>Series对象本身和索引都有一个name属性,这个属性和pandas的其它关键功能非常密切</em></p><p><img src="/images/resources/A91A7465D6DD9BE1FA05F1CBA8C0070B.jpg" alt="IMAGE"></p><p><img src="/images/resources/FD5C2D5BBF43BB0341A628CBE34D8434.jpg" alt="IMAGE"></p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p><strong>DataFrame是一个表格型的数据结构,含有一组有序的列,每列可以是不同的值类型。</strong></p><p><strong>DataFrame既有行索引也有列索引.其中的数据是以一个或多个二维快存放的</strong></p><p><img src="/images/resources/FC8BE5DCDE41BD7B1F66E0523A4C009C.jpg" alt="IMAGE"></p><h2 id="通过head方法取前5行数据"><a href="#通过head方法取前5行数据" class="headerlink" title="通过head方法取前5行数据"></a>通过head方法取前5行数据</h2><p><img src="/images/resources/4FB1C62EBE27D09EA14245E2E3F9460F.jpg" alt="IMAGE"></p><h2 id="可以指定具体列进行排列"><a href="#可以指定具体列进行排列" class="headerlink" title="可以指定具体列进行排列"></a>可以指定具体列进行排列</h2><p><img src="/images/resources/7FA2BF24A53B211DE9BFDC215EDD2C8D.jpg" alt="IMAGE"></p><h2 id="如果传入列数据找不到产生缺失值"><a href="#如果传入列数据找不到产生缺失值" class="headerlink" title="如果传入列数据找不到产生缺失值"></a>如果传入列数据找不到产生缺失值</h2><p><img src="/images/resources/882E4D78E86BD8221CA1BB45D8936978.jpg" alt="IMAGE"></p><h2 id="通过字典表及或者属性方式可以获取一个series"><a href="#通过字典表及或者属性方式可以获取一个series" class="headerlink" title="通过字典表及或者属性方式可以获取一个series"></a>通过字典表及或者属性方式可以获取一个series</h2><p><img src="/images/resources/0B80E7821F7DA17AE427147A2A643072.jpg" alt="IMAGE"></p><h2 id="行值和列值得获取"><a href="#行值和列值得获取" class="headerlink" title="行值和列值得获取"></a>行值和列值得获取</h2><p><img src="/images/resources/2BD3FC96B668E81FEC2DF0BD6D91CF9B.jpg" alt="IMAGE"></p><p><img src="/images/resources/CCD83E6B1FF65BC80FE17989438CFF2F.jpg" alt="IMAGE"></p><p><img src="/images/resources/568D31C4F3DD6A95D43C1163ADDC30D1.jpg" alt="IMAGE"></p><h2 id="使用del删除列"><a href="#使用del删除列" class="headerlink" title="使用del删除列"></a>使用del删除列</h2><p><img src="/images/resources/19F16C6E44BC29A0C9F48CC33337C646.jpg" alt="IMAGE"></p><h2 id="处理另一种常见的数据-嵌套字典"><a href="#处理另一种常见的数据-嵌套字典" class="headerlink" title="处理另一种常见的数据(嵌套字典)"></a>处理另一种常见的数据(嵌套字典)</h2><p><em>嵌套字典转换为dataframe,外层字典的键作为列,内层键作为行索引</em></p><p><img src="/images/resources/0B783659837B4B45550DCD0A2D069CF4.jpg" alt="IMAGE"></p><blockquote><p>可以用T方法进行行和列的交换</p></blockquote><p><img src="/images/resources/165731CAF591EECFFA8792E7FB45B87C.jpg" alt="IMAGE"></p><p><img src="/images/resources/C520465EF26DA48624910E6EF27C9015.jpg" alt="IMAGE"></p><h2 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h2><p><strong>pandas的索引对象负责管理元数据,无论构建哪种类型,用到的任何数组和序列都会转换成一个Index</strong></p><p><em>注意:与集合不同,pandas的索引是可以包含重复的标签</em></p><h3 id="索引一些方法和属性"><a href="#索引一些方法和属性" class="headerlink" title="索引一些方法和属性"></a>索引一些方法和属性</h3><p><img src="/images/resources/0B23645E7219188A633CD06D6395594D.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据分析之路漫漫,贵在坚持.梅花香自苦寒来&lt;/p&gt;
&lt;h1 id=&quot;pandas基础一&quot;&gt;&lt;a href=&quot;#pandas基础一&quot; class=&quot;headerlink&quot; title=&quot;pandas基础一&quot;&gt;&lt;/a&gt;pandas基础一&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pandas的
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas初始" scheme="https://djwangweijie.github.io/tags/Pandas%E5%88%9D%E5%A7%8B/"/>
    
      <category term="Series和DateFrame" scheme="https://djwangweijie.github.io/tags/Series%E5%92%8CDateFrame/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础三</title>
    <link href="https://djwangweijie.github.io/2020/03/03/2020-03-03-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://djwangweijie.github.io/2020/03/03/2020-03-03-数据分析之python Numpy基础三/</id>
    <published>2020-03-03T13:23:33.855Z</published>
    <updated>2020-03-03T13:29:51.741Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy数组的基础就结束了,让我们进入更高级的pandas(盼达)学习。</p><h1 id="Numpy基础三"><a href="#Numpy基础三" class="headerlink" title="Numpy基础三"></a>Numpy基础三</h1><ol><li>线性代数</li><li>伪随机数生成</li><li>随机漫步示例</li></ol><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><p><em>Numpy提供了一个用于矩阵乘法的dot函数.</em></p><p><img src="/images/resources/362A8F715792CAFBF2B9F7A3B7E7E7E8.jpg" alt="IMAGE"></p><p><em>关于线性代数,现在熟知dot函数.后续分析中涉及到线性代数在回来补充</em></p><h1 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h1><p><strong>numpy.random模块对python内置的random进行了补充,增加了一些用于高效生成多种概率分布的样本值的函数</strong></p><p><img src="/images/resources/8EC7A1805DAF15F41E4036B717D10648.jpg" alt="IMAGE"></p><h2 id="随机数生成种子"><a href="#随机数生成种子" class="headerlink" title="随机数生成种子"></a>随机数生成种子</h2><p><em>通过np.random.seed(1234)更改随机数生成种子</em></p><p><img src="/images/resources/C54E2D7CAACE815DD007F54DCA1856D8.jpg" alt="IMAGE"></p><p><em>numpy.random的数据生成函数使用了全局的随机种子,要避免全局状态.可以使用numpy.random.RandomState</em></p><p><img src="/images/resources/D16BB939E186B4872430CE085155327B.jpg" alt="IMAGE"></p><p><img src="/images/resources/7A94C00607D582EEB9E6358C63557EBF.jpg" alt="IMAGE"></p><h1 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h1><p><a href="http://www.360doc.com/content/18/0103/13/48634131_718673400.shtml" target="_blank" rel="noopener">随机漫步理论</a></p><p><img src="/images/resources/34B14C90E36B18C003D482B8172E021F.jpg" alt="IMAGE"></p><p><img src="/images/resources/2D3973E5E0D27F6BAA0D59B25339CE61.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Numpy数组的基础就结束了,让我们进入更高级的pandas(盼达)学习。&lt;/p&gt;
&lt;h1 id=&quot;Numpy基础三&quot;&gt;&lt;a href=&quot;#Numpy基础三&quot; class=&quot;headerlink&quot; title=&quot;Numpy基础三&quot;&gt;&lt;/a&gt;Numpy基础三&lt;/h1&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://djwangweijie.github.io/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Numpy简单结束" scheme="https://djwangweijie.github.io/tags/Numpy%E7%AE%80%E5%8D%95%E7%BB%93%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础二</title>
    <link href="https://djwangweijie.github.io/2020/03/02/2020-03-02-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://djwangweijie.github.io/2020/03/02/2020-03-02-数据分析之python Numpy基础二/</id>
    <published>2020-03-02T14:41:27.052Z</published>
    <updated>2020-03-03T13:25:59.819Z</updated>
    
    <content type="html"><![CDATA[<p>打好基础,再接再厉</p><h1 id="Numpy基础二"><a href="#Numpy基础二" class="headerlink" title="Numpy基础二"></a>Numpy基础二</h1><ol><li>通用函数:快速的元素级数组函数</li><li>利用数组进行数据处理</li><li>用于数组的文件输入输出</li></ol><h1 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h1><p><em>通用函数是一种对ndarray中数据执行元素级运算的函数</em></p><p><strong>意味着这些函数都是简单的元素级的变体</strong></p><p><img src="/images/resources/B4C2E49F862549A0D05822F4B4154450.jpg" alt="IMAGE"></p><h2 id="返回浮点数数组的小数和整数部分"><a href="#返回浮点数数组的小数和整数部分" class="headerlink" title="返回浮点数数组的小数和整数部分"></a>返回浮点数数组的小数和整数部分</h2><p><img src="/images/resources/D12B9EED4A943291BD1F34DC02943C5C.jpg" alt="IMAGE"></p><h2 id="常用的一元函数和二元函数"><a href="#常用的一元函数和二元函数" class="headerlink" title="常用的一元函数和二元函数"></a>常用的一元函数和二元函数</h2><p><img src="/images/resources/AC90DE595FF8CCC057E1A4584C0341B2.jpg" alt="IMAGE"></p><p><img src="/images/resources/D3D9EE17516757B0B21171AD73BB5077.jpg" alt="IMAGE"></p><h1 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h1><p><em>Numpy数组可以将许多种数据处理任务表述为见解的数据表达式</em></p><p><em>用数组表达式代替循环的做法通常叫做矢量化</em></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>二维坐标系中,X轴可以取三个值1,2,3, Y轴可以取三个值7,8, 请问可以获得多少个点的坐标?<br>显而易见是6个:(1,7)(2,7)(3,7)(1,8)(2,8)(3,8)</p><p><img src="/images/resources/84E2DDE622F52D2721B12CF82DE9C42A.jpg" alt="IMAGE"></p><blockquote><p>同理</p></blockquote><p><img src="/images/resources/72CD7C9AF8509AA0B9E0A147EEED3836.jpg" alt="IMAGE"></p><h2 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h2><p><strong>np.where函数是三元表达式矢量化版本</strong></p><blockquote><p>示例1</p></blockquote><p><img src="/images/resources/1DD93E080A4DBB84A77416995B838C9B.jpg" alt="IMAGE"></p><p><strong>np.where第二个和第三个参数不必是数组.where通常用于根据另一数组产生一个新的数组</strong></p><blockquote><p>示例2</p></blockquote><p><img src="/images/resources/97D6AD816E15EEDFEBC2D8EF91418D2D.jpg" alt="IMAGE"></p><p><img src="/images/resources/18EF14277B0F5735712190CD90FE852A.jpg" alt="IMAGE"></p><h2 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h2><p><strong>通过数组上的一组数学函数对整个数组或者某个轴向的数据进行统计计算</strong></p><p><img src="/images/resources/45DD2579270F072E6CFBA4C0FB2412D1.jpg" alt="IMAGE"></p><h3 id="累加函数"><a href="#累加函数" class="headerlink" title="累加函数"></a>累加函数</h3><p><img src="/images/resources/AC380099DCBAB4226AD87CA4755D79F8.jpg" alt="IMAGE"></p><h3 id="用于布尔类型数组的方法"><a href="#用于布尔类型数组的方法" class="headerlink" title="用于布尔类型数组的方法"></a>用于布尔类型数组的方法</h3><p><img src="/images/resources/E6720DC66940B94A9A11EB0AD5599BC1.jpg" alt="IMAGE"></p><h2 id="np数组的排序"><a href="#np数组的排序" class="headerlink" title="np数组的排序"></a>np数组的排序</h2><p><em>和python内置的列表类型一样,Numpy也可以通过sort方法进行排序</em></p><p><img src="/images/resources/1A281F79633FC71DD7AE70E52774823C.jpg" alt="IMAGE"></p><h3 id="多维数组以及定位"><a href="#多维数组以及定位" class="headerlink" title="多维数组以及定位"></a>多维数组以及定位</h3><p><img src="/images/resources/A5A27EF88BC7B537965014B0DF17F999.jpg" alt="IMAGE"></p><h2 id="唯一化以及其他集合逻辑"><a href="#唯一化以及其他集合逻辑" class="headerlink" title="唯一化以及其他集合逻辑"></a>唯一化以及其他集合逻辑</h2><p><em>通过unique用于找出数组中唯一值,并返回已排序的结果</em></p><p><img src="/images/resources/E2DE6434620F241B300CDE577C7DD4F6.jpg" alt="IMAGE"></p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p><em>通过np.in1d用于测试一个数组中的值在另一数组中的成员资格,返回布尔类型数组</em></p><p><img src="/images/resources/4C5DD070851221955F8E20569F9EA4DA.jpg" alt="IMAGE"></p><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><p><em>np.save和np.load是读写磁盘数组数据的2个主要函数,保存的扩展名为.npy</em></p><p><img src="/images/resources/73478F71A9C34879AD93B344FED9A451.jpg" alt="IMAGE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打好基础,再接再厉&lt;/p&gt;
&lt;h1 id=&quot;Numpy基础二&quot;&gt;&lt;a href=&quot;#Numpy基础二&quot; class=&quot;headerlink&quot; title=&quot;Numpy基础二&quot;&gt;&lt;/a&gt;Numpy基础二&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通用函数:快速的元素级数组函数&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://djwangweijie.github.io/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="文件的输入输出读写" scheme="https://djwangweijie.github.io/tags/%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python之Numpy基础一</title>
    <link href="https://djwangweijie.github.io/2020/02/28/2020-02-28-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://djwangweijie.github.io/2020/02/28/2020-02-28-数据分析之python Numpy基础一/</id>
    <published>2020-02-28T11:04:41.920Z</published>
    <updated>2020-02-28T11:18:27.626Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy可以好好补补数学.捡起了儿时的快乐</p><h1 id="数组和矢量计算"><a href="#数组和矢量计算" class="headerlink" title="数组和矢量计算"></a>数组和矢量计算</h1><ol><li>Numpy介绍</li><li>Numpy中ndarray:一种多维数组对象</li></ol><p><strong>备注:矢量（vector）是一种既有大小又有方向的量，又称为向量。一般来说，在物理学中称作矢量，例如速度、加速度、力等等就是这样的量。舍弃实际含义，就抽象为数学中的概念──向量。在计算机中，矢量图可以无限放大永不变形.</strong></p><h1 id="Numpy的功能"><a href="#Numpy的功能" class="headerlink" title="Numpy的功能"></a>Numpy的功能</h1><ol><li>ndarray,一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组</li><li>用于对整组数据进行快速运算的标准数学函数(无需编写循环)</li><li>用于读写磁盘数据的工具以及用于操作内容映射文件的工具</li><li>线性代数,随机数生成以及傅里叶变换功能</li></ol><h2 id="主要的功能"><a href="#主要的功能" class="headerlink" title="主要的功能"></a>主要的功能</h2><ol><li>用于数据整理和清算,子集构造和过滤,转换等快速的矢量化数据运算</li><li>常用的数组算法,如排序,唯一化,集合运算等</li><li>高效的描述统计和数据聚合/摘要运算</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li><li>将条件逻辑表述为数组表达式</li><li>数据的分组运算(聚合,转换,函数应用等)</li></ol><h2 id="Numpy的优势"><a href="#Numpy的优势" class="headerlink" title="Numpy的优势"></a>Numpy的优势</h2><ol><li>Numpy是在一个连续的内存块中存储数据,独立于其他的python内置对象</li><li>Numpy可以在整个数组上执行复杂的计算,而不需要python的for循环</li></ol><p><img src="/images/resources/814B5A8180B8A56781164924BAC0F297.jpg" alt="IMAGE"></p><h1 id="Numpy中的ndarray"><a href="#Numpy中的ndarray" class="headerlink" title="Numpy中的ndarray"></a>Numpy中的ndarray</h1><p>一种多维数组对象,关于多维数组可以参考</p><p><a href="https://baijiahao.baidu.com/s?id=1637508222888888267&wfr=spider&for=pc" target="_blank" rel="noopener">关于多维数组解释好的文章</a></p><h2 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h2><p><img src="/images/resources/C2EE448D7BFAA4DFFA9C5A0589E0B7E1.jpg" alt="IMAGE"></p><h2 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h2><p>ndarray是一个通用的同构数据多位容器,所有元素必须是相同类型的,每个数组都一个shape(一个表示各维度大小的元组)和一个dtype(用于描述数组数据类型的对象)</p><p><img src="/images/resources/AE989534ADFEE5AAC55436657FD517D3.jpg" alt="IMAGE"></p><h1 id="创建ndarray-从零开始"><a href="#创建ndarray-从零开始" class="headerlink" title="创建ndarray(从零开始)"></a>创建ndarray(从零开始)</h1><p><em>创建数组最简单的方法就是使用array函数</em></p><p><img src="/images/resources/CA0831578007D96B95C5182AC5B58DE2.jpg" alt="IMAGE"></p><p><img src="/images/resources/77015D7A890D3AA4D4D28693444D72A8.jpg" alt="IMAGE"></p><h2 id="通过其他方式创建数组"><a href="#通过其他方式创建数组" class="headerlink" title="通过其他方式创建数组"></a>通过其他方式创建数组</h2><p><strong>在np.array可以通过zeros和ones创建指定长度和形状的全0或者全1数组</strong></p><p><img src="/images/resources/AA5CB582A14C4BBF37EF5446224B45AE.jpg" alt="IMAGE"></p><h1 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h1><p><em>dtype是一个特殊的对象,讲一块内容解释为特定数据类型所需的信息</em></p><p><img src="/images/resources/27DF3A546AA0E2017E9F709E2FA2EF3F.jpg" alt="IMAGE"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><img src="/images/resources/39EFB133FF0731C89CF63C09FA41B0CE.jpg" alt="IMAGE"></p><h1 id="Numpy数组的运算"><a href="#Numpy数组的运算" class="headerlink" title="Numpy数组的运算"></a>Numpy数组的运算</h1><p><em>数组很重要,不用编写循环即可对数据执行批量运算</em></p><p><img src="/images/resources/2AC5F7394B93D9FD9BF60F6EF1384DC7.jpg" alt="IMAGE"><br><img src="/images/resources/EADE09AE9703ECFF57D37D730CE90AC0.jpg" alt="IMAGE"></p><p>不同大小数组之间的运算叫做广播</p><h2 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h2><p><strong>数组切片是原始数组的视图,视图上的任何修改都会直接反应到源数组上</strong></p><p><img src="/images/resources/690596B719569E350FF99926E39D6AC7.jpg" alt="IMAGE"></p><p><strong>在进行切片的时候该值会自动传播,以为着跟列表的区别在,数组切片是原始数据的修改。数据不会被复制</strong></p><p><img src="/images/resources/0AF3E10A049F8BD8F6C26106D00BDD19.jpg" alt="IMAGE"></p><p><em>如果明确要复制,使用arr[5:8].copy</em></p><p><em>对于高维度数组,在一个二维数组中,各索引位置上的元素不再是标量而是一维数组</em></p><p><img src="/images/resources/71C6531079D6B2E9EA1FEB5260039AEE.jpg" alt="IMAGE"></p><p><strong>对于各个元素进行递归访问,可以传入一个以逗号隔开的索引列表选取单个元素</strong></p><p><img src="/images/resources/35D0134E8BD96F98A32832FD84AEB436.jpg" alt="IMAGE"></p><h2 id="二维数组索引方式"><a href="#二维数组索引方式" class="headerlink" title="二维数组索引方式"></a>二维数组索引方式</h2><p><img src="/images/resources/7DBC68B452EEA322D859F67C5C49D5F6.jpg" alt="IMAGE"></p><h2 id="三维数组索引方式"><a href="#三维数组索引方式" class="headerlink" title="三维数组索引方式"></a>三维数组索引方式</h2><p><img src="/images/resources/3D26592DADF3C21B0374A98B45075EF9.jpg" alt="IMAGE"></p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p><img src="/images/resources/E16280A90E66D9290676E87CE4D23D84.jpg" alt="IMAGE"></p><h2 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h2><p><em>ndarray的切片语法和列表的一维对象差不多,二维稍微有点区别</em></p><p><img src="/images/resources/7F52A498D14A9558AD27D9C80226E2FA.jpg" alt="IMAGE"></p><p><img src="/images/resources/3FB98072A91656B8C58AAB4FA40F5943.jpg" alt="IMAGE"></p><h2 id="布尔类型索引"><a href="#布尔类型索引" class="headerlink" title="布尔类型索引"></a>布尔类型索引</h2><p><img src="/images/resources/5A51BA2CEB9478B9C02FAC6A02F07EBD.jpg" alt="IMAGE"></p><p><em>通知在匹配完后,同样可以进行切片的操作</em></p><p><img src="/images/resources/9276F96AD69C62E01FF92C49CB59009E.jpg" alt="IMAGE"></p><p><em>一些常见操作</em></p><p><img src="/images/resources/D6297700F707A2E4CA3EEE8522DEDF23.jpg" alt="IMAGE"></p><h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><p><strong>花式索引是一个Numpy术语,利用整数数组进行索引</strong></p><p><img src="/images/resources/47CD0607F4BC614300A7A15A9C06F844.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF4F4FD99B39454CF5470521BA9AB7D3.jpg" alt="IMAGE"></p><p><strong>花式索引和切片不一样,总是将数据复制到新数组中</strong></p><h2 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h2><p><strong>转置是重塑的一种特殊形式,数组不仅有transpose方法,还有一个特殊的T属性</strong></p><p><img src="/images/resources/48EFB15DA1DF601E1AE3114D009598C5.jpg" alt="IMAGE"></p><p><img src="/images/resources/75C86806DA08A724C7E19559E32E4AE1.jpg" alt="IMAGE"></p><h3 id="三轴转换"><a href="#三轴转换" class="headerlink" title="三轴转换"></a>三轴转换</h3><p><img src="/images/resources/FB0262F8F1D97BD5CB277857C5E73FAA.jpg" alt="IMAGE"></p><p><a href="https://blog.csdn.net/theITcat/article/details/100026068" target="_blank" rel="noopener">如何理解轴转换</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Numpy可以好好补补数学.捡起了儿时的快乐&lt;/p&gt;
&lt;h1 id=&quot;数组和矢量计算&quot;&gt;&lt;a href=&quot;#数组和矢量计算&quot; class=&quot;headerlink&quot; title=&quot;数组和矢量计算&quot;&gt;&lt;/a&gt;数组和矢量计算&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Numpy介绍&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Numpy使用" scheme="https://djwangweijie.github.io/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="矩阵相乘" scheme="https://djwangweijie.github.io/tags/%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之python文件和操作系统</title>
    <link href="https://djwangweijie.github.io/2020/02/21/2020-02-21-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPython%E6%96%87%E4%BB%B6%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://djwangweijie.github.io/2020/02/21/2020-02-21-数据分析之Python文件和操作系统/</id>
    <published>2020-02-21T07:28:54.288Z</published>
    <updated>2020-02-21T07:30:56.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件和操作系统"><a href="#文件和操作系统" class="headerlink" title="文件和操作系统"></a>文件和操作系统</h1><ol><li>文件的读写操作</li><li>文件的字节与编码</li></ol><h1 id="文件的读写操作"><a href="#文件的读写操作" class="headerlink" title="文件的读写操作"></a>文件的读写操作</h1><p><em>打开一个文件以便读写,可以使用内置的open函数填充一个相对路径或者是绝对路径</em></p><p><img src="/images/resources/21CA280ADDD5BE786A7CD57CF732044D.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r:读取文件，若文件不存在则会报错</span><br><span class="line">w:写入文件，若文件不存在则会先创建再写入，会覆盖原文件</span><br><span class="line">a:写入文件，若文件不存在则会先创建再写入，但不会覆盖原文件，而是追加在文件末尾</span><br><span class="line">rb,wb:分别于r,w类似，但是用于读写二进制文件</span><br><span class="line">r+:可读、可写，文件不存在也会报错，写操作时会覆盖</span><br><span class="line">w+:可读，可写，文件不存在先创建，会覆盖</span><br><span class="line">a+:可读、可写，文件不存在先创建，不会覆盖，追加在末尾</span><br></pre></td></tr></table></figure><p><strong>注意：这里的覆盖是指每次重新打开文件进行操作时覆盖原来的，如果是在打开文件中则不会覆盖</strong></p><h1 id="文件的字节和编码"><a href="#文件的字节和编码" class="headerlink" title="文件的字节和编码"></a>文件的字节和编码</h1><p><img src="/images/resources/7D247662CDCFE9E85AD384245142E586.jpg" alt="IMAGE"></p><h1 id="前期回顾"><a href="#前期回顾" class="headerlink" title="前期回顾"></a>前期回顾</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件和操作系统&quot;&gt;&lt;a href=&quot;#文件和操作系统&quot; class=&quot;headerlink&quot; title=&quot;文件和操作系统&quot;&gt;&lt;/a&gt;文件和操作系统&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;文件的读写操作&lt;/li&gt;
&lt;li&gt;文件的字节与编码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="大数据分析" scheme="https://djwangweijie.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python" scheme="https://djwangweijie.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="https://djwangweijie.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="文件操作" scheme="https://djwangweijie.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="字符编码" scheme="https://djwangweijie.github.io/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
