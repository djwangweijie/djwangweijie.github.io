<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据分析之Pandas基础三</title>
      <link href="/2020/03/11/2020-03-11-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
      <url>/2020/03/11/2020-03-11-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>协方差和相关系数非常的有意思,可以让你衍生出现在就想关心数据应该怎么组合</p><h1 id="pandas基础三"><a href="#pandas基础三" class="headerlink" title="pandas基础三"></a>pandas基础三</h1><ol><li>汇总和计算描述统计</li></ol><h1 id="汇总和计算描述统计"><a href="#汇总和计算描述统计" class="headerlink" title="汇总和计算描述统计"></a>汇总和计算描述统计</h1><p><em>pandas对象拥有一组常用的数学和统计方法,大部分是属于约简和汇总统计。用于从series提取单个值或者从DataFrame的行或者列中提取一个series,都是基于没有缺失数据假设构建的</em></p><h2 id="返回一个列的所有的和"><a href="#返回一个列的所有的和" class="headerlink" title="返回一个列的所有的和"></a>返回一个列的所有的和</h2><p><img src="/images/resources/397D5DE6F47AAA4469F869F9E2F2F680.jpg" alt="IMAGE"></p><h2 id="按照行进行求和运算"><a href="#按照行进行求和运算" class="headerlink" title="按照行进行求和运算"></a>按照行进行求和运算</h2><p><img src="/images/resources/502E320217EEDFE8D99CA0350862F280.jpg" alt="IMAGE"></p><h2 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h2><p><img src="/images/resources/72B6F078302860EDCAAF9DA90AC09A88.jpg" alt="IMAGE"></p><h1 id="间接统计和累计统计-以及多次汇总"><a href="#间接统计和累计统计-以及多次汇总" class="headerlink" title="间接统计和累计统计,以及多次汇总"></a>间接统计和累计统计,以及多次汇总</h1><p><img src="/images/resources/BD2EED97C03311D91A77FE78ADC85E4E.jpg" alt="IMAGE"></p><p><img src="/images/resources/64D422CBA1611CBDB6C16A3DD2E94B63.jpg" alt="IMAGE"></p><p><em>例如，两组数的集合{0,5,9,14}和{5,6,8,9}其平均值都是7，但第二个集合具有较小的标准差。标准差可以当作不确定性的一种测量。例如在物理科学中，做重复性测量时，测量数值集合的标准差代表这些测量的精确度。当要决定测量值是否符合预测值，测量值的标准差占有决定性重要角色：如果测量平均值与预测值相差太远（同时与标准差数值做比较），则认为测量值与预测值互相矛盾。这很容易理解，因为如果测量值都落在一定数值范围之外，可以合理推论预测值是否正确。标准差应用于投资上，可作为量度回报稳定性的指标。标准差数值越大，代表回报远离过去平均数值，回报较不稳定故风险越高。相反，标准差数值越小，代表回报较为稳定，风险亦较小</em></p><p><strong>计算均方差，要看样本量是等概率，还有概率的。如果没有概率，直接计算离差的平方=（样本金额-平均值）的平方，然后所以样本量的离差平方求和，再除以（样本个数-1），然后开根号，就是标准差。如果有概率的话，只需要在计算合计数时考虑加权平均，不用再除以个数-1，直接开根号。</strong></p><h2 id="对于非数值的统计"><a href="#对于非数值的统计" class="headerlink" title="对于非数值的统计"></a>对于非数值的统计</h2><p><img src="/images/resources/D53FACBC72803DCF6187EC2B7CED2994.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF9305827B4E7496535E25C6486F970C.jpg" alt="IMAGE"></p><h1 id="相关系数与协方差"><a href="#相关系数与协方差" class="headerlink" title="相关系数与协方差"></a>相关系数与协方差</h1><p><strong>1、协方差是一个用于测量投资组合中某一具体投资项目相对于另一投资项目风险的统计指标,通俗点就是投资组合中两个项目间收益率的相关程度,正数说明两个项目一个收益率上升,另一个也上升,收益率呈同方向变化.如果是负数,则一个上升另一个下降,表明收益率是反方向变化.协方差的绝对值越大,表示这两种资产收益率关系越密切；绝对值越小表明这两种资产收益率的关系越疏远.2、由于协方差比较难理解,所以将协方差除以两个投资方案投资收益率的标准差之积,得出一个与协方差具有相同性质却没有量化的数.这个数就是相关系数.计算公式为相关系数=协方差/两个项目标准差之积.</strong></p><p><img src="/images/resources/463511E3272F850757BE5223D5BFD9C1.jpg" alt="IMAGE"></p><p>关于相关系数可以参考如下2篇文章</p><p><a href="https://blog.csdn.net/qq_38788128/article/details/80662712" target="_blank" rel="noopener">协方差和相关系数</a></p><p><a href="https://www.cnblogs.com/ggzhangxiaochao/p/9100575.html" target="_blank" rel="noopener">计算相关系数</a></p><p><img src="/images/resources/08F110C7415F1511DBA885FC41F73175.jpg" alt="IMAGE"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实协方差和相关系数除了公式还要琢磨之外,更多的应该理解他们的作用。其实也是看待一件事物和另一件事物的紧密性,也可以叫做关联度.可以用到彩票,交易,产业发展组合</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
            <tag> 汇总统计 </tag>
            
            <tag> 协方差和相关系数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之Pandas基础二</title>
      <link href="/2020/03/06/2020-03-06-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
      <url>/2020/03/06/2020-03-06-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="pandas基础二"><a href="#pandas基础二" class="headerlink" title="pandas基础二"></a>pandas基础二</h1><ol><li>基本功能</li></ol><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><p><strong>介绍Series和DataFrame的数据的基本操作</strong></p><h2 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h2><p><strong>pandas对象的一个重要方法是reindex,其作用是创建一个新对象,它的数据符合新的索引</strong></p><p><em>索引会根据reindex进行重排.如果某个索引值不存在,引入缺失值</em></p><p><img src="/images/resources/9BDC0097F09DEA77D4E6CF2D0FA1B710.jpg" alt="IMAGE"></p><p><em>对于时间序列的有序数据,重新索引需要一些插值处理.method选项可以操作,ffill是使用前面的值填充，bfill是使用后面的值填充。</em></p><p><img src="/images/resources/C9E0944093E2CBE2E491AFFE621AE20E.jpg" alt="IMAGE"></p><p><em>如果使用dataFrame,reindex可以修改行索引和列.只传递一个序列时,会重新索引结果的行</em></p><p><img src="/images/resources/93FFF2D082F2D3890B63D0F7010B3D24.jpg" alt="IMAGE"></p><p><em>同样的可以用column重新索引</em></p><p><img src="/images/resources/0F000BE435E2EA1306B7D32A6C62808D.jpg" alt="IMAGE"></p><h2 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h2><p><em>丢弃某条轴上面的一个或多个项很简单,只要有一个索引数组和列表即可</em></p><blockquote><p>针对series</p></blockquote><p><img src="/images/resources/7353F34AF4358F5AC59CB1FB9F369DD9.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame</p></blockquote><p><img src="/images/resources/7A8C2C4FD804A1C7410452D34E7507A6.jpg" alt="IMAGE"></p><h2 id="索引-选取和过滤"><a href="#索引-选取和过滤" class="headerlink" title="索引,选取和过滤"></a>索引,选取和过滤</h2><p><em>Series索引的工作方式类似numpy的索引,不过Series索引不只是整数</em></p><p><img src="/images/resources/7351085614E730AFB16DE45308814F25.jpg" alt="IMAGE"></p><p><em>切片运算有一些不同,其尾部是包含的</em></p><p><img src="/images/resources/7A0331DEDD87362F3AEC3201C3EE9C01.jpg" alt="IMAGE"></p><blockquote><p>针对DataFrame进行索引就是获取一个或者多个列</p></blockquote><p><img src="/images/resources/7319D3EF1A4A8DE696F09B53389A590F.jpg" alt="IMAGE"></p><blockquote><p>通过布尔类型</p></blockquote><p><img src="/images/resources/22F4A8FE59FBCDEDF8B32AF6DF724996.jpg" alt="IMAGE"></p><h2 id="用loc和iloc进行选取"><a href="#用loc和iloc进行选取" class="headerlink" title="用loc和iloc进行选取"></a>用loc和iloc进行选取</h2><p><em>对于dataFrame的行的标签索引可以使用loc和iloc,从DataFrame选择行和列的子集</em></p><p><em>通过2个方法选择一行和多列</em></p><p><img src="/images/resources/894761833E06C016E74B82062734631E.jpg" alt="IMAGE"></p><blockquote><p>同样适用于一个标签或者多个标签的切片</p></blockquote><p><img src="/images/resources/6871D92ED768889804D363F2FEC2BF6B.jpg" alt="IMAGE"></p><h3 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h3><p><img src="/images/resources/B5ECFDA35DD96A84887265201CB4BB2B.jpg" alt="IMAGE"></p><h2 id="算术预算和数据对齐"><a href="#算术预算和数据对齐" class="headerlink" title="算术预算和数据对齐"></a>算术预算和数据对齐</h2><p><strong>pandas重要的功能可以对不同索引的对象进行算术运算.对象相加时,存在不同的索引对.结果的索引就是该索引对的并集.</strong></p><p><img src="/images/resources/768E050A7B25854EDF9B8845A27267C4.jpg" alt="IMAGE"></p><p><img src="/images/resources/2E2FD992E1E33DFD0E3161410BE581E4.jpg" alt="IMAGE"></p><p><em>注意:Dataframe相加,没有共用的列或者行标签.结果都会是空</em></p><h3 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h3><p><img src="/images/resources/CC2D1E9C2547EE128E311C6AF9367F17.jpg" alt="IMAGE"></p><p>现在出现了na值,我填充一个特殊值怎么做</p><p><img src="/images/resources/7D41E072E3FD6C92DC6331849927178C.jpg" alt="IMAGE"></p><h4 id="可用的方法"><a href="#可用的方法" class="headerlink" title="可用的方法"></a>可用的方法</h4><p><img src="/images/resources/48895A322DD3FB5F1045308877149C5A.jpg" alt="IMAGE"></p><h3 id="同理"><a href="#同理" class="headerlink" title="同理"></a>同理</h3><p><img src="/images/resources/C95328773A6D7823317007F7E36EDCE5.jpg" alt="IMAGE"></p><h2 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h2><p><em>先看一个二维数组和一维数组相加</em></p><p><img src="/images/resources/CF1037DF0C3A3A52A59EC87974E624DC.jpg" alt="IMAGE"></p><p><em>同理,2者相加也一样</em></p><p><img src="/images/resources/826D251964FBC4E8373EEBE0CF520901.jpg" alt="IMAGE"></p><blockquote><p> 如果某个索引值找不到,则形成并集</p></blockquote><p><img src="/images/resources/52B8A7FE27D199B9AE096E2FD8C84715.jpg" alt="IMAGE"></p><p><img src="/images/resources/5E495F1869604983BEDD4DF846A5A8D8.jpg" alt="IMAGE"></p><h2 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h2><p><em>Numpy的ufuncs也可以用于操作pandas对象</em></p><p><img src="/images/resources/DAD1B6459E2C11DB815B4F94E966E6E4.jpg" alt="IMAGE"></p><p><img src="/images/resources/C952B31738FE3A6228A48D0935B1B5AF.jpg" alt="IMAGE"></p><p><a href="https://www.cnblogs.com/rrttp/p/8028421.html" target="_blank" rel="noopener">附上重新对二维数组的理解</a></p><h2 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h2><p><em>根据条件对数据集进行排序也是一种重要的内置计算,对行和列索引进行排序可以使用sortindex,返回一个已排序的新对象</em></p><p><img src="/images/resources/A1CD6A6ECCD28CE0D359490DB5036DE6.jpg" alt="IMAGE"></p><p><img src="/images/resources/B3CD803CC76040FDFF17377BA92FF5C5.jpg" alt="IMAGE"></p><h3 id="升序或者降序"><a href="#升序或者降序" class="headerlink" title="升序或者降序"></a>升序或者降序</h3><p><img src="/images/resources/688E7830127A870F6F3CB52C85ACB0A5.jpg" alt="IMAGE"></p><h3 id="按值对series排列使用sortvalues"><a href="#按值对series排列使用sortvalues" class="headerlink" title="按值对series排列使用sortvalues"></a>按值对series排列使用sortvalues</h3><p><img src="/images/resources/3D1EBC84FE57EAE5C7BE86682DC2A961.jpg" alt="IMAGE"></p><h3 id="排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可"><a href="#排序DataFrame时-可以根据一个或者多个列中的值-使用sorvalues中的by即可" class="headerlink" title="排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可"></a>排序DataFrame时,可以根据一个或者多个列中的值,使用sorvalues中的by即可</h3><p><img src="/images/resources/10B0A26170E3C5E1756C1202A4E84A6F.jpg" alt="IMAGE"></p><h2 id="rank方法"><a href="#rank方法" class="headerlink" title="rank方法"></a>rank方法</h2><p><em>rank是通过为各组分配一个平均排名的方式破坏平级关系</em></p><p><img src="/images/resources/985131ED1CD51544359627ACB66474B1.jpg" alt="IMAGE"></p><blockquote><p>针对dataframe</p></blockquote><p><img src="/images/resources/E2ADE065F80F8E164F7F3A7B38F0B21D.jpg" alt="IMAGE"></p><p><img src="/images/resources/47F006D8E2560638A7017A96F8E4EBFB.jpg" alt="IMAGE"></p><p><img src="/images/resources/A62806819F26AADFC24D702AA9143EA9.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
            <tag> Series和DateFrame基本功能 </tag>
            
            <tag> 排序筛选和rank </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之Pandas基础一</title>
      <link href="/2020/03/04/2020-03-04-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
      <url>/2020/03/04/2020-03-04-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPandas%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>数据分析之路漫漫,贵在坚持.梅花香自苦寒来</p><h1 id="pandas基础一"><a href="#pandas基础一" class="headerlink" title="pandas基础一"></a>pandas基础一</h1><ol><li>pandas的数据结构说明</li><li>pandas的数据结构介绍</li></ol><h1 id="pandas的数据结构说明"><a href="#pandas的数据结构说明" class="headerlink" title="pandas的数据结构说明"></a>pandas的数据结构说明</h1><p><strong>pandas含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具</strong></p><p><em>pandas是基于Numpy数组构建的,特别是基于数组的函数和不适用for循环的数据处理</em></p><blockquote><p>特点</p></blockquote><ol><li>pandas是专门为处理表格和混杂数据设计的</li><li>而Numpy更适合处理统一的数值数组数据</li><li>用的最多的是使用Series 和 DataFrame</li></ol><p><em>注意:别忘记安装pandas库</em></p><p><img src="/images/resources/88CD09B313660A19B2FF379849FA20B2.jpg" alt="IMAGE"></p><h1 id="pandas数据结构介绍"><a href="#pandas数据结构介绍" class="headerlink" title="pandas数据结构介绍"></a>pandas数据结构介绍</h1><p><em>pandas主要有2个非常重要的数据结构,分别是Series和DataFrame,他们提供了一种可靠的易于使用的基础</em></p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><p><strong>Series类似于一维数组的对象,由一组数据以及一组与之相关的数据标签组成</strong></p><p><img src="/images/resources/A4142743805F1077B093A14B458BB029.jpg" alt="IMAGE"></p><h2 id="自定义索引"><a href="#自定义索引" class="headerlink" title="自定义索引"></a>自定义索引</h2><p><img src="/images/resources/6F6405959DB48E08CC1642CCC752CD57.jpg" alt="IMAGE"></p><h2 id="一些运算"><a href="#一些运算" class="headerlink" title="一些运算"></a>一些运算</h2><p><img src="/images/resources/7BE46C9893AB0FD3908A941678D102C2.jpg" alt="IMAGE"></p><h2 id="类比定长的有序字典"><a href="#类比定长的有序字典" class="headerlink" title="类比定长的有序字典"></a>类比定长的有序字典</h2><p><img src="/images/resources/3547579C9D9BA67EA5CF325065259CB7.jpg" alt="IMAGE"></p><h2 id="通过字典创建Series"><a href="#通过字典创建Series" class="headerlink" title="通过字典创建Series"></a>通过字典创建Series</h2><p><img src="/images/resources/7F502060F619168FD4C5F1427CEF9640.jpg" alt="IMAGE"></p><h2 id="检测缺失值"><a href="#检测缺失值" class="headerlink" title="检测缺失值"></a>检测缺失值</h2><p><img src="/images/resources/F697479E51D87F2756F7270FA876CA7B.jpg" alt="IMAGE"></p><h2 id="重要功能"><a href="#重要功能" class="headerlink" title="重要功能"></a>重要功能</h2><p><em>Series最重要的一个功能是会根据运算的索引标签自动对齐数据</em></p><p><img src="/images/resources/DB8A9349293AD3B3B65A44B7B558C9DE.jpg" alt="IMAGE"></p><p><em>Series对象本身和索引都有一个name属性,这个属性和pandas的其它关键功能非常密切</em></p><p><img src="/images/resources/A91A7465D6DD9BE1FA05F1CBA8C0070B.jpg" alt="IMAGE"></p><p><img src="/images/resources/FD5C2D5BBF43BB0341A628CBE34D8434.jpg" alt="IMAGE"></p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p><strong>DataFrame是一个表格型的数据结构,含有一组有序的列,每列可以是不同的值类型。</strong></p><p><strong>DataFrame既有行索引也有列索引.其中的数据是以一个或多个二维快存放的</strong></p><p><img src="/images/resources/FC8BE5DCDE41BD7B1F66E0523A4C009C.jpg" alt="IMAGE"></p><h2 id="通过head方法取前5行数据"><a href="#通过head方法取前5行数据" class="headerlink" title="通过head方法取前5行数据"></a>通过head方法取前5行数据</h2><p><img src="/images/resources/4FB1C62EBE27D09EA14245E2E3F9460F.jpg" alt="IMAGE"></p><h2 id="可以指定具体列进行排列"><a href="#可以指定具体列进行排列" class="headerlink" title="可以指定具体列进行排列"></a>可以指定具体列进行排列</h2><p><img src="/images/resources/7FA2BF24A53B211DE9BFDC215EDD2C8D.jpg" alt="IMAGE"></p><h2 id="如果传入列数据找不到产生缺失值"><a href="#如果传入列数据找不到产生缺失值" class="headerlink" title="如果传入列数据找不到产生缺失值"></a>如果传入列数据找不到产生缺失值</h2><p><img src="/images/resources/882E4D78E86BD8221CA1BB45D8936978.jpg" alt="IMAGE"></p><h2 id="通过字典表及或者属性方式可以获取一个series"><a href="#通过字典表及或者属性方式可以获取一个series" class="headerlink" title="通过字典表及或者属性方式可以获取一个series"></a>通过字典表及或者属性方式可以获取一个series</h2><p><img src="/images/resources/0B80E7821F7DA17AE427147A2A643072.jpg" alt="IMAGE"></p><h2 id="行值和列值得获取"><a href="#行值和列值得获取" class="headerlink" title="行值和列值得获取"></a>行值和列值得获取</h2><p><img src="/images/resources/2BD3FC96B668E81FEC2DF0BD6D91CF9B.jpg" alt="IMAGE"></p><p><img src="/images/resources/CCD83E6B1FF65BC80FE17989438CFF2F.jpg" alt="IMAGE"></p><p><img src="/images/resources/568D31C4F3DD6A95D43C1163ADDC30D1.jpg" alt="IMAGE"></p><h2 id="使用del删除列"><a href="#使用del删除列" class="headerlink" title="使用del删除列"></a>使用del删除列</h2><p><img src="/images/resources/19F16C6E44BC29A0C9F48CC33337C646.jpg" alt="IMAGE"></p><h2 id="处理另一种常见的数据-嵌套字典"><a href="#处理另一种常见的数据-嵌套字典" class="headerlink" title="处理另一种常见的数据(嵌套字典)"></a>处理另一种常见的数据(嵌套字典)</h2><p><em>嵌套字典转换为dataframe,外层字典的键作为列,内层键作为行索引</em></p><p><img src="/images/resources/0B783659837B4B45550DCD0A2D069CF4.jpg" alt="IMAGE"></p><blockquote><p>可以用T方法进行行和列的交换</p></blockquote><p><img src="/images/resources/165731CAF591EECFFA8792E7FB45B87C.jpg" alt="IMAGE"></p><p><img src="/images/resources/C520465EF26DA48624910E6EF27C9015.jpg" alt="IMAGE"></p><h2 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h2><p><strong>pandas的索引对象负责管理元数据,无论构建哪种类型,用到的任何数组和序列都会转换成一个Index</strong></p><p><em>注意:与集合不同,pandas的索引是可以包含重复的标签</em></p><h3 id="索引一些方法和属性"><a href="#索引一些方法和属性" class="headerlink" title="索引一些方法和属性"></a>索引一些方法和属性</h3><p><img src="/images/resources/0B23645E7219188A633CD06D6395594D.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas初始 </tag>
            
            <tag> Series和DateFrame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python之Numpy基础三</title>
      <link href="/2020/03/03/2020-03-03-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
      <url>/2020/03/03/2020-03-03-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>Numpy数组的基础就结束了,让我们进入更高级的pandas(盼达)学习。</p><h1 id="Numpy基础三"><a href="#Numpy基础三" class="headerlink" title="Numpy基础三"></a>Numpy基础三</h1><ol><li>线性代数</li><li>伪随机数生成</li><li>随机漫步示例</li></ol><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><p><em>Numpy提供了一个用于矩阵乘法的dot函数.</em></p><p><img src="/images/resources/362A8F715792CAFBF2B9F7A3B7E7E7E8.jpg" alt="IMAGE"></p><p><em>关于线性代数,现在熟知dot函数.后续分析中涉及到线性代数在回来补充</em></p><h1 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h1><p><strong>numpy.random模块对python内置的random进行了补充,增加了一些用于高效生成多种概率分布的样本值的函数</strong></p><p><img src="/images/resources/8EC7A1805DAF15F41E4036B717D10648.jpg" alt="IMAGE"></p><h2 id="随机数生成种子"><a href="#随机数生成种子" class="headerlink" title="随机数生成种子"></a>随机数生成种子</h2><p><em>通过np.random.seed(1234)更改随机数生成种子</em></p><p><img src="/images/resources/C54E2D7CAACE815DD007F54DCA1856D8.jpg" alt="IMAGE"></p><p><em>numpy.random的数据生成函数使用了全局的随机种子,要避免全局状态.可以使用numpy.random.RandomState</em></p><p><img src="/images/resources/D16BB939E186B4872430CE085155327B.jpg" alt="IMAGE"></p><p><img src="/images/resources/7A94C00607D582EEB9E6358C63557EBF.jpg" alt="IMAGE"></p><h1 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h1><p><a href="http://www.360doc.com/content/18/0103/13/48634131_718673400.shtml" target="_blank" rel="noopener">随机漫步理论</a></p><p><img src="/images/resources/34B14C90E36B18C003D482B8172E021F.jpg" alt="IMAGE"></p><p><img src="/images/resources/2D3973E5E0D27F6BAA0D59B25339CE61.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Numpy使用 </tag>
            
            <tag> Numpy简单结束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python之Numpy基础二</title>
      <link href="/2020/03/02/2020-03-02-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
      <url>/2020/03/02/2020-03-02-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>打好基础,再接再厉</p><h1 id="Numpy基础二"><a href="#Numpy基础二" class="headerlink" title="Numpy基础二"></a>Numpy基础二</h1><ol><li>通用函数:快速的元素级数组函数</li><li>利用数组进行数据处理</li><li>用于数组的文件输入输出</li></ol><h1 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h1><p><em>通用函数是一种对ndarray中数据执行元素级运算的函数</em></p><p><strong>意味着这些函数都是简单的元素级的变体</strong></p><p><img src="/images/resources/B4C2E49F862549A0D05822F4B4154450.jpg" alt="IMAGE"></p><h2 id="返回浮点数数组的小数和整数部分"><a href="#返回浮点数数组的小数和整数部分" class="headerlink" title="返回浮点数数组的小数和整数部分"></a>返回浮点数数组的小数和整数部分</h2><p><img src="/images/resources/D12B9EED4A943291BD1F34DC02943C5C.jpg" alt="IMAGE"></p><h2 id="常用的一元函数和二元函数"><a href="#常用的一元函数和二元函数" class="headerlink" title="常用的一元函数和二元函数"></a>常用的一元函数和二元函数</h2><p><img src="/images/resources/AC90DE595FF8CCC057E1A4584C0341B2.jpg" alt="IMAGE"></p><p><img src="/images/resources/D3D9EE17516757B0B21171AD73BB5077.jpg" alt="IMAGE"></p><h1 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h1><p><em>Numpy数组可以将许多种数据处理任务表述为见解的数据表达式</em></p><p><em>用数组表达式代替循环的做法通常叫做矢量化</em></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>二维坐标系中,X轴可以取三个值1,2,3, Y轴可以取三个值7,8, 请问可以获得多少个点的坐标?<br>显而易见是6个:(1,7)(2,7)(3,7)(1,8)(2,8)(3,8)</p><p><img src="/images/resources/84E2DDE622F52D2721B12CF82DE9C42A.jpg" alt="IMAGE"></p><blockquote><p>同理</p></blockquote><p><img src="/images/resources/72CD7C9AF8509AA0B9E0A147EEED3836.jpg" alt="IMAGE"></p><h2 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h2><p><strong>np.where函数是三元表达式矢量化版本</strong></p><blockquote><p>示例1</p></blockquote><p><img src="/images/resources/1DD93E080A4DBB84A77416995B838C9B.jpg" alt="IMAGE"></p><p><strong>np.where第二个和第三个参数不必是数组.where通常用于根据另一数组产生一个新的数组</strong></p><blockquote><p>示例2</p></blockquote><p><img src="/images/resources/97D6AD816E15EEDFEBC2D8EF91418D2D.jpg" alt="IMAGE"></p><p><img src="/images/resources/18EF14277B0F5735712190CD90FE852A.jpg" alt="IMAGE"></p><h2 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h2><p><strong>通过数组上的一组数学函数对整个数组或者某个轴向的数据进行统计计算</strong></p><p><img src="/images/resources/45DD2579270F072E6CFBA4C0FB2412D1.jpg" alt="IMAGE"></p><h3 id="累加函数"><a href="#累加函数" class="headerlink" title="累加函数"></a>累加函数</h3><p><img src="/images/resources/AC380099DCBAB4226AD87CA4755D79F8.jpg" alt="IMAGE"></p><h3 id="用于布尔类型数组的方法"><a href="#用于布尔类型数组的方法" class="headerlink" title="用于布尔类型数组的方法"></a>用于布尔类型数组的方法</h3><p><img src="/images/resources/E6720DC66940B94A9A11EB0AD5599BC1.jpg" alt="IMAGE"></p><h2 id="np数组的排序"><a href="#np数组的排序" class="headerlink" title="np数组的排序"></a>np数组的排序</h2><p><em>和python内置的列表类型一样,Numpy也可以通过sort方法进行排序</em></p><p><img src="/images/resources/1A281F79633FC71DD7AE70E52774823C.jpg" alt="IMAGE"></p><h3 id="多维数组以及定位"><a href="#多维数组以及定位" class="headerlink" title="多维数组以及定位"></a>多维数组以及定位</h3><p><img src="/images/resources/A5A27EF88BC7B537965014B0DF17F999.jpg" alt="IMAGE"></p><h2 id="唯一化以及其他集合逻辑"><a href="#唯一化以及其他集合逻辑" class="headerlink" title="唯一化以及其他集合逻辑"></a>唯一化以及其他集合逻辑</h2><p><em>通过unique用于找出数组中唯一值,并返回已排序的结果</em></p><p><img src="/images/resources/E2DE6434620F241B300CDE577C7DD4F6.jpg" alt="IMAGE"></p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p><em>通过np.in1d用于测试一个数组中的值在另一数组中的成员资格,返回布尔类型数组</em></p><p><img src="/images/resources/4C5DD070851221955F8E20569F9EA4DA.jpg" alt="IMAGE"></p><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><p><em>np.save和np.load是读写磁盘数组数据的2个主要函数,保存的扩展名为.npy</em></p><p><img src="/images/resources/73478F71A9C34879AD93B344FED9A451.jpg" alt="IMAGE"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Numpy使用 </tag>
            
            <tag> 文件的输入输出读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python之Numpy基础一</title>
      <link href="/2020/02/28/2020-02-28-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
      <url>/2020/02/28/2020-02-28-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%20Numpy%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>Numpy可以好好补补数学.捡起了儿时的快乐</p><h1 id="数组和矢量计算"><a href="#数组和矢量计算" class="headerlink" title="数组和矢量计算"></a>数组和矢量计算</h1><ol><li>Numpy介绍</li><li>Numpy中ndarray:一种多维数组对象</li></ol><p><strong>备注:矢量（vector）是一种既有大小又有方向的量，又称为向量。一般来说，在物理学中称作矢量，例如速度、加速度、力等等就是这样的量。舍弃实际含义，就抽象为数学中的概念──向量。在计算机中，矢量图可以无限放大永不变形.</strong></p><h1 id="Numpy的功能"><a href="#Numpy的功能" class="headerlink" title="Numpy的功能"></a>Numpy的功能</h1><ol><li>ndarray,一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组</li><li>用于对整组数据进行快速运算的标准数学函数(无需编写循环)</li><li>用于读写磁盘数据的工具以及用于操作内容映射文件的工具</li><li>线性代数,随机数生成以及傅里叶变换功能</li></ol><h2 id="主要的功能"><a href="#主要的功能" class="headerlink" title="主要的功能"></a>主要的功能</h2><ol><li>用于数据整理和清算,子集构造和过滤,转换等快速的矢量化数据运算</li><li>常用的数组算法,如排序,唯一化,集合运算等</li><li>高效的描述统计和数据聚合/摘要运算</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li><li>将条件逻辑表述为数组表达式</li><li>数据的分组运算(聚合,转换,函数应用等)</li></ol><h2 id="Numpy的优势"><a href="#Numpy的优势" class="headerlink" title="Numpy的优势"></a>Numpy的优势</h2><ol><li>Numpy是在一个连续的内存块中存储数据,独立于其他的python内置对象</li><li>Numpy可以在整个数组上执行复杂的计算,而不需要python的for循环</li></ol><p><img src="/images/resources/814B5A8180B8A56781164924BAC0F297.jpg" alt="IMAGE"></p><h1 id="Numpy中的ndarray"><a href="#Numpy中的ndarray" class="headerlink" title="Numpy中的ndarray"></a>Numpy中的ndarray</h1><p>一种多维数组对象,关于多维数组可以参考</p><p><a href="https://baijiahao.baidu.com/s?id=1637508222888888267&wfr=spider&for=pc" target="_blank" rel="noopener">关于多维数组解释好的文章</a></p><h2 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h2><p><img src="/images/resources/C2EE448D7BFAA4DFFA9C5A0589E0B7E1.jpg" alt="IMAGE"></p><h2 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h2><p>ndarray是一个通用的同构数据多位容器,所有元素必须是相同类型的,每个数组都一个shape(一个表示各维度大小的元组)和一个dtype(用于描述数组数据类型的对象)</p><p><img src="/images/resources/AE989534ADFEE5AAC55436657FD517D3.jpg" alt="IMAGE"></p><h1 id="创建ndarray-从零开始"><a href="#创建ndarray-从零开始" class="headerlink" title="创建ndarray(从零开始)"></a>创建ndarray(从零开始)</h1><p><em>创建数组最简单的方法就是使用array函数</em></p><p><img src="/images/resources/CA0831578007D96B95C5182AC5B58DE2.jpg" alt="IMAGE"></p><p><img src="/images/resources/77015D7A890D3AA4D4D28693444D72A8.jpg" alt="IMAGE"></p><h2 id="通过其他方式创建数组"><a href="#通过其他方式创建数组" class="headerlink" title="通过其他方式创建数组"></a>通过其他方式创建数组</h2><p><strong>在np.array可以通过zeros和ones创建指定长度和形状的全0或者全1数组</strong></p><p><img src="/images/resources/AA5CB582A14C4BBF37EF5446224B45AE.jpg" alt="IMAGE"></p><h1 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h1><p><em>dtype是一个特殊的对象,讲一块内容解释为特定数据类型所需的信息</em></p><p><img src="/images/resources/27DF3A546AA0E2017E9F709E2FA2EF3F.jpg" alt="IMAGE"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><img src="/images/resources/39EFB133FF0731C89CF63C09FA41B0CE.jpg" alt="IMAGE"></p><h1 id="Numpy数组的运算"><a href="#Numpy数组的运算" class="headerlink" title="Numpy数组的运算"></a>Numpy数组的运算</h1><p><em>数组很重要,不用编写循环即可对数据执行批量运算</em></p><p><img src="/images/resources/2AC5F7394B93D9FD9BF60F6EF1384DC7.jpg" alt="IMAGE"><br><img src="/images/resources/EADE09AE9703ECFF57D37D730CE90AC0.jpg" alt="IMAGE"></p><p>不同大小数组之间的运算叫做广播</p><h2 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h2><p><strong>数组切片是原始数组的视图,视图上的任何修改都会直接反应到源数组上</strong></p><p><img src="/images/resources/690596B719569E350FF99926E39D6AC7.jpg" alt="IMAGE"></p><p><strong>在进行切片的时候该值会自动传播,以为着跟列表的区别在,数组切片是原始数据的修改。数据不会被复制</strong></p><p><img src="/images/resources/0AF3E10A049F8BD8F6C26106D00BDD19.jpg" alt="IMAGE"></p><p><em>如果明确要复制,使用arr[5:8].copy</em></p><p><em>对于高维度数组,在一个二维数组中,各索引位置上的元素不再是标量而是一维数组</em></p><p><img src="/images/resources/71C6531079D6B2E9EA1FEB5260039AEE.jpg" alt="IMAGE"></p><p><strong>对于各个元素进行递归访问,可以传入一个以逗号隔开的索引列表选取单个元素</strong></p><p><img src="/images/resources/35D0134E8BD96F98A32832FD84AEB436.jpg" alt="IMAGE"></p><h2 id="二维数组索引方式"><a href="#二维数组索引方式" class="headerlink" title="二维数组索引方式"></a>二维数组索引方式</h2><p><img src="/images/resources/7DBC68B452EEA322D859F67C5C49D5F6.jpg" alt="IMAGE"></p><h2 id="三维数组索引方式"><a href="#三维数组索引方式" class="headerlink" title="三维数组索引方式"></a>三维数组索引方式</h2><p><img src="/images/resources/3D26592DADF3C21B0374A98B45075EF9.jpg" alt="IMAGE"></p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p><img src="/images/resources/E16280A90E66D9290676E87CE4D23D84.jpg" alt="IMAGE"></p><h2 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h2><p><em>ndarray的切片语法和列表的一维对象差不多,二维稍微有点区别</em></p><p><img src="/images/resources/7F52A498D14A9558AD27D9C80226E2FA.jpg" alt="IMAGE"></p><p><img src="/images/resources/3FB98072A91656B8C58AAB4FA40F5943.jpg" alt="IMAGE"></p><h2 id="布尔类型索引"><a href="#布尔类型索引" class="headerlink" title="布尔类型索引"></a>布尔类型索引</h2><p><img src="/images/resources/5A51BA2CEB9478B9C02FAC6A02F07EBD.jpg" alt="IMAGE"></p><p><em>通知在匹配完后,同样可以进行切片的操作</em></p><p><img src="/images/resources/9276F96AD69C62E01FF92C49CB59009E.jpg" alt="IMAGE"></p><p><em>一些常见操作</em></p><p><img src="/images/resources/D6297700F707A2E4CA3EEE8522DEDF23.jpg" alt="IMAGE"></p><h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><p><strong>花式索引是一个Numpy术语,利用整数数组进行索引</strong></p><p><img src="/images/resources/47CD0607F4BC614300A7A15A9C06F844.jpg" alt="IMAGE"></p><p><img src="/images/resources/FF4F4FD99B39454CF5470521BA9AB7D3.jpg" alt="IMAGE"></p><p><strong>花式索引和切片不一样,总是将数据复制到新数组中</strong></p><h2 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h2><p><strong>转置是重塑的一种特殊形式,数组不仅有transpose方法,还有一个特殊的T属性</strong></p><p><img src="/images/resources/48EFB15DA1DF601E1AE3114D009598C5.jpg" alt="IMAGE"></p><p><img src="/images/resources/75C86806DA08A724C7E19559E32E4AE1.jpg" alt="IMAGE"></p><h3 id="三轴转换"><a href="#三轴转换" class="headerlink" title="三轴转换"></a>三轴转换</h3><p><img src="/images/resources/FB0262F8F1D97BD5CB277857C5E73FAA.jpg" alt="IMAGE"></p><p><a href="https://blog.csdn.net/theITcat/article/details/100026068" target="_blank" rel="noopener">如何理解轴转换</a></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Numpy使用 </tag>
            
            <tag> 矩阵相乘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python文件和操作系统</title>
      <link href="/2020/02/21/2020-02-21-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPython%E6%96%87%E4%BB%B6%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/02/21/2020-02-21-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BPython%E6%96%87%E4%BB%B6%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="文件和操作系统"><a href="#文件和操作系统" class="headerlink" title="文件和操作系统"></a>文件和操作系统</h1><ol><li>文件的读写操作</li><li>文件的字节与编码</li></ol><h1 id="文件的读写操作"><a href="#文件的读写操作" class="headerlink" title="文件的读写操作"></a>文件的读写操作</h1><p><em>打开一个文件以便读写,可以使用内置的open函数填充一个相对路径或者是绝对路径</em></p><p><img src="/images/resources/21CA280ADDD5BE786A7CD57CF732044D.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r:读取文件，若文件不存在则会报错</span><br><span class="line">w:写入文件，若文件不存在则会先创建再写入，会覆盖原文件</span><br><span class="line">a:写入文件，若文件不存在则会先创建再写入，但不会覆盖原文件，而是追加在文件末尾</span><br><span class="line">rb,wb:分别于r,w类似，但是用于读写二进制文件</span><br><span class="line">r+:可读、可写，文件不存在也会报错，写操作时会覆盖</span><br><span class="line">w+:可读，可写，文件不存在先创建，会覆盖</span><br><span class="line">a+:可读、可写，文件不存在先创建，不会覆盖，追加在末尾</span><br></pre></td></tr></table></figure><p><strong>注意：这里的覆盖是指每次重新打开文件进行操作时覆盖原来的，如果是在打开文件中则不会覆盖</strong></p><h1 id="文件的字节和编码"><a href="#文件的字节和编码" class="headerlink" title="文件的字节和编码"></a>文件的字节和编码</h1><p><img src="/images/resources/7D247662CDCFE9E85AD384245142E586.jpg" alt="IMAGE"></p><h1 id="前期回顾"><a href="#前期回顾" class="headerlink" title="前期回顾"></a>前期回顾</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 文件操作 </tag>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python函数</title>
      <link href="/2020/02/20/2020-02-20-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%87%BD%E6%95%B0/"/>
      <url>/2020/02/20/2020-02-20-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>函数即是对象,函数也可以叫做方法</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol><li>函数的定义</li><li>命名空间,作用域和局部函数</li><li>函数即是对象</li><li>匿名函数</li><li>错误和异常处理</li></ol><h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><p><strong>函数是在python中最重要的代码组织和复用手段,如果需要重读的使用或者非常类似的代码,就需要写一个函数,通过给函数起一个名字,可以提高代码的可读性</strong></p><p><img src="/images/resources/777C32F6B336976812AC094355178630.jpg" alt="IMAGE"></p><h2 id="命名空间-作用域和局部函数"><a href="#命名空间-作用域和局部函数" class="headerlink" title="命名空间,作用域和局部函数"></a>命名空间,作用域和局部函数</h2><p><strong>函数可以访问到不同作用域中的变量:全局(global) 和 局部(local)</strong></p><p><em>注意:任何函数中赋值的变量默认都是被分配到局部命名空间(local namespace)中的,局部空间是在函数被调用时创建的,函数参数会立即填入该命名空间</em></p><p><img src="/images/resources/FAB357288CC2FF086A600FC5773BC8E8.jpg" alt="IMAGE"></p><h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><p><img src="/images/resources/14060CAB55BB20B68A46011B9F28FAD2.jpg" alt="IMAGE"></p><h2 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h2><p>详见代码示例:</p><p>第一种:常规方式</p><p><img src="/images/resources/75F2EE1A746CC28223D9CBA784D621F8.jpg" alt="IMAGE"></p><p>第二种:将需要执行的方法作为操作列表</p><p><img src="/images/resources/32066ADE961BA76B43353336B2123FC4.jpg" alt="IMAGE"></p><p>第三种:通过内置的map函数,可以在一组数据上应用一个函数</p><p><img src="/images/resources/3B5EF6C4BE7CED93727DADBB1FEC66F3.jpg" alt="IMAGE"></p><h2 id="匿名函数-就是函数没有名字"><a href="#匿名函数-就是函数没有名字" class="headerlink" title="匿名函数(就是函数没有名字)"></a>匿名函数(就是函数没有名字)</h2><p><img src="/images/resources/57EB28B40163B2AED7D58EDB35C8026C.jpg" alt="IMAGE"></p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="迭代器和生成器对比"><a href="#迭代器和生成器对比" class="headerlink" title="迭代器和生成器对比"></a>迭代器和生成器对比</h3><p><img src="/images/resources/7C774E7CAC907D0FF8EC8F4EA6FB828B.jpg" alt="IMAGE"></p><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><p><em>生成器表达式就是将列表推导式两端的方括号改为圆括号</em></p><p><img src="/images/resources/012FFC11BC72C4EBA72E6EE35E83DA24.jpg" alt="IMAGE"></p><h2 id="itertoole模块"><a href="#itertoole模块" class="headerlink" title="itertoole模块"></a>itertoole模块</h2><p><em>itertoole有许多常见的算法生成器</em></p><p><img src="/images/resources/3CAAD0D25E4BA9CD03E2E1E929B24C51.jpg" alt="IMAGE"></p><p><strong>注意:其余功能可以参考相关文档</strong></p><h2 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h2><pre><code>f = open(path,&apos;w&apos;)try:    xxx_to()except:    print(&apos;xxx&apos;)finally:    f.close()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 函数和方法 </tag>
            
            <tag> 异常机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python数据结构和序列</title>
      <link href="/2020/02/18/2020-02-18-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%8F%E5%88%97/"/>
      <url>/2020/02/18/2020-02-18-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>每个数据结构都是语言设计者的精心设计,推导式也是有趣的部分</p><h1 id="python的数据结构-函数和文件"><a href="#python的数据结构-函数和文件" class="headerlink" title="python的数据结构,函数和文件"></a>python的数据结构,函数和文件</h1><ol><li>数据结构和序列,函数,文件讲分为3个部分进行叙述</li></ol><h1 id="数据结构和序列"><a href="#数据结构和序列" class="headerlink" title="数据结构和序列"></a>数据结构和序列</h1><p><strong>python的数据结构有元组,列表,字典,集合</strong></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><em>元组是一个固定长度,不可改变的python序列对象,创建元组最简单的方式就是用逗号进行分隔</em></p><p><img src="/images/resources/2ADB91417B20DC838C193A4ACDF1A6A1.jpg" alt="IMAGE"></p><p><em>如何元组中某个对象是可变的,可以在原位上进行修改</em></p><p><img src="/images/resources/4687ABDDABDE1152358DE012E5CBC3C7.jpg" alt="IMAGE"></p><p><em>元组可以相接与复制</em></p><p><img src="/images/resources/755E5FA05748213CCA82761CBE40B6C5.jpg" alt="IMAGE"></p><h3 id="拆分元组"><a href="#拆分元组" class="headerlink" title="拆分元组"></a>拆分元组</h3><h4 id="拆分和数值交换"><a href="#拆分和数值交换" class="headerlink" title="拆分和数值交换"></a>拆分和数值交换</h4><p><img src="/images/resources/92858794DECE6DAD07EE673BBD4FDCC7.jpg" alt="IMAGE"></p><h4 id="拆分迭代元组或者列表序列"><a href="#拆分迭代元组或者列表序列" class="headerlink" title="拆分迭代元组或者列表序列"></a>拆分迭代元组或者列表序列</h4><p><img src="/images/resources/22F732D23D4E4917BA09FC95F66DB0F3.jpg" alt="IMAGE"></p><h4 id="tuple方法"><a href="#tuple方法" class="headerlink" title="tuple方法"></a>tuple方法</h4><p><em>元组有一个方法和列表保持一致是叫做count,可以统计某个值出现的频率</em></p><p><img src="/images/resources/F5BFB1E3646A723755FB1A2C2303A8D3.jpg" alt="IMAGE"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><em>与元组对比,列表的长度可变,内容可以被修改,可以用方括号定义,或者用list函数</em></p><p><img src="/images/resources/3FA6147CEEC6591A8FF02FEA84DD0682.jpg" alt="IMAGE"></p><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><p><img src="/images/resources/C74934A48935FB96A9827AE4CF762EB1.jpg" alt="IMAGE"></p><h3 id="通过in或者not-in可以检查列表是否包含该数据"><a href="#通过in或者not-in可以检查列表是否包含该数据" class="headerlink" title="通过in或者not in可以检查列表是否包含该数据"></a>通过in或者not in可以检查列表是否包含该数据</h3><p><img src="/images/resources/5FE59F4596DF44F604E9EF46372515A7.jpg" alt="IMAGE"></p><h3 id="串联和组合列表"><a href="#串联和组合列表" class="headerlink" title="串联和组合列表"></a>串联和组合列表</h3><p><img src="/images/resources/3AAC6E0B610071462195D4AD879D36A2.jpg" alt="IMAGE"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><em>通过使用sort函数对一个列表原地排序</em></p><p><img src="/images/resources/BEFDED1B684DFB66AD6B773B661DCE7B.jpg" alt="IMAGE"></p><h3 id="二分搜索和维护已排序的列表"><a href="#二分搜索和维护已排序的列表" class="headerlink" title="二分搜索和维护已排序的列表"></a>二分搜索和维护已排序的列表</h3><p><em>在python中bisect模块支持二分查找和向已排序的列表插入值</em></p><p><img src="/images/resources/39F97B38573F4D1D30B11FCAB79E7D92.jpg" alt="IMAGE"></p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p><em>切片的目的主要选取大多数序列类型的一部分,切片的基本形式就是strat:stop</em></p><p><em>切片的起始元素是包含的,但不包含结束元素,因此结果中包含的元素个数为stop-start</em></p><p><img src="/images/resources/8AB835212447CFEFA8F40535D85F72E2.jpg" alt="IMAGE"></p><h4 id="递进切片"><a href="#递进切片" class="headerlink" title="递进切片"></a>递进切片</h4><p><img src="/images/resources/66ADF11715DBDE531B2283C4AE59EFE0.jpg" alt="IMAGE"></p><h2 id="切片的规律可以如下图所示"><a href="#切片的规律可以如下图所示" class="headerlink" title="切片的规律可以如下图所示"></a>切片的规律可以如下图所示</h2><p><img src="/images/resources/185AADC5CACCF64F386E5769BB564A2A.jpg" alt="IMAGE"></p><h2 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a>序列函数</h2><h3 id="enumerate函数"><a href="#enumerate函数" class="headerlink" title="enumerate函数"></a>enumerate函数</h3><p><em>迭代一个序列的时候,想知道当前项的序号</em></p><p><img src="/images/resources/AA3852DD100C8F45ACF57882952A231D.jpg" alt="IMAGE"></p><h3 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h3><p><em>sorted函数可以从任意序列的元素返回一个新的排好序的列表</em></p><p><img src="/images/resources/5657F65F4C8FD5441E3C3916E3A54A6C.jpg" alt="IMAGE"></p><h3 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h3><p><em>zip函数可以将多个列表，元组或其它序列组合成一个元组列表</em></p><p><img src="/images/resources/272D7629905D0F009F37B257463A591A.jpg" alt="IMAGE"></p><h3 id="reversed函数"><a href="#reversed函数" class="headerlink" title="reversed函数"></a>reversed函数</h3><p><em>reversed可以从后向前迭代一个序列</em></p><p><img src="/images/resources/D5154AC437784C34B97FF8A39087B138.jpg" alt="IMAGE"></p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><em>字典是python最为重要的数据结构,也可以叫做哈希映射或关联数组.以键值的方式构成,键值都可以是python对象</em></p><p><em>创建字典的方法之一是使用尖括号,用冒号进行键和值的分隔</em></p><p><img src="/images/resources/A5C76341228517851E00CDB816CA3A39.jpg" alt="IMAGE"></p><h3 id="删除的2种方式"><a href="#删除的2种方式" class="headerlink" title="删除的2种方式"></a>删除的2种方式</h3><p><img src="/images/resources/6599F1C98711F040F7CA77A780A1E9FF.jpg" alt="IMAGE"></p><h3 id="键值的迭代与字典融合"><a href="#键值的迭代与字典融合" class="headerlink" title="键值的迭代与字典融合"></a>键值的迭代与字典融合</h3><p><img src="/images/resources/E4C4DCF8FAC151BC5DE3BF0BF54A4E22.jpg" alt="IMAGE"></p><h3 id="通过序列创建字典"><a href="#通过序列创建字典" class="headerlink" title="通过序列创建字典"></a>通过序列创建字典</h3><p><img src="/images/resources/FD763C5F0162EAF6F5E9DB2AA875E2AC.jpg" alt="IMAGE"></p><h3 id="对单词进行分类"><a href="#对单词进行分类" class="headerlink" title="对单词进行分类"></a>对单词进行分类</h3><p><img src="/images/resources/5160274AFDB6C56B59E6D2265426568D.jpg" alt="IMAGE"></p><h3 id="关于有效的键类型"><a href="#关于有效的键类型" class="headerlink" title="关于有效的键类型"></a>关于有效的键类型</h3><p><strong>键通常是不可变的标量类型,list是不被允许的</strong></p><p><img src="/images/resources/B428C73E1B1025035FC0E7C5D866631C.jpg" alt="IMAGE"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><em>集合是无序,不可重复的元素的集合,可以理解为字典,只有键没有值,创建集合有2种方式,通过set函数或者使用尖括号set语句</em></p><p><img src="/images/resources/D87BD1A35015B4AF0A8C72053B521F42.jpg" alt="IMAGE"></p><h3 id="集合支持合并-交集-等集合运算"><a href="#集合支持合并-交集-等集合运算" class="headerlink" title="集合支持合并,交集,等集合运算"></a>集合支持合并,交集,等集合运算</h3><p><img src="/images/resources/411E63BDE36BE3DC7D014E840F5F96B5.jpg" alt="IMAGE"></p><h3 id="集合中常用的方法"><a href="#集合中常用的方法" class="headerlink" title="集合中常用的方法"></a>集合中常用的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S.add(e) 在集合中添加一个新的元素e；如果元素已经存在，则不添加</span><br><span class="line">S.remove(e) 从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误</span><br><span class="line">S.discard(e) 从集合S中移除一个元素e;</span><br><span class="line">S.clear() 清空集合内的所有元素</span><br><span class="line">S.copy() 将集合进行一次浅拷贝</span><br><span class="line">S.pop() 从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常</span><br><span class="line">S.update(s2) 用 S与s2得到的全集更新变量S</span><br><span class="line">以下内容可以用运算符操作代替  </span><br><span class="line">S.difference(s2) 用S - s2 运算，返回存在于在S中，但不在s2中的所有元素的集合</span><br><span class="line">S.difference_update(s2) 等同于 S = S - s2</span><br><span class="line">S.intersection(s2) 等同于S &amp; s2</span><br><span class="line">S.intersection_update(s2) 等同于S = S &amp; s2</span><br><span class="line">S.isdisjoint(s2) 如果S与s2交集为空返回True,非空则返回False</span><br><span class="line">S.issubset(s2) 如果S与s2交集为非空返回True,空则返回False</span><br><span class="line">S.issuperset(...) 如果S为s2的子集返回True,否则返回False</span><br><span class="line">S.symmetric_difference(s2) 返回对称补集,等同于 S ^ s2</span><br><span class="line">S.symmetric_difference_update(s2) 用S 与 s2的对称补集更新 S</span><br><span class="line">S.union(s2) 生成 S 与 s2的全集</span><br></pre></td></tr></table></figure><h2 id="列表-集合-字典推导式以及嵌套推导式"><a href="#列表-集合-字典推导式以及嵌套推导式" class="headerlink" title="列表,集合,字典推导式以及嵌套推导式"></a>列表,集合,字典推导式以及嵌套推导式</h2><p><em>语法格式如下:[expr for val in colletion if condition]</em></p><p><img src="/images/resources/19E78E4840C00686CC94012669B01D67.jpg" alt="IMAGE"></p><h3 id="嵌套推导式-稍难"><a href="#嵌套推导式-稍难" class="headerlink" title="嵌套推导式(稍难)"></a>嵌套推导式(稍难)</h3><p><img src="/images/resources/8AF0CADA6EAE4D2EAE8968C87A325DCB.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 序列 </tag>
            
            <tag> 推导式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python基础语法2</title>
      <link href="/2020/02/17/2020-02-17-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/"/>
      <url>/2020/02/17/2020-02-17-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/</url>
      
        <content type="html"><![CDATA[<p>继续前进,这是python基础知识的完结,后续我们将进阶到数据结构,函数和文件</p><h1 id="python数据类型和控制流"><a href="#python数据类型和控制流" class="headerlink" title="python数据类型和控制流"></a>python数据类型和控制流</h1><ol><li>标量类型是什么,如何使用</li><li>控制流式什么,如何使用</li></ol><h1 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h1><p><em>在python的标准库中,有一些内建的类型,用来处理数值数据,字符串,布尔值,日期类型.单值类型成为标量类型</em></p><ol><li>None         表明python里面的控制</li><li>str          字符串类型,有以UTF-8为基准</li><li>bytes        原生的ascii字节</li><li>float        双精度浮点数</li><li>bool         True或false值</li><li>int          任意精度整数</li></ol><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="int可以存储任意大的数"><a href="#int可以存储任意大的数" class="headerlink" title="int可以存储任意大的数"></a>int可以存储任意大的数</h3><p><img src="/images/resources/BCEB5560ADDBFD33CEFA045B1FE0F0CC.jpg" alt="IMAGE"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><em>字符串的表现,可以用单引号和双引号,有换行的可以用三引号</em></p><p><img src="/images/resources/302597F360B28DB47883A85B37C57F71.jpg" alt="IMAGE"></p><p><em>python的字符串是不可变的,不能修改字符串</em></p><p><img src="/images/resources/D58AE7B29D7594EC5F157E8E855256B5.jpg" alt="IMAGE"></p><p><em>许多python对象可以转换为字符串,字符串是一个有序列的unicode字符,可以像列表和元组一样处理(用于切片)</em></p><p><img src="/images/resources/B8B3839B489398E76BBC35787E77A93F.jpg" alt="IMAGE"></p><p><em>用r来表示字符本身,字符串合并,字符串格式化</em></p><p><img src="/images/resources/2DE7E3EAC6027725B02131A41F6BAC1F.jpg" alt="IMAGE"></p><p><em>字节和Unicode</em></p><p><img src="/images/resources/D7C95EC8DABD2198462AD9B0D31094A7.jpg" alt="IMAGE"></p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p><img src="/images/resources/00762643AC8645079A66413E2FF4FFD2.jpg" alt="IMAGE"></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><img src="/images/resources/24C0806F8555931DBFDFD0AC4791BB6C.jpg" alt="IMAGE"></p><h3 id="关于特殊的None"><a href="#关于特殊的None" class="headerlink" title="关于特殊的None"></a>关于特殊的None</h3><p><em>None是python的空值类型,一个函数没有明确的返回值,就默认返回为none</em></p><p><img src="/images/resources/9D1235D92D422E3FB6449AF2FBEB275C.jpg" alt="IMAGE"></p><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p><em>python内建的datetime模块提供了datetime,date,time类型,datetime结合date和time是常使用的</em></p><p><img src="/images/resources/A625D02AB8ECB7A603FAEDFC0DFE59C5.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%a星期的英文单词的缩写：如星期一， 则返回 Mon</span><br><span class="line">%A星期的英文单词的全拼：如星期一，返回 Monday</span><br><span class="line">%b月份的英文单词的缩写：如一月， 则返回 Jan</span><br><span class="line">%B月份的引文单词的缩写：如一月， 则返回 January</span><br><span class="line">%c返回datetime的字符串表示，如03/08/15 23:01:26</span><br><span class="line">%d返回的是当前时间是当前月的第几天</span><br><span class="line">%f微秒的表示： 范围: [0,999999]</span><br><span class="line">%H以24小时制表示当前小时</span><br><span class="line">%I以12小时制表示当前小时</span><br><span class="line">%j返回 当天是当年的第几天 范围[001,366]</span><br><span class="line">%m返回月份 范围[0,12]</span><br><span class="line">%M返回分钟数 范围 [0,59]</span><br><span class="line">%P返回是上午还是下午–AM or PM</span><br><span class="line">%S返回秒数 范围 [0,61]。。。手册说明的</span><br><span class="line">%U返回当周是当年的第几周 以周日为第一天</span><br><span class="line">%W返回当周是当年的第几周 以周一为第一天</span><br><span class="line">%w当天在当周的天数，范围为[0, 6]，6表示星期天</span><br><span class="line">%x日期的字符串表示 ：03/08/15</span><br><span class="line">%X时间的字符串表示 ：23:22:08</span><br><span class="line">%y两个数字表示的年份 15</span><br><span class="line">%Y四个数字表示的年份 2015</span><br><span class="line">%z与utc时间的间隔 （如果是本地时间，返回空字符串）</span><br><span class="line">%Z时区名称（如果是本地时间，返回空字符串）</span><br></pre></td></tr></table></figure><h4 id="时间替换和时间差"><a href="#时间替换和时间差" class="headerlink" title="时间替换和时间差"></a>时间替换和时间差</h4><p><img src="/images/resources/726822CE28F6DAE65F3A4D73632E21CC.jpg" alt="IMAGE"></p><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><p><em>在python中有若干的关键字进行条件逻辑,循环,以及其他控制流操作</em></p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if,elif,else"></a>if,elif,else</h2><p><img src="/images/resources/47EC1A063113F928740E64748596D507.jpg" alt="IMAGE"></p><p><img src="/images/resources/0D86D52E143AA8D621CE3BFFF2856E7C.jpg" alt="IMAGE"></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="contiune"><a href="#contiune" class="headerlink" title="contiune"></a>contiune</h3><p><em>contiune代表着当次循环跳过,继续进行下一次的循环</em></p><p><img src="/images/resources/B8D21E133AE0C982129F7B9098A78436.jpg" alt="IMAGE"></p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><em>break代表着跳出整个循环,并结束循环的过程</em></p><p><img src="/images/resources/6945B396B8E12DBF4E67B8BC838E4C73.jpg" alt="IMAGE"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><img src="/images/resources/6A11357229210DA6A177A2B96B4A543D.jpg" alt="IMAGE"></p><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><p><em>pass是python中的非操作语句,代码块不需要执行任何动作</em></p><p><img src="/images/resources/7953034C9AB1DA6CC980D6029A4F3D35.jpg" alt="IMAGE"></p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p><em>rang函数返回一个迭代器,用来产生一个均匀分布的整数序列</em></p><p><img src="/images/resources/D551EBF7FB2492428B00937256A0BE99.jpg" alt="IMAGE"></p><p><img src="/images/resources/9AE7D1020C0B8A6FDC404A681543A2E9.jpg" alt="IMAGE"></p><p><strong>注意:虽然range可以产生任意大的序号.所耗用的时长和内容比较小</strong></p><p><img src="/images/resources/FC805DC118C375042C3DCEB08C855B1D.jpg" alt="IMAGE"></p><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p><img src="/images/resources/D784B98ADA87F900AF14C9E03FDBB05E.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 语言基础2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之python基础语法1</title>
      <link href="/2020/02/16/2020-02-15-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/"/>
      <url>/2020/02/16/2020-02-15-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/</url>
      
        <content type="html"><![CDATA[<p>从语言思维来牢记基础,对于我们用语言来创造是必要的.</p><h1 id="python语言基础"><a href="#python语言基础" class="headerlink" title="python语言基础"></a>python语言基础</h1><ol><li>语言的艺术</li><li>语言的标准</li></ol><h1 id="语言的艺术"><a href="#语言的艺术" class="headerlink" title="语言的艺术"></a>语言的艺术</h1><blockquote><p>语言的语义</p></blockquote><p><strong>python语言在编写的时候强调的是可读性,简洁,清晰.</strong></p><blockquote><p>语言使用缩进而不是括号</p></blockquote><ol><li>使用tab或者4个空格来组织自己的代码</li><li>增加可读性,简洁</li></ol><p><img src="/images/resources/CABF027DF32BB72242382DCD94299087.jpg" alt="IMAGE"></p><blockquote><p>万物皆对象</p></blockquote><p><strong>在python所构建的数据都是对象,而这个对象拥有一致性也就是目标和目的是一致的</strong></p><p><em>每个数字,字符串,数据结构等都是对象,对象中都有自己的数据类型和内部数据</em></p><blockquote><p>注释</p></blockquote><ol><li>注释注重解释</li></ol><p><img src="/images/resources/249CBE5EA473D4C1AB847514449F4C41.jpg" alt="IMAGE"></p><blockquote><p>函数和对象上的方法调用</p></blockquote><ol><li>定义函数,调用函数,定义对象,对象方法调用</li></ol><p><img src="/images/resources/E78BDD7B30D1C7AE2ADFE5F043151BE3.jpg" alt="IMAGE"></p><h1 id="语言的标准"><a href="#语言的标准" class="headerlink" title="语言的标准"></a>语言的标准</h1><h2 id="变量和参数的传递"><a href="#变量和参数的传递" class="headerlink" title="变量和参数的传递"></a>变量和参数的传递</h2><ol><li>变量即是创建一个名字,而等号右边则是这个变量所代表的含义即是数据</li></ol><p><img src="/images/resources/4CABE6DC8BA41177D66FF4EB6B59E005.jpg" alt="IMAGE"></p><p><em>a和b都是同一个引用,指向的是具体的对象</em></p><h3 id="赋值-绑定-传递对象"><a href="#赋值-绑定-传递对象" class="headerlink" title="赋值=绑定,传递对象"></a>赋值=绑定,传递对象</h3><p><em>赋值称作为绑定,把一个名字绑定给一个对象,变量名可能被称为绑定变量</em></p><p><em>把对象传递给函数的时候,不会复制,而是直接引用</em></p><p><img src="/images/resources/09640B27C22D97CABE93AF55534FCB04.jpg" alt="IMAGE"></p><h3 id="动态引用和强类型"><a href="#动态引用和强类型" class="headerlink" title="动态引用和强类型"></a>动态引用和强类型</h3><p><img src="/images/resources/3E769A6E9B8C16189DBEC3D12804ACF9.jpg" alt="IMAGE"></p><p><em>注意知晓元组类型</em></p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p><em>对象都拥有属性和方法</em></p><p><strong>对象拥有属性和方法</strong></p><p><img src="/images/resources/CF718DF421AB02EDB230CB55BA654466.jpg" alt="IMAGE"></p><h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><p><em>如果不关心对象的类型,只关心是否有些方法和用途,这种称作为鸭子类型,比如你只想关心这个对象是否可以迭代.那么可以</em></p><p><img src="/images/resources/DEF5DA99ABBEBB8E238A50B26AD26348.jpg" alt="IMAGE"></p><h3 id="关于模块的引入"><a href="#关于模块的引入" class="headerlink" title="关于模块的引入"></a>关于模块的引入</h3><p><strong>引入模块有三种形式</strong></p><ol><li>引入整个模块</li><li>引入模块中的某个部分</li><li>引入的模块构建一个别名</li></ol><p><img src="/images/resources/F9DF1ABBA17F2D2FE6522B8482904CB0.jpg" alt="IMAGE"></p><h3 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h3><p><img src="/images/resources/4975BC58F07B92BE658ECB9EBF8CDC02.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a+b : a加b</span><br><span class="line"></span><br><span class="line">a-b :  a减b</span><br><span class="line"></span><br><span class="line">a*b :  a乘b</span><br><span class="line"></span><br><span class="line">a/b : a除以b</span><br><span class="line"></span><br><span class="line">a//b:a整除以b,表示的是返回a除以b的结果的整数部分，而不是证明了a能被b整除。要证明a能被b整除，可以是if a%b==0: 或者a/b＝int 等等</span><br><span class="line"></span><br><span class="line">a**b : a的b次方</span><br><span class="line"></span><br><span class="line">a&amp;b : a与b,对于整数则是按位AND</span><br><span class="line"></span><br><span class="line">a|b :  a或b,对于整数则是按位OR</span><br><span class="line"></span><br><span class="line">a^b :  对布尔值，a异或b,对于整数则是按位异或</span><br><span class="line"></span><br><span class="line">a==b : a和b相等则为Ture</span><br><span class="line"></span><br><span class="line">a!=b: a和b不相等则为Ture</span><br><span class="line"></span><br><span class="line">a&lt;=b,a&lt;b : 小于等于，小于</span><br><span class="line"></span><br><span class="line">a&gt;=b,a&gt;b : 大于等于，大于</span><br><span class="line"></span><br><span class="line">a is b: a和b是同一个python对象则为Ture</span><br><span class="line"></span><br><span class="line">a is not b: a和b不是同一个python对象则为Ture</span><br></pre></td></tr></table></figure><p><strong>在python中is是判断对象,==才是判断对象里面的内容是否一样</strong></p><h3 id="可变和不可编对象"><a href="#可变和不可编对象" class="headerlink" title="可变和不可编对象"></a>可变和不可编对象</h3><p><em>在python的大多数对象中,如:列表,字典,Numpy数组和用户自定义类型都是可变的</em></p><p><img src="/images/resources/7BFA7F926936CAC7642A7A70526A81DE.jpg" alt="IMAGE"></p><p><em>但是对于字符串和元组是不可变的</em></p><p><img src="/images/resources/3CA0B3E0025D142C615B4B917C590694.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 语言基础 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析之常用操作</title>
      <link href="/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>熟知一些基本操作,能够加快你的学习效率。</p><h1 id="python日常操作"><a href="#python日常操作" class="headerlink" title="python日常操作"></a>python日常操作</h1><ol><li>python交互工具jupyter_notebook日常使用</li></ol><h1 id="notebook的使用"><a href="#notebook的使用" class="headerlink" title="notebook的使用"></a>notebook的使用</h1><h2 id="命令窗口中输入jupyter-notebook"><a href="#命令窗口中输入jupyter-notebook" class="headerlink" title="命令窗口中输入jupyter notebook"></a>命令窗口中输入jupyter notebook</h2><p><strong>可以在切换到自己要写笔记的目录中</strong></p><p><img src="/images/resources/B53284DA6C7F0A216CDE866AB9B635A6.jpg" alt="IMAGE"></p><h2 id="在notenook中第一次操作"><a href="#在notenook中第一次操作" class="headerlink" title="在notenook中第一次操作"></a>在notenook中第一次操作</h2><p><img src="/images/resources/53861EE5B0A4F68971F8688B99F8D47C.jpg" alt="IMAGE"></p><p><em>注意:我们在使用的时候可以输入关键字的用Tab键进行补全操作</em></p><h3 id="Tab补全说明"><a href="#Tab补全说明" class="headerlink" title="Tab补全说明"></a>Tab补全说明</h3><p>1.Tab补全不是万能的,会尽可能的补全你的代码.按下Tab会搜索已输入的变量(对象,函数等等)</p><p><img src="/images/resources/92C3982A52F89E66DE166DBA8974181E.jpg" alt="IMAGE"></p><p><img src="/images/resources/42AD3F735B677C78D1EE45BC13000A74.jpg" alt="IMAGE"></p><p>2.同样的tab也适应于模块</p><p><img src="/images/resources/C2CCD872AD89C00E60B2F26A4BE7E001.jpg" alt="IMAGE"></p><p>3.同样适用与函数</p><p><img src="/images/resources/B9DE29D92317E46F3F2CEB3F20AA4D99.jpg" alt="IMAGE"></p><h2 id="自省操作"><a href="#自省操作" class="headerlink" title="自省操作"></a>自省操作</h2><p><strong>通过自省可以关注对象的类型</strong></p><p><img src="/images/resources/63C327928CBF5FA6B1D5B905C127226D.jpg" alt="IMAGE"></p><p><strong>针对自定义函数</strong></p><p><img src="/images/resources/5616539F0C89B3FED84CE97BFB5580E1.jpg" alt="IMAGE"></p><p><img src="/images/resources/B8036F487C114A4937BCD63D830106F9.jpg" alt="IMAGE"></p><h2 id="其余额外的命令"><a href="#其余额外的命令" class="headerlink" title="其余额外的命令"></a>其余额外的命令</h2><ol><li>%run命令可以用来执行某一个位置上的py文件</li><li>%load命令可以将代码导入到某一个位置中</li><li>使用Ctrl+C可以随时终端执行中的程序</li></ol><h2 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h2><p><em>魔术命令是指在指令面前加上%,可以是普通任务更快捷,更方便</em></p><p><strong>注意:没下载numpy的话可以执行 pip3 install numpy</strong></p><p><img src="/images/resources/1572ECAE3810677FBED5CAFB70B50E64.jpg" alt="IMAGE"></p><p><img src="/images/resources/B760556E4AF6D26DF497A3189EFDEBB1.jpg" alt="IMAGE"></p><h3 id="常用的魔术命令"><a href="#常用的魔术命令" class="headerlink" title="常用的魔术命令"></a>常用的魔术命令</h3><p>%quickref       显示IPython的快速参考</p><p>%magic          显示所有魔术命令的详细文档</p><p>%debug          从最新的异常跟踪的底部进入交互式调试器</p><p>%hist           打开命令的输入（可选输出）历史</p><p>%pdb            在异常发生后自动进入调试器</p><p>%paste          执行剪贴板中的Python代码</p><p>%cpaste         打开一个特殊的提示符以便于手工粘贴待执行的Python代码</p><p>%reset          删除interactive命名空间中的全部变量、名称</p><p>%page OBJECT    通过分页器打印出OBJECT</p><p>%run script.py  执行Python脚本文件</p><p>%prun statement 通过cProfile执行statement,并打印分析器的输出结果</p><p>%time statement 报告statement的执行时间</p><p>%timeit statement 多次执行statement以计算系综合平均执行时间。对那些执行时间非常小的代码有用</p><p>%who、%who_ls、whos 显示interactive命名空间中定义的变量，信息级别/冗余度可变</p><p>%xdel variable 删除variable,并尝试清除其在IPython中的对象上的一切引用</p><p><strong>后面在使用的时候可以在回过来进行查找</strong></p><h2 id="集成美丽的制图"><a href="#集成美丽的制图" class="headerlink" title="集成美丽的制图"></a>集成美丽的制图</h2><p><em>同样的需要安装制图执行命令:pip3 install matplotlib -i <a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a></em></p><p><img src="/images/resources/9163D86D2540DF9C66DF020EB18231C8.jpg" alt="IMAGE"></p><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p>1.np.random.randn(50) 代表着返回一组标准正态分布的随机值,范围在-1.96～+1.96</p><p><img src="/images/resources/1E7AF91A912DEA021CBF628480AE1DE8.jpg" alt="IMAGE"></p><p>2.numpy.cumsum()代表着累加求和 1 1+2 1+2+3 依次类推</p><p><img src="/images/resources/E16A45C8AC4BB3BF79964275A0CA50DA.jpg" alt="IMAGE"></p><p>3.plt.plot()代表着线性制图</p><p><img src="/images/resources/3FD580DCF3524851AEF1217B9566B66D.jpg" alt="IMAGE"></p><ol start="4"><li>%matplotlib inline 用于省掉plt.show()</li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据的禅意 </tag>
            
            <tag> 日常操作 </tag>
            
            <tag> 初次接触 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析前的准备工作</title>
      <link href="/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
      <url>/2020/02/14/2020-02-14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>做好数据分析,先好好理解数据和工具</p><h1 id="数据分析前的准备工作"><a href="#数据分析前的准备工作" class="headerlink" title="数据分析前的准备工作"></a>数据分析前的准备工作</h1><ol><li>数据与python</li><li>python处理数据问题上面重要的库</li><li>环境安装以及常用的学习工具与开发工具</li></ol><h1 id="数据与python"><a href="#数据与python" class="headerlink" title="数据与python"></a>数据与python</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><strong>数据这个词是抽象的,我们如何认识数据,有2个点我们需要我们作为前提</strong></p><ol><li>数据有可能代表是世界,人等一切事物,及时杂乱无序,但是也在当中存在规律</li><li>从数据中找到合适的规律和特点,那么我们需要结构化数据。那么结构化的数据有哪些？比如:表格类型的数据,多维数组,通过关键列构建的表格类型数据等</li></ol><p><strong><em>注意:大部分数据集都能转换成结构化的数据,结构化只是一种形式,更多的还是人自主的思维能力.比如:一组新闻文章里面的内容可以提取出词频表,而这个表就可以对于以后的情感进行分析</em></strong></p><h2 id="为什么选择用python"><a href="#为什么选择用python" class="headerlink" title="为什么选择用python"></a>为什么选择用python</h2><ol><li>python作为胶水语言可以随时沾和随时撕掉</li><li>python语言在设计的过程中就是构建以数据为中心的应用型数据</li><li>python适用于构建分析应用和一些常见的通用系统(日常的管理系统)</li></ol><p><strong>注:python作为一种解释性语言没有编译性语言的运行时间效率要高.这也是python的不足之处</strong></p><h1 id="python重要的库"><a href="#python重要的库" class="headerlink" title="python重要的库"></a>python重要的库</h1><blockquote><p>Numpy (数值处理)</p></blockquote><ol><li>可以构建快速高效的多维数组对象(ndarray)</li><li>可以用于对数组执行数学运算和计算.提供了大量的函数</li><li>可以用于读写硬盘中基于数组的数据集的工具</li><li>常见的线性代数等包含随机数的生成</li></ol><blockquote><p>pandas (面板数据)</p></blockquote><ol><li>能够处理大量结构化数据</li><li>常用的2个对象一个是DataFrame和Series,分别是面向列的二维表结构以及一个一维的标签化数组对象</li><li>提供复杂精细的索引功能,能够快速的完成重塑,切片,切块,聚合以及选取数据子集等操作</li></ol><blockquote><p>matplotlib</p></blockquote><ol><li>绘制图表以及其他二维数据可视化的工具</li></ol><blockquote><p>ipython与jupyter</p></blockquote><ol><li>2个都是良好的交互工具</li><li>ipython用于运行，调试，测试等操作</li><li>jupyter良好的学习笔记工具</li></ol><blockquote><p>Scipy与scikit-learn与statsmodels</p></blockquote><ol><li>Scipy解决计算中各种标准问题域</li><li>scikit-learn机器学习的工具包,偏重于预测</li><li>statsmodels统计分析包,偏重于统计与推断</li></ol><h1 id="环境安装以及常用的学习工具"><a href="#环境安装以及常用的学习工具" class="headerlink" title="环境安装以及常用的学习工具"></a>环境安装以及常用的学习工具</h1><h2 id="python环境的安装"><a href="#python环境的安装" class="headerlink" title="python环境的安装"></a>python环境的安装</h2><p><strong><em>python环境的安装不在进行说明,只是需要注意的是检查不同系统的变量设置,macos系统比较特殊,需要检查.bash_prifile中是否添加</em></strong></p><blockquote><p>ipython</p></blockquote><p><img src="/images/resources/0F0228205486739552A6EC6780BA2B68.jpg" alt="IMAGE"></p><blockquote><p>jupyter</p></blockquote><p>1.更新pip<br>python -m pip install -U pip setuptools</p><p>2.安装,使用国内源满速安装<br>pip install jupyter -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>3.在命令中直接jupyter notebook</p><p><img src="/images/resources/2A5E8FE12AE7421DA99315DFC30983A7.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据的禅意 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams晋阶之路(归约和聚合)</title>
      <link href="/2020/01/08/2020-01-08-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E5%BD%92%E7%BA%A6%E5%92%8C%E8%81%9A%E5%90%88)/"/>
      <url>/2020/01/08/2020-01-08-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E5%BD%92%E7%BA%A6%E5%92%8C%E8%81%9A%E5%90%88)/</url>
      
        <content type="html"><![CDATA[<p>归约比聚合相对容易,但是聚合可以做更多的事情</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>归约和聚合概念</li><li>解决实际需求</li><li>如何归约</li><li>如何聚合</li></ol><h2 id="归约和聚合概念"><a href="#归约和聚合概念" class="headerlink" title="归约和聚合概念"></a>归约和聚合概念</h2><p>1.归约即是reduce,代表着累加求和，无论是在现在的python已经jdk新特性中都有体现</p><p>2.聚合即是aggregate,代表着聚集合并在一起的操作,一般来说归约和聚合在一起是一种完美的搭配</p><p><a href="http://www.pianshen.com/article/2852280086/" target="_blank" rel="noopener">相对参考的文章</a></p><h2 id="解决实际需求"><a href="#解决实际需求" class="headerlink" title="解决实际需求"></a>解决实际需求</h2><ol><li>比如股票在不断的交易。累计计算从开始成交的总和</li><li>总和有的情况下,获取交易量前5.(按照成交量决定)</li></ol><h2 id="如何归约-代码示例-reduce"><a href="#如何归约-代码示例-reduce" class="headerlink" title="如何归约(代码示例)reduce"></a>如何归约(代码示例)reduce</h2><h3 id="构建一个普通的用户交易记录"><a href="#构建一个普通的用户交易记录" class="headerlink" title="构建一个普通的用户交易记录"></a>构建一个普通的用户交易记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StockTransaction &#123;</span><br><span class="line">//股票标记</span><br><span class="line">    private String symbol;</span><br><span class="line">    //股票领域</span><br><span class="line">    private String sector;</span><br><span class="line">    //股票分类</span><br><span class="line">    private String industry;</span><br><span class="line">    //成交量</span><br><span class="line">    private int shares;</span><br><span class="line">    //成交价格</span><br><span class="line">    private double sharePrice;</span><br><span class="line">    //用户编号</span><br><span class="line">    private String customerId;</span><br><span class="line">    //交易时间</span><br><span class="line">    private Date transactionTimestamp;</span><br><span class="line">    //是否成交</span><br><span class="line">    private boolean purchase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建一个提取交易量的记录类"><a href="#构建一个提取交易量的记录类" class="headerlink" title="构建一个提取交易量的记录类"></a>构建一个提取交易量的记录类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class ShareVolume &#123;</span><br><span class="line">//股票标记</span><br><span class="line">    private String symbol;</span><br><span class="line">    //成交量</span><br><span class="line">    private int shares;</span><br><span class="line">    //股票领域</span><br><span class="line">    private String industry;</span><br><span class="line">public String getSymbol() &#123;</span><br><span class="line">return symbol;</span><br><span class="line">&#125;</span><br><span class="line">public void setSymbol(String symbol) &#123;</span><br><span class="line">this.symbol = symbol;</span><br><span class="line">&#125;</span><br><span class="line">public int getShares() &#123;</span><br><span class="line">return shares;</span><br><span class="line">&#125;</span><br><span class="line">public void setShares(int shares) &#123;</span><br><span class="line">this.shares = shares;</span><br><span class="line">&#125;</span><br><span class="line">public String getIndustry() &#123;</span><br><span class="line">return industry;</span><br><span class="line">&#125;</span><br><span class="line">public void setIndustry(String industry) &#123;</span><br><span class="line">this.industry = industry;</span><br><span class="line">&#125;</span><br><span class="line">    public ShareVolume() &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public ShareVolume(String symbol, int shares, String industry) &#123;</span><br><span class="line">super();</span><br><span class="line">this.symbol = symbol;</span><br><span class="line">this.shares = shares;</span><br><span class="line">this.industry = industry;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    //构建一个shareVolume对象</span><br><span class="line">public  static  ShareVolume  buildInstance(StockTransaction  st) &#123;</span><br><span class="line">   ShareVolume  sv  = new  ShareVolume(st.getSymbol(), st.getShares(), st.getIndustry());</span><br><span class="line">   return sv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//构建一个统计总和对象</span><br><span class="line">public static ShareVolume sum(ShareVolume  s1,ShareVolume s2) &#123;</span><br><span class="line"> ShareVolume  sv =  new ShareVolume();</span><br><span class="line"> sv.setIndustry(s2.getIndustry());</span><br><span class="line"> sv.setSymbol(s1.getSymbol());</span><br><span class="line"> sv.setShares(s1.getShares()+s2.getShares());</span><br><span class="line"> return  sv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分别构建对应的序列化器"><a href="#分别构建对应的序列化器" class="headerlink" title="分别构建对应的序列化器"></a>分别构建对应的序列化器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ShareVolumeSerde  extends WrapperSerde&lt;ShareVolume&gt; &#123;</span><br><span class="line"></span><br><span class="line">public ShareVolumeSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(ShareVolume.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">public class StockTransactionSerde  extends WrapperSerde&lt;StockTransaction&gt; &#123;</span><br><span class="line"></span><br><span class="line">public StockTransactionSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(StockTransaction.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建流程序"><a href="#构建流程序" class="headerlink" title="构建流程序"></a>构建流程序</h3><blockquote><p>先看下reduce接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface Reducer&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 合二为一</span><br><span class="line">     * Aggregate the two given values into a single one.</span><br><span class="line">     *</span><br><span class="line">     * @param value1 the first value for the aggregation</span><br><span class="line">     * @param value2 the second value for the aggregation</span><br><span class="line">     * @return the aggregated value</span><br><span class="line">     */</span><br><span class="line">    V apply(final V value1, final V value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程序代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class RG_Stream &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">        props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KTable-aggregations&quot;);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KTable-aggregations-id&quot;);</span><br><span class="line">        props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KTable-aggregations-client&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">        props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">        props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockTransactionSerde().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">        </span><br><span class="line">    /**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line"></span><br><span class="line">KeyValueMapper&lt;String, ShareVolume, String&gt; classKey1 = (key, sharevolume) -&gt; sharevolume.getSymbol();</span><br><span class="line">KStream&lt;String, ShareVolume&gt; shareStream = streamsBuilder.stream(&quot;STTOPIC&quot;,Consumed.with(Serdes.String(),new StockTransactionSerde()))</span><br><span class="line">.mapValues(st -&gt;ShareVolume.buildInstance(st));</span><br><span class="line"></span><br><span class="line">shareStream.print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">KTable&lt;String, ShareVolume&gt;  shareKTable = shareStream</span><br><span class="line"> .selectKey(classKey1)</span><br><span class="line"> .groupByKey(Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line"> .reduce(ShareVolume::sum);</span><br><span class="line">shareKTable.toStream().print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票成交量总量变更&quot;));</span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:在流内部设置从最先开始消费,这个配置大于初始配置。</p><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><ol><li>开起zookeeper</li><li>开起kafka</li><li>创建主题”STTOPIC”</li><li>启动流程序</li><li>模拟数据发送</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">StockTransaction  record  = new  StockTransaction();</span><br><span class="line">record.setSymbol(&quot;好当家&quot;);</span><br><span class="line">record.setSector(&quot;食品&quot;);</span><br><span class="line">record.setIndustry(&quot;生产类&quot;);</span><br><span class="line">record.setShares(1000);</span><br><span class="line">record.setSharePrice(5.00);</span><br><span class="line">record.setCustomerId(&quot;001&quot;);</span><br><span class="line">record.setTransactionTimestamp(new Date());</span><br><span class="line">record.setPurchase(true);</span><br><span class="line"></span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, StockTransaction&gt; kp =  new KafkaProducer&lt;String,StockTransaction&gt;(properties,new StringSerializer(),new JsonSerializer&lt;StockTransaction&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockTransaction&gt;(&quot;STTOPIC&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论如下:</p></blockquote><p><img src="/images/resources/BBBEE3B9D53E02E604FC5D581655A5B4.jpg" alt="IMAGE"></p><p>即使是断掉程序，在重启程序后，计算依然保持从头开始</p><h2 id="如何聚合-代码示例-aggregate"><a href="#如何聚合-代码示例-aggregate" class="headerlink" title="如何聚合(代码示例)aggregate"></a>如何聚合(代码示例)aggregate</h2><p><strong><em>在聚合之前,归约是聚合的一种形式。归约操作是将产生相同类型的对象,聚合也是对结果求和。但是可以返回不同的类型</em></strong></p><p>现在有一个需求,获取股票交易量前5的，降序产生</p><blockquote><p> 构建一个降序的优先级队列并构建序列化器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueue&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private  TreeSet&lt;T&gt; inner;</span><br><span class="line"></span><br><span class="line">private  int  maxSize;</span><br><span class="line"></span><br><span class="line">    public FixedSizePriorityQueue(Comparator&lt;T&gt; comparator, int maxSize) &#123;</span><br><span class="line">        this.inner = new TreeSet&lt;&gt;(comparator);</span><br><span class="line">        this.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public FixedSizePriorityQueue&lt;T&gt; add(T element) &#123;</span><br><span class="line">        inner.add(element);</span><br><span class="line">        if (inner.size() &gt; maxSize) &#123;</span><br><span class="line">            inner.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FixedSizePriorityQueue&lt;T&gt; remove(T element) &#123;</span><br><span class="line">        if (inner.contains(element)) &#123;</span><br><span class="line">            inner.remove(element);</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Iterator&lt;T&gt; iterator() &#123;</span><br><span class="line">        return inner.iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 改进流式程序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">public class RG_Stream &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">        props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KTable-aggregation&quot;);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KTable-aggregations-i&quot;);</span><br><span class="line">        props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KTable-aggregations-clien&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">        props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">        props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockTransactionSerde().getClass().getName());</span><br><span class="line">        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">        </span><br><span class="line">    /**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用reduce</span><br><span class="line"> */</span><br><span class="line">KeyValueMapper&lt;String, ShareVolume, String&gt; classKey1 = (key, sharevolume) -&gt; sharevolume.getSymbol();</span><br><span class="line">KStream&lt;String, ShareVolume&gt; shareStream = streamsBuilder.stream(&quot;ST2&quot;,Consumed.with(Serdes.String(),new StockTransactionSerde()))</span><br><span class="line">.mapValues(st -&gt;ShareVolume.buildInstance(st));</span><br><span class="line"></span><br><span class="line">shareStream.print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">KTable&lt;String, ShareVolume&gt;  shareKTable = shareStream</span><br><span class="line"> .selectKey(classKey1)</span><br><span class="line"> .groupByKey(Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line"> .reduce(ShareVolume::sum);</span><br><span class="line">shareKTable.toStream().print(Printed.&lt;String, ShareVolume&gt;toSysOut().withLabel(&quot;股票成交量总量变更&quot;));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用aggreate</span><br><span class="line"> */</span><br><span class="line">Comparator&lt;ShareVolume&gt; comparator = (s1,s2) -&gt; s2.getShares()-s1.getShares();</span><br><span class="line">FixedSizePriorityQueue&lt;ShareVolume&gt; fixedQueue  = new FixedSizePriorityQueue&lt;&gt;(comparator, 5);</span><br><span class="line">    ValueMapper&lt;FixedSizePriorityQueue, String&gt; valueMapper = </span><br><span class="line">    fpq -&gt;&#123;</span><br><span class="line">    StringBuilder builder = new StringBuilder();</span><br><span class="line">                Iterator&lt;ShareVolume&gt; iterator = fpq.iterator();</span><br><span class="line">                int counter= 1;</span><br><span class="line">                while (iterator.hasNext()) &#123;</span><br><span class="line">                    ShareVolume stockVolume = iterator.next();</span><br><span class="line">                    if (stockVolume != null) &#123;</span><br><span class="line">                        builder.append(counter++).append(&quot;)&quot;).append(stockVolume.getSymbol())</span><br><span class="line">                                .append(&quot;:&quot;).append(NumberFormat.getInstance().format(stockVolume.getShares())).append(&quot; &quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return builder.toString();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//pair重新生成 new key-value pair</span><br><span class="line">    KTable&lt;String, String&gt; fixKTable = shareKTable.groupBy((k, v) -&gt; KeyValue.pair(v.getIndustry(), v), Serialized.with(Serdes.String(), new ShareVolumeSerde()))</span><br><span class="line">                .aggregate(() -&gt; fixedQueue,</span><br><span class="line">                        (k, v, agg) -&gt; agg.add(v),</span><br><span class="line">                        (k, v, agg) -&gt; agg.remove(v),</span><br><span class="line">                        Materialized.with(Serdes.String(), new FixedSizePriorityQueueSerde()))</span><br><span class="line">                .mapValues(valueMapper);</span><br><span class="line"></span><br><span class="line">//peek可用于作日志记录  .peek((k,v) -&gt; System.out.println(&quot;key值&quot;+k+&quot;------value&quot;+v)); </span><br><span class="line">fixKTable.toStream()</span><br><span class="line">.print(Printed.&lt;String, String&gt;toSysOut().withLabel(&quot;股票信息&quot;));</span><br><span class="line">                    </span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 额外附属的操作(添加对复杂对象的序列化适配器)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueueAdapter extends TypeAdapter&lt;FixedSizePriorityQueue&lt;ShareVolume&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 需要被序列化的对象</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void write(JsonWriter writer, FixedSizePriorityQueue&lt;ShareVolume&gt; value) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        if (value == null) &#123;</span><br><span class="line">            writer.nullValue();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator&lt;ShareVolume&gt; iterator = value.iterator();</span><br><span class="line">        List&lt;ShareVolume&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            ShareVolume stockTransaction = iterator.next();</span><br><span class="line">            if (stockTransaction != null) &#123;</span><br><span class="line">                list.add(stockTransaction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.beginArray();</span><br><span class="line">        for (ShareVolume transaction : list) &#123;</span><br><span class="line">            writer.value(gson.toJson(transaction));</span><br><span class="line">        &#125;</span><br><span class="line">        writer.endArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 反序列化实例</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public FixedSizePriorityQueue&lt;ShareVolume&gt; read(JsonReader reader) throws IOException &#123;</span><br><span class="line">        List&lt;ShareVolume&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        reader.beginArray();</span><br><span class="line">        while (reader.hasNext()) &#123;</span><br><span class="line">            list.add(gson.fromJson(reader.nextString(), ShareVolume.class));</span><br><span class="line">        &#125;</span><br><span class="line">        reader.endArray();</span><br><span class="line"></span><br><span class="line">        Comparator&lt;ShareVolume&gt; c = (c1, c2) -&gt; c2.getShares() - c1.getShares();</span><br><span class="line">        FixedSizePriorityQueue&lt;ShareVolume&gt; fixedSizePriorityQueue = new FixedSizePriorityQueue&lt;&gt;(c, 5);</span><br><span class="line"></span><br><span class="line">        for (ShareVolume transaction : list) &#123;</span><br><span class="line">            fixedSizePriorityQueue.add(transaction);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return fixedSizePriorityQueue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注册到反序列化器中(修订)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class JsonDeserializer&lt;T&gt; implements Deserializer&lt;T&gt; &#123;</span><br><span class="line"> private Gson gson;</span><br><span class="line">    private Class&lt;T&gt; deserializedClass;</span><br><span class="line">    private Type reflectionTypeToken;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer(Class&lt;T&gt; deserializedClass) &#123;</span><br><span class="line">        this.deserializedClass = deserializedClass;</span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer(Type reflectionTypeToken) &#123;</span><br><span class="line">        this.reflectionTypeToken = reflectionTypeToken;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void init () &#123;</span><br><span class="line">        GsonBuilder builder = new GsonBuilder();</span><br><span class="line">        builder.registerTypeAdapter(FixedSizePriorityQueue.class, new FixedSizePriorityQueueAdapter().nullSafe());</span><br><span class="line">        gson = builder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JsonDeserializer() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">        if(deserializedClass == null) &#123;</span><br><span class="line">            deserializedClass = (Class&lt;T&gt;) map.get(&quot;serializedClass&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public T deserialize(String s, byte[] bytes) &#123;</span><br><span class="line">         if(bytes == null)&#123;</span><br><span class="line">             return null;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         Type deserializeFrom = deserializedClass != null ? deserializedClass : reflectionTypeToken;</span><br><span class="line"></span><br><span class="line">         return gson.fromJson(new String(bytes),deserializeFrom);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FixedSizePriorityQueueSerde修订</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class FixedSizePriorityQueueSerde extends WrapperSerde&lt;FixedSizePriorityQueue&gt;&#123;</span><br><span class="line"></span><br><span class="line">  public FixedSizePriorityQueueSerde() &#123;</span><br><span class="line">          super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(new TypeToken&lt;FixedSizePriorityQueue&lt;ShareVolume&gt;&gt;() &#123;&#125;.getType()));</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: ShareVolume同时实现compareble</p><p><strong><em>后续代码改进:可以考虑修订comparetor</em></strong></p><blockquote><p>测试代码通过</p></blockquote><p><img src="/images/resources/DAF74D20FE4A8CD93F0C4069681F42CC.jpg" alt="IMAGE"></p><blockquote><p>关机重启</p></blockquote><p><img src="/images/resources/3CC9639E141CD067CFB8B5615588F0E5.jpg" alt="IMAGE"></p><p>数据计算保持一致</p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 数据状态 </tag>
            
            <tag> 聚合 </tag>
            
            <tag> 归约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams晋阶之路(KTable)</title>
      <link href="/2020/01/03/2020-01-03-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(KTable)/"/>
      <url>/2020/01/03/2020-01-03-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(KTable)/</url>
      
        <content type="html"><![CDATA[<p>只有清晰的明白流和表，你才有可能明白聚合以及开窗</p><h1 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h1><ol><li>流与表的关系</li><li>记录流概念</li><li>更新记录和日志</li><li>2者之间的对比</li><li>工作原理</li></ol><h2 id="流与表的关系"><a href="#流与表的关系" class="headerlink" title="流与表的关系"></a>流与表的关系</h2><p>在生活中,我们无时无刻都在产生一些事件,每个事件上面都可以看成在历史的记录中不断的添加一笔新的操作.而这些记录与其他的记录无关，都是独立的。</p><h2 id="记录流的概念"><a href="#记录流的概念" class="headerlink" title="记录流的概念"></a>记录流的概念</h2><p><strong>流被定义为无限的事件序列</strong></p><p>例如股票市场中,每只股票的报价都是一个离散时间,它们彼此之间没有任何关联。即使一家公司股票有多次报价。在某个时候我们称作为记录流,如图:</p><p><img src="/images/resources/2344A96518B42F8D06C8C4D2A79CAB99.jpg" alt="IMAGE"></p><p>每个时间就是一个插入项，为表中每个插入项建立一个地增量为1的key</p><h2 id="更定记录和变更日志"><a href="#更定记录和变更日志" class="headerlink" title="更定记录和变更日志"></a>更定记录和变更日志</h2><p>如果讲事件流看成是一个日志,更新流可以看成是一个不断在变更的日志。</p><p><strong><em>如上图所示，如果以股票名字作为主键。那么动作发生将是更新操作。</em></strong></p><p>注意:日志和变更日志都是讲记录追加到文件末尾,在日志中可以看到所有的记录.但是在变更日志中,对任何一个给定键只保留最新记录。</p><p>对于变更日志和更新流来说,我们用KTable进行抽象的表现与描述</p><h2 id="2者之间的对比"><a href="#2者之间的对比" class="headerlink" title="2者之间的对比"></a>2者之间的对比</h2><h3 id="通过代码我们来进行呈现说明"><a href="#通过代码我们来进行呈现说明" class="headerlink" title="通过代码我们来进行呈现说明"></a>通过代码我们来进行呈现说明</h3><blockquote><p>构建股票信息类StockMsg</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class StockMsg &#123;</span><br><span class="line">//股票价格</span><br><span class="line">private  double  stockPrice;</span><br><span class="line">//股票名字</span><br><span class="line">private  String    stockName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改进通用化序列器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class WrapperSerde&lt;T&gt;  implements  Serde&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    private JsonSerializer&lt;T&gt; serializer;</span><br><span class="line">    private JsonDeserializer&lt;T&gt; deserializer;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public WrapperSerde() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public  WrapperSerde(JsonSerializer&lt;T&gt; serializer, JsonDeserializer&lt;T&gt; deserializer) &#123;</span><br><span class="line">        this.serializer = serializer;</span><br><span class="line">        this.deserializer = deserializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Serializer&lt;T&gt; serializer() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return serializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Deserializer&lt;T&gt; deserializer() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return deserializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类序列器的构建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class StockSerde extends WrapperSerde&lt;StockMsg&gt;&#123;</span><br><span class="line"></span><br><span class="line">public StockSerde() &#123;</span><br><span class="line">super(new JsonSerializer&lt;&gt;(), new JsonDeserializer&lt;&gt;(StockMsg.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建流式程序"><a href="#构建流式程序" class="headerlink" title="构建流式程序"></a>构建流式程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class KTVSKS_Stream &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">// stream流的名字</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;KStreamVSKTable_app&quot;);</span><br><span class="line">// 消费者组名字</span><br><span class="line">props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;KStreamVSKTable_group&quot;);</span><br><span class="line">// 消费者名字</span><br><span class="line">props.put(ConsumerConfig.CLIENT_ID_CONFIG, &quot;KStreamVSKTable_client&quot;);</span><br><span class="line">// 每次消费最新的数据</span><br><span class="line">props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;latest&quot;);</span><br><span class="line">// 自动提交偏移</span><br><span class="line">props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, &quot;30000&quot;);</span><br><span class="line">props.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, &quot;15000&quot;);</span><br><span class="line">// 服务器地址</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">// 并行的线程数</span><br><span class="line">props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, &quot;1&quot;);</span><br><span class="line">props.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, &quot;10000&quot;);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());</span><br><span class="line">props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, new StockSerde().getClass().getName());</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">/**</span><br><span class="line"> * 构建流</span><br><span class="line"> */</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 分别创建KStream和KTable实例并打印</span><br><span class="line">KeyValueMapper&lt;String, StockMsg, String&gt; classKey1 = (key, stock) -&gt; stock.getStockName();</span><br><span class="line">KStream&lt;String, StockMsg&gt; stockStream = streamsBuilder.stream(&quot;STOCKTOPIC&quot;);</span><br><span class="line">    KStream&lt;String, StockMsg&gt;  ssKStream  =stockStream.selectKey(classKey1);</span><br><span class="line">    ssKStream.to(&quot;STOCKTOPICTABLE&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssKStream.print(Printed.&lt;String, StockMsg&gt;toSysOut().withLabel(&quot;股市交易流&quot;));</span><br><span class="line"></span><br><span class="line">KTable&lt;String, StockMsg&gt; stocKTable = streamsBuilder.table(&quot;STOCKTOPICTABLE&quot;);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">stocKTable.toStream().print(Printed.&lt;String, StockMsg&gt;toSysOut().withLabel(&quot;股市交易表&quot;));</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟生产者</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">StockMsg  record  = new StockMsg();</span><br><span class="line">record.setStockName(&quot;好当家&quot;);</span><br><span class="line">record.setStockPrice(3.09);</span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, StockMsg&gt; kp =  new KafkaProducer&lt;String,StockMsg&gt;(properties,new StringSerializer(),new JsonSerializer&lt;StockMsg&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockMsg&gt;(&quot;STOCKTOPIC&quot;, record));</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, StockMsg&gt;(&quot;STOCKTOPICTABLE&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ol><li>启动zookeeper</li><li>启动kafka</li><li>创建主题–STOCKTOPIC 和 STOCKTOPICTABLE</li><li>启动流程序 (需要指定key值)</li><li>模拟数据发送</li></ol><p><img src="/images/resources/D0DE6D193FCC74CD47A9F1515A472783.jpg" alt="IMAGE"></p><p>注意:表始终在更新以最新的标准被基准，当然前提是流有进行过选择对应的key值</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>1.在创建KTable的时候,同时在后台创建了一个追踪流状态的状态存储,从而创建了一个更新流。创建后会有一个内容名称，但是 不能显式的进行交互式访问。但是KTable通过使用Materialized(计量)可以进行显式的查询</p><p>2.KTable何时进行更新,并发往下游处理器.</p><blockquote><p>因素</p></blockquote><ol><li>较高的数据流入速率将增加发送更新记录的频率</li><li>不同键越多</li><li>通过配置cache.max.bytes.buffering以及commit.intrval.ms达到更新的设置</li></ol><blockquote><p>cache.max.bytes.buffering设置缓存缓冲大小</p></blockquote><p>设置该缓存用于删除具有相同键重复的更新记录。使用持久化存储时就可以显著提升性能</p><blockquote><p>commit.intrval.ms设置提交时间间隔</p></blockquote><p>提交间隔参数用来指定保存数据的频率，它会强制刷新，将最新的记录更新，并发送到下游</p><p>注意:默认的提交时间是30秒以及默认10M缓存，当然在上线之前，肯定要平衡大小和时间以及处理的线程数。这个是需要进行考量的。</p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 数据状态 </tag>
            
            <tag> 数据表 </tag>
            
            <tag> 遇见未来聚合和开窗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams晋阶之路(连接能力)</title>
      <link href="/2019/12/30/2019-12-30-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E8%BF%9E%E6%8E%A5)/"/>
      <url>/2019/12/30/2019-12-30-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E8%BF%9E%E6%8E%A5)/</url>
      
        <content type="html"><![CDATA[<p>连接以为可以观测时间,有了时间,我们才会具有洞察力.</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>连接的目的,增加洞察力</li><li>时间戳的定义以及分类</li></ol><h2 id="连接的目的"><a href="#连接的目的" class="headerlink" title="连接的目的"></a>连接的目的</h2><p>在前期我们通过给定谓词(也就是加入筛选条件)将流分为了2类，比如钥匙类和小五金类</p><p><img src="/images/resources/FAD029DB2ADEB215979E02FB75036856.jpg" alt="IMAGE"></p><p>如何让这2个不同的流连接在一起,能够观察增加需求能力。</p><h2 id="连接的要求"><a href="#连接的要求" class="headerlink" title="连接的要求"></a>连接的要求</h2><ol><li>2个流以上</li><li>有一个相同的key,作为连接的条件</li></ol><blockquote><p>前期code如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class JoinStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(JoinStream.class);</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">//初次屏蔽处理器</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">//定义谓词,以及选择key键</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//获得分流的集合,并且在之前选择相同的key值</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[]  branchesStream =</span><br><span class="line">PurchaseRecordStream.selectKey((k,v)-&gt; v.getFirstName()+v.getLastName())</span><br><span class="line">.branch(isOne,isTwo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何建立连接"><a href="#如何建立连接" class="headerlink" title="如何建立连接"></a>如何建立连接</h2><ol><li>连接的记录,需要创建一个ValueJoiner&lt;V1,V2,R&gt;对象.V1和V2代表着接收的2个连接对象,他们应该有相同的key.类型可以不同。R代表着可以选择组合后返回的新的对象</li></ol><h3 id="新的合并对象设计"><a href="#新的合并对象设计" class="headerlink" title="新的合并对象设计"></a>新的合并对象设计</h3><blockquote><p>对象设计如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class CorrelatedPurchase &#123;</span><br><span class="line"></span><br><span class="line">     private  Date  firstDate;</span><br><span class="line">     private  Date  seconDate;</span><br><span class="line">     private  List&lt;String&gt; purchaseListItem;</span><br><span class="line">     private  double  totalAmount;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ValueJoiner设计代码如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseJoiner  implements ValueJoiner&lt;PurchaseRecord, PurchaseRecord, CorrelatedPurchase&gt; &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CorrelatedPurchase apply(PurchaseRecord value1, PurchaseRecord value2) &#123;</span><br><span class="line">Date date1 = </span><br><span class="line">value1 != null ? value1.getPurchaseDate():null;</span><br><span class="line">Date date2 =</span><br><span class="line">value2 != null ? value2.getPurchaseDate():null;</span><br><span class="line"></span><br><span class="line">String purchaseName1 = </span><br><span class="line">value1 != null ? value1.getItemPurchased():null;</span><br><span class="line">String purchaseName2 = </span><br><span class="line">value2 != null ? value2.getItemPurchased():null;</span><br><span class="line">List&lt;String&gt; purchasedItem =  new ArrayList&lt;String&gt;();</span><br><span class="line">if (purchaseName1 != null) &#123;</span><br><span class="line">purchasedItem.add(purchaseName1);</span><br><span class="line">&#125;</span><br><span class="line">if (purchaseName2 != null) &#123;</span><br><span class="line">purchasedItem.add(purchaseName2);</span><br><span class="line">&#125;</span><br><span class="line">Double  price1 = value1 !=null ? value1.getPrice():0.0;</span><br><span class="line">Double  price2 = value2 !=null ? value2.getPrice():0.0;</span><br><span class="line"></span><br><span class="line">return ActionUtil.getNewFace(date1, date2, purchasedItem, price1+price2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现连接"><a href="#实现连接" class="headerlink" title="实现连接"></a>实现连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">public class JoinStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(JoinStream.class);</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">//初次屏蔽处理器</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">//定义谓词,以及选择key键</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//获得分流的集合,并且在之前选择相同的key值</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[]  branchesStream =</span><br><span class="line">PurchaseRecordStream.selectKey((k,v)-&gt; v.getFirstName()+v.getLastName())</span><br><span class="line">.branch(isOne,isTwo);</span><br><span class="line"></span><br><span class="line">// 连接流</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;   stream1 = branchesStream[0];</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;   stream2 = branchesStream[1];</span><br><span class="line">/**</span><br><span class="line"> * 1.设置时间窗口</span><br><span class="line"> * 2.构建连接器</span><br><span class="line"> * 3.调用join产生连接.joined分别代表着key值序列化器,以及2个流value值的序列化器</span><br><span class="line"> */</span><br><span class="line">JoinWindows  f15sWindow = JoinWindows.of(60*1000);</span><br><span class="line">ValueJoiner&lt;PurchaseRecord, PurchaseRecord, CorrelatedPurchase&gt;  joiner = new PurchaseJoiner();</span><br><span class="line">KStream&lt;String, CorrelatedPurchase&gt; joinedKStream = </span><br><span class="line">stream1.join(stream2, joiner,f15sWindow,Joined.with(stringSerde, PurchaseRecordSerde, PurchaseRecordSerde));</span><br><span class="line"></span><br><span class="line">joinedKStream.print(Printed.&lt;String, CorrelatedPurchase&gt;toSysOut().withLabel(&quot;joinedStream&quot;));</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">         * 开起流</span><br><span class="line">         */</span><br><span class="line">    // 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 代码测试</p></blockquote><p>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:18:12 CST 2019, seconDate=Mon Dec 30 11:18:21 CST 2019, purchaseListItem=[小小锅, 小小锅], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:18:45 CST 2019, seconDate=Mon Dec 30 11:18:21 CST 2019, purchaseListItem=[小小锅1, 小小锅], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:19:30 CST 2019, seconDate=Mon Dec 30 11:19:58 CST 2019, purchaseListItem=[榔头, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:19:46 CST 2019, seconDate=Mon Dec 30 11:19:58 CST 2019, purchaseListItem=[打榔头, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:21:12 CST 2019, seconDate=Mon Dec 30 11:20:57 CST 2019, purchaseListItem=[锤子1, 锤子], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:31:31 CST 2019, seconDate=Mon Dec 30 11:31:09 CST 2019, purchaseListItem=[锤子4, 锤子2], totalAmount=40.0]<br>[joinedStream]: 王小十四, CorrelatedPurchase [firstDate=Mon Dec 30 11:31:31 CST 2019, seconDate=Mon Dec 30 11:31:17 CST 2019, purchaseListItem=[锤子4, 锤子3], totalAmount=40.0]</p><p><strong>只要符合交易时间,都会出发对应的链接操作.只要满足连接操作,可用foreachAction或者发送主题信息做对应的逻辑动作</strong></p><h2 id="连接的进阶"><a href="#连接的进阶" class="headerlink" title="连接的进阶"></a>连接的进阶</h2><h3 id="记录的先后顺序"><a href="#记录的先后顺序" class="headerlink" title="记录的先后顺序"></a>记录的先后顺序</h3><p>从上面结果可以看到，数据的时间并没有关注先来后到,只要满足1分钟之内及产生逻辑</p><p>如何要指定顺序:</p><p>需要使用 JoinWindows.after 或者  JoinWindows.before</p><p>分别代表着  streamA.join(streamB)  B的记录时间戳比A的记录时间滞后或者是提前.</p><h3 id="连接的前提首要条件"><a href="#连接的前提首要条件" class="headerlink" title="连接的前提首要条件"></a>连接的前提首要条件</h3><p>在Stream中执行连接操作,必要要保证数据具有相同数量的分区,按键分区且键的类型相同<br>通过selectKey出发了重新分区的要求。这个是被自动处理的.这个动作我们归纳为协同分区</p><h3 id="连接的动作"><a href="#连接的动作" class="headerlink" title="连接的动作"></a>连接的动作</h3><ol><li>join 等同于 innerjoin</li><li>outerJoin 等同于左右连接都满足</li><li>leftJoin  只需要左连接</li></ol><h2 id="kafkaStreams中时间戳"><a href="#kafkaStreams中时间戳" class="headerlink" title="kafkaStreams中时间戳"></a>kafkaStreams中时间戳</h2><p>时间戳的作用有3点:</p><ol><li>连接流</li><li>更新变更日志</li><li>决定方法合适被触发</li></ol><p>时间戳被kafkaStreams分为了三类</p><blockquote><p>事件发生时间</p></blockquote><p>特指事件发生时候的时间,通常设置在内置对象中,当然也可以考虑创建生产者的时间为事件时间</p><blockquote><p>摄取时间</p></blockquote><p>特指数据首次进入数据处理管道时设置的时间戳。可以考虑日志追加时间LogAppendTime作为摄取时间</p><blockquote><p>处理时间</p></blockquote><p>特指数据或者记录首次开始流经处理管道时设置的时间戳。</p><h3 id="处理不同的时间语义"><a href="#处理不同的时间语义" class="headerlink" title="处理不同的时间语义"></a>处理不同的时间语义</h3><ol><li>时间戳提取器 TimeStampExtractor接口</li><li>kafkaStreams自带一个处理时间语义WallclockTimestampExtractor本质是通过调用系统当前时间,以毫秒数返回当前时间</li></ol><h3 id="自定义时间戳"><a href="#自定义时间戳" class="headerlink" title="自定义时间戳"></a>自定义时间戳</h3><blockquote><p>代码示例如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class TransactionTimestampExtractor  implements  TimestampExtractor&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public long extract(ConsumerRecord&lt;Object, Object&gt; record, long previousTimestamp) &#123;</span><br><span class="line">// 获取发到kafka中的数据对象</span><br><span class="line">PurchaseRecord   ptRecord  = (PurchaseRecord) record.value();</span><br><span class="line">//返回数据本省所内置的时间</span><br><span class="line">return ptRecord.getPurchaseDate().getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ol><li>一种是在流程序中统一添加</li></ol><p><code>props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, TransactionTimestampExtractor.class);</code></p><ol start="2"><li>一种是在Consumed中配置</li></ol><p><code>Consumed.with(Serdes.1,Serdes.2).withTimestampExtractor(new TransactionTimestampExtractor());</code></p><h1 id="梳理当前的DAG"><a href="#梳理当前的DAG" class="headerlink" title="梳理当前的DAG"></a>梳理当前的DAG</h1><p><img src="/images/resources/C5116DD7C25D8F0ACE6E6B75C19FD157.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 数据状态 </tag>
            
            <tag> 连接形态 </tag>
            
            <tag> 洞察力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams晋阶之路(数据状态)</title>
      <link href="/2019/12/26/2019-12-26-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E7%8A%B6%E6%80%81)/"/>
      <url>/2019/12/26/2019-12-26-kafkaStream%E6%99%8B%E9%98%B6%E4%B9%8B%E8%B7%AF(%E7%8A%B6%E6%80%81)/</url>
      
        <content type="html"><![CDATA[<p>数据本来平淡无奇,一旦有了思想,数据变成为了有想法的一种境界状态</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>状态在流中的重要性</li><li>状态存储阅读历史,展望未来</li><li>分区一致.数据正确</li><li>状态存储的选择前置条件</li><li>使用状态存储</li><li>代码示例</li></ol><h2 id="状态在流中的重要性"><a href="#状态在流中的重要性" class="headerlink" title="状态在流中的重要性"></a>状态在流中的重要性</h2><ol><li>什么是状态？</li></ol><p>状态是人赋予的主观意识判断。本身数据是无状态的。举个例子:股票的买卖交易，每天的交易买入卖出是一件很正常的事情。<br>比如:9点30分买入1000只股票。10点买入1000只股票。 这个数据流现在无状态的。</p><p><strong>但是如果在10点30分的时候如果该只股票出现了重大利好重组交易,数据从无变为了有状态。而这时候我们的主观意识已经在判断,是否前面这个买卖交易是否正常,这也可以说明这个是我们的价值观</strong></p><ol start="2"><li>流是否需要状态?</li></ol><p>一个事件本身产生的流没有特别的特殊性,但是如果产生一些额外的上下文,那么可能会错过一些关键的机会，甚至于你可能会以全新的视角来看待这个事情.</p><p>很多时候流式处理意味着:彼此之间没有关联。源源不断的数据,当发生时就一定要加以时间处理。而状态的概念可能会产生静态的资源映像,比如对应到数据库中。</p><p>数据流的变化速度往往比数据表更新的更快更频繁。有些情况下,离散的数据已经携带了足够多的数据。但是通常情况下,数据流需要从某类存储的数据来加以丰富。</p><h3 id="将状态操作应用到kafka-Stream中"><a href="#将状态操作应用到kafka-Stream中" class="headerlink" title="将状态操作应用到kafka_Stream中"></a>将状态操作应用到kafka_Stream中</h3><p>在前期的奖励节点中.对于每次客户的消费累计的奖励点数未做任何要求,如果假定现在用户的每一次消费达到一点奖励点数,我们会附上额外的动作,也是将本来不带状态的值，变为有状态的意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line"></span><br><span class="line">private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>转变为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line"></span><br><span class="line">private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    //添加当前这笔消费的奖励点数</span><br><span class="line">    private  int currentRewardPoints;</span><br><span class="line">    //添加最后一次最后购买的时间</span><br><span class="line">    private int daysFromLastPurchase;</span><br><span class="line">    //累计的奖励总点数</span><br><span class="line">    private long totalRewardPoints;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意:设置奖励点的总数代码为:</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void addRewardPoints(int previousTotalPoints) &#123;</span><br><span class="line">    this.totalRewardPoints += previousTotalPoints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态存储阅读历史-展望未来"><a href="#状态存储阅读历史-展望未来" class="headerlink" title="状态存储阅读历史,展望未来"></a>状态存储阅读历史,展望未来</h2><h3 id="如何进行存储"><a href="#如何进行存储" class="headerlink" title="如何进行存储"></a>如何进行存储</h3><ol><li>在kafkaStream中提供了一个基本的有状态的函数 transformvalues()</li><li>提供一个值转换器，转换器接口为ValueTransformer&lt;V,R&gt;,设置状态储存</li></ol><blockquote><p>构建一个值转换器代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseRewardTransformer  implements  ValueTransformer&lt;PurchaseRecord, RewardAccumulator&gt;&#123;</span><br><span class="line">//声明一个状态存储变量</span><br><span class="line">private KeyValueStore&lt;String, Integer&gt;  stateStore;</span><br><span class="line">//声明一个状态存储的名字</span><br><span class="line">private final String storeName;</span><br><span class="line">//声明上下文容器</span><br><span class="line">private ProcessorContext context;</span><br><span class="line"></span><br><span class="line">public PurchaseRewardTransformer(String storeName) &#123;</span><br><span class="line"></span><br><span class="line">this.storeName = storeName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void init(ProcessorContext context) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">this.context  = context;</span><br><span class="line">stateStore = (KeyValueStore&lt;String, Integer&gt;) this.context.getStateStore(storeName);             </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 执行值转换时.会进入到transform方法中</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public RewardAccumulator transform(PurchaseRecord value) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//1. 执行和mapvalues一样的动作</span><br><span class="line">RewardAccumulator  reward = ActionUtil.getReward(value);</span><br><span class="line">System.out.println(reward.hashCode());</span><br><span class="line">//2.使用状态存储总的奖励点数 </span><br><span class="line">   Integer  x = stateStore.get(reward.getCustomerId());</span><br><span class="line">   if (x !=null) &#123;</span><br><span class="line">   System.out.println(&quot;进入条件判断&quot;);</span><br><span class="line">   System.out.println(x);</span><br><span class="line">   int total = x+reward.getCurrentRewardPoints();</span><br><span class="line">   System.out.println(total);</span><br><span class="line">   stateStore.put(reward.getCustomerId(), total);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">stateStore.put(reward.getCustomerId(), (int) reward.getCurrentRewardPoints());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;当前用户&quot;+reward.getCustomerId()+&quot;的奖励点数为&quot;+stateStore.get(reward.getCustomerId()));</span><br><span class="line">System.out.println(&quot;执行相信的逻辑操作&quot;);</span><br><span class="line">return reward;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public RewardAccumulator punctuate(long timestamp) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分区一致-数据正确"><a href="#分区一致-数据正确" class="headerlink" title="分区一致,数据正确"></a>分区一致,数据正确</h2><p><strong><em>在kafkaStreams中在没有指定分区的时候,是按照轮询进行分区。而分区中有着对应的StreamTask.每个Task中有自己不同状态存储.对于上面我们使用存储,有可能客户的交易信息不会在同一个分区中.那么这个时候只有指定到相同的分区进行解决</em></strong></p><h3 id="使用流分区器解决"><a href="#使用流分区器解决" class="headerlink" title="使用流分区器解决"></a>使用流分区器解决</h3><ol><li>通过kafkaStream中的through可以创建一个中间主题,达到无缝分区</li><li>通过自定义分区器,解决数据分配到不同地方的问题</li></ol><blockquote><p>自定义流分区器如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RewardsStreamPartitioner  implements StreamPartitioner&lt;String, PurchaseRecord&gt;&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据用户的姓氏进行匹配对应的分区</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public Integer partition(String key, PurchaseRecord value, int numPartitions) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return value.getFirstName().hashCode()%numPartitions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态存储的选择前置条件"><a href="#状态存储的选择前置条件" class="headerlink" title="状态存储的选择前置条件"></a>状态存储的选择前置条件</h2><ol><li>数据本地化</li><li>故障恢复和容错</li></ol><blockquote><p>数据本地化</p></blockquote><p><strong><em>数据本地化对性能至关重要,通过一个流式程序处理百万级以上的数据,即使很小的网络延迟也会产生巨大的影响</em></strong></p><p>流式程序尽管需要状态但是不是绝对的必要,但是应该设计在本地。应用程序的每个服务器和节点都应该有一个单独的数据存储</p><p>进程和线程之间不共享,即便一个进程失败,但不会影响其它的进程和线程</p><blockquote><p>故障恢复和容错</p></blockquote><p>在kafkaStreams中每个处理器都它的本地存储和一个用于备份状态存储的变更日志主题</p><h2 id="使用状态存储"><a href="#使用状态存储" class="headerlink" title="使用状态存储"></a>使用状态存储</h2><ol><li>kafka添加状态存储使用stores类静态工厂创建storesupplier实例.</li><li>用于定制存储的附加类使用Meterialized(计量类)以及StoreBuilder类,高阶推荐用前者,低阶推荐后者。</li><li>除了本身这2个类之外,还分别提供了persistentKeyValueStore和lruMap,persistentWindowStore,persistentSeesionStore</li></ol><h3 id="状态存储容错以及改变日志主题"><a href="#状态存储容错以及改变日志主题" class="headerlink" title="状态存储容错以及改变日志主题"></a>状态存储容错以及改变日志主题</h3><blockquote><p>状态存储容错</p></blockquote><ol><li>所有的stateStoreSupplier默认都启用了日志,日志即是一个主题,该主题的作用是变更日志用来被封存储中的值,提供容错</li></ol><blockquote><p>配置变更日志主题</p></blockquote><ol><li>用于状态的变更日志采用压缩策略的主题.可以使用withLoggingEnabled进行配置</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>注意:重写奖励类的equals方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">public class StoreStream &#123;</span><br><span class="line"> private static final Logger LOG = LoggerFactory.getLogger(StoreStream.class);</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;Store-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">JsonSerializer&lt;RewardAccumulator&gt; rs = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;RewardAccumulator&gt; rds = new JsonDeserializer&lt;&gt;(RewardAccumulator.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">Serde&lt;RewardAccumulator&gt; RewardAccumulatorSerde = Serdes.serdeFrom(rs, rds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 加入状态处理器</span><br><span class="line">     */</span><br><span class="line">//状态名字</span><br><span class="line">String rewardsStateStoreName = &quot;rewardsPointsStore&quot;;</span><br><span class="line">//指定分区规则,集群环境下</span><br><span class="line">RewardsStreamPartitioner streamPartitioner = new RewardsStreamPartitioner();</span><br><span class="line">//选择存储状态的类型</span><br><span class="line">KeyValueBytesStoreSupplier storeSupplier = Stores.inMemoryKeyValueStore(rewardsStateStoreName);</span><br><span class="line">        StoreBuilder&lt;KeyValueStore&lt;String, Integer&gt;&gt; storeBuilder = Stores.keyValueStoreBuilder(storeSupplier, Serdes.String(), Serdes.Integer());</span><br><span class="line">        /**</span><br><span class="line">         * storeBuilder.withLoggingEnabled(config)  可以使用该方法进行日志主题的配置</span><br><span class="line">         */</span><br><span class="line">        //添加到拓扑中</span><br><span class="line">        streamsBuilder.addStateStore(storeBuilder);</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 将原本的流设计重新分区的方式,通过产生一个中间主题进行操作</span><br><span class="line">         * 因为现在只有一个分区。故不配置分区</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //KStream&lt;String, PurchaseRecord&gt; transByCustomerStream = PurchaseRecordStream.through( &quot;customer_transactions&quot;, Produced.with(stringSerde, PurchaseRecordSerde, streamPartitioner));</span><br><span class="line">        KStream&lt;String, PurchaseRecord&gt; transByCustomerStream = PurchaseRecordStream.through( &quot;customer_transactions&quot;, Produced.with(stringSerde, PurchaseRecordSerde));</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 转换为有状态的流</span><br><span class="line">         */</span><br><span class="line">        KStream&lt;String, RewardAccumulator&gt; statefulRewardAccumulator = transByCustomerStream.transformValues(() -&gt;  new PurchaseRewardTransformer(rewardsStateStoreName),</span><br><span class="line">                rewardsStateStoreName);</span><br><span class="line"></span><br><span class="line">        statefulRewardAccumulator.print(Printed.&lt;String, RewardAccumulator&gt;toSysOut().withLabel(&quot;rewards&quot;));</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 开起流</span><br><span class="line">         */</span><br><span class="line">    // 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码测试观察结果</p></blockquote><ol><li>启动zookeeper</li><li>启动kafka</li><li>启动流</li><li>模拟数据</li></ol><blockquote><p>数据结果如下:（包含服务器断掉重连,依旧保持先前的记录）</p></blockquote><p><img src="/images/resources/E86DFC6F43B455C49C75A323F6845BEA.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 数据状态 </tag>
            
            <tag> 主观意识形态 </tag>
            
            <tag> 数据形态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams(3-4)</title>
      <link href="/2019/12/16/2019-12-16-%E5%BC%80%E5%8F%91kafka_Stream(3-4)/"/>
      <url>/2019/12/16/2019-12-16-%E5%BC%80%E5%8F%91kafka_Stream(3-4)/</url>
      
        <content type="html"><![CDATA[<p>kafka实时计算出版效果.</p><h1 id="springboot结合kafkaStream流推送消息Echart图形展示-3-4"><a href="#springboot结合kafkaStream流推送消息Echart图形展示-3-4" class="headerlink" title="springboot结合kafkaStream流推送消息Echart图形展示(3-4)"></a>springboot结合kafkaStream流推送消息Echart图形展示(3-4)</h1><ol><li>实现要求(学生名字,学生年龄,班级) (班级多少人,年龄分布人数,实时)</li><li>构建流式程序2个步骤(一个处理统计班级人数,一个统计年龄分布人数)</li><li>从studentMsg主题源获取数据,通过2个处理器处理输出到classCount和ageCount主题源中</li><li>Echarts采取使用南丁玫瑰图</li><li>存放数据采取使用ConcurrentSkipListMap&lt;&gt;();</li></ol><h2 id="构建DAG图"><a href="#构建DAG图" class="headerlink" title="构建DAG图"></a>构建DAG图</h2><p><img src="/images/resources/ABF98E88D5B754798D81B2A3E80E22E8.jpg" alt="IMAGE"></p><h2 id="构建一个普通的maven项目"><a href="#构建一个普通的maven项目" class="headerlink" title="构建一个普通的maven项目"></a>构建一个普通的maven项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h2><blockquote><p>在producer中随机录入数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function randomData()&#123;</span><br><span class="line">var x = 100;</span><br><span class="line">    var y = 0;</span><br><span class="line">    var z = 10;</span><br><span class="line">    var studentAge = (parseInt(Math.random() * (x - y + 1) + y)).toString();</span><br><span class="line">    var studentClassNo = &quot;00&quot;+parseInt(Math.random() * (z - y + 1) + z);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:&apos;$&#123;pageContext.request.contextPath&#125;/mock&apos;,</span><br><span class="line">type:&apos;post&apos;,</span><br><span class="line">dataType:&apos;json&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">studentName:&apos;小小王&apos;,</span><br><span class="line">studentAge:studentAge,</span><br><span class="line">studentClassNo:studentClassNo</span><br><span class="line">&#125;,</span><br><span class="line">success:function(resp)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  t = setInterval(&quot;randomData()&quot;, 1000);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="构建一个模块编写流式程序"><a href="#构建一个模块编写流式程序" class="headerlink" title="构建一个模块编写流式程序"></a>构建一个模块编写流式程序</h2><ol><li>项目结构</li><li>构建必要的序列化器</li><li>创建流式程序选择必要的序列器</li><li>流式程序设置必要的序列器</li></ol><blockquote><p>项目结构</p></blockquote><p><img src="/images/resources/16B7786B14984F744BD9C8B7EF5FA432.jpg" alt="IMAGE"></p><blockquote><p>必要的序列化器代码</p></blockquote><p>序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class StudentSer implements Closeable, AutoCloseable, Serializer&lt;Student&gt;&#123;</span><br><span class="line"></span><br><span class="line"> private static final Charset CHARSET = Charset.forName(&quot;UTF-8&quot;);</span><br><span class="line">    static private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public byte[] serialize(String s, Student person) &#123;</span><br><span class="line">        // Transform the Person object to String</span><br><span class="line">        String line = gson.toJson(person);</span><br><span class="line">        // Return the bytes from the String &apos;line&apos;</span><br><span class="line">        return line.getBytes(CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class StudentDser implements Closeable, AutoCloseable, Deserializer&lt;Student&gt;  &#123;</span><br><span class="line"></span><br><span class="line">private static final Charset CHARSET = Charset.forName(&quot;UTF-8&quot;);</span><br><span class="line">    static private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; map, boolean b) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Student deserialize(String topic, byte[] bytes) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // Transform the bytes to String</span><br><span class="line">            String student = new String(bytes, CHARSET);</span><br><span class="line">            // Return the Person object created from the String &apos;person&apos;</span><br><span class="line">            return gson.fromJson(student, Student.class);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Error reading bytes&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>序列化组合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class StudentSerde implements Serde&lt;Student&gt;&#123;</span><br><span class="line">private StudentSer serializer = new StudentSer();</span><br><span class="line">    private StudentDser deserializer = new StudentDser();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">        serializer.configure(configs, isKey);</span><br><span class="line">        deserializer.configure(configs, isKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line">        serializer.close();</span><br><span class="line">        deserializer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Serializer&lt;Student&gt; serializer() &#123;</span><br><span class="line">        return serializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Deserializer&lt;Student&gt; deserializer() &#123;</span><br><span class="line">        return deserializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流式计算程序代码"><a href="#流式计算程序代码" class="headerlink" title="流式计算程序代码"></a>流式计算程序代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public class ClassCountStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(ClassCountStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;Count-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, &quot;exactly_once&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        // Here we set the Seder for the values that we are going to process.</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, StudentSerde.class);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line">// 加载配置</span><br><span class="line">  StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">Serde&lt;Long&gt;  longSerde = Serdes.Long();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">/**</span><br><span class="line"> * 统计班级人数</span><br><span class="line"> */</span><br><span class="line">// 声明键值</span><br><span class="line">// 声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">//根据班级进行人数归类</span><br><span class="line">KeyValueMapper&lt;String, Student, String&gt; classKey0 = (key, student) -&gt; student.getStudentClassNo();</span><br><span class="line">KStream&lt;String, Student&gt; ClassCountStream = streamsBuilder.stream(&quot;studentMsg&quot;);</span><br><span class="line">KTable&lt;String, Long&gt;  ClassCounTable = ClassCountStream.selectKey(classKey0)</span><br><span class="line">.groupByKey()</span><br><span class="line">.count();</span><br><span class="line"></span><br><span class="line">//根据年龄筛选20-25岁的人均分布</span><br><span class="line">KeyValueMapper&lt;String, Student, String&gt; classKey1 = (key, student) -&gt; student.getStudentAge();</span><br><span class="line">KStream&lt;String, Student&gt; AgeCountStream = ClassCountStream;</span><br><span class="line">KTable&lt;String, Long&gt;     AgeCountTable = AgeCountStream.filter((key,student) -&gt; Integer.parseInt(student.getStudentAge()) &gt; 0)</span><br><span class="line">.selectKey(classKey1)</span><br><span class="line">.groupByKey()</span><br><span class="line">.count();</span><br><span class="line"></span><br><span class="line"> ClassCounTable.toStream().to(&quot;classCount&quot;, Produced.with(stringSerde, longSerde));</span><br><span class="line"> AgeCountTable.toStream().to(&quot;ageCount&quot;, Produced.with(stringSerde, longSerde));</span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>启动zookeeper</li><li>启动kafka</li><li>启动计算程序</li><li>启动消费者  (消费者序列化分别为String和Long)</li><li>启动生产者</li></ol><h2 id="通过websocket推送至前台"><a href="#通过websocket推送至前台" class="headerlink" title="通过websocket推送至前台"></a>通过websocket推送至前台</h2><ol><li>推送详见前期代码</li><li>消费监听数据源需要更改value值,以及去重判断</li></ol><blockquote><p>消费者代码如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KafkaConsumer &#123;</span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KafkaConsumer.class);</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Long&gt; rs2 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Object&gt; rs3 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static List&lt;ClassMsg&gt; rs = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Object&gt; rs6 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static ConcurrentSkipListMap&lt;String, Long&gt; rs4 = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">private static List&lt;String&gt; rs001 =new ArrayList&lt;&gt;();</span><br><span class="line">private static List&lt;Long&gt; rs002 = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">//@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">//public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">//System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">//try &#123;</span><br><span class="line">//WebSocketServer.sendInfo(record.value().toString(),&quot;all&quot;);</span><br><span class="line">//&#125; catch (IOException e) &#123;</span><br><span class="line">//// TODO Auto-generated catch block</span><br><span class="line">//e.printStackTrace();</span><br><span class="line">//&#125;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123; &quot;classCount&quot; &#125;)</span><br><span class="line">public void receiveClassCount(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">String classname = &quot;班级&quot; + record.key();</span><br><span class="line">Long classCountLong = (Long) record.value();</span><br><span class="line">rs2.put(classname, classCountLong);</span><br><span class="line">rs3.put(&quot;dataType&quot;, 1);</span><br><span class="line">rs3.put(&quot;data1&quot;, rs2.keySet());</span><br><span class="line">Set&lt;Map.Entry&lt;String, Long&gt;&gt; entryseSet = rs2.entrySet();</span><br><span class="line">for (Map.Entry&lt;String, Long&gt; entry : entryseSet) &#123;</span><br><span class="line">ClassMsg cms = new ClassMsg();</span><br><span class="line">cms.setName(entry.getKey());</span><br><span class="line">cms.setValue(entry.getValue());</span><br><span class="line">if (!rs.contains(cms)) &#123;</span><br><span class="line">rs.add(cms);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">rs.get(rs.indexOf(cms)).setValue(cms.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs3.put(&quot;data2&quot;, rs);</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(JSON.toJSONString(rs3), &quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123; &quot;ageCount&quot; &#125;)</span><br><span class="line">public void receiveClassCount1(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">rs001.clear();</span><br><span class="line">rs002.clear();</span><br><span class="line">String agename = &quot;年龄&quot; + record.key();</span><br><span class="line">Long classCountLong = (Long) record.value();</span><br><span class="line">rs6.put(&quot;dataType&quot;, 2);</span><br><span class="line">rs4.put(agename,classCountLong);</span><br><span class="line">Set&lt;Map.Entry&lt;String, Long&gt;&gt; entryseSet = rs4.entrySet();</span><br><span class="line">for (Map.Entry&lt;String, Long&gt; entry : entryseSet) &#123;</span><br><span class="line">rs001.add(entry.getKey());</span><br><span class="line">rs002.add(entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">rs6.put(&quot;data1&quot;,rs001 );</span><br><span class="line">rs6.put(&quot;data2&quot;, rs002);</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(JSON.toJSONString(rs6), &quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最终结果如下：</p></blockquote><p><img src="/images/resources/demo.gif" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> webscoket推送 </tag>
            
            <tag> 群发消息 </tag>
            
            <tag> 图形实时展示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams(3-3)</title>
      <link href="/2019/12/06/2019-12-06-%E5%BC%80%E5%8F%91kafka_Stream(3-3)/"/>
      <url>/2019/12/06/2019-12-06-%E5%BC%80%E5%8F%91kafka_Stream(3-3)/</url>
      
        <content type="html"><![CDATA[<p>推送是必不可少的一个环节。做好推送,即将进入实时计算的体系中。</p><h1 id="springboot整合websocket推送数据消息"><a href="#springboot整合websocket推送数据消息" class="headerlink" title="springboot整合websocket推送数据消息"></a>springboot整合websocket推送数据消息</h1><ol><li>整合websocket</li><li>结合3-2进行消息的推送</li></ol><h2 id="springboot整合websocket"><a href="#springboot整合websocket" class="headerlink" title="springboot整合websocket"></a>springboot整合websocket</h2><blockquote><p>1.添加依赖文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>实例化websockt提供的对象</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebSocketConfig &#123;</span><br><span class="line">    @Bean  </span><br><span class="line">    public ServerEndpointExporter serverEndpointExporter() &#123;  </span><br><span class="line">        return new ServerEndpointExporter();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.构建服务端对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.websocket;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line">import javax.websocket.OnClose;</span><br><span class="line">import javax.websocket.OnError;</span><br><span class="line">import javax.websocket.OnMessage;</span><br><span class="line">import javax.websocket.OnOpen;</span><br><span class="line">import javax.websocket.Session;</span><br><span class="line">import javax.websocket.server.PathParam;</span><br><span class="line">import javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.wwj.consumer.action.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">@ServerEndpoint(&quot;/websocket/&#123;sid&#125;&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class WebSocketServer &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LogManager.getLogger(WebSocketServer.class);</span><br><span class="line">    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span><br><span class="line">    private static int onlineCount = 0;</span><br><span class="line">    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span><br><span class="line">    private static CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = new CopyOnWriteArraySet&lt;WebSocketServer&gt;();</span><br><span class="line"></span><br><span class="line">    //与某个客户端的连接会话，需要通过它来给客户端发送数据</span><br><span class="line">    private Session session;</span><br><span class="line"></span><br><span class="line">    //接收sid</span><br><span class="line">    private String sid=&quot;&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * 连接建立成功调用的方法*/</span><br><span class="line">    @OnOpen</span><br><span class="line">    public void onOpen(Session session,@PathParam(&quot;sid&quot;) String sid) &#123;</span><br><span class="line">        this.session = session;</span><br><span class="line">        webSocketSet.add(this);     //加入set中</span><br><span class="line">        addOnlineCount();           //在线数加1</span><br><span class="line">        LOG.info(&quot;有新窗口开始监听:&quot;+sid+&quot;,当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">        this.sid=sid;</span><br><span class="line">        try &#123;</span><br><span class="line">         sendMessage(&quot;连接成功&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.error(&quot;websocket IO异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接关闭调用的方法</span><br><span class="line">     */</span><br><span class="line">    @OnClose</span><br><span class="line">    public void onClose() &#123;</span><br><span class="line">        webSocketSet.remove(this);  //从set中删除</span><br><span class="line">        subOnlineCount();           //在线数减1</span><br><span class="line">        LOG.info(&quot;有一连接关闭！当前在线人数为&quot; + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收到客户端消息后调用的方法</span><br><span class="line">     *</span><br><span class="line">     * @param message 客户端发送过来的消息*/</span><br><span class="line">    @OnMessage</span><br><span class="line">    public void onMessage(String message, Session session) &#123;</span><br><span class="line">    LOG.info(&quot;收到来自窗口&quot;+sid+&quot;的信息:&quot;+message);</span><br><span class="line">        //群发消息</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param session</span><br><span class="line"> * @param error</span><br><span class="line"> */</span><br><span class="line">    @OnError</span><br><span class="line">    public void onError(Session session, Throwable error) &#123;</span><br><span class="line">    LOG.error(&quot;发生错误&quot;);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">/**</span><br><span class="line"> * 实现服务器主动推送</span><br><span class="line"> */</span><br><span class="line">    public void sendMessage(String message) throws IOException &#123;</span><br><span class="line">        this.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 群发自定义消息</span><br><span class="line">     * */</span><br><span class="line">    public static void sendInfo(String message,@PathParam(&quot;sid&quot;) String sid) throws IOException &#123;</span><br><span class="line">    LOG.info(&quot;推送消息到窗口&quot;+sid+&quot;，推送内容:&quot;+message);</span><br><span class="line">        for (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">            //这里可以设定只推送给这个sid的，为null则全部推送</span><br><span class="line">            if(sid==null) &#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;else if(item.sid.equals(sid))&#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized int getOnlineCount() &#123;</span><br><span class="line">        return onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void addOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized void subOnlineCount() &#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加入jsp支持,构建controlle,先跳转到需要建立连接的页面</p></blockquote><p>建立连接页面代码示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line"> var socket;  </span><br><span class="line">    if(typeof(WebSocket) == &quot;undefined&quot;) &#123;  </span><br><span class="line">        console.log(&quot;您的浏览器不支持WebSocket&quot;);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        console.log(&quot;您的浏览器支持WebSocket&quot;);  </span><br><span class="line">        //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  </span><br><span class="line">            //等同于socket = new WebSocket(&quot;ws://localhost:8083/checkcentersys/websocket/20&quot;);  </span><br><span class="line">            socket = new WebSocket(&quot;ws://localhost:10888/websocket/20&quot;);  </span><br><span class="line">            //打开事件  </span><br><span class="line">            socket.onopen = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket 已打开&quot;);  </span><br><span class="line">                //socket.send(&quot;这是来自客户端的消息&quot; + location.href + new Date());  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //获得消息事件  </span><br><span class="line">            socket.onmessage = function(msg) &#123;  </span><br><span class="line">                console.log(msg.data);  </span><br><span class="line">                //发现消息进入    开始处理前端触发逻辑</span><br><span class="line">            &#125;;  </span><br><span class="line">            //关闭事件  </span><br><span class="line">            socket.onclose = function() &#123;  </span><br><span class="line">                console.log(&quot;Socket已关闭&quot;);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            //发生了错误事件  </span><br><span class="line">            socket.onerror = function() &#123;  </span><br><span class="line">                alert(&quot;Socket发生了错误&quot;);  </span><br><span class="line">                //此时可以尝试刷新页面</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">我是首页</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong><em>测试通过</em></strong></p><h2 id="结合3-2进行消息的推送"><a href="#结合3-2进行消息的推送" class="headerlink" title="结合3-2进行消息的推送"></a>结合3-2进行消息的推送</h2><ol><li>写一个api进行消息推送</li><li>实验kafka接收到消息后进行推送</li></ol><h3 id="写一个restController"><a href="#写一个restController" class="headerlink" title="写一个restController"></a>写一个restController</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class PushController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/socket/push/&#123;cid&#125;&quot;)</span><br><span class="line">public void pushToWeb(@PathVariable String cid,String message) &#123;  </span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(message,cid);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>*如图所示,统一接收到推送消息</strong></p><p><img src="/images/resources/E347103244A1C7F9FA0B07FB4F6ED096.jpg" alt="IMAGE"></p><h3 id="消费者接收到消息后-调用发送消息"><a href="#消费者接收到消息后-调用发送消息" class="headerlink" title="消费者接收到消息后,调用发送消息"></a>消费者接收到消息后,调用发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">try &#123;</span><br><span class="line">WebSocketServer.sendInfo(record.value.toString(),&quot;all&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/4A43B37A99094065B179770AF9CA753D.jpg" alt="IMAGE"></p><p><strong><em>代码均已测试</em></strong></p><p><strong><em>单机单例未见zookeeper和kafka出现异常</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> webscoket推送 </tag>
            
            <tag> 群发消息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams(3-2)</title>
      <link href="/2019/12/05/2019-12-05-%E5%BC%80%E5%8F%91kafka_Stream(3-2)/"/>
      <url>/2019/12/05/2019-12-05-%E5%BC%80%E5%8F%91kafka_Stream(3-2)/</url>
      
        <content type="html"><![CDATA[<p>第一步必不可少,理解熟练是必要!</p><h1 id="springboot整合kafka发送自定义消息序列"><a href="#springboot整合kafka发送自定义消息序列" class="headerlink" title="springboot整合kafka发送自定义消息序列"></a>springboot整合kafka发送自定义消息序列</h1><ol><li>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</li><li>构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者</li><li>使用spring提供的kafka对象编写生产者和消费者代码</li><li>模拟数据测试代码</li><li>操作步骤</li></ol><h2 id="结合分层构建的springboot项目-分别构建生产者模块和消费者模块"><a href="#结合分层构建的springboot项目-分别构建生产者模块和消费者模块" class="headerlink" title="结合分层构建的springboot项目,分别构建生产者模块和消费者模块"></a>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</h2><p>图示:如下</p><p><img src="/images/resources/5586430F8F32CD2B4B00D8E66D023F95.jpg" alt="IMAGE"></p><p>结合分层构建的springboot项目,分别构建生产者模块和消费者模块</p><blockquote><p>父类引入新的依赖文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--kafka依赖配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--fastjson依赖配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2.4&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 在2个模块中构建启动文件以及设置不同的端口和log4j2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//在pom.xml中指定启动文件</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.producer.WebApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><p>启动文件示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &quot;com.wwj&quot;)</span><br><span class="line">public class WebApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(WebApplication.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意:appliacation.yml文件和log4j2文件请参照前面3-1中配置按需所取</em></strong></p><h2 id="构建自定的数据模型-使用jsonObject进行数据的转换-并配置kafka生产者和消费者"><a href="#构建自定的数据模型-使用jsonObject进行数据的转换-并配置kafka生产者和消费者" class="headerlink" title="构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者"></a>构建自定的数据模型(使用jsonObject进行数据的转换)并配置kafka生产者和消费者</h2><p><strong><em>前面提到过,kafka在发送消息的时候需要进行序列化操作,把对象转换字节的,在接收消息的时候需要将字节反序列化成对象,除此之外在kafka中需要按照2个接口进行序列化对象的实现</em></strong></p><blockquote><p>在pojo模块中构建序列化器以及数据模型</p></blockquote><p>1.模型类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">private String  studentName;</span><br><span class="line">private String  studentAge;</span><br><span class="line">private String  studentClassNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.序列化器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class JsonSerializer   implements  Serializer&lt;JSONObject&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, JSONObject data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return JSON.toJSONBytes(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class JsonDeserializer  implements  Deserializer&lt;JSONObject&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public JSONObject deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return JSON.parseObject(data, JSONObject.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置生产者和消费者并引入模型和序列化器(基本配置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#生产者</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">    producer:</span><br><span class="line">      key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">      value-serializer: com.wwj.util.JsonSerializer</span><br><span class="line">      batch-size: 65536</span><br><span class="line">      buffer-memory: 524288</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#消费者</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: 0</span><br><span class="line">      enable-auto-commit: true</span><br><span class="line">      auto-commit-interval: 1000</span><br><span class="line">      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">      value-deserializer: com.wwj.util.JsonDeserializer</span><br></pre></td></tr></table></figure><h2 id="使用spring提供的kafka对象编写生产者和消费者代码"><a href="#使用spring提供的kafka对象编写生产者和消费者代码" class="headerlink" title="使用spring提供的kafka对象编写生产者和消费者代码"></a>使用spring提供的kafka对象编写生产者和消费者代码</h2><blockquote><p>生产者代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KfkaProducer &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KfkaProducer.class);</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  KafkaTemplate&lt;String,JSONObject&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">public void sendMsg(String topic,JSONObject msg) &#123;</span><br><span class="line">ListenableFuture&lt;SendResult&lt;String, JSONObject&gt;&gt; future = kafkaTemplate.send(topic, msg);</span><br><span class="line">future.addCallback(new  SuccessCallback&lt;Object&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onSuccess(Object result) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">LOG.info(&quot;消息发送成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,new FailureCallback() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onFailure(Throwable ex) &#123;</span><br><span class="line">LOG.info(&quot;消息发送失败&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class KafkaConsumer &#123;</span><br><span class="line">private static final Logger LOG = LogManager.getLogger(KafkaConsumer.class);</span><br><span class="line"></span><br><span class="line">@KafkaListener(topics = &#123;&quot;studentMsg&quot;&#125;)</span><br><span class="line">public void receiveDate(ConsumerRecord&lt;?, ?&gt; record) &#123;</span><br><span class="line">System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟数据测试代码"><a href="#模拟数据测试代码" class="headerlink" title="模拟数据测试代码"></a>模拟数据测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class MockController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private  KfkaProducer  producer;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;mock&quot;)</span><br><span class="line">public void sendMock() &#123;</span><br><span class="line">Student  student =  new Student();</span><br><span class="line">student.setStudentName(&quot;小王&quot;);</span><br><span class="line">student.setStudentClassNo(&quot;001&quot;);</span><br><span class="line">student.setStudentAge(&quot;32&quot;);</span><br><span class="line">producer.sendMsg(&quot;studentMsg&quot;,(JSONObject)JSONObject.toJSON(student));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>启动zookeeper</li><li>启动kafka</li><li>创建主题(studentMsg)</li><li>启动消费者</li><li>启动生产者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topic = studentMsg, offset = 0, value = &#123;&quot;studentAge&quot;:&quot;32&quot;,&quot;studentClassNo&quot;:&quot;001&quot;,&quot;studentName&quot;:&quot;小王&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/715327AF7804A32EC11127418DCD4CE5.jpg" alt="IMAGE"></p><p>Ok!代码通过测试</p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 自定义数据序列化传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams(3-1)</title>
      <link href="/2019/12/04/2019-12-04-%E5%BC%80%E5%8F%91Kafka_Stream(3-1)/"/>
      <url>/2019/12/04/2019-12-04-%E5%BC%80%E5%8F%91Kafka_Stream(3-1)/</url>
      
        <content type="html"><![CDATA[<p>前期先利用springboot整合热身,不是什么坏事情。</p><h1 id="kafkaStream流式计算版本实现1-0"><a href="#kafkaStream流式计算版本实现1-0" class="headerlink" title="kafkaStream流式计算版本实现1.0"></a>kafkaStream流式计算版本实现1.0</h1><ol><li>springboot分模块整合(3-1)</li><li>springboot整合kafka发送自定义消息序列(3-2)</li><li>springboot整合websocket推送数据消息(3-3)</li><li>springboot结合kafkaStream流推送消息Echart图形展示(3-4)</li></ol><h2 id="springboot分模块整合"><a href="#springboot分模块整合" class="headerlink" title="springboot分模块整合"></a>springboot分模块整合</h2><ol><li>先更新下eclipse</li><li>可在<a href="https://spring.io/tools3/sts/all" target="_blank" rel="noopener">springboot插件下载</a>进行对应版本的eclipse下载</li><li>构建springboot项目</li></ol><p>目录结构如下:</p><p><img src="/images/resources/64012647E02BB4C9E8FDB144CEA89EC6.jpg" alt="IMAGE"></p><h3 id="搭建springboot并整合"><a href="#搭建springboot并整合" class="headerlink" title="搭建springboot并整合"></a>搭建springboot并整合</h3><p><strong>注意事项:</strong></p><ol><li>勾选需要的技术内容(mysql+web+mybatis)</li><li>分层结构</li><li>采用yml方式进行配置可能需要安装yml插件</li></ol><blockquote><p> 使用easyui</p></blockquote><p><strong><em>注意事项:</em></strong></p><ol><li>配置jsp支持</li><li>添加静态资源文件</li><li>引入对应的所需文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置支持jsp页面 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">          &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/37ED589AE4C2730AC283B47FF490B744.jpg" alt="IMAGE"></p><p><img src="/images/resources/58FCDE7336F2DBD1552C5B387A76973B.jpg" alt="IMAGE"></p><p>直接引入static下的文件如下<code>&lt;script type=&quot;text/javascript&quot; src=&quot;/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><blockquote><p> 使用druid数据源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- druid数据池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>yml展示请参照全文展示</em></strong></p><p><code>通过访问ip+端口/druid——即可进入druid控制台</code></p><blockquote><p> 使用分页插件和mybatis</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>yml展示请参照全文展示</em></strong></p><blockquote><p> 使用log4j2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>简单的lo4j2.xml配置文件如下</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- 文件输出格式 --&gt;</span><br><span class="line">        &lt;property name=&quot;PATTERN&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; |-%-5level [%thread] %c [%L] -| %msg%n&lt;/property&gt;</span><br><span class="line">        &lt;Property name=&quot;instance&quot;&gt;spring-boot-log4j2-log&lt;/Property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;CONSOLE&quot; target=&quot;system_out&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;$&#123;PATTERN&#125;&quot;/&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;!-- root logger 配置 --&gt;</span><br><span class="line">        &lt;root level=&quot;info&quot;&gt;</span><br><span class="line">            &lt;appenderref ref=&quot;CONSOLE&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/loggers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 使用swagger2文档生成</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong><em>通过设置初始化信息</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.wwj.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @Description: 构建 api文档的信息</span><br><span class="line">     */</span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                // 设置页面标题</span><br><span class="line">                .title(&quot;使用swagger2构建api接口文档&quot;)</span><br><span class="line">                // 描述</span><br><span class="line">                .description(&quot;欢迎访问接口文档，这里是描述信息&quot;)</span><br><span class="line">                // 定义版本号</span><br><span class="line">                .version(&quot;1.0&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心控制文件展示"><a href="#核心控制文件展示" class="headerlink" title="核心控制文件展示"></a>核心控制文件展示</h2><blockquote><p>根节点pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;KafkaFather&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;KafkaFather&lt;/name&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;description&gt;kafkaDemo2&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- log4j. --&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- druid数据池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 设置支持jsp页面 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- swagger2 配置 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;service&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pojo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module&gt;pojo&lt;/module&gt;</span><br><span class="line">&lt;module&gt;mapper&lt;/module&gt;</span><br><span class="line">&lt;module&gt;service&lt;/module&gt;</span><br><span class="line">&lt;module&gt;web&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>web节点pom.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;KafkaFather&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line">  &lt;artifactId&gt;web&lt;/artifactId&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;service&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.web.WebApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其余节点之间相互依赖管理</p></blockquote><blockquote><p>关键文件（启动文件以及application.yml文件）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &quot;com.wwj&quot;)</span><br><span class="line">@MapperScan(basePackages = &quot;com.wwj.mapper&quot;)</span><br><span class="line">public class WebApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(WebApplication.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#端口号</span><br><span class="line">server:</span><br><span class="line">  port: 10086</span><br><span class="line">#配置druid数据源</span><br><span class="line">spring:</span><br><span class="line">  mvc:  </span><br><span class="line">        view:  </span><br><span class="line">            prefix: /WEB-INF/views/  </span><br><span class="line">            suffix: .jsp</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/crmpro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    druid:</span><br><span class="line">      #初始化大小</span><br><span class="line">      initialSize: 5</span><br><span class="line">      #最小值</span><br><span class="line">      minIdle: 5</span><br><span class="line">      #最大值</span><br><span class="line">      maxActive: 20</span><br><span class="line">      #最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms</span><br><span class="line">      maxWait: 60000</span><br><span class="line">      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span><br><span class="line">      timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">      #配置一个连接在池中最小生存的时间</span><br><span class="line">      minEvictableIdleTimeMillis: 300000</span><br><span class="line">      validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">      testWhileIdle: true</span><br><span class="line">      testOnBorrow: false</span><br><span class="line">      testOnReturn: false</span><br><span class="line">      poolPreparedStatements: true</span><br><span class="line">      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，</span><br><span class="line">      #&apos;wall&apos;用于防火墙，SpringBoot中没有log4j，我改成了log4j2</span><br><span class="line">      filters: stat,wall,log4j2</span><br><span class="line">      #最大PSCache连接</span><br><span class="line">      maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">      useGlobalDataSourceStat: true</span><br><span class="line">      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line">      # 配置StatFilter</span><br><span class="line">      web-stat-filter:</span><br><span class="line">        #默认为false，设置为true启动</span><br><span class="line">        enabled: true</span><br><span class="line">        url-pattern: &quot;/*&quot;</span><br><span class="line">        exclusions: &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br><span class="line">      #配置StatViewServlet</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        url-pattern: &quot;/druid/*&quot;</span><br><span class="line">        #允许那些ip</span><br><span class="line">        allow: 127.0.0.1</span><br><span class="line">        login-username: admin</span><br><span class="line">        login-password: 123456</span><br><span class="line">        #禁止那些ip</span><br><span class="line">        deny: 192.168.1.102</span><br><span class="line">        #是否可以重置</span><br><span class="line">        reset-enable: true</span><br><span class="line">        #启用</span><br><span class="line">        enabled: true</span><br><span class="line">#设置mybatis</span><br><span class="line">mybatis:</span><br><span class="line">  #mapper.xml所在位置</span><br><span class="line">  mapper-locations: classpath*:Mapper/*.xml</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">#设置pagehelper</span><br><span class="line">pagehelper:</span><br><span class="line">    helperDialect: mysql</span><br><span class="line">    reasonable: true</span><br><span class="line">    supportMethodsArguments: true</span><br><span class="line">    params: count=countSql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> springboot分模块整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams2</title>
      <link href="/2019/12/02/2019-12-02-%E5%BC%80%E5%8F%91kafka_Streams2/"/>
      <url>/2019/12/02/2019-12-02-%E5%BC%80%E5%8F%91kafka_Streams2/</url>
      
        <content type="html"><![CDATA[<p>熟知kafka提供的高级算子,以及熟练使用我们常用的算子是不可或缺的操作。</p><h1 id="模拟数据进行流拓扑的设计"><a href="#模拟数据进行流拓扑的设计" class="headerlink" title="模拟数据进行流拓扑的设计"></a>模拟数据进行流拓扑的设计</h1><ol><li>根据一个模拟的购物数据进行流的设计</li><li>设计规则以及如何将流切分为多个流(再分流)</li></ol><h2 id="根据一个模拟的购物数据进行流的设计"><a href="#根据一个模拟的购物数据进行流的设计" class="headerlink" title="根据一个模拟的购物数据进行流的设计"></a>根据一个模拟的购物数据进行流的设计</h2><p><img src="/images/resources/DD971F533A1FB5464156F24B5713DC14.jpg" alt="IMAGE"></p><ol><li>通过屏蔽处理器处理屏蔽卡号问题</li><li>提取购买的物品以及邮编,确定购买模式</li><li>获取会员号,以及金额.根据金额确定奖励</li><li>获取所有完成的数据,以备后续进行特定的分析</li></ol><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><blockquote><p>1.模拟数据对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseRecord &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户姓名</span><br><span class="line">     */</span><br><span class="line">private String firstName;</span><br><span class="line">private String lastName;</span><br><span class="line">//用户信用卡编号</span><br><span class="line">private String creditCardNumber;</span><br><span class="line">//用户购买物品</span><br><span class="line">    private String itemPurchased;</span><br><span class="line">    //购物物品数量</span><br><span class="line">    private int  quantity;</span><br><span class="line">    //物品单价</span><br><span class="line">    private double price;</span><br><span class="line">    //购买日期</span><br><span class="line">    private  Date  purchaseDate;</span><br><span class="line">    //用户会员卡编号</span><br><span class="line">    private  String zipCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">PurchaseRecord  record = new PurchaseRecord();</span><br><span class="line">record.setFirstName(&quot;王&quot;);</span><br><span class="line">record.setLastName(&quot;伟杰&quot;);</span><br><span class="line">record.setCreditCardNumber(&quot;1000-5000-1987-0215&quot;);</span><br><span class="line">record.setItemPurchased(&quot;福特钥匙扣&quot;);</span><br><span class="line">record.setQuantity(1);</span><br><span class="line">record.setPrice(28.00);</span><br><span class="line">record.setPurchaseDate(new Date());</span><br><span class="line">record.setZipCode(&quot;100187&quot;);</span><br><span class="line">Gson  g = new Gson();</span><br><span class="line">System.out.println(g.toJson(record));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>数据模拟效果如下:</em></strong><code>{&quot;firstName&quot;:&quot;王&quot;,&quot;lastName&quot;:&quot;伟杰&quot;,&quot;creditCardNumber&quot;:&quot;1000-5000-1987-0215&quot;,&quot;itemPurchased&quot;:&quot;福特钥匙扣&quot;,&quot;quantity&quot;:1,&quot;price&quot;:28.0,&quot;purchaseDate&quot;:&quot;Nov 19, 2019 4:55:58 PM&quot;,&quot;zipCode&quot;:&quot;100187&quot;}</code></p><blockquote><p> 2.构建通用的序列化器</p></blockquote><p><strong>说明:kafka以字节的方式传输数据,在传输数据的时候需要将对象转换为json,发送到对应的主题时候,需要转换成字节的数组,其次在消费的时候需要将主题中的字节数组转换成json,其次在转为对应的对象类型.当然上一节已经提到过.Kafka默认对一些类型进行了支持,比如String,Long,Integer等</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通用的序列化操作</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public class JsonSerializer&lt;T&gt;  implements  Serializer&lt;T&gt;&#123;</span><br><span class="line">private  Gson  g = new Gson();</span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, T data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return g.toJson(data).getBytes(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通用的反序列化操作</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public class JsonDeserializer&lt;T&gt; implements Deserializer&lt;T&gt; &#123;</span><br><span class="line">private  Gson  g = new Gson();</span><br><span class="line">private  Class&lt;T&gt;  deserializedClass;</span><br><span class="line">public JsonDeserializer(Class&lt;T&gt; deserializedClass) &#123;</span><br><span class="line">super();</span><br><span class="line">this.deserializedClass = deserializedClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public T deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return g.fromJson(new String(data), deserializedClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 3.编写对应的规则</p></blockquote><p>1.处理信用卡的规则</p><p>2.提取购买的物品,以及邮编(购买模式的规则)</p><p>3.提取会员号以及话费的金额(奖励机制的规则)</p><p><strong><em>构建一个工具类,以及规则所产出的对应的实体</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class PurchasePattern &#123;</span><br><span class="line">    private String zipCode;</span><br><span class="line">    private String item;</span><br><span class="line">    private Date date;</span><br><span class="line">    private double amount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class RewardAccumulator &#123;</span><br><span class="line">  private String customerId;</span><br><span class="line">    private double purchaseTotal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>工具类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class ActionUtil &#123;</span><br><span class="line">private  final  static  String MARK  = &quot;xxxx-xxxx-xxxx&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 屏蔽信用卡号</span><br><span class="line"> * @param pr  需要被屏蔽的信息记录</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static  PurchaseRecord  mask(PurchaseRecord  pr)&#123;</span><br><span class="line">String[] parts = pr.getCreditCardNumber().split(&quot;-&quot;);</span><br><span class="line">pr.setCreditCardNumber(MARK+&quot;-&quot;+parts[3]);</span><br><span class="line">return pr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 提取部分数据</span><br><span class="line"> * @param pr  需要提取的记录信息</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static  PurchasePattern  getSomeOne(PurchaseRecord  pr)&#123;</span><br><span class="line">PurchasePattern  pp = new PurchasePattern();</span><br><span class="line">pp.setZipCode(pr.getZipCode());</span><br><span class="line">pp.setDate(pr.getPurchaseDate());</span><br><span class="line">pp.setItem(pr.getItemPurchased());</span><br><span class="line">pp.setAmount(pr.getPrice()*pr.getQuantity());</span><br><span class="line">return pp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static  RewardAccumulator  getReward(PurchaseRecord  pr)&#123;</span><br><span class="line">RewardAccumulator  ra = new RewardAccumulator();</span><br><span class="line">ra.setCustomerId(pr.getFirstName()+pr.getLastName());</span><br><span class="line">ra.setPurchaseTotal(pr.getPrice()*pr.getQuantity());</span><br><span class="line">return ra;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>测试结果数据如下:</em></strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &#123;&quot;firstName&quot;:&quot;王&quot;,&quot;lastName&quot;:&quot;伟杰&quot;,&quot;creditCardNumber&quot;:&quot;xxxx-xxxx-xxxx-0215&quot;,&quot;itemPurchased&quot;:&quot;福特钥匙扣&quot;,&quot;quantity&quot;:1,&quot;price&quot;:28.0,&quot;purchaseDate&quot;:&quot;Nov 20, 2019 5:07:13 PM&quot;,&quot;zipCode&quot;:&quot;100187&quot;&#125;</span><br><span class="line">&#123;&quot;zipCode&quot;:&quot;100187&quot;,&quot;item&quot;:&quot;福特钥匙扣&quot;,&quot;date&quot;:&quot;Nov 20, 2019 5:07:13 PM&quot;,&quot;amount&quot;:28.0&#125;</span><br><span class="line">&#123;&quot;customerId&quot;:&quot;王伟杰&quot;,&quot;purchaseTotal&quot;:28.0&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>根据拓扑创建一个流式应用程式</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">public class FirstStream &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(FirstStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;FirstZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">JsonSerializer&lt;PurchasePattern&gt; pps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchasePattern&gt; ppds = new JsonDeserializer&lt;&gt;(PurchasePattern.class);</span><br><span class="line">JsonSerializer&lt;RewardAccumulator&gt; rs = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;RewardAccumulator&gt; rds = new JsonDeserializer&lt;&gt;(RewardAccumulator.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">Serde&lt;PurchasePattern&gt; PurchasePatternSerde = Serdes.serdeFrom(pps, ppds);</span><br><span class="line">Serde&lt;RewardAccumulator&gt; RewardAccumulatorSerde = Serdes.serdeFrom(rs, rds);</span><br><span class="line"></span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line">/**</span><br><span class="line"> * 因为机器缘由，我们可以通过打印来替代 这一步等于处理完数据后发送给对应的主题,后续配置消费者消费即可</span><br><span class="line"> * PurchaseRecordStream.to(&quot;Purchase&quot;, Produced.with(stringSerde,</span><br><span class="line"> * PurchaseRecordSerde));</span><br><span class="line"> */</span><br><span class="line">PurchaseRecordStream.print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;PurchaseRecord&quot;));</span><br><span class="line"></span><br><span class="line">// 同理如下</span><br><span class="line">KStream&lt;String, PurchasePattern&gt; PurchasePatternStream = PurchaseRecordStream</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.getSomeOne(pr));</span><br><span class="line">PurchasePatternStream.print(Printed.&lt;String, PurchasePattern&gt;toSysOut().withLabel(&quot;PurchasePattern&quot;));</span><br><span class="line"></span><br><span class="line">KStream&lt;String, RewardAccumulator&gt; RewardAccumulatorStream = PurchaseRecordStream</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.getReward(pr));</span><br><span class="line">RewardAccumulatorStream.print(Printed.&lt;String, RewardAccumulator&gt;toSysOut().withLabel(&quot;RewardAccumulator&quot;));</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.配置生产者以及模拟数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//模拟数据</span><br><span class="line">PurchaseRecord  record = new PurchaseRecord();</span><br><span class="line">record.setFirstName(&quot;王&quot;);</span><br><span class="line">record.setLastName(&quot;伟杰&quot;);</span><br><span class="line">record.setCreditCardNumber(&quot;1000-5000-1987-0215&quot;);</span><br><span class="line">record.setItemPurchased(&quot;福特钥匙扣&quot;);</span><br><span class="line">record.setQuantity(1);</span><br><span class="line">record.setPrice(28.00);</span><br><span class="line">record.setPurchaseDate(new Date());</span><br><span class="line">record.setZipCode(&quot;100187&quot;);</span><br><span class="line"></span><br><span class="line">//配置生产者</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">       KafkaProducer&lt;String, PurchaseRecord&gt; kp =  new KafkaProducer&lt;String,PurchaseRecord&gt;(properties,new StringSerializer(),new JsonSerializer&lt;PurchaseRecord&gt;());</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, PurchaseRecord&gt;(&quot;transactions&quot;, record));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>6.测试</p></blockquote><ol><li>启动zookeeper和kafka</li><li>创建一个transactions的主题</li><li>启动流程序</li><li>生产者发送消息</li></ol><blockquote><p>7.结果如下，对象要重写toString方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[PurchaseRecord]: null, PurchaseRecord [firstName=徐, lastName=小二, creditCardNumber=xxxx-xxxx-xxxx-0213, itemPurchased=福特钥匙扣, quantity=1, price=28.0, purchaseDate=Wed Nov 20 18:18:35 CST 2019, zipCode=100187]</span><br><span class="line">[PurchasePattern]: null, PurchasePattern [zipCode=100187, item=福特钥匙扣, date=Wed Nov 20 18:18:35 CST 2019, amount=28.0]</span><br><span class="line">[RewardAccumulator]: null, RewardAccumulator [customerId=徐小二, purchaseTotal=28.0]</span><br></pre></td></tr></table></figure><h2 id="如何将流切分为多个流-再分流"><a href="#如何将流切分为多个流-再分流" class="headerlink" title="如何将流切分为多个流(再分流)"></a>如何将流切分为多个流(再分流)</h2><p><strong><em>截止到现在,数据流的分配已经实现。接下我们需要细化一些规则</em></strong></p><ol><li>一定金额下面的信息我们需要进行过滤，小额交易可能对我们起不到任何帮助</li><li>在进入拓扑,默认没有对应的key值进行分类,这是需要我们为数据生成一个key值,以便做好新的归类</li><li>可能有一些的新的信息，接下来我们需要进行对应的分流到新的主题中</li><li>把一些需要的记录写入kafka之外</li></ol><blockquote><p>1.为模型添加一个Department字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//用户购买物品的种类</span><br><span class="line">    private String departMent;</span><br></pre></td></tr></table></figure><blockquote><p>2.过滤小额交易物品以及选择时间作为key值已方便归类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class SecondStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(SecondStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;FirstZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 过滤小额操作以及选择特定的字段作为key</span><br><span class="line">    */</span><br><span class="line">//声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">KeyValueMapper&lt;String, PurchaseRecord, Long&gt;  PurchaseRecordAsDateKey = </span><br><span class="line">(key,PurchaseRecord) -&gt; PurchaseRecord.getPurchaseDate().getTime();</span><br><span class="line">//过滤小额交易的操作进入对应的流并选择特定的条件作为key值  使用filter可以进行条件进行过滤</span><br><span class="line">KStream&lt;Long,PurchaseRecord&gt;  filteredKStream = </span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt; purchaseRecord.getPrice()&gt;5.00)</span><br><span class="line">.selectKey(PurchaseRecordAsDateKey);</span><br><span class="line">filteredKStream.print(Printed.&lt;Long, PurchaseRecord&gt;toSysOut().withLabel(&quot;purchases&quot;));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分流</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 分流的操作  分流可以根据数据特定的条件进行分流 需要使用到特定的谓词条件 Predicate</span><br><span class="line"> */</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//返回分流的数组</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[] kstreamByDepart = </span><br><span class="line">PurchaseRecordStream.branch(isOne,isTwo);</span><br><span class="line">kstreamByDepart[0].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;钥匙类&quot;));</span><br><span class="line">kstreamByDepart[1].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;小五金&quot;));</span><br></pre></td></tr></table></figure><blockquote><p> 使用foreach操作将记录写入kafka之外</p></blockquote><p><strong><em>假定会员编码为xxxx-xxxx-xxxx-0000为恶意会员码</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//会员编码为恶意编码</span><br><span class="line">ForeachAction&lt;String, PurchaseRecord&gt; purchaseRecordForeachAction =</span><br><span class="line">(key,purchaseRecord) -&gt; System.out.println(&quot;做额外的操作&quot;);</span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt;purchaseRecord.getZipCode().equals(&quot;xxxx-xxxx-xxxx-0000&quot;) )</span><br><span class="line">.foreach(purchaseRecordForeachAction);</span><br></pre></td></tr></table></figure><blockquote><p> 测试代码是否通过</p></blockquote><ol><li>启动zookeeper和kafka</li><li>启动流程序</li><li>生产者输送信息到transactions的主题</li></ol><blockquote><p>测试结果如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[purchases]: 1575279440000, PurchaseRecord [firstName=徐, lastName=小四, creditCardNumber=xxxx-xxxx-xxxx-0001, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:37:20 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小四, creditCardNumber=xxxx-xxxx-xxxx-0001, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:37:20 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575279951000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:45:51 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:45:51 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280227000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:50:27 CST 2019, zipCode=100187]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:50:27 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280293000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:51:33 CST 2019, zipCode=000000]</span><br><span class="line">[钥匙类]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=福特钥匙扣, departMent=钥匙套, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:51:33 CST 2019, zipCode=000000]</span><br><span class="line">做额外的操作</span><br><span class="line">[purchases]: 1575280333000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=汤勺, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:13 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=汤勺, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:13 CST 2019, zipCode=100187]</span><br><span class="line">[purchases]: 1575280351000, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:31 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=28.0, purchaseDate=Mon Dec 02 17:52:31 CST 2019, zipCode=100187]</span><br><span class="line">[小五金]: null, PurchaseRecord [firstName=徐, lastName=小五, creditCardNumber=xxxx-xxxx-xxxx-0002, itemPurchased=大锅, departMent=小五金, quantity=1, price=5.0, purchaseDate=Mon Dec 02 17:52:42 CST 2019, zipCode=100187]</span><br></pre></td></tr></table></figure><blockquote><p>完整代码示例如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.streams;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.common.serialization.Serde;</span><br><span class="line">import org.apache.kafka.common.serialization.Serdes;</span><br><span class="line">import org.apache.kafka.streams.Consumed;</span><br><span class="line">import org.apache.kafka.streams.KafkaStreams;</span><br><span class="line">import org.apache.kafka.streams.StreamsBuilder;</span><br><span class="line">import org.apache.kafka.streams.StreamsConfig;</span><br><span class="line">import org.apache.kafka.streams.kstream.ForeachAction;</span><br><span class="line">import org.apache.kafka.streams.kstream.KStream;</span><br><span class="line">import org.apache.kafka.streams.kstream.KeyValueMapper;</span><br><span class="line">import org.apache.kafka.streams.kstream.Predicate;</span><br><span class="line">import org.apache.kafka.streams.kstream.Printed;</span><br><span class="line">import org.apache.kafka.streams.processor.WallclockTimestampExtractor;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import com.wwj.model.PurchaseRecord;</span><br><span class="line">import com.wwj.serde.JsonDeserializer;</span><br><span class="line">import com.wwj.serde.JsonSerializer;</span><br><span class="line">import com.wwj.util.ActionUtil;</span><br><span class="line"></span><br><span class="line">public class SecondStream &#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(SecondStream.class);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;SecondZmart-Kafka-Streams-App&quot;);</span><br><span class="line">props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 1);</span><br><span class="line">// 配置当前时间</span><br><span class="line">props.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);</span><br><span class="line"></span><br><span class="line">// 加载配置</span><br><span class="line">StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">// 构建序列化器</span><br><span class="line">// 默认的</span><br><span class="line">Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">// 自定义的(可优化)</span><br><span class="line">JsonSerializer&lt;PurchaseRecord&gt; ps = new JsonSerializer&lt;&gt;();</span><br><span class="line">JsonDeserializer&lt;PurchaseRecord&gt; pds = new JsonDeserializer&lt;&gt;(PurchaseRecord.class);</span><br><span class="line">// 构建自定义序列化器</span><br><span class="line">Serde&lt;PurchaseRecord&gt; PurchaseRecordSerde = Serdes.serdeFrom(ps, pds);</span><br><span class="line">// 创建流的构造器</span><br><span class="line">StreamsBuilder streamsBuilder = new StreamsBuilder();</span><br><span class="line">// 流拓扑</span><br><span class="line">/**</span><br><span class="line"> * mapValues 原始的键不会发生变化 ，可获取到传递进来的Value值</span><br><span class="line"> */</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt; PurchaseRecordStream = streamsBuilder</span><br><span class="line">.stream(&quot;transactions&quot;, Consumed.with(stringSerde, PurchaseRecordSerde))</span><br><span class="line">.mapValues(pr -&gt; ActionUtil.mask(pr));</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 过滤小额操作以及选择特定的字段作为key</span><br><span class="line">    */</span><br><span class="line">//声明keyValueMapper创建谓词匹配对应的key值</span><br><span class="line">KeyValueMapper&lt;String, PurchaseRecord, Long&gt;  PurchaseRecordAsDateKey = </span><br><span class="line">(key,PurchaseRecord) -&gt; PurchaseRecord.getPurchaseDate().getTime();</span><br><span class="line">//过滤小额交易的操作进入对应的流并选择特定的条件作为key值  使用filter可以进行条件进行过滤</span><br><span class="line">KStream&lt;Long,PurchaseRecord&gt;  filteredKStream = </span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt; purchaseRecord.getPrice()&gt;5.00)</span><br><span class="line">.selectKey(PurchaseRecordAsDateKey);</span><br><span class="line">filteredKStream.print(Printed.&lt;Long, PurchaseRecord&gt;toSysOut().withLabel(&quot;purchases&quot;));</span><br><span class="line">/**</span><br><span class="line"> * 分流的操作  分流可以根据数据特定的条件进行分流 需要使用到特定的谓词条件 Predicate</span><br><span class="line"> */</span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isOne = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;钥匙套&quot;);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String,PurchaseRecord&gt;  isTwo = </span><br><span class="line">(key,purchaseRecord) -&gt;purchaseRecord.getDepartMent().equalsIgnoreCase(&quot;小五金&quot;);</span><br><span class="line"></span><br><span class="line">//返回分流的数组</span><br><span class="line">KStream&lt;String, PurchaseRecord&gt;[] kstreamByDepart = </span><br><span class="line">PurchaseRecordStream.branch(isOne,isTwo);</span><br><span class="line">kstreamByDepart[0].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;钥匙类&quot;));</span><br><span class="line">kstreamByDepart[1].print(Printed.&lt;String, PurchaseRecord&gt;toSysOut().withLabel(&quot;小五金&quot;));</span><br><span class="line">//会员编码为恶意编码</span><br><span class="line">ForeachAction&lt;String, PurchaseRecord&gt; purchaseRecordForeachAction =</span><br><span class="line">(key,purchaseRecord) -&gt; System.out.println(&quot;做额外的操作&quot;);</span><br><span class="line">PurchaseRecordStream</span><br><span class="line">.filter((key,purchaseRecord) -&gt;purchaseRecord.getZipCode().equals(&quot;xxxx-xxxx-xxxx-0000&quot;) )</span><br><span class="line">.foreach(purchaseRecordForeachAction);</span><br><span class="line"></span><br><span class="line">// 开启流</span><br><span class="line">final KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), streamsConfig);</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(new Thread(&quot;streams-jvm-shutdown-hook&quot;) &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">streams.close();</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">try &#123;</span><br><span class="line">streams.start();</span><br><span class="line">latch.await();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 自定义序列器 </tag>
            
            <tag> 必要的算子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发Kafka_Streams1</title>
      <link href="/2019/11/14/2019-11-14-%E5%BC%80%E5%8F%91kafka_Streams1/"/>
      <url>/2019/11/14/2019-11-14-%E5%BC%80%E5%8F%91kafka_Streams1/</url>
      
        <content type="html"><![CDATA[<p>自定义数据类型,利用kafka进行数据传递,以及如何去定义流拓扑。什么是流,我们需要有一个初步认识</p><h1 id="从零到有的kafka进阶"><a href="#从零到有的kafka进阶" class="headerlink" title="从零到有的kafka进阶"></a>从零到有的kafka进阶</h1><ol><li>环境的准备</li><li>利用kafkaStreams实现helloworld-HELLOWORLD</li><li>利用kafka自定义序列化器以及构建生产者和消费者</li></ol><h2 id="环境的准备"><a href="#环境的准备" class="headerlink" title="环境的准备"></a>环境的准备</h2><ol><li>jdk1.8</li><li>maven构建普通项目</li><li>引入关联的jar包</li><li>引入log4j</li></ol><p><a href="https://blog.csdn.net/cyxinda/article/details/78254155" target="_blank" rel="noopener">关于log4j的使用可参考</a></p><blockquote><p>pom.xml如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p>lo4j配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"># stdout Appender</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span><br></pre></td></tr></table></figure><h2 id="利用kafkaStreams实现helloworld-HELLOWORLD"><a href="#利用kafkaStreams实现helloworld-HELLOWORLD" class="headerlink" title="利用kafkaStreams实现helloworld-HELLOWORLD"></a>利用kafkaStreams实现helloworld-HELLOWORLD</h2><h3 id="流式处理API-DSL"><a href="#流式处理API-DSL" class="headerlink" title="流式处理API(DSL)"></a>流式处理API(DSL)</h3><ol><li>高级API的核心是KStream对象(该对象代表流/值记录)</li><li>DSL方法都返回了一个KStream对象的引用</li><li>返回的KStream对象是一个新的实例。而不是最初的实例</li></ol><h3 id="构建一个简单的流向图"><a href="#构建一个简单的流向图" class="headerlink" title="构建一个简单的流向图"></a>构建一个简单的流向图</h3><p><img src="/images/resources/45DADE973B6CF2518094F24DC98B78A0.jpg" alt="IMAGE"></p><blockquote><p>类似的步骤</p></blockquote><ol><li>定义配置项</li><li>创建自定义或预定义的Serde实例</li><li>创建处理器拓扑</li><li>创建和启动KStream</li></ol><p><strong><em>补充说明:kafka流在进行处理的时候,数据会进行序列化和反序列化操作。在kafka流中，默认提供了一个Serdes类来构建Serde对象。而默认提供以下类型作为支撑1.String 2.byte数组 3.Long 4.Integer 5.Double</em></strong></p><p><a href="https://www.cnblogs.com/baxianhua/p/10271830.html" target="_blank" rel="noopener">关于序列化的原理和认知</a></p><blockquote><p>代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.kafka;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.common.serialization.Serde;</span><br><span class="line">import org.apache.kafka.common.serialization.Serdes;</span><br><span class="line">import org.apache.kafka.streams.Consumed;</span><br><span class="line">import org.apache.kafka.streams.KafkaStreams;</span><br><span class="line">import org.apache.kafka.streams.StreamsBuilder;</span><br><span class="line">import org.apache.kafka.streams.StreamsConfig;</span><br><span class="line">import org.apache.kafka.streams.kstream.KStream;</span><br><span class="line">import org.apache.kafka.streams.kstream.Produced;</span><br><span class="line">import org.apache.kafka.streams.kstream.ValueMapper;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">public class KafkaStreamsHelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  public final static  Logger   LOG  = LoggerFactory.getLogger(KafkaStreamsHelloWorld.class);</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">//配置基本属性</span><br><span class="line">  Properties  props = new Properties();</span><br><span class="line">  //每个流式程序有特定的id和节点(必选)</span><br><span class="line">  props.put(StreamsConfig.APPLICATION_ID_CONFIG, &quot;helloworl_app_id&quot;);</span><br><span class="line">  props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</span><br><span class="line">  StreamsConfig streamsConfig = new StreamsConfig(props);</span><br><span class="line">  Serde&lt;String&gt; stringSerde = Serdes.String();</span><br><span class="line">  //1.构建流的创建者实例</span><br><span class="line">  StreamsBuilder  builder = new StreamsBuilder();</span><br><span class="line">  // 1.1 接收源数据产生的处理器流</span><br><span class="line">  KStream&lt;String,String&gt; simpleFirstStream = builder.stream(&quot;src-topic&quot;, Consumed.with(stringSerde, stringSerde));</span><br><span class="line">  //1.2 将数据全部转化为大写 V代表接收值的类型,VR代表</span><br><span class="line">  KStream&lt;String, String&gt; upperCaseStream = simpleFirstStream.mapValues(new ValueMapper&lt;String, String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String apply(String value) &#123;</span><br><span class="line"></span><br><span class="line">return value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">  //1.3 将处理后的值送到输出主题中</span><br><span class="line">  upperCaseStream.through(&quot;out-topic&quot;, Produced.with(stringSerde, stringSerde));</span><br><span class="line">  </span><br><span class="line">  //2. 构建流容器</span><br><span class="line">  KafkaStreams  kafkaStreams = new KafkaStreams(builder.build(), streamsConfig);</span><br><span class="line">  </span><br><span class="line">  //3.启动流式程序</span><br><span class="line">  kafkaStreams.start();</span><br><span class="line">  Thread.sleep(60000);</span><br><span class="line">  LOG.info(&quot;流式程序结束&quot;);</span><br><span class="line">  kafkaStreams.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>操作步骤</p></blockquote><ol><li>启动zookeeper和kafka</li><li>创建2个主题，一个src-topic 和 out-topic</li><li>建立一个生产者和消费者</li><li>启动流式就计算程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span><br><span class="line">bin/kafka-server-start.sh config/server.properties</span><br><span class="line">bin/kafka-topics.sh --create --topic src-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class="line">bin/kafka-topics.sh --create --topic out-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class="line">bin/kafka-console-producer.sh --topic src-topic --broker-list localhost:9092</span><br><span class="line">bin/kafka-console-consumer.sh --topic out-topic --bootstrap-server localhost:9092 --from-beginning</span><br></pre></td></tr></table></figure><blockquote><p>最终结果如下:</p></blockquote><p><img src="/images/resources/A76B1B9A1C77F7FFAAD40CA298FDDCC0.jpg" alt="IMAGE"></p><p><img src="/images/resources/EA2F83FE2A5A245B3E5A2F76B851F30C.jpg" alt="IMAGE"></p><h2 id="利用kafka自定义序列化器以及构建生产者和消费者"><a href="#利用kafka自定义序列化器以及构建生产者和消费者" class="headerlink" title="利用kafka自定义序列化器以及构建生产者和消费者"></a>利用kafka自定义序列化器以及构建生产者和消费者</h2><h3 id="创建数据对象"><a href="#创建数据对象" class="headerlink" title="创建数据对象"></a>创建数据对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试数据模型</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class OrderMsg &#123;</span><br><span class="line">    //消费卡号</span><br><span class="line">private String cardNumber;</span><br><span class="line">//消费人</span><br><span class="line">private String  personName;</span><br><span class="line">//消费金额</span><br><span class="line">private  Double  money;</span><br><span class="line">public String getCardNumber() &#123;</span><br><span class="line">return cardNumber;</span><br><span class="line">&#125;</span><br><span class="line">public void setCardNumber(String cardNumber) &#123;</span><br><span class="line">this.cardNumber = cardNumber;</span><br><span class="line">&#125;</span><br><span class="line">public String getPersonName() &#123;</span><br><span class="line">return personName;</span><br><span class="line">&#125;</span><br><span class="line">public void setPersonName(String personName) &#123;</span><br><span class="line">this.personName = personName;</span><br><span class="line">&#125;</span><br><span class="line">public Double getMoney() &#123;</span><br><span class="line">return money;</span><br><span class="line">&#125;</span><br><span class="line">public void setMoney(Double money) &#123;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">public OrderMsg(String cardNumber, String personName, Double money) &#123;</span><br><span class="line">super();</span><br><span class="line">this.cardNumber = cardNumber;</span><br><span class="line">this.personName = personName;</span><br><span class="line">this.money = money;</span><br><span class="line">&#125;</span><br><span class="line">public OrderMsg() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;OrderMsg [cardNumber=&quot; + cardNumber + &quot;, personName=&quot; + personName + &quot;, money=&quot; + money + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建序列化器"><a href="#创建序列化器" class="headerlink" title="创建序列化器"></a>创建序列化器</h3><p>1.使用序列化器（可选则用GSON）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.序列化器和反序列化器的代码如下(kafka在传递数据的时候,会将数据转换为字节,然后消费的时候将字节转换为具体的对象)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//自定义序列化器</span><br><span class="line">public class JsonSer&lt;T&gt; implements Serializer&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">private  Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public byte[] serialize(String topic, T data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return gson.toJson(data).getBytes(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//自定义反序列化器</span><br><span class="line">public class JsonDser&lt;T&gt; implements Deserializer&lt;T&gt;&#123;</span><br><span class="line">private Gson gson = new Gson();</span><br><span class="line">private Class&lt;T&gt;  deserClass;</span><br><span class="line"></span><br><span class="line">public  JsonDser(Class&lt;T&gt; deserClass)&#123;</span><br><span class="line">this.deserClass = deserClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public JsonDser() &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs, boolean isKey) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public T deserialize(String topic, byte[] data) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">return gson.fromJson(new String(data), deserClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class TestProducer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        properties.put(&quot;value.serializer&quot;, new JsonSer&lt;OrderMsg&gt;().getClass());</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">        System.out.println(new JsonSer&lt;OrderMsg&gt;().getClass());</span><br><span class="line">       KafkaProducer&lt;String, OrderMsg&gt; kp =  new KafkaProducer&lt;String,OrderMsg&gt;(properties);</span><br><span class="line">       kp.send(new ProducerRecord&lt;String, OrderMsg&gt;(&quot;test-topic&quot;, new OrderMsg(&quot;005&quot;, &quot;zzz&quot;, 100.1)));</span><br><span class="line">       kp.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TestConsumer &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;simple-consumer-example1&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;3000&quot;);</span><br><span class="line">        KafkaConsumer&lt;String,OrderMsg&gt; ks = new KafkaConsumer&lt;String,OrderMsg&gt;(properties,new StringDeserializer(),new JsonDser&lt;&gt;(OrderMsg.class));</span><br><span class="line">        ks.subscribe(Collections.singletonList(&quot;test-topic&quot;));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">         ConsumerRecords&lt;String, OrderMsg&gt; records = ks.poll(1000);</span><br><span class="line">         for (ConsumerRecord&lt;String, OrderMsg&gt; record : records) &#123;</span><br><span class="line">                     String message = String.format(&quot;Consumed: key = %s value = %s with offset = %d &quot;,</span><br><span class="line">                             record.key(), record.value().toString(), record.offset());</span><br><span class="line">                     System.out.println(message);</span><br><span class="line">                 &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>所有代码均通过测试</em></strong></p><p><a href="https://blog.csdn.net/supreme000/article/details/97794999" target="_blank" rel="noopener">后期参考springboot整合kafka并自定义序列化器</a></p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 自定义序列器 </tag>
            
            <tag> 构建生产和消费对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka快速上手</title>
      <link href="/2019/11/06/2019-11-06-Kafka%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2019/11/06/2019-11-06-Kafka%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>kafkaStreams运行在kafka之上。没有kafka理论先行,很难始于足下。</p><h1 id="kafka的上门之路"><a href="#kafka的上门之路" class="headerlink" title="kafka的上门之路"></a>kafka的上门之路</h1><ol><li>kafka架构</li><li>生产者和消费者</li><li>kafka的安装和运行</li></ol><h2 id="kafka架构"><a href="#kafka架构" class="headerlink" title="kafka架构"></a>kafka架构</h2><ol><li>kafkaStreams是运行在kafka之上的一个库</li></ol><blockquote><p> 示例</p></blockquote><p>比如现在某个公司有3个系统。销售系统，营销系统，审计系统。系统之间数据可以相互共享获取</p><p><img src="/images/resources/5D24E3A3EB5713510C8B5A8B147A1A45.jpg" alt="IMAGE"></p><p>如果随着系统越来越多，数据相互之间都需要共享。这个时候可以使用kafka来做为数据中台。它满足几点要求</p><ol><li>数据中心是无状态的</li><li>以一种方式接受交易数据并存储,消费程序可以根据自己的需要从数据中心提取信息。</li><li>数据中心只知道交易数据要保存多久。以及什么时候切分和删除这些数据</li></ol><h3 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h3><p><strong><em>一个具有容错能力，健壮的发布/订阅系统,一个节点称为一个代理。多个代理组成一个集群。</em></strong></p><p><strong><em>kafka将生产者写入的消息存储在kafka的主题中,消费者订阅kafka主题。与kafka通信查看主体是否有可用的信息*</em></strong></p><p><img src="/images/resources/EB8E5ACE4A58BA66A0CCB14B876517D4.jpg" alt="IMAGE"></p><h3 id="kafka是一个消息代理"><a href="#kafka是一个消息代理" class="headerlink" title="kafka是一个消息代理"></a>kafka是一个消息代理</h3><ol><li>kafka是一个中介,将进行交换或交易但是不一定相互了解的两部分汇聚一起。</li><li>kafka将消息存储在主题中,从主题检索消息.本身不会和消费者和订阅者保持任何状态.仅作为一个消息中心</li><li>kafka底层技术用的是日志,不断追加输入记录文件。</li><li>主题的消息负载,kafka使用分区。</li></ol><h3 id="kafka是一个日志"><a href="#kafka是一个日志" class="headerlink" title="kafka是一个日志"></a>kafka是一个日志</h3><ol><li>日志用于记录应用程序正在做什么,如果程序出现问题。首先检查的是应用程序日志。</li><li>在kafka设计理念中，日志是一种只能追加的，完全按照时间顺序排列的记录序列</li><li>日志是具有强大含义的简单数据抽象.如果记录时间有序。解决冲突或者确定哪个数据更新到不同的机器就更加的明确</li><li>kafka的日志是按照主题名称分隔日志的,如果日志在一个集群中有多个副本。如果一台服务器宕机。从故障中回复是分布式提交日志具有的。</li></ol><p><strong><em>这也分布式应用程序和数据一致性的基本要求</em></strong></p><h3 id="kafka日志工作原理"><a href="#kafka日志工作原理" class="headerlink" title="kafka日志工作原理"></a>kafka日志工作原理</h3><ol><li>kafka将每个主题映射到指定日志路径的下一个子目录。子目录数和主题对应的分区数相同。</li><li>每个目录里面存放都是追加传入消息的日志文件</li><li>一旦日志文件达到某个规模，日志文件就会被切分。消息会追加到一个新的日志文件中.</li></ol><p><strong><em>比如： /logs/topicA_0 logs是消息存储的根目录,目录下代表着主题的分区,下划线后面紧跟分区编号</em></strong></p><h3 id="kafka和分区"><a href="#kafka和分区" class="headerlink" title="kafka和分区"></a>kafka和分区</h3><ol><li>分区能够保证同一个键的数据按序发送给同一个消费者</li><li>kafka将每个传入的消息追加到日志末尾,消息都严格按照时间排列.不保证跨分区有序，但能保证每个分区消息有序</li></ol><h3 id="分区无键和有键的方式"><a href="#分区无键和有键的方式" class="headerlink" title="分区无键和有键的方式"></a>分区无键和有键的方式</h3><ol><li><p>键为空,生产者按照轮询的方式选择分区写入记录</p></li><li><p>键不为空,则按照 hascode.(key) % number of partitions</p></li></ol><h3 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class PurchaseKeyPartitioner extends DefaultPartitioner &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) &#123;</span><br><span class="line">        Object newKey = null;</span><br><span class="line">        if (key != null) &#123;</span><br><span class="line">            PurchaseKey purchaseKey = (PurchaseKey) key;</span><br><span class="line">            newKey = purchaseKey.getCustomerId();</span><br><span class="line">            keyBytes = ((String) newKey).getBytes();</span><br><span class="line">        &#125;</span><br><span class="line">        return super.partition(topic, newKey, keyBytes, value, valueBytes, cluster);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在生产者配置上设置<code>properties.put(&quot;partitioner.class&quot;, PurchaseKeyPartitioner.class.getName());</code></p><h3 id="分布式日志"><a href="#分布式日志" class="headerlink" title="分布式日志"></a>分布式日志</h3><p><strong><em>kafka提供了数据冗余,数据被写入到一个节点的时候,数据会被复制到一台或者多台机器上</em></strong></p><p><strong>其次选择zookeeper作为代理控制器目的在于:</strong></p><ol><li>集群成员</li><li>主题配置</li><li>访问控制</li></ol><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><ol><li>传统的日志删除通过设置log.roll.ms会对日志进行切分</li><li>通过设置log.retention.ms会设置日志的保留时间</li><li>日志压缩通过这只log.cleanup.policy = compact可以设置日志压缩</li></ol><p><strong><em>注意:如果消息是独立的.就可以用日志删除.如果是需要对消息又更新最新点上面的操作，就可以使用日志压缩</em></strong></p><h2 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = new Properties();</span><br><span class="line">        //服务器引导可以有多个逗号之间隔开</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        //转换为正确的字节数组需要提供正确的序列化器</span><br><span class="line">        properties.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        properties.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        //是否应答 all代表领导和追随者确认后应答  1代表只需要领导者应答  0无需做任何等待</span><br><span class="line">        properties.put(&quot;acks&quot;, &quot;1&quot;);</span><br><span class="line">        //消息发送失败，尝试的次数</span><br><span class="line">        properties.put(&quot;retries&quot;, &quot;3&quot;);</span><br><span class="line">        //日志压缩类型</span><br><span class="line">        properties.put(&quot;compression.type&quot;, &quot;snappy&quot;);</span><br><span class="line">        //指定自定义的分区器</span><br><span class="line">        properties.put(&quot;partitioner.class&quot;, PurchaseKeyPartitioner.class.getName());</span><br><span class="line"></span><br><span class="line">        PurchaseKey key = new PurchaseKey(&quot;12334568&quot;, new Date());</span><br><span class="line"></span><br><span class="line">        try(Producer&lt;PurchaseKey, String&gt; producer = new KafkaProducer&lt;&gt;(properties)) &#123;</span><br><span class="line">            ProducerRecord&lt;PurchaseKey, String&gt; record = new ProducerRecord&lt;&gt;(&quot;some-topic&quot;, key, &quot;对应的json数据&quot;);</span><br><span class="line"></span><br><span class="line">            Callback callback = (metadata, exception) -&gt; &#123;</span><br><span class="line">                if (exception != null) &#123;</span><br><span class="line">                    exception.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Future&lt;RecordMetadata&gt; sendFuture = producer.send(record, callback);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="生产者可指定分区和时间戳以及指定分区"><a href="#生产者可指定分区和时间戳以及指定分区" class="headerlink" title="生产者可指定分区和时间戳以及指定分区"></a>生产者可指定分区和时间戳以及指定分区</h3><blockquote><p>指定分区和时间戳</p></blockquote><ol><li>构造器重载有4个方法，可以指定分区和时间戳</li><li>分区位置平均可以考虑   AtomicInteger count = new AtomicInteger(0);</li><li><a href="https://www.cnblogs.com/zhaoyan001/p/8885360.html" target="_blank" rel="noopener">AtomicInteger类的理解与使用</a></li></ol><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p><strong><em>首先生产者是无状态的,但是消费者需要周期性的提交从代理中消费过的消息的偏移量来管理一些状态。</em></strong></p><blockquote><p>消费者提交一个偏移量有以下含义</p></blockquote><ol><li>意味着消费者完全处理了消息</li><li>也表示发生故障或者重启时该消费者消费的起始位置</li></ol><p>如果创建了消费者发生了某些故障，并且最后的提交的偏移量不可用。消费者从何处开始消费取决于具体的配置</p><ol><li>earliest从最早可用的偏移量检索消息</li><li>latest本质从消费者加入集群的时间点开始消费消息</li><li>none代理将会向消费者抛出异常</li></ol><p><strong><em>同样消费者可以自动提交偏移量,以及手动提交偏移量</em></strong></p><blockquote><p>消费者代码示例 （引用书中代码）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadedConsumerExample &#123;</span><br><span class="line"></span><br><span class="line">    private volatile boolean doneConsuming = false;</span><br><span class="line">    private int numberPartitions;</span><br><span class="line">    private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    public ThreadedConsumerExample(int numberPartitions) &#123;</span><br><span class="line">        this.numberPartitions = numberPartitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void startConsuming() &#123;</span><br><span class="line">        executorService = Executors.newFixedThreadPool(numberPartitions);</span><br><span class="line">        Properties properties = getConsumerProps();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; numberPartitions; i++) &#123;</span><br><span class="line">            Runnable consumerThread = getConsumerThread(properties);</span><br><span class="line">            executorService.submit(consumerThread);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Runnable getConsumerThread(Properties properties) &#123;</span><br><span class="line">        return () -&gt; &#123;</span><br><span class="line">            Consumer&lt;String, String&gt; consumer = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                consumer = new KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">                consumer.subscribe(Collections.singletonList(&quot;test-topic&quot;));</span><br><span class="line">                while (!doneConsuming) &#123;</span><br><span class="line">                    ConsumerRecords&lt;String, String&gt; records = consumer.poll(5000);</span><br><span class="line">                    for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                        String message = String.format(&quot;Consumed: key = %s value = %s with offset = %d partition = %d&quot;,</span><br><span class="line">                                record.key(), record.value(), record.offset(), record.partition());</span><br><span class="line">                        System.out.println(message);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (consumer != null) &#123;</span><br><span class="line">                    consumer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stopConsuming() throws InterruptedException &#123;</span><br><span class="line">        doneConsuming = true;</span><br><span class="line">        executorService.awaitTermination(10000, TimeUnit.MILLISECONDS);</span><br><span class="line">        executorService.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Properties getConsumerProps() &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;simple-consumer-example&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;3000&quot;);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        return properties;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Change the constructor arg to match the actual number of partitions</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        ThreadedConsumerExample consumerExample = new ThreadedConsumerExample(2);</span><br><span class="line">        consumerExample.startConsuming();</span><br><span class="line">        Thread.sleep(60000); //Run for one minute</span><br><span class="line">        consumerExample.stopConsuming();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhaoyan001/p/7049627.html" target="_blank" rel="noopener">Java ExecutorService四种线程池的例子与说明</a></p><p><a href="https://www.cnblogs.com/laowen-zjw/p/6735790.html" target="_blank" rel="noopener">深入理解volatile</a></p><h2 id="kafka的安装和运行"><a href="#kafka的安装和运行" class="headerlink" title="kafka的安装和运行"></a>kafka的安装和运行</h2><ol><li>kafka选择版本  2.12-1.1.0</li><li>默认情况下kafka使用9092端口,zookeeper使用2181端口</li><li>kafka的配置在config的server.properties中-日志配置在log.dirs</li><li>zookeeper在zookeeper.properties中-日志在dataDir中</li></ol><p><img src="/images/resources/B1DC2D0DFA2D61967B6D597DC75C49CF.jpg" alt="IMAGE"></p><p><img src="/images/resources/34AC239F1ED17CB9B958E177A5936CB4.jpg" alt="IMAGE"></p><blockquote><p>操作步骤</p></blockquote><p>1.先启动zookeeper</p><p><code>kafka_2.12-1.1.0 % bin/zookeeper-server-start.sh config/zookeeper.properties</code></p><p><img src="/images/resources/881EF42C2D53CE9A48DD7A8AADCDF204.jpg" alt="IMAGE"></p><p>2.启动kafka</p><p><code>bin/kafka-server-start.sh config/server.properties</code></p><p><img src="/images/resources/F3632FB81EB66E53E00DD4049FC4AD17.jpg" alt="IMAGE"></p><p>3.创建一个主题供生产和消费进行操作</p><p><code>bin/kafka-topics.sh --create --topic first-topic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</code></p><p>replication-factor 副本设置为1表示不复制。实际中副本因子为奇数以上以便发生故障时保证数据可用性</p><p>partitions 指定主题将用到的分区数。如果需要更高的负载，需要更多的分区。</p><p><img src="/images/resources/08AD7C866BE62196DCF1F0B68A0DDCB6.jpg" alt="IMAGE"></p><p>4.通过生产者控制台发送消息</p><p><code>bin/kafka-console-producer.sh --topic first-topic --broker-list localhost：9092</code></p><p><img src="/images/resources/1742EB88961C0D8758186030DC5CFCAA.jpg" alt="IMAGE"></p><p>5.通过消费者控制台接收消息</p><p><code>bin/kafka-console-consumer.sh --topic first-topic --bootstrap-server localhost:9092 --from-beginning</code></p><p>from-beginning 消费者为从头接受消息,但没有提交偏移量</p><p><img src="/images/resources/F5E081E30448527A6AA81BE05F396476.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 应用场景 </tag>
            
            <tag> 大数据分析 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> 生产者和消费者 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafkaStreams初识</title>
      <link href="/2019/11/04/2019-11-04-KafkaStreams%E5%88%9D%E8%AF%86/"/>
      <url>/2019/11/04/2019-11-04-KafkaStreams%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>如何使用好流式处理.流式处理从成本和人力该如何考虑,以及应用场景.</p><h1 id="数据以及kafkaStreams的理念"><a href="#数据以及kafkaStreams的理念" class="headerlink" title="数据以及kafkaStreams的理念"></a>数据以及kafkaStreams的理念</h1><ol><li>数据的发展如何改变程序设计的</li><li>流式处理工作以及应用场景</li><li>kafkaStreams的简介以及解决问题</li></ol><hr><h2 id="数据的发展如何改变程序设计的"><a href="#数据的发展如何改变程序设计的" class="headerlink" title="数据的发展如何改变程序设计的"></a>数据的发展如何改变程序设计的</h2><p><strong><em>在现在的世界中,每天的数据越来越多。如何有有效的利用这些数据,就是我们当下需要考虑的点</em></strong></p><p><strong><em>现在有2种方式处理数据,一种是我们进行批量处理数据(批处理)这些数据都是离线的,第二种就是数据在到达的时候就需要进行处理。</em></strong></p><p><strong><em>kafkaStream是一个对记录的每个时间进行处理的库,基于每个时间就意味着数据一旦到达,就能够被及时处理.不需要将数据分成小批量的</em></strong></p><h3 id="MapReduce范式-补充"><a href="#MapReduce范式-补充" class="headerlink" title="MapReduce范式(补充)"></a>MapReduce范式(补充)</h3><p><strong>map会对每个记录产生一个键值对.而reduce基于每个键合并,处理中间结果</strong></p><p><strong><em>对于TB级别以上的数据有几个概念让我们更好的处理数据</em></strong></p><ol><li>一个集群中分发的数据达到易于处理的规模</li><li>使用键值对讲分布式的数据分组</li><li>利用副本备份机制容忍故障的产生，而不是避免故障</li></ol><p><strong>也就是通过计算机集群中的分散负载,就可以将数据转化为可管理的数量</strong></p><p><strong>其次如何将分布在不同机器上的数据进行汇总也就是分区</strong></p><p><strong><em>分区意味着分组.使用相同的散列码的键进行分组。</em></strong></p><blockquote><p> 公式如下:  partition = key.hashCode()% numberOfPartitions</p></blockquote><p><strong><em>补充:通过使用复制来接受故障。通过复制不同服务器上的数据块,不必担心磁盘故障导致停产.数据复制能够对于分布式的应用提供容错能力至关重要</em></strong></p><h3 id="离线计算的瓶颈"><a href="#离线计算的瓶颈" class="headerlink" title="离线计算的瓶颈"></a>离线计算的瓶颈</h3><ol><li>离线计算首先需要收集大量的数据，批处理的离线计算适合根据根据用户大量的习惯来决定未来可能会发生的事情</li><li>如果用户的习惯是偶然性，那就无法判断资源价值的有效利用</li></ol><blockquote><p> 面对的问题</p></blockquote><ol><li>当前实时的趋势是什么？</li><li>最近一个周期时间段的特征是什么？</li><li>用户如何利用最新的发布的特性的？</li></ol><h2 id="流式处理工作以及应用场景"><a href="#流式处理工作以及应用场景" class="headerlink" title="流式处理工作以及应用场景"></a>流式处理工作以及应用场景</h2><ol><li>定义:流式处理是利用连续计算处理无线数据流的能力,数据是流动的,所以无需收集以及存储数据。</li></ol><blockquote><p> 流式数据的应用场景</p></blockquote><ol><li>信用卡诈骗:根据实时的消费记录,以及对比用户前期的消费习惯和地点,可能信用卡被盗刷.提醒信用卡的拥有者</li><li>入侵检测:实时监控异常行为.</li><li>大型自行车比赛:通过实时传输的数据,监测位置。以及比赛可能会遇到的问题。</li><li>金融业:根据实时买入卖出，提供决策能力</li></ol><p><strong><em>场景:数据到达时需要被立即报告处理,那么可以选择流式处理</em></strong></p><p><strong><em>如果需要对许菊进行深入分析.或者为了编制一个大的数据仓库以备后期分析,那么这个时候需要离线计算</em></strong></p><h2 id="kafkaStreams的简介以及解决问题"><a href="#kafkaStreams的简介以及解决问题" class="headerlink" title="kafkaStreams的简介以及解决问题"></a>kafkaStreams的简介以及解决问题</h2><p><strong><em>假定有一个实时销售系统,我们要根据实时的数据对每个客户甚至于公司的团队制定决策</em></strong></p><blockquote><p>需求分解：有向无环图</p></blockquote><p>购买记录 —-&gt; 屏蔽信息</p><p>屏蔽信息 —-&gt; 存储</p><pre><code>----&gt; 奖励----&gt; 模式</code></pre><blockquote><p>分析节点</p></blockquote><p>源节点 —&gt;  每条销售信息记录</p><p>信用卡屏蔽节点 —-&gt; 将源节点的信息中卡号进行屏蔽</p><p>模式节点  —-&gt; 检索相关的物品，日期，邮政编码组装为一个新的对象</p><p>奖励节点 —-&gt; 抽取客户的ID和实时的消费金额</p><p>存储节点 —-&gt; 存储到相信的关系或者非关系数据中进行分析</p><blockquote><p> 注意:至始至终,这种有向无环图,我们都以深度优先的方式进行遍历以及处理数据。深度优先和广度优先可以参考</p></blockquote><p><a href="https://www.jianshu.com/p/bff70b786bb6" target="_blank" rel="noopener">深度和广度优先</a></p><p><a href="https://blog.csdn.net/weixin_42289193/article/details/81741756" target="_blank" rel="noopener">Java实现深度优先遍历和广度优先遍历</a></p><p><strong><em>总结:数据交由了节点和处理器来进行共同的维护。节点即是需求规则，最终会将节点数据传输到对应的主题中,而处理器则存在在kafkaStream流上。处理器所处理的数据产生出来都是一个新的对象</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> KafkaStreams </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafkaStreams </tag>
            
            <tag> 流式计算 </tag>
            
            <tag> 应用场景 </tag>
            
            <tag> 大数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAli链路管理</title>
      <link href="/2019/10/11/2019-10-11-SpringAli%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
      <url>/2019/10/11/2019-10-11-SpringAli%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<p>链路追踪虽然是运维做的事情,但是我们作为开发的应该走一走</p><h1 id="springAli链路追踪"><a href="#springAli链路追踪" class="headerlink" title="springAli链路追踪"></a>springAli链路追踪</h1><ol><li>什么是链路追踪</li><li>链路追踪解决方案</li><li>如何使用skywalking</li></ol><h2 id="什么是链路追踪"><a href="#什么是链路追踪" class="headerlink" title="什么是链路追踪"></a>什么是链路追踪</h2><p><strong>微服务架构是通过业务来划分服务的，使用REST调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂</strong></p><p>情况如下:</p><p><img src="/images/resources/41E79BF5E865358EFDAB61D562CF9A83.jpg" alt="IMAGE"></p><p><strong><em>当然服务肯定不止这几个,或许会有上百个,有没有可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题，这就是所谓的 APM（应用性能管理）。</em></strong></p><h2 id="链路追踪解决方案"><a href="#链路追踪解决方案" class="headerlink" title="链路追踪解决方案"></a>链路追踪解决方案</h2><blockquote><p>SkyWalking</p></blockquote><ol><li>多种监控手段，语言探针和服务网格(Service Mesh)</li><li>多语言自动探针，Java，.NET Core 和 Node.JS</li><li>轻量高效，不需要大数据</li><li>模块化，UI、存储、集群管理多种机制可选</li><li>支持告警</li><li>优秀的可视化方案</li></ol><h2 id="如何使用skywalking"><a href="#如何使用skywalking" class="headerlink" title="如何使用skywalking"></a>如何使用skywalking</h2><blockquote><p>1.安装docker,使用docker-compose执行编排文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.3&apos;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: wutang/elasticsearch-shanghai-zone:6.3.2</span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    environment:</span><br><span class="line">      cluster.name: elasticsearch</span><br></pre></td></tr></table></figure><p><strong>docker-compose up -d(启动并后台运行)</strong></p><p><strong>docker-compose stop(停止)</strong></p><p><strong>访问localhost:9200</strong></p><p><img src="/images/resources/7831D1922AF79282124159B6BDB5D34B.jpg" alt="IMAGE"></p><blockquote><p>2.下载skywalking,修改配置文件config下application.yml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    nameSpace: $&#123;SW_NAMESPACE:&quot;&quot;&#125;</span><br><span class="line">    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span><br><span class="line">    user: $&#123;SW_ES_USER:&quot;&quot;&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span><br><span class="line">    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span><br><span class="line">    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span><br><span class="line">    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span><br><span class="line">    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:2000&#125; # Execute the bulk every 2000 requests</span><br><span class="line">    bulkSize: $&#123;SW_STORAGE_ES_BULK_SIZE:20&#125; # flush the bulk every 20mb</span><br><span class="line">    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests</span><br><span class="line">    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requests</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">    segmentQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span><br><span class="line"># h2:</span><br><span class="line">#    driver: $&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span><br><span class="line">#    url: $&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125;</span><br><span class="line">#    user: $&#123;SW_STORAGE_H2_USER:sa&#125;</span><br><span class="line">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">#  mysql:</span><br><span class="line">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.切换并启动</p></blockquote><p><code>cd  /Users/Yun/apache-skywalking-apm-bin/bin</code></p><p><strong>执行./startup.sh访问默认端口<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></strong></p><p><img src="/images/resources/4BE1B5B001F480B7DDB449B0D69395E1.jpg" alt="IMAGE"></p><blockquote><p>4.在idea中部署探针</p></blockquote><p><img src="/images/resources/CDDF1E3DC69265A087952CC9D6E1C26D.jpg" alt="IMAGE"></p><p><strong>增加vm参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:/Users/Yun/mycloud/clouddependencies/spring-cloud-external-skywalking/agent/skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=provider</span><br><span class="line">-Dskywalking.collector.backend_service=localhost:11800</span><br></pre></td></tr></table></figure><p><img src="/images/resources/D801AE88ACBD960F7F1DF5DD0F7DD351.jpg" alt="IMAGE"></p><blockquote><p>5.启动项目</p></blockquote><p><img src="/images/resources/3261DF83D683C675E032BDD8AC657332.jpg" alt="IMAGE"></p><p><img src="/images/resources/7848EF174875CDF2089B18610220AFF2.jpg" alt="IMAGE"></p><p><img src="/images/resources/3D92D119B33233BA296FD08BF72A7092.jpg" alt="IMAGE"></p><p>其余服务同理设置</p><ol><li>Avg SLA： 服务可用性（主要是通过请求成功与失败次数来计算）</li><li>CPM： 每分钟调用次数</li><li>Avg Response Time： 平均响应时间</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 高效开发 </tag>
            
            <tag> 链路追踪 </tag>
            
            <tag> 应用性能管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAli统一资源管理</title>
      <link href="/2019/10/10/2019-10-10-SpringAli%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/10/10/2019-10-10-SpringAli%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>如何做到资源的统一高效管理,nacos-config是一个不错的选择</p><h1 id="springAli资源管理"><a href="#springAli资源管理" class="headerlink" title="springAli资源管理"></a>springAli资源管理</h1><ol><li>统一资源管理的应用场景</li><li>实际操作(代码示例)</li></ol><h2 id="统一资源管理的应用场景"><a href="#统一资源管理的应用场景" class="headerlink" title="统一资源管理的应用场景"></a>统一资源管理的应用场景</h2><blockquote><p>场景说明</p></blockquote><p><strong><em>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。</em></strong></p><p><strong>也就是配置文件众多,你不可能每次更改后然后在打包为jar包运行,是否有一种方式可以通过读取远端的配置文件,随时可以更改端口或者服务名等一系列的动作</strong></p><blockquote><p>解决方案</p></blockquote><p><strong>解决方案:使用nacos config:使用 Spring Cloud Alibaba Nacos Config，可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置</strong></p><blockquote><p>作用原理</p></blockquote><p><strong>作用:在特殊的 bootstrap 阶段，配置被加载到Spring环境中。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时需要运行的所有内容。</strong></p><h2 id="实际操作-代码示例"><a href="#实际操作-代码示例" class="headerlink" title="实际操作(代码示例)"></a>实际操作(代码示例)</h2><blockquote><p>1.启动nacos服务(添加配置文件,不限于消费者或者服务者的配置文件)</p></blockquote><p><img src="/images/resources/297CBE5567F5EABD2F10368D39EE8F68.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: nacos-provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">        # 当前应用被sentinel监控的端口</span><br><span class="line">        port: 8720</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br><span class="line">#sentinel</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br><span class="line">#cus attr</span><br><span class="line">user:</span><br><span class="line">  uname: wwj</span><br><span class="line">  age: 32</span><br></pre></td></tr></table></figure><blockquote><p>2.替换yml文件,新建读取属性文件bootstrap.properties</p></blockquote><p><img src="/images/resources/1B9B4E7D810AA8390124933A02687D0B.jpg" alt="IMAGE"></p><p><strong><em>注意：Spring Boot 配置文件的加载顺序，依次为 bootstrap.properties -&gt; bootstrap.yml -&gt; application.properties -&gt; application.yml ，其中 bootstrap.properties 配置为最高优先级</em></strong></p><blockquote><p>3.新建一个controller用来作为数据可实时配置更新</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class Tcontroller &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注入配置文件上下文</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private ConfigurableApplicationContext applicationContext;</span><br><span class="line">    /**</span><br><span class="line">     * 从上下文中读取配置</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(value = &quot;/hi&quot;)</span><br><span class="line">    public String getNameFromNacosConfig() &#123;</span><br><span class="line">        return &quot;Hello &quot; + applicationContext.getEnvironment().getProperty(&quot;user.uname&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.pom.xml中添加nacos-config的依赖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>5.启动服务</p></blockquote><p><img src="/images/resources/2508FD533F31AF266A9091D8F8F18ABC.jpg" alt="IMAGE"></p><p>更改配置文件再次访问</p><p><img src="/images/resources/91C38ED995B1844042B51A205E651532.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> Spring微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 高效开发 </tag>
            
            <tag> 统一注册配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAli统一网关</title>
      <link href="/2019/10/09/2019-10-09-SpringAli%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3/"/>
      <url>/2019/10/09/2019-10-09-SpringAli%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>统一路由网关,看得直接明白.</p><h1 id="springAlibaba路由网关"><a href="#springAlibaba路由网关" class="headerlink" title="springAlibaba路由网关"></a>springAlibaba路由网关</h1><ol><li>什么是spring网关</li><li>网关的功能特征</li><li>实际操作</li><li>网关全局过滤</li></ol><h2 id="什么是spring网关"><a href="#什么是spring网关" class="headerlink" title="什么是spring网关"></a>什么是spring网关</h2><p><strong>为微服务架构提供一种简单而有效的统一的 API 路由管理方式,不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</strong></p><p><img src="/images/resources/0DD38B2B0D318D09248FDA807FAB03EA.jpg" alt="IMAGE"></p><h2 id="网关的功能特征"><a href="#网关的功能特征" class="headerlink" title="网关的功能特征"></a>网关的功能特征</h2><ol><li>Predicates 和 Filters 作用于特定路由</li><li>集成 Hystrix 断路器</li><li>集成 Spring Cloud DiscoveryClient</li><li>易于编写的 Predicates 和 Filters</li><li>限流和路径重写 </li></ol><p><img src="/images/resources/F7D7BA5F09A9AB963804D95913B5357A.jpg" alt="IMAGE"></p><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><blockquote><p>新建项目pom.xml如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-alibaba-gateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Commons Begin --&gt;</span><br><span class="line">        &lt;!--需要过滤器--&gt;</span><br><span class="line">        &lt;dependency&gt;GatewayApplication</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.8&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Commons Begin --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.gateway.GatewayApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><strong><em>注意:Spring Cloud Gateway 不使用 Web 作为服务器，而是 使用 WebFlux 作为服务器，Gateway 项目已经依赖了 starter-webflux，所以这里 千万不要依赖 starter-web,由于过滤器等功能依然需要 Servlet 支持，故这里还需要依赖 javax.servlet:javax.servlet-api</em></strong></p><blockquote><p>构建启动项目类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class GatewayApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>applcation.yml配置文件如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 应用名称</span><br><span class="line">    name: spring-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    # 使用 Naoos 作为服务注册发现</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    # 使用 Sentinel 作为熔断器</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        port: 8721</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">    # 路由网关配置</span><br><span class="line">    gateway:</span><br><span class="line">      # 设置与服务注册发现组件结合，这样可以采用服务名的路由策略</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true</span><br><span class="line">      # 配置路由规则</span><br><span class="line">      routes:</span><br><span class="line">        # 采用自定义路由 ID（有固定用法，不同的 id 有不同的功能，详见：https://cloud.spring.io/spring-cloud-gateway/2.0.x/single/spring-cloud-gateway.html#gateway-route-filters）</span><br><span class="line">        - id: NACOS-CONSUMER</span><br><span class="line">          # 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名</span><br><span class="line">          uri: lb://consumer</span><br><span class="line">          # Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法</span><br><span class="line">          predicates:</span><br><span class="line">            # Method 方法谓词，这里是匹配 GET 和 POST 请求</span><br><span class="line">            - Method=GET,POST</span><br><span class="line">        - id: NACOS-CONSUMER-FEIGN</span><br><span class="line">          uri: lb://consumer-feign</span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET,POST</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置日志级别，方别调试</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework.cloud.gateway: debug</span><br></pre></td></tr></table></figure><blockquote><p>依次启动服务提供者,2个消费者,以及网关</p></blockquote><p><img src="/images/resources/7BD97999D72D3EAE6A1DA72EC1C84CB3.jpg" alt="IMAGE"></p><p><img src="/images/resources/7CC14B640A7A4AB853452B17BE9EF304.jpg" alt="IMAGE"></p><h2 id="网关全局过滤"><a href="#网关全局过滤" class="headerlink" title="网关全局过滤"></a>网关全局过滤</h2><p><strong>全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP 访问限制等等.</strong></p><blockquote><p> 构建一个filter</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.gateway.filter;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AuthFilter implements GlobalFilter, Ordered &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line">        if (token == null || token.isEmpty()) &#123;</span><br><span class="line">            ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">            // 封装错误信息</span><br><span class="line">            Map&lt;String, Object&gt; responseData = Maps.newHashMap();</span><br><span class="line">            responseData.put(&quot;code&quot;, 401);</span><br><span class="line">            responseData.put(&quot;message&quot;, &quot;非法请求&quot;);</span><br><span class="line">            responseData.put(&quot;cause&quot;, &quot;Token is empty&quot;);</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                // 将信息转换为 JSON</span><br><span class="line">                ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">                byte[] data = objectMapper.writeValueAsBytes(responseData);</span><br><span class="line"></span><br><span class="line">                // 输出错误信息到页面</span><br><span class="line">                DataBuffer buffer = response.bufferFactory().wrap(data);</span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                response.getHeaders().add(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">                return response.writeWith(Mono.just(buffer));</span><br><span class="line">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">                log.error(&quot;&#123;&#125;&quot;, e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        //顺序，多个filter的时候使用</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/906FEB9A5DD08998F367BC0DDBACC134.jpg" alt="IMAGE"></p><p><img src="/images/resources/358B6EA3C7792B3F92A4AAC6D18B7D7A.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> Spring微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 高效开发 </tag>
            
            <tag> 统一认证 </tag>
            
            <tag> 统一网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAli服务容灾</title>
      <link href="/2019/09/24/2019-09-24-SpringAli%E6%9C%8D%E5%8A%A1%E5%AE%B9%E7%81%BE/"/>
      <url>/2019/09/24/2019-09-24-SpringAli%E6%9C%8D%E5%8A%A1%E5%AE%B9%E7%81%BE/</url>
      
        <content type="html"><![CDATA[<p>如何有效的监控服务,是我们要考量的问题。使用Sentinel提供解决方案.减少我们的人力成本和物力成本</p><h1 id="springAlibaba服务熔断"><a href="#springAlibaba服务熔断" class="headerlink" title="springAlibaba服务熔断"></a>springAlibaba服务熔断</h1><ol><li>为何出现服务熔断</li><li>使用Sentinel提供解决方案</li><li>Sentinel特征</li><li>Fegin使用Sentinel</li><li>使用熔断器表盘进行监控</li></ol><h2 id="为何出现服务熔断"><a href="#为何出现服务熔断" class="headerlink" title="为何出现服务熔断"></a>为何出现服务熔断</h2><p><strong><em>1.微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 RPC 协议相互调用,在springcloud我们可以使用feign进行服务的调用。而为了保证服务的高可用,我们会把服务部署到集群上面,但是由于网络的原因或者自身出现的不可控的情况。会出现调用该服务出现阻塞</em></strong></p><p><strong><em>2.出现阻塞后,如果大量的请求涌入进来,而服务故障得不到及时处理,容器的西安城资源就会消耗完毕,导致服务瘫痪,因为服务之间在进行相互的调用,会产生对等依赖特性,也就会影响其它的服务.这就会造成我们所说的雪崩效应</em></strong></p><p><strong><em>3.如何解决:提出了熔断器模式.当到达一定的阈值的时候,进行一个特殊的处理。如同曾经证券市场推出来的熔断机制,虽然没有坚挺很久</em></strong></p><h2 id="使用Sentinel提供解决方案"><a href="#使用Sentinel提供解决方案" class="headerlink" title="使用Sentinel提供解决方案"></a>使用Sentinel提供解决方案</h2><p><strong><em>1.服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</em></strong></p><p><strong><em>2.Sentinel 组件，实现了熔断器模式，SpringCloud对这一组件进行了整合。在微服务架构中，一个请求需要调用多个服务是非常常见的，较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值熔断器将会被打开。熔断器打开后，为了避免连锁故障，通过 fallback 方法可以直接返回一个固定值。</em></strong></p><h2 id="Sentinel-的特征"><a href="#Sentinel-的特征" class="headerlink" title="Sentinel 的特征"></a>Sentinel 的特征</h2><ol><li>丰富的应用场景：秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等</li><li>完备的实时监控： Sentinel同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况</li><li>Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与SpringCloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel。</li><li>完善的 SPI 扩展点：Sentinel提供简单易用、完善的SPI扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</li></ol><h2 id="Fegin使用Sentinel"><a href="#Fegin使用Sentinel" class="headerlink" title="Fegin使用Sentinel"></a>Fegin使用Sentinel</h2><h3 id="使用feign项目中引用Sentinel"><a href="#使用feign项目中引用Sentinel" class="headerlink" title="使用feign项目中引用Sentinel"></a>使用feign项目中引用Sentinel</h3><blockquote><p>pom.xml文件添加如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="在全局配置文件添加"><a href="#在全局配置文件添加" class="headerlink" title="在全局配置文件添加"></a>在全局配置文件添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#sentinel</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><h3 id="创建熔断类实现对应的service的接口"><a href="#创建熔断类实现对应的service的接口" class="headerlink" title="创建熔断类实现对应的service的接口"></a>创建熔断类实现对应的service的接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.feign.fallback;</span><br><span class="line"></span><br><span class="line">import com.wwj.consumer.feign.service.ProviderService;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ProviderServiceFallback  implements ProviderService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String echo(String message) &#123;</span><br><span class="line">        return &quot;sentinel fallback&quot;;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Feign中的Service中增加fallback指定类"><a href="#在Feign中的Service中增加fallback指定类" class="headerlink" title="在Feign中的Service中增加fallback指定类"></a>在Feign中的Service中增加fallback指定类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1.通过@FeignClient伪造一个http客户端请求已经注册的服务</span><br><span class="line"> * 2.接口中的方法需要去匹配已经注册的服务方里面的请求</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;nacos-provider&quot;,fallback = ProviderServiceFallback.class)</span><br><span class="line">public interface ProviderService &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/&#123;message&#125;&quot;)</span><br><span class="line">    String echo(@PathVariable String message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><strong>正常启动消费者和提供者</strong></p><p><img src="/images/resources/19E6CB9FA9ED9F9CA810109B0FB5800F.jpg" alt="IMAGE"></p><p><strong><em>关闭提供者(模拟服务提供方崩溃)</em></strong></p><p><img src="/images/resources/9D90EF13076AB9C50D324626746CE612.jpg" alt="IMAGE"></p><h2 id="使用熔断器表盘进行监控"><a href="#使用熔断器表盘进行监控" class="headerlink" title="使用熔断器表盘进行监控"></a>使用熔断器表盘进行监控</h2><h3 id="表盘监控说明"><a href="#表盘监控说明" class="headerlink" title="表盘监控说明"></a>表盘监控说明</h3><p><strong><em>Sentinel 控制台提供一个轻量级的控制台，它提供机器发现、单机资源实时监控、集群资源汇总，以及规则管理的功能。您只需要对应用进行简单的配置，就可以使用这些功能。</em></strong></p><p><strong><em>注意: 集群资源汇总仅支持 500 台以下的应用集群，有大概 1 - 2 秒的延时。</em></strong></p><h3 id="下载切换到对等的目录并打包"><a href="#下载切换到对等的目录并打包" class="headerlink" title="下载切换到对等的目录并打包"></a>下载切换到对等的目录并打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载源码</span><br><span class="line">git clone https://github.com/alibaba/Sentinel.git</span><br><span class="line"></span><br><span class="line">#切换目录</span><br><span class="line">cd /Users/Yun/Sentinel/sentinel-dashboard</span><br><span class="line"># 编译打包</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>或者</p><p><a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">下载最新控制台jar包</a></p><h3 id="切换到控制面板目录执行程序"><a href="#切换到控制面板目录执行程序" class="headerlink" title="切换到控制面板目录执行程序"></a>切换到控制面板目录执行程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p><img src="/images/resources/24536BBFF0C40763CA180D8B15D19306.jpg" alt="IMAGE"></p><h3 id="在Feign客户端的application-yml-和-pom-xml"><a href="#在Feign客户端的application-yml-和-pom-xml" class="headerlink" title="在Feign客户端的application.yml 和 pom.xml"></a>在Feign客户端的application.yml 和 pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer-feign</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 127.0.0.1:8080</span><br><span class="line">        # 当前应用被sentinel监控的端口</span><br><span class="line">        port: 8719</span><br><span class="line"></span><br><span class="line">#sentinel</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9092</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p> <strong><em>端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。比如 Sentinel 控制台添加了 1 个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server 再将规则注册到 Sentinel 中。</em></strong></p><p><strong><em>同理可以把监控添加给服务方或者消费方</em></strong></p><p><img src="/images/resources/C76129CBBD1A4195AE9881DDCBDD91BA.jpg" alt="IMAGE"></p><p><strong>可以看到利用哨兵对服务进行了监控,可设置QPS</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 高效开发 </tag>
            
            <tag> 哨兵 </tag>
            
            <tag> 服务容灾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAli服务消费</title>
      <link href="/2019/09/18/2019-09-18-SpringAli%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9/"/>
      <url>/2019/09/18/2019-09-18-SpringAli%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9/</url>
      
        <content type="html"><![CDATA[<p>微服务改变着我们的项目结构,影响深远</p><h1 id="Spring-Cloud-Alibaba-服务消费"><a href="#Spring-Cloud-Alibaba-服务消费" class="headerlink" title="Spring Cloud Alibaba 服务消费"></a>Spring Cloud Alibaba 服务消费</h1><ol><li>服务消费(原始方式)</li><li>服务消费(使用Feign)</li></ol><h2 id="服务消费-原始方式"><a href="#服务消费-原始方式" class="headerlink" title="服务消费(原始方式)"></a>服务消费(原始方式)</h2><blockquote><p>显示的使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问。</p></blockquote><h3 id="创建新的moudle模块-消费者-pom-xml如下"><a href="#创建新的moudle模块-消费者-pom-xml如下" class="headerlink" title="创建新的moudle模块(消费者),pom.xml如下"></a>创建新的moudle模块(消费者),pom.xml如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;nacos-consumer&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.consumer.ConsumerApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="安装标准构建启动类"><a href="#安装标准构建启动类" class="headerlink" title="安装标准构建启动类"></a>安装标准构建启动类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建一个ConsumerConfiguration配置类-注入RestTemplate对象"><a href="#构建一个ConsumerConfiguration配置类-注入RestTemplate对象" class="headerlink" title="构建一个ConsumerConfiguration配置类,注入RestTemplate对象"></a>构建一个ConsumerConfiguration配置类,注入RestTemplate对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ConsumerConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写controller"><a href="#编写controller" class="headerlink" title="编写controller"></a>编写controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.consumer.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.client.ServiceInstance;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class ConsumerController &#123;</span><br><span class="line">    //注入启动客户端对象</span><br><span class="line">    @Autowired</span><br><span class="line">    private LoadBalancerClient loadBalancerClient;</span><br><span class="line">    //注入RestTemplate模板</span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    //可以用来获取当前应用名称</span><br><span class="line">    @Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br><span class="line">    private String appName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/app/name&quot;)</span><br><span class="line">    public String echo() &#123;</span><br><span class="line">        //使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问</span><br><span class="line">        //选择服务名字</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(&quot;provider&quot;);</span><br><span class="line">        //拼接restful请求</span><br><span class="line">        String url = String.format(&quot;http://%s:%s/echo/%s&quot;, serviceInstance.getHost(), serviceInstance.getPort(), appName);</span><br><span class="line">        return restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建应用程序启动文件-application-yml"><a href="#构建应用程序启动文件-application-yml" class="headerlink" title="构建应用程序启动文件 application.yml"></a>构建应用程序启动文件 application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9091</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><p><img src="/images/resources/43F93F91FD29ED95022EFDF09AD472F8.jpg" alt="IMAGE"></p><h3 id="端点检查-http-localhost-9091-actuator-nacos-discovery"><a href="#端点检查-http-localhost-9091-actuator-nacos-discovery" class="headerlink" title="端点检查 http://localhost:9091/actuator/nacos-discovery"></a>端点检查 <code>http://localhost:9091/actuator/nacos-discovery</code></h3><p><img src="/images/resources/B2645760C214ED73B67686309F828862.jpg" alt="IMAGE"></p><h2 id="服务消费-使用Feign"><a href="#服务消费-使用Feign" class="headerlink" title="服务消费(使用Feign)"></a>服务消费(使用Feign)</h2><blockquote><p>概论</p></blockquote><p><strong>Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，Nacos 也很好的兼容了 Feign，默认实现了负载均衡的效果</strong></p><ol><li>使用接口很容易抽象理解</li><li>集成Ribbon达到负载均衡</li></ol><h3 id="构建新的moudle-pom-xml内容如下"><a href="#构建新的moudle-pom-xml内容如下" class="headerlink" title="构建新的moudle,pom.xml内容如下"></a>构建新的moudle,pom.xml内容如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;nacos-consumer-feign&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.consumer.feign.ConsumerFeignApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="构建启动类"><a href="#构建启动类" class="headerlink" title="构建启动类"></a>构建启动类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ConsumerFeignApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConsumerFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过feign调用远程服务"><a href="#通过feign调用远程服务" class="headerlink" title="通过feign调用远程服务"></a>通过feign调用远程服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1.通过@FeignClient伪造一个http客户端请求已经注册的服务</span><br><span class="line"> * 2.接口中的方法需要去匹配已经注册的服务方里面的请求</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;nacos-provider&quot;)</span><br><span class="line">public interface ProviderService &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/&#123;message&#125;&quot;)</span><br><span class="line">    String echo(@PathVariable String message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller注入对应的服务"><a href="#controller注入对应的服务" class="headerlink" title="controller注入对应的服务"></a>controller注入对应的服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class ProviderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProviderService providerService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;echo&quot;)</span><br><span class="line">    public String echo() &#123;</span><br><span class="line">        return providerService.echo(&quot;Feign Client&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局配置文件声明如下"><a href="#全局配置文件声明如下" class="headerlink" title="全局配置文件声明如下"></a>全局配置文件声明如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer-feign</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9092</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><p><img src="/images/resources/5112FE94545FF448A637449A87F9B9F9.jpg" alt="IMAGE"></p><h3 id="测试负载均衡"><a href="#测试负载均衡" class="headerlink" title="测试负载均衡"></a>测试负载均衡</h3><ol><li>服务端启动多个示例</li><li><code>多次访问localhost:9092/echo</code></li></ol><p><img src="/images/resources/A34FBA256FC9760178711CC44CB6A8D1.jpg" alt="IMAGE"></p><p><img src="/images/resources/493249EBD7F4033880035D1B26D18E7A.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> Spring微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 高效开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAli服务注册</title>
      <link href="/2019/09/16/2019-09-16-SpringAli%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
      <url>/2019/09/16/2019-09-16-SpringAli%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>微服务改变着我们的项目结构,影响深远</p><h1 id="Spring-Cloud-Alibaba-服务注册与发现"><a href="#Spring-Cloud-Alibaba-服务注册与发现" class="headerlink" title="Spring Cloud Alibaba 服务注册与发现"></a>Spring Cloud Alibaba 服务注册与发现</h1><ol><li>Nacos简介</li><li>Nacos安装</li><li>测试Nacos</li><li>整合Nacos(含服务提供者和消费者)</li><li>重温nacos概念和常用配置项</li></ol><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理<br>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p><a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener">官网链接</a></p><h2 id="Nacos安装"><a href="#Nacos安装" class="headerlink" title="Nacos安装"></a>Nacos安装</h2><blockquote><p>1.下载源码</p></blockquote><p><code>git clone https://github.com/alibaba/nacos.git</code></p><blockquote><p>2.安装</p></blockquote><p><code>mvn -Prelease-nacos clean install -U</code></p><h2 id="测试Nacos"><a href="#测试Nacos" class="headerlink" title="测试Nacos"></a>测试Nacos</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#切换至nacos下的bin目录</span><br><span class="line">/Users/Yun/nacos/distribution/target/nacos-server-1.1.3/nacos/bin</span><br><span class="line"># Linux</span><br><span class="line">./startup.sh -m standalone</span><br></pre></td></tr></table></figure><p><strong>注意:访问端口为8848/nacos,用户名和密码都为nacos</strong></p><p><img src="/images/resources/5330866AFD7E285AE5DE53ED00BA6435.jpg" alt="IMAGE"></p><h2 id="整合Nacos"><a href="#整合Nacos" class="headerlink" title="整合Nacos"></a>整合Nacos</h2><blockquote><p>1.新建maven项目,pom.xml如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    项目信息--&gt;</span><br><span class="line">    &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;nacos-provider&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;!--    项目继承--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">&lt;!--    项目版本--&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- Environment Settings --&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Settings --&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;spring-cloud-alibaba.version&gt;0.2.1.RELEASE&lt;/spring-cloud-alibaba.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">&lt;!--    项目管理--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    构建环境--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- Compiler 插件, 设定 JDK 版本 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;showWarnings&gt;true&lt;/showWarnings&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 打包 jar 文件时，配置 manifest 文件，加入 lib 包的 jar 依赖 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                        &lt;addMavenDescriptor&gt;false&lt;/addMavenDescriptor&gt;</span><br><span class="line">                    &lt;/archive&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;archive&gt;</span><br><span class="line">                                &lt;manifest&gt;</span><br><span class="line">                                    &lt;!-- Add directory entries --&gt;</span><br><span class="line">                                    &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;</span><br><span class="line">                                    &lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt;</span><br><span class="line">                                    &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class="line">                                &lt;/manifest&gt;</span><br><span class="line">                            &lt;/archive&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- resource --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- install --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- clean --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ant --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- dependency --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- Java Document Generate --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;phase&gt;prepare-package&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- YUI Compressor (CSS/JS压缩) --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;yuicompressor-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;1.5.1&lt;/version&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;phase&gt;prepare-package&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;compress&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                    &lt;configuration&gt;</span><br><span class="line">                        &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                        &lt;jswarn&gt;false&lt;/jswarn&gt;</span><br><span class="line">                        &lt;nosuffix&gt;true&lt;/nosuffix&gt;</span><br><span class="line">                        &lt;linebreakpos&gt;30000&lt;/linebreakpos&gt;</span><br><span class="line">                        &lt;force&gt;true&lt;/force&gt;</span><br><span class="line">                        &lt;includes&gt;</span><br><span class="line">                            &lt;include&gt;**/*.js&lt;/include&gt;</span><br><span class="line">                            &lt;include&gt;**/*.css&lt;/include&gt;</span><br><span class="line">                        &lt;/includes&gt;</span><br><span class="line">                        &lt;excludes&gt;</span><br><span class="line">                            &lt;exclude&gt;**/*.min.js&lt;/exclude&gt;</span><br><span class="line">                            &lt;exclude&gt;**/*.min.css&lt;/exclude&gt;</span><br><span class="line">                        &lt;/excludes&gt;</span><br><span class="line">                    &lt;/configuration&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 资源文件配置 --&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;excludes&gt;</span><br><span class="line">                    &lt;exclude&gt;**/*.java&lt;/exclude&gt;</span><br><span class="line">                &lt;/excludes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;aliyun-repos&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Aliyun Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;sonatype-repos&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Sonatype Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://oss.sonatype.org/content/groups/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;sonatype-repos-s&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Sonatype Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-snapshots&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Snapshots&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">            &lt;id&gt;aliyun-repos&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Aliyun Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.在该项目上新增moudle（nacos-provider）</p></blockquote><ol><li>pom.xml文件如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;nacos-provider&lt;/artifactId&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Boot End --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Cloud Begin --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Spring Cloud End --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.wwj.provider.ProviderApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>2.启动类如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProviderApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.控制层代码以及yml配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class Pcontroller &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    private String port;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/echo/&#123;message&#125;&quot;)</span><br><span class="line">    public String echo(@PathVariable String message) &#123;</span><br><span class="line">        return &quot;Hello Nacos Discovery &quot; + message + &quot; , From port :&quot; + port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: nacos-provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>分别启动服务端和程序端</li></ol><p><img src="/images/resources/D0E5B22F3607B5BD03822F5D62B21EF7.jpg" alt="IMAGE"></p><p><img src="/images/resources/70BCF443A593A11062AEAB2480CF6255.jpg" alt="IMAGE"></p><ol start="5"><li>同时我们也可以通过服务端点进行检查</li></ol><p><code>http://ip:port/actuator/nacos-discovery</code></p><p><img src="/images/resources/D4DE1364B1EED0CDCA201E13D50921AF.jpg" alt="IMAGE"></p><p>1、subscribe: 显示了当前有哪些服务订阅者<br>2、NacosDiscoveryProperties: 显示了当前服务实例关于 Nacos 的基础配置</p><ol start="6"><li>nacos常用的配置项</li></ol><p><img src="/images/resources/3ED01D0079EC0E46709C6A2D319EC859.jpg" alt="IMAGE"></p><p><img src="/images/resources/AA5B04DADE76F0F749B8BB40F7D74EE7.jpg" alt="IMAGE"></p><ol start="7"><li>重温nacos的概念</li></ol><blockquote><p>服务 (Service)<br>服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。Nacos 支持主流的服务生态，如 Kubernetes Service、gRPC|Dubbo RPC Service 或者 Spring Cloud RESTful Service.</p></blockquote><blockquote><p>服务注册中心 (Service Registry)<br>服务注册中心，它是服务，其实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。</p></blockquote><blockquote><p>服务元数据 (Service Metadata)<br>服务元数据是指包括服务端点(endpoints)、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据</p></blockquote><blockquote><p>服务提供方 (Service Provider)<br>是指提供可复用和可调用服务的应用方</p></blockquote><blockquote><p>服务消费方 (Service Consumer)<br>是指会发起对某个服务调用的应用方</p></blockquote><blockquote><p>配置 (Configuration)<br>在系统开发过程中通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成这个步骤。配置变更是调整系统运行时的行为的有效手段之一。</p></blockquote><blockquote><p>配置管理 (Configuration Management)<br>在数据中心中，系统中所有配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动统称为配置管理。</p></blockquote><blockquote><p>名字服务 (Naming Service)<br>提供分布式系统中所有对象(Object)、实体(Entity)的“名字”到关联的元数据之间的映射管理服务，例如 ServiceName -&gt; Endpoints Info, Distributed Lock Name -&gt; Lock Owner/Status Info, DNS Domain Name -&gt; IP List, 服务发现和 DNS 就是名字服务的2大场景。</p></blockquote><blockquote><p>配置服务 (Configuration Service)<br>在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 高效开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAli准备工作</title>
      <link href="/2019/09/16/2019-09-16-SpringAli%E5%87%86%E5%A4%87/"/>
      <url>/2019/09/16/2019-09-16-SpringAli%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<p>微服务改变着我们的项目结构,影响深远</p><h1 id="Spring-Cloud-Alibaba-准备"><a href="#Spring-Cloud-Alibaba-准备" class="headerlink" title="Spring Cloud Alibaba(准备)"></a>Spring Cloud Alibaba(准备)</h1><ol><li>springCloud-alibaba(组件简介)</li><li>使用idea创建分模块创建统一的依赖管理</li></ol><h2 id="springCloud-alibaba-组件简介"><a href="#springCloud-alibaba-组件简介" class="headerlink" title="springCloud-alibaba(组件简介)"></a>springCloud-alibaba(组件简介)</h2><blockquote><p>1.服务限流降级</p></blockquote><p>默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</p><blockquote><p>2.服务注册与发现</p></blockquote><p>适配 SpringCloud 服务注册与发现标准，默认集成了 Ribbon的支持</p><blockquote><p>3.分布式配置管理</p></blockquote><p>支持分布式系统中的外部化配置，配置更改时自动刷新。</p><p><strong><em>其余的功能请参照官方文档<a href="https://github.com/alibaba/spring-cloud-alibaba" target="_blank" rel="noopener">阿里官方文档</a></em></strong></p><h2 id="使用idea创建分模块创建统一的依赖管理"><a href="#使用idea创建分模块创建统一的依赖管理" class="headerlink" title="使用idea创建分模块创建统一的依赖管理"></a>使用idea创建分模块创建统一的依赖管理</h2><blockquote><p>1.构建目录结构</p></blockquote><p><img src="/images/resources/0BBE42FE095441ADE2F13ABA7A856BA5.jpg" alt="IMAGE"></p><blockquote><p>2.添加对应的pom.xml文件加入到maven管理中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    项目信息--&gt;</span><br><span class="line">    &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;!--    项目继承--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">&lt;!--    项目版本--&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- Environment Settings --&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Settings --&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.SR1&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;spring-cloud-alibaba.version&gt;2.1.0.RELEASE&lt;/spring-cloud-alibaba.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">&lt;!--    项目管理--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 高效开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis1</title>
      <link href="/2019/09/10/2019-09-10-Mybatis(%E7%BC%98)/"/>
      <url>/2019/09/10/2019-09-10-Mybatis(%E7%BC%98)/</url>
      
        <content type="html"><![CDATA[<p>mybatis是一个优秀的开源框架,半自动ORM映射,能够适配各种业务需求</p><h1 id="mybatis的路线图-上"><a href="#mybatis的路线图-上" class="headerlink" title="mybatis的路线图(上)"></a>mybatis的路线图(上)</h1><ol><li>mybatis简介</li><li>mybatis框架执行原理</li><li>mybatis初次的入门案例</li><li>mybatis配置文件详解</li><li>mybatis 方法多参数的处理</li><li>mybatis返回主键值</li><li>sql代码段</li><li>自定义结果类型ResultMap</li></ol><hr><h2 id="mybatis简介"><a href="#mybatis简介" class="headerlink" title="mybatis简介"></a>mybatis简介</h2><p><strong>mybatis本身是一个轻量级的持久化层框架(1.何为持久化。2.何为序列化操作),本身也是基于JDBC的封装(JDBC的链接步骤).开发者本身更多的关注SQL语句的执行效率,除此之外mybatis也是一个半自动的ORM映射框架(支持一对一,一对多的实现,多对多采用两个一对多进行实现)</strong></p><p><strong>注意:实际的开发过程中,因为大量的关系相互映射的存在,在查询数据这一块不便于后期项目本身的项目维护扩展。所以更多的方向是思考数据库中的设计和利用本身mybatis提供的数据自定义封装和其它的类似缓存机制的特点,解决开发中的数据设计结构</strong></p><blockquote><p>mybatis的优势</p></blockquote><ol><li><p>比起jdbc的操作,减少了一些重复的代码量工作，也方便能够集成到后期的管理框架中</p></li><li><p>mybatis提供在XML中编写sql语句,不直接入侵在代码中(方便分类修改）</p></li><li><p>分别提供的xml标签和mapper标签(xml标签可实现动态SQL语句,也就是嵌入条件判断和循环,比较类似存储函数),mapper标签支持对象正确的解析至数据库中</p></li></ol><hr><h2 id="mybatis框架执行原理"><a href="#mybatis框架执行原理" class="headerlink" title="mybatis框架执行原理"></a>mybatis框架执行原理</h2><blockquote><p>sqlConfigXMl配置文件(一个全局的配置文件)(可配置映射文件和连接数据源和事务等)</p></blockquote><blockquote><p>通过配置文件构建出可构建操作数据会话的会话工厂,也就是我们常说的sqlSessionFactory(涉及工厂模式代码设计)</p></blockquote><blockquote><p>通过sqlSessionFactory生产出相互独立的sqlsession,为什么是独立的会话，既然是独立的会话，那也有全局的会话(简单提及缓存)进行数据库层面上面的操作</p></blockquote><blockquote><p>sqlsession之所以能够操作,依赖一个叫Executor的执行器,通过该执行器进行数据库的CRUD操作</p></blockquote><blockquote><p>Executor的执行器需要操作CRUD的动作由谁而来，就是由mapperstatement对象读取mapper映射文件</p></blockquote><p><strong>我们可以看到在配置xml文件的时候,可以支持多种对象级数据参数</strong></p><hr><h2 id="mybatis初次的入门案例"><a href="#mybatis初次的入门案例" class="headerlink" title="mybatis初次的入门案例"></a>mybatis初次的入门案例</h2><ol><li>配置一个log4j.properties(可选)方便我们监听到mybatis进行的动作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\# set level</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"></span><br><span class="line">\# Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><ol start="2"><li>构建一个普通的web项目,jar包结构如下:</li></ol><p><img src="/images/resources/7A7648307DEDBBE8133B158F2BA0AE99.jpg" alt="IMAGE"></p><ol start="3"><li>src目录下构建mybatis的全局配置文件mybatisCfg.xml,配置文件如下:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 数据库连接环境配置 --&gt;</span><br><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">&lt;!-- 标明mybaitis环境 id唯一 --&gt;</span><br><span class="line">&lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">&lt;!-- JDBC – 这个配置直接简单使用了 JDBC 的提交和回滚设置。 它依赖于从数据源得 到的连接来管理事务范围。JDBC默认是自动提交 --&gt;</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">&lt;!-- 采用数据库连接池 --&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">&lt;!-- 避免环境的不统一，造成数据操作乱码 --&gt;</span><br><span class="line">&lt;property name=&quot;url&quot;</span><br><span class="line">value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br><span class="line">&lt;!-- 添加需要被映射的文件 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=&quot;com/wwj/dao/PersonMapper.xml&quot; /&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>构建模型类 com.wwj.model 和 数据库表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line">/**</span><br><span class="line"> * 基本的模型类</span><br><span class="line"> * @author wwj</span><br><span class="line"> *对象序列化是一个用于将对象状态转换为字节流的过程，可以将其保存到磁盘文件中或通过网络发送到任何其他程序；从字节流创建对象的相反的过程称为反序列化。而创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。</span><br><span class="line"> *无需序列化的变量使用transient</span><br><span class="line"> */</span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line">//Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的</span><br><span class="line">//这里是用来表明版本的一致性</span><br><span class="line">private static final long serialVersionUID = 2680875170108959939L;</span><br><span class="line"></span><br><span class="line">private  Integer   id;</span><br><span class="line">private  String name;</span><br><span class="line">private  Date bir;</span><br><span class="line">private  String address;</span><br><span class="line">//自行get和set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/9811E4C49FDA9BE87152DC3AEFEC5B03.jpg" alt="IMAGE"></p><ol start="4"><li>创建数据层的操作也就是mapper的操作接口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * person层的操作</span><br><span class="line"> * </span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface PersonDao &#123;</span><br><span class="line">/**</span><br><span class="line"> * 新增用户</span><br><span class="line"> * </span><br><span class="line"> * @param p</span><br><span class="line"> *            传入需要新增的对象</span><br><span class="line"> * @return 0,1代表结果</span><br><span class="line"> */</span><br><span class="line">int savePerson(Person p);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 更新用户对象</span><br><span class="line"> * @param p 需要被更新的对象</span><br><span class="line"> * @return 0,1代表结果</span><br><span class="line"> */</span><br><span class="line">int updatePerson(Person p);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据用户id进行删除</span><br><span class="line"> * @param id  唯一用户id</span><br><span class="line"> * @return  0，1代表结果</span><br><span class="line"> */</span><br><span class="line">int  deletePersonById(int  id);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取所有的信息</span><br><span class="line"> * @return  所有的人员信息</span><br><span class="line"> */</span><br><span class="line">List&lt;Person&gt;  getPersonInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>构建对应的mapper映射文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.PersonDao&quot;&gt;</span><br><span class="line">&lt;insert id=&quot;savePerson&quot; parameterType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">insert into</span><br><span class="line">person(name,address,bir) values(#&#123;name&#125;,#&#123;address&#125;,#&#123;bir&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;update id=&quot;updatePerson&quot; parameterType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">update person set</span><br><span class="line">name=#&#123;p.name&#125;,address=#&#123;address&#125;,bir=#&#123;bir&#125;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;delete id=&quot;deletePersonById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">delete from person</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getPersonInfos&quot; resultType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">select * from person</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>编码测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试mybatis的CRUD操作</span><br><span class="line"> * </span><br><span class="line"> * @author wwj</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class TestMybatis &#123;</span><br><span class="line">public static void main(String[] args) throws IOException, ParseException &#123;</span><br><span class="line">/*</span><br><span class="line"> * 日期上面的处理</span><br><span class="line"> */</span><br><span class="line">SimpleDateFormat sf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = sf.format(new Date());</span><br><span class="line">Date parse = sf.parse(format);</span><br><span class="line"></span><br><span class="line">InputStream is = Resources.getResourceAsStream(&quot;mybatisCfg.xml&quot;);</span><br><span class="line">SqlSessionFactory build = new SqlSessionFactoryBuilder().build(is);</span><br><span class="line">// 生成 session</span><br><span class="line">SqlSession session = build.openSession();</span><br><span class="line">Person per = new Person();</span><br><span class="line">per.setName(&quot; 小王 &quot;);</span><br><span class="line">per.setAddress(&quot; 重庆 &quot;);</span><br><span class="line">per.setBir(parse);</span><br><span class="line">// 操作数据</span><br><span class="line">int insert = session.insert(&quot;savePerson&quot;,per);</span><br><span class="line">// 提交事务</span><br><span class="line">session.commit();</span><br><span class="line">// 关闭 session</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:mysql中设置为date支持的格式为yyyy-mm-dd,java中的date是格林威治时间</strong></p><p><strong>结果图示</strong></p><p><img src="/images/resources/CD9453D5EA517471A33213C84F600088.jpg" alt="IMAGE"></p><p><strong>同理依次测试更新和删除,以及查询</strong></p><p><strong><em>更新的调用操作</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person per = new Person();</span><br><span class="line">per.setId(1);</span><br><span class="line">per.setName(&quot; 小张 &quot;);</span><br><span class="line">per.setAddress(&quot; 重庆 &quot;);</span><br><span class="line">per.setBir(parse);</span><br><span class="line">// 操作数据</span><br><span class="line">int update = session.update(&quot;updatePerson&quot;, per);</span><br></pre></td></tr></table></figure><p><img src="/images/resources/22CE8444C2704500434DEB997985252E.jpg" alt="IMAGE"></p><p><strong><em>查询的调用操作</em></strong></p><p><code>List&lt;Person&gt; pers  = session.selectList(&quot;getPersonInfos&quot;);</code></p><p><strong><em>删除的调用操作</em></strong></p><p><code>int de  = session.delete(&quot;deletePersonById&quot;, 1);</code></p><hr><h2 id="mybatis配置文件详解"><a href="#mybatis配置文件详解" class="headerlink" title="mybatis配置文件详解"></a>mybatis配置文件详解</h2><h3 id="全局配置文件详解"><a href="#全局配置文件详解" class="headerlink" title="全局配置文件详解"></a>全局配置文件详解</h3><ul><li>environments环境配置,可以配置多种环境 default指定使用某种环境.</li><li>transactionManager事务管理器有两种取值JDBC,managed.我们选择jdbc即可</li><li>dataSource配置数据源,采用默认的连接池选择项POOLED</li><li>mappers里面填入需要进行数据操作xml标签用于执行的动作</li><li>映射的数据操作文件需要和接口保持同个路径(可以把mapper当成接口的实现类)</li></ul><h3 id="映射文件详解"><a href="#映射文件详解" class="headerlink" title="映射文件详解"></a>映射文件详解</h3><ul><li>namespace表明需要对应动作的空间即是接口所在的全路径名称</li><li>id与接口中的方法保持一致</li><li>parameterType填写自定义对象的全路径名称</li><li>接收参数采用 #{objAttrName}</li></ul><hr><h2 id="mybatis方法多参数接收-代码示例）"><a href="#mybatis方法多参数接收-代码示例）" class="headerlink" title="mybatis方法多参数接收(代码示例）"></a>mybatis方法多参数接收(代码示例）</h2><h4 id="索引接收-了解即可"><a href="#索引接收-了解即可" class="headerlink" title="索引接收(了解即可)"></a>索引接收(了解即可)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> List&lt;Person&gt;  getPersonInfosByNameAndID(String name ,int id);</span><br><span class="line">&lt;select id=&quot;getPersonInfosByNameAndID&quot; &gt;</span><br><span class="line">select * from person where name = #&#123;0&#125; and id = #&#123;1&#125; </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="map接收-重点"><a href="#map接收-重点" class="headerlink" title="map接收(重点)"></a>map接收(重点)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    *  根据map进行查询</span><br><span class="line">    * @param attrs</span><br><span class="line">    * key1 id  key2 name</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   List&lt;Person&gt;  getPersonInfosByMap(Map attrs);</span><br><span class="line">   //------------------动作实现</span><br><span class="line"> &lt;select id=&quot;getPersonInfosByMap&quot;  parameterType=&quot;java.util.Map&quot; resultType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">select * from person where id =</span><br><span class="line">#&#123;id&#125; and name = #&#123;name&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">  //----------------调用测试</span><br><span class="line">  Map&lt;String,Object&gt;  attrs = new HashMap&lt;&gt;();</span><br><span class="line">attrs.put(&quot;id&quot;, 2);</span><br><span class="line">attrs.put(&quot;name&quot;, &quot;小王&quot;);</span><br><span class="line">session.selectList(&quot;getPersonInfosByMap&quot;, attrs);</span><br></pre></td></tr></table></figure><h4 id="注解-Param接收-重点"><a href="#注解-Param接收-重点" class="headerlink" title="注解@Param接收(重点)"></a>注解@Param接收(重点)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    * 根据用户唯一id查询信息</span><br><span class="line">    * @param id</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   Person  getPersonInfo(@Param(&quot;pid&quot;) int id);</span><br><span class="line">   //---------------动作实现</span><br><span class="line">&lt;select id=&quot;getPersonInfo&quot; </span><br><span class="line">resultType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">select * from person where id =</span><br><span class="line">#&#123;pid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">//---------调用测试</span><br><span class="line">session.selectOne(&quot;getPersonInfo&quot;, 2);</span><br></pre></td></tr></table></figure><hr><h2 id="mybatis立即返回主键值"><a href="#mybatis立即返回主键值" class="headerlink" title="mybatis立即返回主键值"></a>mybatis立即返回主键值</h2><p><strong><em>应用场景:当我们需要在当前事务插入数据后立即获取数据的主键id，做下一步额外操作，并且不因为并发高的情况下取错值而考虑</em></strong></p><p><strong>修改代码如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;insert id=&quot;savePerson&quot; parameterType=&quot;com.wwj.model.Person&quot;&gt;</span><br><span class="line">&lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;&gt;</span><br><span class="line">select last_insert_id()</span><br><span class="line">&lt;/selectKey&gt;</span><br><span class="line">insert into</span><br><span class="line">person(name,address,bir) values(#&#123;name&#125;,#&#123;address&#125;,#&#123;bir&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">//------------------------------------------------------------</span><br><span class="line">// 操作数据</span><br><span class="line">Person p = new Person();</span><br><span class="line">p.setName(&quot;小小王&quot;);</span><br><span class="line">p.setBir(parse);</span><br><span class="line">int result = session.insert(&quot;savePerson&quot;, p);</span><br><span class="line">System.out.println(result);</span><br><span class="line">System.out.println(p.getId());</span><br></pre></td></tr></table></figure><ul><li>keyProperty=”返回主键的id的属性名”</li><li>resultType=”主键类型”</li><li>order=””什么时候执行，在SQL执行前还是执行后执行，两个取值：BEFORE和AFTER</li><li>select last_insert_id()取到最后生成的主键，只在当前事务中取</li></ul><h2 id="sql代码段"><a href="#sql代码段" class="headerlink" title="sql代码段"></a>sql代码段</h2><p><strong>如果场景中有大量的重复的公共sql语句,那么可以考虑使用<code>&lt;sql&gt;</code>声明公共的部分</strong></p><p><strong>示例如下:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    * sql片段</span><br><span class="line">    * @param id  根据用户的id查询姓名</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line"> String  getPersonName(@Param(&quot;pid&quot;) int id);</span><br><span class="line">   //--------动作实现</span><br><span class="line"> &lt;sql id=&quot;nameCol&quot;&gt; name&lt;/sql&gt;</span><br><span class="line">&lt;select id=&quot;getPersonName&quot;   resultType=&quot;java.lang.String&quot;&gt;</span><br><span class="line">select </span><br><span class="line">&lt;include refid=&quot;nameCol&quot;&gt;&lt;/include&gt;</span><br><span class="line">from person where</span><br><span class="line">id =</span><br><span class="line">#&#123;pid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">//--------测试调用</span><br><span class="line">String name  = session.selectOne(&quot;getPersonName&quot;,2);</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure><hr><h2 id="自定义结果类型ResultMap-开发中长期使用"><a href="#自定义结果类型ResultMap-开发中长期使用" class="headerlink" title="自定义结果类型ResultMap(开发中长期使用)"></a>自定义结果类型ResultMap(开发中长期使用)</h2><p><strong>应用场景:假设我们的实际开发过程中,数据表组合字段多,又不想关心配置映射关系,只想关心sql语句,以及结果,并且也关心sql语句的效率</strong></p><ol><li>假设2张表 person和card 1:m关系</li><li>连接查询需要person中的人名和card表中的卡号名字</li></ol><blockquote><p>操作步骤如下:</p></blockquote><ol><li>在任意自定对象上添加属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//----- 实体类</span><br><span class="line">public class Card &#123;</span><br><span class="line">private String cname;</span><br><span class="line">&#125;</span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line">private  Integer   id;</span><br><span class="line">private  String name;</span><br><span class="line">private  Date bir;</span><br><span class="line">private  String address;</span><br><span class="line">private  List&lt;Card&gt;  cards;</span><br><span class="line">&#125;</span><br><span class="line">//----构建自定义的resultmap封装 注意   collection(集合)association(联系)</span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.Person&quot; id=&quot;personRS&quot;&gt;</span><br><span class="line">&lt;!--column指向数据库列名 property指向pojo对象中字段名 --&gt;</span><br><span class="line">&lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;</span><br><span class="line">&lt;!-- property指的是在bean中字段名 ofType类的全定向名 --&gt;</span><br><span class="line">&lt;collection property=&quot;cards&quot; ofType=&quot;com.wwj.model.Card&quot;&gt;</span><br><span class="line">&lt;result column=&quot;cname&quot; property=&quot;cname&quot; /&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">//--------映射的动作实现</span><br><span class="line">    &lt;select id=&quot;getPersonsOfCard&quot; resultMap=&quot;personRS&quot;&gt;</span><br><span class="line">        select</span><br><span class="line">        person.name,card.cname</span><br><span class="line">        from person</span><br><span class="line">        INNER JOIN card</span><br><span class="line">        on person.id = card.pid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">//--------代码操作</span><br><span class="line">List&lt;Person&gt; persons = session.selectList(&quot;getPersonsOfCard&quot;);</span><br><span class="line">for (Person person : persons) &#123;</span><br><span class="line">System.out.println(person.getCards().get(0).getCname());</span><br><span class="line">System.out.println(person.getCards().get(1).getCname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意1:po代表和数据库一一对照的数据模型.vo代表业务逻辑和表现层之间需要的数据</em></strong></p><p><strong><em>注意2:如果需要暴露一部分数据出去的,可能还是会单独做接口和设计VO</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> orm </tag>
            
            <tag> 半自动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx使用</title>
      <link href="/2019/08/23/2019-09-10-Nginx/"/>
      <url>/2019/08/23/2019-09-10-Nginx/</url>
      
        <content type="html"><![CDATA[<p>Nginx是一个非常优秀的服务器,它的魅力不仅是负载均衡,动静分离等等.</p><h1 id="Nginx使用"><a href="#Nginx使用" class="headerlink" title="Nginx使用"></a>Nginx使用</h1><ol><li>Nginx 简介</li><li>Nginx 安装与配置</li><li>部署 Nginx+Tomcat集群负载均衡</li><li>Nginx+Tomcat 动静分离</li><li>Nginx 负载均衡策略</li></ol><h2 id="Nginx-简介"><a href="#Nginx-简介" class="headerlink" title="Nginx 简介"></a>Nginx 简介</h2><p><strong>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</strong></p><p><strong><em>正向代理:客户端是清楚目标服务器的地址的，而目标服务器是不清楚来自客户端，它只知道来自哪个代理服务器，所以正向代理可以屏蔽或隐藏客户端的信息.</em></strong></p><p><strong><em>反向代理:客户端发来请求，先由反向代理服务器，然后按一定的规则分发到明确的服务器，而客户端不知道是哪台服务器。常常用nginx来作反向代理</em></strong></p><h2 id="Nginx安装和配置"><a href="#Nginx安装和配置" class="headerlink" title="Nginx安装和配置"></a>Nginx安装和配置</h2><blockquote><p>1.安装需要的依赖</p></blockquote><ol><li><code>yum install gcc-c++</code>  </li><li><code>yum -y install pcre*</code>  </li><li><code>yum -y install openssl*</code></li></ol><blockquote><p>2.下载nginx与解压到指定目录</p></blockquote><p><code>wget http://nginx.org/download/nginx-1.9.9.tar.gz</code></p><p><img src="/images/resources/6F29BFFE0A6F69CBACBA8CE60D9423F0.jpg" alt="IMAGE"></p><p><code>tar -zxvf nginx-1.9.9.tar.gz -C /root/nginx</code></p><blockquote><p>3.进入nginx目录设置安装目录</p></blockquote><ol><li><code>./configure --prefix=/root/nginx</code></li><li>执行<code>make</code></li><li>执行<code>make install</code></li></ol><blockquote><p> 4.启动nginx服务(在安装目录下的Sbin目录下)</p></blockquote><ol><li><p>执行<code>./nginx</code></p></li><li><p>执行 <code>ps -ef | grep nginx</code> 查看工作进程</p></li><li><p>常见的命令<code>./nginx -s stop/reload/quit</code></p></li></ol><p><strong>注意:如果访问报403错误.更改nginx.conf文件设置用户保持与当前一致</strong></p><p><img src="/images/resources/CBEE7854201BECC5CEC346091D59B51D.jpg" alt="IMAGE"></p><blockquote><p>最终结果:</p></blockquote><p><img src="/images/resources/ED552C278728E92A55EB620BB8A00B48.jpg" alt="IMAGE"></p><h2 id="部署-Nginx-Tomcat集群与负载均衡"><a href="#部署-Nginx-Tomcat集群与负载均衡" class="headerlink" title="部署 Nginx+Tomcat集群与负载均衡"></a>部署 Nginx+Tomcat集群与负载均衡</h2><blockquote><p>1.安装2个tomcat并修改端口号 (10088和10089)</p></blockquote><blockquote><p>2.在2个tomcat的root文件下放入index.jsp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"> &lt;%@ page isELIgnored =&quot;false&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Tomcat 10089&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>3.配置下nginx</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream wwj &#123;    </span><br><span class="line">   server    144.202.3.120:10088  weight=1; </span><br><span class="line">   server   144.202.3.120:10089  weight=2;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">        # root   html;</span><br><span class="line">         # index  index.html index.htm;</span><br><span class="line">          proxy_pass http://wwj;  </span><br><span class="line">          proxy_redirect default;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.依次启动tomcat以及nginx进行操作</p></blockquote><h2 id="Nginx-Tomcat-动静分离"><a href="#Nginx-Tomcat-动静分离" class="headerlink" title="Nginx+Tomcat 动静分离"></a>Nginx+Tomcat 动静分离</h2><p><strong>将一些常用的静态资源存放到nginx服务中,减轻tomcat本身的压力</strong></p><blockquote><p>1.先将一张图片1.jpg传入到ngnix的static目录下(/root/nginx/static）</p></blockquote><ol><li><code>scp /Users/Yun/Desktop/1.jpg  root@144.202.3.120:/root/nginx/static</code></li></ol><p><img src="/images/resources/977F44D0A256745E05C08FD3BB6633AC.jpg" alt="IMAGE"></p><ol start="2"><li>配置nginx配置文件拦截静态资源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ &#123;</span><br><span class="line">  root /root/nginx/static;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在tomcat的jsp中加入<code>&lt;img src=&quot;1.jpg&quot; alt=&quot;wwj&quot;/&gt;</code></p></li><li><p>结果如下:</p></li></ol><p><img src="/images/resources/95F14282EEF59143202FAA223589C2C9.jpg" alt="IMAGE"></p><h2 id="Nginx-负载均衡策略"><a href="#Nginx-负载均衡策略" class="headerlink" title="Nginx 负载均衡策略"></a>Nginx 负载均衡策略</h2><p>1.weight轮询（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值（weight），用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</p><p>2.ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</p><p>3.least_conn: 把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同;但是有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效。</p><p>4.fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</p><p>5.url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装nginx的hash软件包。</p><p><strong>配置在上游服务器设置中</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis2</title>
      <link href="/2019/08/20/2019-09-10-Redis(%E4%BB%BD)/"/>
      <url>/2019/08/20/2019-09-10-Redis(%E4%BB%BD)/</url>
      
        <content type="html"><![CDATA[<p>Redis是一个很棒的产品,单线程,高读写是它的核心</p><h1 id="spring整合redis"><a href="#spring整合redis" class="headerlink" title="spring整合redis"></a>spring整合redis</h1><ol><li>Spring使用原生redisTemplate(数据一致性要求不高)</li><li>Spring基于注解整合Redis实现内容缓存(要求一致性高)</li></ol><h2 id="统一配置项目pom-xml文件-在整合项目dao层"><a href="#统一配置项目pom-xml文件-在整合项目dao层" class="headerlink" title="统一配置项目pom.xml文件(在整合项目dao层)"></a>统一配置项目pom.xml文件(在整合项目dao层)</h2><blockquote><p>1.添加redis依赖版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;small&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;artifactId&gt;small-dao&lt;/artifactId&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;!--jar包版本 --&gt;</span><br><span class="line">&lt;mybatis.version&gt;3.4.5&lt;/mybatis.version&gt;</span><br><span class="line">&lt;mybatis-spring.version&gt;1.3.1&lt;/mybatis-spring.version&gt;</span><br><span class="line">&lt;pagehelper.version&gt;4.1.4&lt;/pagehelper.version&gt;</span><br><span class="line">&lt;mysql-connector.version&gt;5.1.41&lt;/mysql-connector.version&gt;</span><br><span class="line">&lt;c3p0&gt;0.9.5.3&lt;/c3p0&gt;</span><br><span class="line">&lt;spring-redis&gt;1.6.0.RELEASE&lt;/spring-redis&gt;</span><br><span class="line">&lt;jredis-version&gt;2.7.3&lt;/jredis-version&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--编译级别 --&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- mybatis核心包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybatis集成spring包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Mysql数据库链接jar包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mysql-connector.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybatis分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- c3p0 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;c3p0&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--Spring redis 缓存 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-redis&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--redis 客户端 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;jredis-version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.添加redis配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Redis settings  </span><br><span class="line">redis.host=144.202.3.120</span><br><span class="line">redis.port=6379  </span><br><span class="line">redis.pass=redis</span><br><span class="line">redis.dbIndex=0  </span><br><span class="line">redis.expiration=3000  </span><br><span class="line">redis.maxIdle=300  </span><br><span class="line">redis.maxActive=600  </span><br><span class="line">redis.maxWait=1000</span><br><span class="line"># check data  有效性</span><br><span class="line">redis.testOnBorrow=true</span><br></pre></td></tr></table></figure><blockquote><p>3.在web层添加utils</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.utils;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line">import org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line">import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">/**</span><br><span class="line"> * 重写的generate（）方法为数据存入缓存的无参的方法指定存入缓存中的数据的key</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableCaching</span><br><span class="line">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class="line">private volatile JedisConnectionFactory jedisConnectionFactory;</span><br><span class="line">private volatile RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">private volatile RedisCacheManager redisCacheManager;</span><br><span class="line"> </span><br><span class="line">public RedisCacheConfig() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 带参数的构造方法 初始化所有的成员变量</span><br><span class="line"> * </span><br><span class="line"> * @param jedisConnectionFactory</span><br><span class="line"> * @param redisTemplate</span><br><span class="line"> * @param redisCacheManager</span><br><span class="line"> */</span><br><span class="line">public RedisCacheConfig(JedisConnectionFactory jedisConnectionFactory, RedisTemplate&lt;String, String&gt; redisTemplate,</span><br><span class="line">RedisCacheManager redisCacheManager) &#123;</span><br><span class="line">this.jedisConnectionFactory = jedisConnectionFactory;</span><br><span class="line">this.redisTemplate = redisTemplate;</span><br><span class="line">this.redisCacheManager = redisCacheManager;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public JedisConnectionFactory getJedisConnecionFactory() &#123;</span><br><span class="line">return jedisConnectionFactory;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public RedisTemplate&lt;String, String&gt; getRedisTemplate() &#123;</span><br><span class="line">return redisTemplate;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public RedisCacheManager getRedisCacheManager() &#123;</span><br><span class="line">return redisCacheManager;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Bean</span><br><span class="line">public KeyGenerator keyGenerator() &#123;</span><br><span class="line">return new KeyGenerator() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object generate(Object target, Method method, Object... objects) &#123;</span><br><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">//sb.append(target.getClass().getName());</span><br><span class="line">sb.append(method.getName());</span><br><span class="line">if(objects.length != 0)&#123;</span><br><span class="line">sb.append(&quot;_&quot;);</span><br><span class="line">for (Object obj : objects) &#123;</span><br><span class="line">sb.append(obj.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.在容器中配置redis实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span><br><span class="line">                        http://www.springframework.org/schema/context</span><br><span class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 自动扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.wwj&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入配置文件 --&gt;</span><br><span class="line">    &lt;bean id=&quot;propertyConfigurer&quot;</span><br><span class="line">          class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;    </span><br><span class="line">        &lt;property name=&quot;locations&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;classpath:redis.properties&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置c3p0数据源 --&gt;</span><br><span class="line">&lt;bean class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; id=&quot;dataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    &lt;!-- spring和MyBatis整合 --&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;!--mybatis分页插件--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:spring/mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:Mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.wwj.mapper&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 事务管理 --&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">          class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--支持事务注解的（@Transactional）--&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- redis config start --&gt;</span><br><span class="line">    &lt;!-- 配置JedisPoolConfig实例 --&gt;</span><br><span class="line">    &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxActive&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;maxWaitMillis&quot; value=&quot;$&#123;redis.maxWait&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;redis.testOnBorrow&#125;&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 配置JedisConnectionFactory --&gt;</span><br><span class="line">    &lt;bean id=&quot;jedisConnectionFactory&quot;</span><br><span class="line">        class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;hostName&quot; value=&quot;$&#123;redis.host&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;port&quot; value=&quot;$&#123;redis.port&#125;&quot; /&gt;</span><br><span class="line">        &lt;!-- &lt;property name=&quot;password&quot; value=&quot;$&#123;redis.pass&#125;&quot; /&gt; --&gt;</span><br><span class="line">        &lt;property name=&quot;database&quot; value=&quot;$&#123;redis.dbIndex&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;poolConfig&quot; ref=&quot;poolConfig&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;bean id=&quot;stringRedisSerializer&quot; class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 配置RedisTemplate --&gt;</span><br><span class="line">    &lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;jedisConnectionFactory&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;hashKeySerializer&quot; ref=&quot;stringRedisSerializer&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;keySerializer&quot; ref=&quot;stringRedisSerializer&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 配置RedisCacheManager --&gt;</span><br><span class="line">    &lt;bean id=&quot;redisCacheManager&quot; class=&quot;org.springframework.data.redis.cache.RedisCacheManager&quot;&gt;</span><br><span class="line">        &lt;constructor-arg name=&quot;redisOperations&quot; ref=&quot;redisTemplate&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;defaultExpiration&quot; value=&quot;$&#123;redis.expiration&#125;&quot; /&gt;</span><br><span class="line">        &lt;!-- 可选配置缓存区间</span><br><span class="line">        &lt;property name=&quot;cacheNames&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">        &lt;value&gt;xxx&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt; --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;!-- 配置RedisCacheConfig --&gt;</span><br><span class="line">&lt;bean id=&quot;redisCacheConfig&quot; class=&quot;com.wwj.utils.RedisCacheConfig&quot;&gt;</span><br><span class="line">&lt;constructor-arg ref=&quot;jedisConnectionFactory&quot;/&gt;</span><br><span class="line">&lt;constructor-arg ref=&quot;redisTemplate&quot;/&gt;</span><br><span class="line">&lt;constructor-arg ref=&quot;redisCacheManager&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="注解含义"><a href="#注解含义" class="headerlink" title="注解含义"></a>注解含义</h2><ol><li>@Cacheable：表明在进入方法之前，Spring会先去缓存服务器中查找对应key的缓存值，如果找到缓存值，那么Spring将不会再调用方法，而是将缓存值独处，返回给调用者；如果没有找到缓存值，那么Spring就会执行你的方法，将最后的结果通过key保存到缓存服务器中。</li><li>@CachePut：表明Spring会将该方法返回的值缓存到缓存服务器中，这里需要注意的是，Spring不会事先去缓存服务器中查找，而是直接执行方法，然后缓存。换句话说，该方法始终会被Spring所调用。</li><li>@CacheEvict：表示执行方法后从缓存服务器移除对应key的值；</li></ol><h2 id="加深理解"><a href="#加深理解" class="headerlink" title="加深理解"></a>加深理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value=&quot;xxx&quot; key=&quot;zzz&quot;)注解：标注该方法查询的结果进入缓存，再次访问时直接读取缓存中的数据</span><br><span class="line">1.对于有参数的方法，指定value(缓存区间)和key(缓存的key)；</span><br><span class="line">对于无参数的方法，只需指定value,存到数据库中数据的key通过重写的generate()方法生成。</span><br><span class="line">2.调用该注解标识的方法时，会根据value和key去redis缓存中查找数据，如果查找不到，则去数据库中查找，然后将查找到的数据存放入redis缓存中；</span><br><span class="line">3.向redis中填充的数据分为两部分：</span><br><span class="line">1).用来记录xxx缓存区间中的缓存数据的key的xxx~keys(zset类型)</span><br><span class="line">2).缓存的数据，key：数据的key；value：序列化后的从数据库中得到的数据</span><br><span class="line">4.第一次执行@Cacheable注解标识的方法，会在redis中新增上面两条数据</span><br><span class="line">5.非第一次执行@Cacheable注解标识的方法，若未从redis中查找到数据，则执行从数据库中查询</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* @CacheEvict()注解:移除指定缓存区间的一个或者多个缓存对象</span><br><span class="line"> * @param value + key 或者 value + allEntries=true</span><br><span class="line"> * 1.value + key 移除value缓存区间内的键为key的数据</span><br><span class="line"> * 2.value + allEntries=true 移除value缓存区间内的所有数据</span><br></pre></td></tr></table></figure><h3 id="代码操作示例-数据一致性不高"><a href="#代码操作示例-数据一致性不高" class="headerlink" title="代码操作示例(数据一致性不高)"></a>代码操作示例(数据一致性不高)</h3><blockquote><p>1.建一张用户表模拟数据以及封装的resultmap对应的vo对象(需要被序列化)</p></blockquote><p><img src="/images/resources/F9F1BC9AD73A862E67C5CCA5FF7843AB.jpg" alt="IMAGE"></p><blockquote><p>2.构建服务层以及dao层和controller层</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.controller;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import com.wwj.service.RedisService;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class RedisController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  RedisService  redisService;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/selectRedis1&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String   selectRedis1()&#123;</span><br><span class="line">String personCount = null;</span><br><span class="line">personCount= (String) redisTemplate.opsForValue().get(&quot;person_count&quot;);</span><br><span class="line"></span><br><span class="line">if(personCount == null)&#123;</span><br><span class="line">    //redis缓存中无数据，从数据库中查询，并放入redis缓存中，设置生存时间为1小时</span><br><span class="line">    personCount = Integer.toString(redisService.getPersonCount());</span><br><span class="line">    redisTemplate.opsForValue().set(&quot;person_count&quot;, personCount, 1, TimeUnit.HOURS);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    System.out.println(&quot;从redis拿取数据&quot;);</span><br><span class="line">    personCount=  (String) redisTemplate.opsForValue().get(&quot;person_count&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">return personCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码操作示例-数据一致性高-以及增加或者删除修改数据后清空缓存"><a href="#代码操作示例-数据一致性高-以及增加或者删除修改数据后清空缓存" class="headerlink" title="代码操作示例(数据一致性高)以及增加或者删除修改数据后清空缓存"></a>代码操作示例(数据一致性高)以及增加或者删除修改数据后清空缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.service.impl;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.annotation.CacheEvict;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.wwj.mapper.PersonMapper;</span><br><span class="line">import com.wwj.model.Person;</span><br><span class="line">import com.wwj.service.RedisService;</span><br><span class="line"></span><br><span class="line">@Service(&quot;redisService&quot;)</span><br><span class="line">public class RedisServiceImpl  implements  RedisService&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  PersonMapper  personMapper;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Integer getPersonCount() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.selectCountOfPerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Cacheable(value=&quot;getPersons&quot;)</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Person&gt; getPersons() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.selectPersons();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Cacheable(value=&quot;getPersonById&quot;,key=&quot;&apos;getPersonById_&apos;+#id&quot;)</span><br><span class="line">@Override</span><br><span class="line">public Person getPersonById(Integer id) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.selectPersonById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@CacheEvict(value=&quot;getPersons&quot;,allEntries=true)</span><br><span class="line">@Override</span><br><span class="line">public int savePerson(String name) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return personMapper.insertPerson(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码地址详见</p></blockquote><p><a href="https://github.com/djwangweijie/small" target="_blank" rel="noopener">SSM整合</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> 分关系型数据库 </tag>
            
            <tag> 内存型数据库 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis1</title>
      <link href="/2019/08/17/2019-09-10-Redis(%E7%BC%98)/"/>
      <url>/2019/08/17/2019-09-10-Redis(%E7%BC%98)/</url>
      
        <content type="html"><![CDATA[<p>Redis是一个很棒的产品,单线程,高读写是它的核心</p><h1 id="redis数据库初识"><a href="#redis数据库初识" class="headerlink" title="redis数据库初识"></a>redis数据库初识</h1><ol><li>Redis 简介</li><li>Redis 的安装配置</li><li>Redis 的常见操作</li><li>Redis 的数据类型</li><li>Redis 的事务控制</li><li>Java 操作 Redis 数据库</li></ol><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><h3 id="redis的作用"><a href="#redis的作用" class="headerlink" title="redis的作用"></a>redis的作用</h3><p><strong>Redis:REmote DIctionary Server( 远程字典服务器 ) 是完全开源免费的，用 C 语言编写的，遵守 BSD协议，是一个高性能的 (key/value) 分布式内存数据库，基于内存运行并支持持久化的 NoSQL 数据库，是当前最热门的 NoSql 数据库之一 , 也被人们称为数据结构服务器</strong></p><p><strong><em>BSD协议简单的说就是开源自由最大化,不以商业为中心</em></strong></p><h3 id="redis的优缺点"><a href="#redis的优缺点" class="headerlink" title="redis的优缺点"></a>redis的优缺点</h3><p><strong>优点</strong></p><ol><li>性能极高 – Redis能支持超过 100K+ 每秒的读写频率。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ol><p><strong>缺点</strong></p><ol><li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li></ol><h2 id="Redis-的安装-Linux下"><a href="#Redis-的安装-Linux下" class="headerlink" title="Redis 的安装(Linux下)"></a>Redis 的安装(Linux下)</h2><blockquote><p>1.下载<code>wget -P /root/softdev http://download.redis.io/releases/redis-5.0.5.tar.gz</code>  </p></blockquote><blockquote><p>2.解压<code>tar zxvf redis-5.0.5.tar.gz -C /root/redis</code></p></blockquote><blockquote><p>3.安装C语言环境<code>yum install gcc-c++</code></p></blockquote><blockquote><p>4.切换到redis安装目录下.执行make命令</p></blockquote><p><img src="/images/resources/04A596943847657E0031CDE5F53A352F.jpg" alt="IMAGE"></p><blockquote><p>5.配置目录下的redis.conf文件.主要的目的</p></blockquote><ol><li><p><img src="/images/resources/B354A8B44554E947E239988E71B4E5E3.jpg" alt="IMAGE">允许其他地址访问</p></li><li><p><img src="/images/resources/07C3439E94CE71AF88389AEC64BB7E8D.jpg" alt="IMAGE">关闭保护模式</p></li><li><p><img src="/images/resources/1E11D42BEC017B91D721E7EBF435F30A.jpg" alt="IMAGE">设置密码</p></li></ol><blockquote><p>6.切换到目录下进行启动<code>src/redis-server redis.conf</code>  可检查是否存在<code>ps -ef |grep redis</code></p></blockquote><p><img src="/images/resources/4626C4E1B4BEB3877B39C1B7EDE23672.jpg" alt="IMAGE"></p><blockquote><p><strong><a href="http://www.pc6.com/mac/486661.html" target="_blank" rel="noopener">可视化工具下载</a></strong></p></blockquote><h2 id="Redis-的常见操作"><a href="#Redis-的常见操作" class="headerlink" title="Redis 的常见操作"></a>Redis 的常见操作</h2><ol><li>Keys *：指令 查看当前这个库中所有的key值</li><li>exists key 名字 : 判断某个 key 值是否存在 0 表示不存在 1 表示存在</li><li>move key 名字 数据库的索引下标： 将某个值移除到指定的库中</li><li>Redis 默认有 16 个库，我们可以通过修改 redis 配置文件 redis.conf 来改变库的数量</li><li>select 下标可以切换不同的数据库： select 下标</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(了解)</span><br><span class="line">flushdb : 删除当前库中所有的 key</span><br><span class="line">flushall : 删除所有库的信息</span><br><span class="line">Info：查看数据库的信息</span><br><span class="line">expire key 名字 秒：设定指定的 key 的存活时间</span><br><span class="line">ttl key 名字 : 查看当前的 key 还有多少存活时间 -1 表示永不过期，-2 表示已经过期</span><br><span class="line">type key 名字 : 查看当前 key 的类型（key String,Object）</span><br></pre></td></tr></table></figure><h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SET key 名字 value 值： 设置单一键值对 (key 值相同会覆盖原来的值 , 类似于map 集合 )</span><br><span class="line">GET key 名字：获取指定 key 的值</span><br><span class="line">DEL key 名字：删除指定名称 key</span><br><span class="line">APPEND key 名字 新值：在原有的值的基础上添加新的值</span><br><span class="line">STRLEN key 名字 : 获取字符串的长度</span><br><span class="line">(value 值必须是数字 )</span><br><span class="line">INCR(value 值自动加 1) ： incr key名字；</span><br><span class="line">DECR(value 值自动减 1) ：decr key名字；</span><br><span class="line">INCRBY 递增值： incrby key名字 数字；</span><br><span class="line">DECRBY 递减值：decrby key名字 数字 ;</span><br><span class="line">GETRANGE : GETRANGE key start end： 获取 value 值的一部分</span><br><span class="line">SETRANGE ：SETRANGE key 起始位置 值： 从起始位置开始替换值</span><br><span class="line">SETEX: SETEX key 名字 存活时间 值： 设定一组值同时设定存活时间；</span><br><span class="line">SETNX: SETNX key 名字 值： 设置永久存活的一组值。 (key 值冲突无法存入值 -- 返回值为 0)</span><br><span class="line">MSET: mset key 值 key 值 .... 一次设定多组值，如果 key 值存在也会覆盖</span><br><span class="line">MGET: mget key key 一次获取多个 key 的值</span><br><span class="line">MSETNX: 一次设定多组 key 值，如果有 key 值存在无法添加完成</span><br></pre></td></tr></table></figure><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LPUSH: 向集合中添加内容 lpush 集合的名字 值 显示的顺序和添加的顺序相反。</span><br><span class="line">RPUSH: 向集合中添加内容 rpush 集合的名字 值 添加顺序就是显示顺序</span><br><span class="line">LRANGE: 集合的名字 起始位置 结束位置 (-1 代表到集合的末尾 )</span><br><span class="line">LLEN: llen 集合的名字 查看集合的长度</span><br><span class="line">LPOP: lpop 集合的名称 移除集合中的第一个元素</span><br><span class="line">RPOP: rop 集合的名称移除集合中的最后一个元素</span><br><span class="line">LINDEX : 获取制定索引的值 lindex 集合的名称 索引数值</span><br><span class="line">LREM : 删除指定数量的值： lrem 集合的名称 个数 值 ( 集合中有重复值 )；</span><br></pre></td></tr></table></figure><h3 id="hash类型-hash表的基本操作与string一样-特别适合存储对象数据"><a href="#hash类型-hash表的基本操作与string一样-特别适合存储对象数据" class="headerlink" title="hash类型(hash表的基本操作与string一样.特别适合存储对象数据)"></a>hash类型(hash表的基本操作与string一样.特别适合存储对象数据)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HSET: 存放一组键值对 hset key 值的名称 具体的值；（重复添加会覆盖原来的值）</span><br><span class="line">HGET：获取一个值： hget key 值的名称</span><br><span class="line">HMSET： 设定多组键值对 HMSET customer id 1 name zs address beijing</span><br><span class="line">HMGET： 获取过个键对应的值 hmget customer id name address</span><br><span class="line">HGETALL： 获取所有的数据 hgetall key 值；</span><br><span class="line">HDEL: 删除某个指定的 key 的一组 value hdel customer id</span><br><span class="line">HLEN: 当前的 key 有几组对应的键值对</span><br><span class="line">HEXISTS: 判断当前 key 中是否有指定名称的键值对： hexists customer id;</span><br><span class="line">HKEYS：获取所有的 key</span><br><span class="line">HVALS: 获取所有的值</span><br><span class="line">HINCRBY: 增加指定步长的数据 hincrby customer age 2;</span><br><span class="line">HINCRBYFLOAT: 在原有的基础上增加指定的小数。 hincrbyfloat customer course 0.5</span><br><span class="line">HSETNX： 如果 value 中的 key 重复不能添加到集合中。</span><br></pre></td></tr></table></figure><h3 id="set类型-无序不重复"><a href="#set类型-无序不重复" class="headerlink" title="set类型(无序不重复)"></a>set类型(无序不重复)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SADD：添加值 sadd 集合名称 值 ....</span><br><span class="line">SMEMBERS：查看值 smembers 集合名称</span><br><span class="line">SCARD : 集合中元素个数 scard 集合名称</span><br><span class="line">SREM : 删除集合中的某个值 srem 集合名称 值；</span><br><span class="line">SPOP： 随机从集合中移除一个数据 spop 集合名称</span><br><span class="line">SMOVE: 将集合中的某个值赋给另外一个集合： SMOVE 集合 1 集合 2 值；</span><br><span class="line">SDIFF: 差集</span><br><span class="line">SINTER: 交集</span><br><span class="line">SUNION: 并集</span><br></pre></td></tr></table></figure><h3 id="Zset类型-是-string-类型的有序集合，也不可重复"><a href="#Zset类型-是-string-类型的有序集合，也不可重复" class="headerlink" title="Zset类型(是 string 类型的有序集合，也不可重复)"></a>Zset类型(是 string 类型的有序集合，也不可重复)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sorted set 中的每个元素都需要指定一个分数，根据分数对元素进行升序排序，如果多个元素有相同的分数，则以字典序进行升序排序</span><br><span class="line">Zadd：创建集合并设定标准 zadd zset01 60 v1 70 v2 80 v3 90 v4 100 v5（等级划分的数据）</span><br><span class="line">ZRANGE: 查询所有的标准 ZRANGE zset01 0 -1 , ZRANGE zset01 0 -1 withscores</span><br><span class="line">ZRANGEBYSCORE : 根据分数查询内容</span><br><span class="line">ZRANGEBYSCORE zset01 60 90 ( 注意如果前面添加”(” 表示不包含节点的意思 )</span><br><span class="line">withscores limit 起始位置 数量 .</span><br><span class="line">ZREM : 删除元素 zrem 集合 某 score 下对应的 value 值。ZREM zset01 v5</span><br><span class="line">ZCARD: 统计有几个键值对 zcard 集合</span><br><span class="line">ZCOUNT: zcount 集合 数值 1 数值 2 统计区间的值</span><br><span class="line">ZRANK : 统计对应的下标 zrank 集合名 values</span><br><span class="line">ZSCORE : zscore 集合名 values 获取对应的分数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 1 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 2 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 4 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZRANGE runoobkey 0 10 WITHSCORES</span><br></pre></td></tr></table></figure><h2 id="5-redis的事务规则"><a href="#5-redis的事务规则" class="headerlink" title="5.redis的事务规则"></a>5.redis的事务规则</h2><ol><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:7000&gt; multi</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:7000&gt; set a aaa</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:7000&gt; set b bbb</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:7000&gt; set c ccc</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:7000&gt; exec</span><br></pre></td></tr></table></figure><h2 id="maven项目下使用java操作redis数据库"><a href="#maven项目下使用java操作redis数据库" class="headerlink" title="maven项目下使用java操作redis数据库"></a>maven项目下使用java操作redis数据库</h2><p>1.创建一个简单的maven项目pom.xml如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>2.使用jredis模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line">public class TestRedis &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testJedis() &#123;</span><br><span class="line">// 创建一个 Jedis 的连接</span><br><span class="line">Jedis jedis = new Jedis(&quot;144.202.3.120&quot;, 6379);</span><br><span class="line">// 密码认证 如果设置了密码，就需要进行认证</span><br><span class="line">jedis.auth(&quot;redis&quot;);</span><br><span class="line">// 执行 redis 命令</span><br><span class="line">jedis.set(&quot;mytest&quot;, &quot;hello world, this is jedis client!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testJedisPool() &#123;</span><br><span class="line">// 创建一连接池对象</span><br><span class="line">JedisPool jedisPool = new JedisPool(&quot;144.202.3.120&quot;, 6379);</span><br><span class="line">// 从连接池中获得连接</span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line">// 密码认证 如果设置了密码，就需要进行认证</span><br><span class="line">jedis.auth(&quot;redis&quot;);</span><br><span class="line">String result = jedis.get(&quot;mytest&quot;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">// 关闭连接</span><br><span class="line">jedis.close();</span><br><span class="line">// 关闭连接池</span><br><span class="line">jedisPool.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://try.redis.io/" target="_blank" rel="noopener">redis练习操作</a><br><a href="https://www.cnblogs.com/VitoYi/p/8726070.html" target="_blank" rel="noopener">分布式锁参考文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> 分关系型数据库 </tag>
            
            <tag> 内存型数据库 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统使用</title>
      <link href="/2019/08/09/2019-09-10-Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/08/09/2019-09-10-Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>Linux操作系统是一个开源的命令行系统,没有消息就是一个好的消息</p><h1 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h1><ol><li>Linux 操作系统简介</li><li>VM 虚拟机和 linux 操作系统安装</li><li>Linux 的目录结构解析</li><li>Linux 的常用指令</li><li>Vim 文本编辑器使用</li><li>Linux 用户和组的管理</li><li>Linux 中的文件权限</li><li>Linux 操作系统安装 Jdk</li><li>Linux 操作系统下 Tomcat 的安装</li><li>Linux 操作系统安装 Mysql</li><li>Linux 系统下 Shell 脚本的编写和运行</li></ol><h2 id="Linux操作系统-1"><a href="#Linux操作系统-1" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2><blockquote><p>开源,安全,使用的时候,最好全部使用命令的方式进行操作</p></blockquote><h2 id="VM-虚拟机和-linux-操作系统安装"><a href="#VM-虚拟机和-linux-操作系统安装" class="headerlink" title="VM 虚拟机和 linux 操作系统安装"></a>VM 虚拟机和 linux 操作系统安装</h2><blockquote><p> 安装可在虚拟机或者开一个远程服务器</p></blockquote><h2 id="Linux目录结构解析-服务器系统centos6-64位"><a href="#Linux目录结构解析-服务器系统centos6-64位" class="headerlink" title="Linux目录结构解析(服务器系统centos6-64位)"></a>Linux目录结构解析(服务器系统centos6-64位)</h2><blockquote><p>目录是一个树形结构,会有一个根(/)</p></blockquote><ol><li>切换到根目录。</li></ol><p><img src="/images/resources/F8F4071E27824039E6D6487FB9F7EA47.jpg" alt="IMAGE"></p><blockquote><p>/bin存放的二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里</p></blockquote><blockquote><p>/etc存放系统管理和配置文件 （比较重要）</p></blockquote><blockquote><p>/home 存放所有用户文件的根目录 (不含root)</p></blockquote><blockquote><p>/root单独的root,可以看到里面root用户下的文件</p></blockquote><p><img src="/images/resources/AD8F5D95D23F2B471D9EDE77EE6B176A.jpg" alt="IMAGE"></p><blockquote><p>/usr 用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录（安装系统级的应用）</p></blockquote><blockquote><p>/tmp 用于存放各种临时文件，是公用的临时文件存储点。</p></blockquote><blockquote><p>/var 各种服务的日志文件(当然,一般项目中,我们都是自己有一个固定的地方存放日志文件)</p></blockquote><blockquote><p>最终形成的目录结构如下:</p></blockquote><p><img src="/images/resources/6F1451A494BD3BD4686CECB8F30A2D57.jpg" alt="IMAGE"></p><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="一些常用的命令"><a href="#一些常用的命令" class="headerlink" title="一些常用的命令"></a>一些常用的命令</h3><ul><li>pwd 查看当前所在的目录</li></ul><p><img src="/images/resources/6E5EFAE2634ABE3745AF604F01E37D22.jpg" alt="IMAGE"></p><ul><li><p>cd  (change dic)更换目录</p></li><li><p>ls  查看目录 -f(查看当前目录下的文件,含隐藏文件)  -l(查看文件和目录详细) </p></li></ul><p><img src="/images/resources/0CC244F68ADDF495F8CBA7A220BB7AF2.jpg" alt="IMAGE"></p><ul><li><p>cat 查看文件  cat 文件名(全路径)</p></li><li><p>mkdir 创建文件目录</p></li><li><p>rm -rf 目录名字</p></li></ul><p><img src="/images/resources/2374E51A3CFDB27EC5DF767F7E3E9705.jpg" alt="IMAGE"></p><ul><li>touch创建一个文件或者使用vim直接进行创建</li></ul><p><img src="/images/resources/97063ED0780F2E58B62E74CFD940BAED.jpg" alt="IMAGE"></p><p><strong>注意:未安装vim可以使用<code>yum install vim</code></strong></p><ul><li><p>echo代表输入命令(echo ‘内容’ &gt; 文件名),如不想覆盖则用&gt;&gt;</p></li><li><p>删除文件rm -f  文件名</p></li><li><p>(Mv 文件名 新文件名)可以给文件重命名(Mv 文件名 一个有效的文件目录)可以将某个文件移动到指定目录中</p></li></ul><p><img src="/images/resources/AE9B9E51639E80B3B919B179815F2F63.jpg" alt="IMAGE"></p><ul><li>cp复制命令</li></ul><ol><li>cp dir/* . 复制一个目录下的所有文件到当前工作目录</li><li>cp -a /tmp/dir1 路径 复制一个目录到当前工作目录</li><li>cp -a file1 file2 # 连同文件的所有特性把文件 file1 复制成文件 file2</li><li>cp file1 file2 file3 dir # 把文件 file1、file2、file3 复制到目录 dir 中</li></ol><p><img src="/images/resources/E15CC57CD9B066FA4B98668D856C0629.jpg" alt="IMAGE"></p><ul><li>find命令查找命令</li></ul><p><code>find 指令 基本格式：语法： find [ 查找文件的路径 ] [ 查找条件 ] [ 处理动作 ]</code></p><p><img src="/images/resources/4FD3550DB09CE5AE60B707D72907677F.jpg" alt="IMAGE"></p><ul><li>grep 文件内容查找(了解)</li></ul><p><img src="/images/resources/9E4E2C86DC6F37655CDC2973295EF20E.jpg" alt="IMAGE"></p><ul><li><p>关机重启(shutdown 和 reboot)</p></li><li><p>su -root 指令切换到管理员</p></li></ul><p><strong>注意引号内为正则表达式即可</strong></p><h3 id="zip解压缩"><a href="#zip解压缩" class="headerlink" title="zip解压缩"></a>zip解压缩</h3><ol><li>压缩<code>zip -r archive_name.zip filename</code></li><li>解压在当前 <code>unzip archive_name.zip</code></li><li>解压到指定 <code>unzip archive_name.zip -d new_dir</code></li></ol><h3 id="tar打包"><a href="#tar打包" class="headerlink" title="tar打包"></a>tar打包</h3><ol><li>打包一个目录(含文件)<code>tar -cvf archive_name.tar directory_to_compress</code></li></ol><p><img src="/images/resources/BFC4D3B3479E12507BE9CC9813B16B13.jpg" alt="IMAGE"></p><ol start="2"><li><p>解包<code>tar -zxvf archive_name.tar.gz</code></p></li><li><p>解包到指定目录<code>tar -xvf archive_name.tar -C new_dir</code></p></li></ol><h3 id="tar-gz格式压缩"><a href="#tar-gz格式压缩" class="headerlink" title="tar.gz格式压缩"></a>tar.gz格式压缩</h3><ol><li>压缩<code>tar -zcvf archive_name.tar.gz filename</code></li><li>解压缩 <code>tar -zxvf archive_name.tar.gz</code></li><li>解压缩到指定 <code>tar -zxvf archive_name.tar.gz -C new_dir</code></li></ol><h2 id="使用vim编辑器"><a href="#使用vim编辑器" class="headerlink" title="使用vim编辑器"></a>使用vim编辑器</h2><p><img src="/images/resources/E6FE16260C12D0254045CC342D77577E.jpg" alt="IMAGE"></p><blockquote><p>注意</p></blockquote><ol><li>进入之后按i或者a即可根据光标位置进行操作</li><li>按esc切换到命令模式:可以设置行号 <code>:set nu</code> 也可以用<code>/需要查找的内容</code> 是n或者N查看下一个或者上一个</li><li><code>:wq或者:w 强制写入或者写入</code> <code>:q 或者 :q! 退出或者强制退出</code></li></ol><h2 id="Linux-用户和组的管理"><a href="#Linux-用户和组的管理" class="headerlink" title="Linux 用户和组的管理"></a>Linux 用户和组的管理</h2><blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。<br>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。<br>每个用户账号都拥有一个唯一的用户名和各自的口令。</p></blockquote><blockquote><p>通过cat /etc/passwd</p></blockquote><p><img src="/images/resources/226871FDCD8093B8E791D829FAD5E4C2.jpg" alt="IMAGE"></p><p>分别代表用户名,密码,用户ID,组ID,用户全称,用户目录,用户使用的shell</p><h3 id="1-添加用户-和-删除用户"><a href="#1-添加用户-和-删除用户" class="headerlink" title="1.添加用户 和 删除用户"></a>1.添加用户 和 删除用户</h3><p><img src="/images/resources/715AF930EFA903C3B4BD728F3F36AACE.jpg" alt="IMAGE"></p><p><img src="/images/resources/020499E64B6F17F80046A64EAD17BA2A.jpg" alt="IMAGE"></p><p><img src="/images/resources/AFB7221791A26A8566160A07527F64BD.jpg" alt="IMAGE"></p><p><img src="/images/resources/18D1732A539B3E9887B5A99C03E2D5A9.jpg" alt="IMAGE"></p><p>删除用户<code>userdel -r -f wangweijie</code></p><p><code>userdel -r 用户名</code>  删除用户以及下面所有的目录</p><h3 id="2-用户组添加管理"><a href="#2-用户组添加管理" class="headerlink" title="2.用户组添加管理"></a>2.用户组添加管理</h3><p><img src="/images/resources/A6A20110194297A90D7BC3D8D36D8F34.jpg" alt="IMAGE"></p><p><img src="/images/resources/51DD2D66C4F832996823C64228D945AE.jpg" alt="IMAGE"></p><blockquote><p>需要移除用户的话  gpasswd -d 用户账户 用户组名</p></blockquote><h2 id="Linux中文件权限"><a href="#Linux中文件权限" class="headerlink" title="Linux中文件权限"></a>Linux中文件权限</h2><p><img src="/images/resources/1A89865F14FDD4B5E2DDA829E3B0EE60.jpg" alt="IMAGE"></p><blockquote><p>10个字符 第一个文件类型  后面每3个一组 (r=4， w=2， x=1)  然后是用户,用户组,大小</p></blockquote><blockquote><p>每一组权限分别对应当前用户,用户组,非该用户组</p></blockquote><blockquote><p>更改abc.txt 当前用户为可读</p></blockquote><p><img src="/images/resources/B8D01010A3E2F479C568181C99FC72E8.jpg" alt="IMAGE"></p><p><img src="/images/resources/451B78AC2DA3CFF79E358797556A01AC.jpg" alt="IMAGE"></p><h2 id="linux安装jdk"><a href="#linux安装jdk" class="headerlink" title="linux安装jdk"></a>linux安装jdk</h2><blockquote><p>1.现在root下构建一个专门存放jdk和tomcat的等一系列的软件目录 softdev</p></blockquote><blockquote><p>2.上传安装包到softdev中 <code>scp /path/local_filename username@servername:/path</code> </p></blockquote><blockquote><p>3.如果是从服务器下载则<code>scp username@servername:/path/filename /tmp/local_destinationr</code></p></blockquote><blockquote><p>4.也可以考虑使用 yum install -y lrzsz （使用rz上传或则sz下载）</p></blockquote><blockquote><p>5.执行解压的命令 tar -zxvf jdk-8u162-linux-x64.tar.gz -C /root/java8/</p></blockquote><blockquote><p>6.配置在全局环境变量中（执行 source /etc/profile）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/java8/jdk1.8.0_162</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p><img src="/images/resources/2CAC83B110FFA4417AFCDFD6CE41F183.jpg" alt="IMAGE"></p><h2 id="linux下安装tomcat"><a href="#linux下安装tomcat" class="headerlink" title="linux下安装tomcat"></a>linux下安装tomcat</h2><blockquote><p>1.分别新建2个文件夹存放tomcat （tomcat1和tomcat2）</p></blockquote><blockquote><p>2.tar -zxvf apache-tomcat-8.5.43.tar.gz -C /root/tomcat1</p></blockquote><blockquote><p>3.修改2个tomcat的端口号 10088和10089(文件位于/root/tomcat1/apache-tomcat-8.5.43/conf)</p></blockquote><blockquote><p>4.开启：service iptables start  关闭：service iptables stop(防火墙)service iptables status</p></blockquote><blockquote><p>5.在bin目录下启动tomact(<code>./startup.sh</code>)</p></blockquote><p><img src="/images/resources/75468ED66410BFD40DB96BBDF8FA5BA3.jpg" alt="IMAGE"></p><h2 id="linux下安装-Mysql"><a href="#linux下安装-Mysql" class="headerlink" title="linux下安装 Mysql"></a>linux下安装 Mysql</h2><blockquote><p>1.<code>yum list installed | grep mysql</code>查看是否安装mysql</p></blockquote><blockquote><p>2.<code>yum -y remove mysql</code> (删除已安装的mysql)</p></blockquote><blockquote><p>3.下载小容量mysql(<code>wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm</code>)</p></blockquote><blockquote><p>4.<code>rpm -ivh mysql-community-release-el6-5.noarch.rpm</code>(类似解压出安装文件可通过<code>yum repolist all | grep mysql</code>)</p></blockquote><blockquote><p>5.<code>yum install mysql-community-server</code> 安装</p></blockquote><blockquote><p>6.<code>service mysqld start</code> 启动  关闭<code>service mysqld stop</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root</span><br><span class="line"># use mysql;</span><br><span class="line"># update user set password=PASSWORD(&quot;这里输入root用户密码&quot;) where User=&apos;root&apos;;</span><br><span class="line"># GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION; </span><br><span class="line"># flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/images/resources/720153B5426BF11108B70C13CB1E834A.jpg" alt="IMAGE"></p><h2 id="linux下的-Shell-脚本的编写和运行"><a href="#linux下的-Shell-脚本的编写和运行" class="headerlink" title="linux下的 Shell 脚本的编写和运行"></a>linux下的 Shell 脚本的编写和运行</h2><blockquote><p>1.touch HelloWorld.sh</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo Hello World!</span><br></pre></td></tr></table></figure><blockquote><p>1.1 #!/bin/bash #!是代表这是一个解释程序 /bin/bash是bash的绝对路径。</p></blockquote><blockquote><p>2.bash HelloWrold.sh</p></blockquote><p><img src="/images/resources/E8C826ACCAF72920B8EF996443C17DC2.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行操作系统 </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle2</title>
      <link href="/2019/08/02/2019-09-10-Oracle(%E4%BB%BD)/"/>
      <url>/2019/08/02/2019-09-10-Oracle(%E4%BB%BD)/</url>
      
        <content type="html"><![CDATA[<p>Oracle数据库也是一个数据库的中间力量</p><h1 id="oracle数据库操作"><a href="#oracle数据库操作" class="headerlink" title="oracle数据库操作"></a>oracle数据库操作</h1><ol><li>Oracle 常用数据类型</li><li>Oracle 中常用的操作符</li><li>Oracle 常用函数</li><li>Oracle 中的序列 和 Oracle 中的查询</li><li>Oracle 中的视图</li><li>Oracle 中的触发器</li><li>Oracle 中的存储过程</li></ol><h2 id="oracle常用的数据类型"><a href="#oracle常用的数据类型" class="headerlink" title="oracle常用的数据类型"></a>oracle常用的数据类型</h2><p><strong>分为字符型,数字类型,日期,blob</strong></p><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p><strong>VARCHAR2 (n)：可变长度的字符,最大长度4000bytes,即1&lt;=n&lt;=4000,VARCHAR2(10)，表示占10个字节的字符串，当长度小于10字节时,不会自动补空格,占实际大小,大于则报错</strong></p><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p><strong>NUMBER(P,S):P为整数位+S小数位数.例如NUMBER(5,3),表示整数位数为2,小数位数为3的数字,如25.112</strong></p><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p><strong>data缺省格式为DD-MON-YY,timestamp同样,精确到纳秒</strong></p><h3 id="LOB类型"><a href="#LOB类型" class="headerlink" title="LOB类型"></a>LOB类型</h3><p><strong>BLOB：二进制数据,最大长度4G. CLOB:字符数据,最大长度4G，一般音视频类就BLOB,文献就CLOB</strong></p><h2 id="oracle常用的操作符"><a href="#oracle常用的操作符" class="headerlink" title="oracle常用的操作符"></a>oracle常用的操作符</h2><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><ol><li>=、!=、&lt;、&gt;、&lt;=、&gt;=、BETWEEN AND （检查是否在两个值之间）</li><li>[NOT] IN（与列表中的值匹配）</li><li>[NOT] LIKE（匹配字符模式， * _ 通配符）</li><li>[NOT] IS NULL（检查是否为空）</li></ol><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><ol><li>and or not </li><li>如果and和or混用,and的优先级高于or,所以尽量的使用括号来表明优先级</li></ol><h3 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h3><ol><li>UNION（联合） 返回两个查询选定不重复的行。( 删除重复的行 )</li><li>UNION ALL（联合所有） 合并两个查询选定的所有行，包括重复的行。</li><li>INTERSECT（交集） 只返回两个查询都有的行。</li><li>MINUS（减集） 在第一个查询结果中排除第二个查询结果中出现的行。 （第一 – 第二）</li></ol><p><strong><em>注意:使用集合操作符的时候列的数量和数据类型,都要保持一致</em></strong></p><h3 id="连接操作符"><a href="#连接操作符" class="headerlink" title="连接操作符"></a>连接操作符</h3><ol><li>使用||进行连接,返回字符串</li><li><code>SELECT (&#39;wwj&#39; || &#39;hello&#39;) as str1 FROM dual</code></li></ol><h2 id="oracle常用的函数"><a href="#oracle常用的函数" class="headerlink" title="oracle常用的函数"></a>oracle常用的函数</h2><h3 id="字符串函数-subsrt-和-replace-和-decode"><a href="#字符串函数-subsrt-和-replace-和-decode" class="headerlink" title="字符串函数 (subsrt 和 replace 和 decode)"></a>字符串函数 (subsrt 和 replace 和 decode)</h3><ol><li><p><code>SELECT SUBSTR(ch, pos, length) as str1 FROM dual</code></p></li><li><p>pos代表等于0或1时,都是从第一位开始截取</p></li><li><p>length代表要截取的字符串的长度</p></li><li><p>如果pos填写为负数,为倒着截取</p></li><li><p><code>SELECT REPLACE(&#39;wwj&#39;,&#39;j&#39;,&#39;q&#39;)  as  str1 FROM dual</code></p></li><li><p>将字符串中包含j的替换成q</p></li><li><p>decode(条件,值1,返回值1,值2,返回值2) 等同于 if elseif</p></li></ol><p><img src="/images/resources/5250B3965CC33D9ED6BD0DB958BEB994.jpg" alt="IMAGE"></p><h3 id="数学函数-round-和-trunc"><a href="#数学函数-round-和-trunc" class="headerlink" title="数学函数  (round 和 trunc )"></a>数学函数  (round 和 trunc )</h3><ol><li><p><code>SELECT ROUND(n, int)  as  num1 FROM dual</code></p></li><li><p>int位置代表保留几位小数,并且四舍五入</p></li><li><p><code>SELECT TRUNC(n1, n2)  as  num1 FROM dual</code></p></li><li><p>n2代表保留几位小数,并不四舍五入</p></li></ol><h3 id="转换函数-tochar-和-todate"><a href="#转换函数-tochar-和-todate" class="headerlink" title="转换函数(tochar 和  todate)"></a>转换函数(tochar 和  todate)</h3><ol><li><p><code>SELECT  to_char(SYSDATE,&#39;Day, HH12:MI:SS&#39;) FROM dual;</code><br> <code>SELECT  TO_CHAR(99,&#39;$99.9999&#39;) FROM dual;</code></p></li><li><p><code>SELECT  to_date(&#39;2089-5-7 17:09:37&#39;,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual</code></p></li></ol><h3 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h3><ol><li><p>nal(expr1,expr2)代表 oracle第一个参数为空那么显示第二个参数的值，如果第一个参数的值不为空，则显示第一个参数本来的值。</p></li><li><p>比如:<code>select ename,NVL(comm, -1) from emp;</code> 如何comm没值,则取-1</p></li></ol><h2 id="Oracle-中的序列-和-Oracle-中的查询"><a href="#Oracle-中的序列-和-Oracle-中的查询" class="headerlink" title="Oracle 中的序列 和 Oracle 中的查询"></a>Oracle 中的序列 和 Oracle 中的查询</h2><ol><li>mysql数据中提供了数据库自增的选项,但是oracle中没有提供,只有利用序列实现主键自增的功能</li><li>sequence 就是序号,也可以说是序列</li></ol><h3 id="序列创建的语法"><a href="#序列创建的语法" class="headerlink" title="序列创建的语法"></a>序列创建的语法</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE seq1</span><br><span class="line"></span><br><span class="line">INCREMENT BY 1 -- 每次加几个</span><br><span class="line"></span><br><span class="line">START WITH 1 -- 从1开始计数</span><br><span class="line"></span><br><span class="line">NOMAXvalue -- 不设置最大值</span><br><span class="line"></span><br><span class="line">NOCYCLE -- 一直累加,不循环</span><br><span class="line"></span><br><span class="line">CACHE 10; --设置缓存cache个序列，如果系统down掉了或者其它情况将会导致序列不连续，也可以设置为---------NOCACHE</span><br></pre></td></tr></table></figure><h4 id="查看与操作序列信息"><a href="#查看与操作序列信息" class="headerlink" title="查看与操作序列信息"></a>查看与操作序列信息</h4><ol><li><p><code>select * from user_sequences;</code></p></li><li><p><code>Select * from all_sequences;</code></p></li><li><p>使用序列名.CurrVal：返回 sequence的当前值</p></li><li><p>使用序列名.NextVal：增加sequence的值，然后返回 增加后sequence值</p></li></ol><p><code>select seq1.currval from dual</code></p><ol><li>重新初始化seq的序号(可以使用修改)</li></ol><p><code>alter sequence seq1 increment by 1</code></p><ol><li>删除seq <code>drop sequence seq1</code></li></ol><h3 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h3><blockquote><p>emp 员工表（empno 员工号/ename 员工姓名/job 工作/mgr 上级编号/hiredate 受雇日期/sal 薪金/comm 佣金/deptno 部门编号）</p></blockquote><blockquote><p>dept 部门表（deptno 部门编号/dname 部门名称/loc 地点）</p></blockquote><h4 id="创建部门表"><a href="#创建部门表" class="headerlink" title="创建部门表"></a>创建部门表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">       deptno number(10) primary key,</span><br><span class="line">       dname varchar2(30),</span><br><span class="line">       loc varchar2(30)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="创建员工表"><a href="#创建员工表" class="headerlink" title="创建员工表"></a>创建员工表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">       empno number(10) primary key,</span><br><span class="line">       ename varchar2(30),</span><br><span class="line">       job varchar2(30),</span><br><span class="line">       mgr varchar2(30),</span><br><span class="line">       hiredate number(10),</span><br><span class="line">       sal number(10),</span><br><span class="line">       comm number(10),</span><br><span class="line">       deptno number(10),</span><br><span class="line">       foreign key(deptno) references dept(deptno)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">insert into dept values(seq1.nextval, &apos;技术部&apos; ,&apos;南泥湾&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;SALES&apos; ,&apos;深圳市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;事业部&apos; ,&apos;北京市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;服务部&apos; ,&apos;延安&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;生产部&apos; ,&apos;南京市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;宣传部&apos; ,&apos;上海市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;打杂部&apos; ,&apos;广州市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;司令部&apos; ,&apos;重庆市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;卫生部&apos; ,&apos;长沙市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;文化部&apos; ,&apos;武冈市&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;娱乐部&apos; ,&apos;纽约&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;管理部&apos; ,&apos;伦敦&apos;);</span><br><span class="line">insert into dept values(seq1.nextval, &apos;行政部&apos; ,&apos;天津市&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;1&apos;, &apos;关羽羽&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20011109&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;2&apos;, &apos;SMITH&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20120101&apos;, &apos;2000&apos;, &apos;800&apos;, &apos;6&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;3&apos;, &apos;刘备备&apos;, &apos;MANAGER&apos;, &apos;宋祖英&apos;, &apos;20080808&apos;, &apos;9000&apos;, &apos;4000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;4&apos;, &apos;TOM&apos;, &apos;ENGINEER&apos;, &apos;Steve&apos;, &apos;20050612&apos;, &apos;3000&apos;, &apos;1000&apos;, &apos;4&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;5&apos;, &apos;Steve&apos;, &apos;MANAGER&apos;, &apos;宋祖英&apos;, &apos;20110323&apos;, &apos;80000&apos;, &apos;9000&apos;, &apos;4&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;6&apos;, &apos;张飞飞&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20101010&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;7&apos;, &apos;SCOTT&apos;, &apos;CLERK&apos;, &apos;刘备备&apos;, &apos;20071204&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;3&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;8&apos;, &apos;宋祖英&apos;, &apos;Boss&apos;, &apos;无&apos;, &apos;20060603&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;8&apos;);</span><br><span class="line">INSERT INTO &quot;EMP&quot;(&quot;EMPNO&quot;, &quot;ENAME&quot;, &quot;JOB&quot;, &quot;MGR&quot;, &quot;HIREDATE&quot;, &quot;SAL&quot;, &quot;COMM&quot;, &quot;DEPTNO&quot;) VALUES (&apos;9&apos;, &apos;曹仁人&apos;, &apos;SALESMAN&apos;, &apos;曹操操&apos;, &apos;20120130&apos;, &apos;2000&apos;, &apos;1000&apos;, &apos;5&apos;);</span><br></pre></td></tr></table></figure><h4 id="rownum分页"><a href="#rownum分页" class="headerlink" title="rownum分页"></a>rownum分页</h4><p><code>SELECT  ROWNUM , dept.*  FROM dept</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM </span><br><span class="line">(</span><br><span class="line">SELECT  ROWNUM , dept.*  FROM dept </span><br><span class="line">WHERE  ROWNUM &lt; endNum</span><br><span class="line">)</span><br><span class="line">WHERE  ROWNUM &gt; startNum</span><br></pre></td></tr></table></figure><blockquote><p>计算起始位置和结束位置<br><code>startNum = (pageNo - 1) * pageSize</code><br><code>endNum = (pageNo * pageSize) + 1</code></p></blockquote><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><blockquote><p>分组查询使用group by  和  having 进行过滤条件筛选</p></blockquote><blockquote><p>子查询也就是条件中加入查询语句</p></blockquote><blockquote><p>连接查询,内连接（利用where或者inner join）,左和右连接(left join 和 right join),自连接(树菜单结构)</p></blockquote><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><blockquote><p>1.列出至少有一个员工的所有部门。<br><code>select deptno,dname,loc from dept where deptno in (select deptno from emp);</code></p></blockquote><blockquote><p>2.列出薪金比“SMITH”多的所有员工。（大于最大薪水SMITH员工）<br><code>select empno,ename,sal from emp where emp.sal&gt;(select sal from emp emp1 where emp1.ename = &#39;SMITH&#39;)</code></p></blockquote><blockquote><p>3.列出所有员工的姓名及其直接上级的姓名。<br><code>select a.ename,b.ename from emp a,emp b where a.mgr=b.ename;</code></p></blockquote><blockquote><p>4.列出受雇日期早于其直接上级的所有员工。<br><code>select a.empno, a.ename from emp a, emp b where a.mgr=b.ename and a.hiredate&lt;b.hiredate;</code></p></blockquote><blockquote><p>5.列出部门名称和这些部门的员工信息，包括那些没有员工的部门。<br><code>select dept.dname,emp.* from dept left join emp on dept.deptno = emp.deptno;</code></p></blockquote><blockquote><p>6.列出所有job为“CLERK”（办事员）的姓名及其部门名称。<br><code>select emp.ename,emp.job,dept.dname from emp,dept where emp.job = &#39;CLERK&#39; and emp.deptno = dept.deptno;</code></p></blockquote><blockquote><p>7.列出最低薪金大于1500的各种工作。<br><code>select job from emp group by job having min(sal)&gt;1500;</code></p></blockquote><blockquote><p>8.列出在部门“SALES”（销售部）工作的员工的姓名，假定不知道销售部的部门编号。<br><code>select emp.ename from emp  where emp.deptno =  (select deptno from dept  where dept.dname = &#39;SALES&#39;);</code></p></blockquote><blockquote><p>9.列出薪金高于公司平均薪金的所有员工。<br><code>select * from emp where emp.sal &gt; (select avg(sal) from emp)</code></p></blockquote><blockquote><p>10.列出与“SCOTT”从事相同工作的所有员工。<br><code>select * from emp where emp.job = (select job from emp e  where e.ename = &#39;SCOTT&#39;);</code></p></blockquote><blockquote><p>11.列出薪金等于部门3中员工的薪金的所有员工的姓名和薪金。<br><code>select ename,sal from emp where sal in (select sal from emp where deptno=3);</code></p></blockquote><blockquote><p>12.列出薪金高于在部门3工作的所有员工的薪金的员工姓名和薪金。<br><code>select ename,sal from emp where sal &gt; (select max(sal) from emp where deptno=3);</code></p></blockquote><blockquote><p>13.列出在每个部门工作的员工数量、平均工资。<br><code>select deptno,count(empno),avg(sal) from emp group by deptno</code></p></blockquote><blockquote><p>14.列出所有员工的姓名、部门名称和工资。<br><code>select emp.ename as 姓名, dept.dname as 部门, emp.sal+emp.comm as 工资 from emp,dept where dept.deptno = emp.deptno;</code></p></blockquote><blockquote><p>15.列出从事同一种工作但属于不同部门的员工的一种组合。<br><code>select a.ename, b.ename, a.job, b.job, a.deptno, b.deptno from emp a,emp b where a.job=b.job and a.deptno$amp;</code></p></blockquote><blockquote><p>16.列出所有部门的详细信息和部门人数。<br><code>select dept.*,(select count(*) from emp where dept.deptno = emp.deptno) as pop from dept;</code></p></blockquote><blockquote><p>17.列出各种工作的最低工资。<br><code>select job,min((nvl(comm,0)+sal)) from emp group by job</code></p></blockquote><blockquote><p>18.列出各个部门的MANAGER（经理）的最低薪金（job为MANAGER）。<br><code>select emp.deptno, min(sal) from emp,dept where job = &#39;MANAGER&#39; group by emp.deptno</code></p></blockquote><blockquote><p>19.列出所有员工的年工资，按年薪从低到高排序。<br><code>select ename,(nvl(comm,0)+sal)*12 年薪 from emp</code></p></blockquote><h2 id="oracle视图"><a href="#oracle视图" class="headerlink" title="oracle视图"></a>oracle视图</h2><blockquote><p>当某个业务需要多个数据融合在一起展现的时候,可以利用视图</p></blockquote><ol><li>视图只查不改</li><li>其实就是一张虚拟表</li></ol><blockquote><p>语法(切换到sys  grant CREATE any view to WANGWEIJIE)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create or replace view v1 (maxsal,minsal,avgsal)</span><br><span class="line">                              As</span><br><span class="line">                          select max(sal),min(sal),avg(sal)from emp</span><br></pre></td></tr></table></figure><h2 id="oracle触发器"><a href="#oracle触发器" class="headerlink" title="oracle触发器"></a>oracle触发器</h2><h3 id="订单表和仓库表"><a href="#订单表和仓库表" class="headerlink" title="订单表和仓库表"></a>订单表和仓库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table sorder(</span><br><span class="line">       orderNo number(10) primary key,</span><br><span class="line">       proDuctNo number(10),</span><br><span class="line">       orderNum number(30)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table sproduct(</span><br><span class="line">       pNo number(10) primary key,</span><br><span class="line">       pNum number(10)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>场景一:新增一个订单的时候,库存表数量减少  :new代表新行  和  :old代表删除和更新</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER abc1</span><br><span class="line">AFTER INSERT ON SORDER</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">  UPDATE SPRODUCT SET SPRODUCT.PNUM = SPRODUCT.PNUM-:NEW.ORDERNUM  WHERE SPRODUCT.PNO = :NEW.PRODUCTNO;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><blockquote><p>场景二: 删除一个订单</p></blockquote><blockquote><p>场景三: 修改一个订单</p></blockquote><h2 id="Oracle-中的存储过程"><a href="#Oracle-中的存储过程" class="headerlink" title="Oracle 中的存储过程"></a>Oracle 中的存储过程</h2><blockquote><p>无参数存储过程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure p1</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">dbms_output.put_line(&apos; 执行了 &apos;);</span><br><span class="line">end p1;</span><br><span class="line">call p1()</span><br></pre></td></tr></table></figure><blockquote><p>有参数的存储</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure p2(newname in varchar2)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">dbms_output.put_line(&apos; 执行了 &apos;||newname);</span><br><span class="line">end p2;</span><br></pre></td></tr></table></figure><blockquote><p>输出参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure p3(newname out varchar2)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">select 5 into newname from dual;</span><br><span class="line">end p3;</span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line">newname number;</span><br><span class="line">begin</span><br><span class="line">p3(newname);</span><br><span class="line">dbms_output.put_line(&apos; 数据库中一共有 &apos;||newname||&apos; 条数据 &apos;);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM</title>
      <link href="/2019/07/31/2019-09-10-SSM%E6%95%B4%E5%90%88/"/>
      <url>/2019/07/31/2019-09-10-SSM%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>整合是一门学问,在于你想用什么技术改变生活</p><h1 id="maven分模块搭建SSM框架"><a href="#maven分模块搭建SSM框架" class="headerlink" title="maven分模块搭建SSM框架"></a>maven分模块搭建SSM框架</h1><ol><li>前期的准备</li><li>步骤分解整合SSM以及注意事项</li><li>整合mybatis分页插件  （详见核心代码）</li><li>整合mybatis事务 (详见注意事项)</li></ol><h2 id="前期的准备"><a href="#前期的准备" class="headerlink" title="前期的准备"></a>前期的准备</h2><p><strong><em>说明:一个项目分为前台:如考勤,审批.而后台数据库交互模块（dao).通用业务模块（service） 接口模块（api）通用工具（util）,dao、service、util你可能想要一些经验丰富的人来维护,模块化开发的另一个好处是如果dao的代码被修改，只需要重新build我们的dao模块就可以了。web模块可以build成war，dao、service、util等可以build成jar，只需要配置好依赖关系，就可以实现模块间的解耦合。这样的设计才是遵循“高内聚，低耦合”设计原则.</em></strong></p><hr><h2 id="步骤分解整合SSM-配置方式很多-活学活用"><a href="#步骤分解整合SSM-配置方式很多-活学活用" class="headerlink" title="步骤分解整合SSM(配置方式很多,活学活用)"></a>步骤分解整合SSM(配置方式很多,活学活用)</h2><h3 id="构建父级项目方式为-构建方式为pom-名字为small"><a href="#构建父级项目方式为-构建方式为pom-名字为small" class="headerlink" title="构建父级项目方式为(构建方式为pom)  名字为small"></a>构建父级项目方式为(构建方式为pom)  名字为small</h3><p><img src="/images/resources/8FB7CC7039A7C84896C071C3035C83E7.jpg" alt="IMAGE"></p><blockquote><p>父级项目右键构建3个moudle,分别small-web  small-service  small-dao  其中web打包方式为war  其余的均为jar</p></blockquote><blockquote><p>small-web:<br><img src="/images/resources/17BE1755A56A2F6E02CC4E0CC234F07D.jpg" alt="IMAGE"></p></blockquote><blockquote><p>small-service:<br><img src="/images/resources/ECB496D8A36173A326D2A8C737CE8247.jpg" alt="IMAGE"></p></blockquote><blockquote><p>small-dao:同理</p></blockquote><h3 id="pom-xml详见"><a href="#pom-xml详见" class="headerlink" title="pom.xml详见"></a>pom.xml详见</h3><p><strong><em><a href="https://github.com/djwangweijie/small.git" target="_blank" rel="noopener">github链接</a></em></strong></p><h3 id="配置文件结构（配置文件主要在small-web中）"><a href="#配置文件结构（配置文件主要在small-web中）" class="headerlink" title="配置文件结构（配置文件主要在small-web中）"></a>配置文件结构（配置文件主要在small-web中）</h3><p><img src="/images/resources/0CFA839910E99793A018BD67F589C6E2.jpg" alt="IMAGE"></p><hr><h2 id="整合mybatis分页插件-详见核心代码"><a href="#整合mybatis分页插件-详见核心代码" class="headerlink" title="整合mybatis分页插件(详见核心代码)"></a>整合mybatis分页插件(详见核心代码)</h2><blockquote><p> 通过mybatis分页插件可以不用在mapper映射中使用limit语句,使用插件提供的PageHelper和PageInfo对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/select1&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public List&lt;Student&gt;  a11()&#123;</span><br><span class="line">PageHelper.startPage(2, 3);</span><br><span class="line">List&lt;Student&gt; students = studentService.getAllStudent();</span><br><span class="line">PageInfo&lt;Student&gt; pi = new PageInfo&lt;&gt;(students);</span><br><span class="line">return students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="整合mybatis事务-详见注意事项"><a href="#整合mybatis事务-详见注意事项" class="headerlink" title="整合mybatis事务 (详见注意事项)"></a>整合mybatis事务 (详见注意事项)</h2><ol><li><p>使用    @Transactional  注解在服务的实现类中</p></li><li><p>其余操作详见github链接代码</p></li></ol><hr><h2 id="整合swaager文档生成"><a href="#整合swaager文档生成" class="headerlink" title="整合swaager文档生成"></a>整合swaager文档生成</h2><ul><li>相关依赖 (在small-web中)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;springfox-swagger2&gt;2.7.0&lt;/springfox-swagger2&gt;</span><br><span class="line">&lt;springfox-swagger-ui&gt;2.7.0&lt;/springfox-swagger-ui&gt;</span><br><span class="line">&lt;jackson-databind&gt;2.9.0&lt;/jackson-databind&gt;</span><br><span class="line">//分隔线注意</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;springfox-swagger2&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--springfox-ui的jar包(里面包含了swagger的界面静态文件) --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;springfox-swagger-ui&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--springfox依赖的jar包；如果你的项目中已经集成了无需重复 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;jackson-databind&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>构建swagger初始化配置 构建一个新报  com.wwj.swagger</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.swagger;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@ComponentScan(basePackages = &quot;com.wwj.controller&quot;)</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket api() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;small接口文档&quot;)</span><br><span class="line">                .description(&quot;small接口测试&quot;)</span><br><span class="line">                .version(&quot;1.0.0&quot;)</span><br><span class="line">                .termsOfServiceUrl(&quot;&quot;)</span><br><span class="line">                .license(&quot;&quot;)</span><br><span class="line">                .licenseUrl(&quot;&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在spring-mvc中注入对象和过滤对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--启用该标签代表 spring mvc 不拦截css、js、jpg等相关的静态资源--&gt;</span><br><span class="line">   &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">    &lt;bean class=&quot;com.wwj.swagger.SwaggerConfig&quot;/&gt;</span><br><span class="line">   &lt;mvc:resources location=&quot;classpath:/META-INF/resources/&quot; mapping=&quot;swagger-ui.html&quot;/&gt;</span><br><span class="line">   &lt;mvc:resources location=&quot;classpath:/META-INF/resources/webjars/&quot; mapping=&quot;/webjars/**&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>下载<a href="https://swagger.io/tools/swagger-ui/download/" target="_blank" rel="noopener">swaggerUI界面</a> 讲dist文件摆放到项目中api文件夹下</li></ul><p><img src="/images/resources/4A8CF5A2D7401B46CAFA3006E99E45A8.jpg" alt="IMAGE"></p><p>更改index.html中地址为自己的项目名+api+api-docs</p><p><code>url: &quot;http://localhost:8080/small-web/api/api-docs&quot;</code></p><ul><li>方法和参数上使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value=&quot;删除学生信息&quot;,httpMethod=&quot;POST&quot;) </span><br><span class="line">    public Map&lt;String,String&gt;  a4(@ApiParam(name = &quot;sid&quot;, value = &quot;学生编号&quot;, required = true)int sid)</span><br></pre></td></tr></table></figure><p>图示如下:</p><p><img src="/images/resources/07BA4FB1D1C7384F189B7AFA3CC8D406.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 框架整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目整合 </tag>
            
            <tag> MVC模式 </tag>
            
            <tag> 业务分层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven项目管理工具使用</title>
      <link href="/2019/07/30/2019-09-10-Maven/"/>
      <url>/2019/07/30/2019-09-10-Maven/</url>
      
        <content type="html"><![CDATA[<p>一个项目管理工具,能够帮助你的项目构建以及部署加快.</p><h1 id="maven的上下一体"><a href="#maven的上下一体" class="headerlink" title="maven的上下一体"></a>maven的上下一体</h1><ol><li>Maven 简介</li><li>Maven 的安装和配置</li><li>Maven 仓库</li><li>Maven 入门</li><li>Maven 核心概念解析</li><li>Maven 的依赖管理</li><li>Eclipse 中创建 Maven JAVEWEB 项目</li><li>Maven 的继承</li><li>Maven 的聚合</li></ol><p><strong>maven简单的说是一个项目集管理工具</strong></p><p><strong>一个项目里面包含什么内容,无非是java代码,资源,甚至是相关的一些jar包,如何摆放</strong></p><p><strong>多个项目之间是否存在关系,是否需要相互照应,是否能够将项目直接放置在tomcat中,那么这些都需要靠maven来进行操作</strong></p><h2 id="maven的简介说明"><a href="#maven的简介说明" class="headerlink" title="maven的简介说明"></a>maven的简介说明</h2><ol><li>一个普通的web项目需要在lib中引入大量的jar包,maven可以帮助我们添加需要的jar包</li><li>一个工具包可能需要依赖其它的jar包作为支撑,比如使用log4j的时候需要依靠通用的common-io包,maven可以帮助的项目做依赖jar包</li><li>一些jar包有着不同的版本,每个项目可能需要的jar包不一样，从哪里来。maven提供了一个中央仓库供大家下载</li><li>多模块拆分,以前常见使用package的方式进行分层能够解决基本的问题,但随着项目越来越大,那么我们要进行细化,直接使用package分并不够。那么通过我们可以通过maven进行拆分，并且统一进行管理</li></ol><blockquote><p> 关于构建   （结构化的建立）(也就是有一种标准式的建立方式)</p></blockquote><p>主要有几个动作:</p><ol><li>clean  清理:删除编译的内容,做好重新编译的准备</li><li>complie 编译:也就是将代码编译为class文件</li><li>test    测试:对项目中的某个模块业务进行测试,以确保的结果的准确性</li><li>report  报告:有测试完毕的情况下,有对应的报告生成</li><li>package 打包:将一个文件或者多个进行jar或者war包打包</li><li>install 安装:将jar包或者war包安装到本地仓库中</li><li>deploy  部署:将war包部署到服务器容器中</li></ol><blockquote><p> 自动构建 (CI) 持续集成</p></blockquote><p>上面的动作是非常繁琐的。是否可以通过一个命令一个脚本帮助你做这件事情。这个我们称作为自动构建或者叫做持续集成</p><hr><h2 id="maven的安装与配置"><a href="#maven的安装与配置" class="headerlink" title="maven的安装与配置"></a>maven的安装与配置</h2><ol><li><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">官网地址下载</a></li></ol><p><img src="/images/resources/1BBE9FACF8C8AE80FA7659F0EEB7E789.jpg" alt="IMAGE"></p><ol start="2"><li>windows配置环境变量（注意:可能需要设置JAVA_HOME变量）</li></ol><p>mac中加入  bash_profile  (可执行的配置文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.bash_profile</span><br><span class="line">#add maven_home</span><br><span class="line">MAVEN_HOME=/Users/Yun/Documents/maven/apache-maven-3.3.9</span><br><span class="line">PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line">export MAVEN_HOME</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用mvn -v 命令查看maven版本 (验证是否安装成功)</p></li><li><p>修改使用maven下载jar包存放仓库的位置(路径自行选择)</p></li></ol><p><strong>在config-setting.xml中 更改<code>&lt;localRepository&gt;/Users/Yun/Documents/maven/repo&lt;/localRepository&gt;</code></strong></p><ol start="5"><li>设置镜像仓库（maven默认仓库假设在美国,国内有锁,下载十分缓慢）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>后期为了保证项目统一的jdk版本在<profiles>中加入(JDK更改即可)</profiles></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;  </span><br><span class="line">        &lt;id&gt;jdk18&lt;/id&gt;  </span><br><span class="line">        &lt;activation&gt;  </span><br><span class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;  </span><br><span class="line">            &lt;jdk&gt;1.8&lt;/jdk&gt;  </span><br><span class="line">        &lt;/activation&gt;  </span><br><span class="line">        &lt;properties&gt;  </span><br><span class="line">            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;  </span><br><span class="line">            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;  </span><br><span class="line">            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;  </span><br><span class="line">        &lt;/properties&gt;   </span><br><span class="line">&lt;/profile&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="maven仓库的概念"><a href="#maven仓库的概念" class="headerlink" title="maven仓库的概念"></a>maven仓库的概念</h2><ol><li>本地仓库  (本地maven存放的文件)</li><li>远程仓库  (来自五湖四海汇集到一起)</li><li>私服  (开发中,都有自己搭建的私服,其实就是私有仓库)</li><li>中央仓库和镜像  中央仓库只有一个，镜像是中央仓库的克隆，用于分担中央仓库的压力</li></ol><hr><h2 id="maven入门"><a href="#maven入门" class="headerlink" title="maven入门"></a>maven入门</h2><ol><li>eclipse中配置maven路径(默认是自动识别)</li></ol><p><img src="/images/resources/73D57B7BC13C464600F145DE5595500C.jpg" alt="IMAGE"></p><ol start="2"><li>加载maven配置文件</li></ol><p><img src="/images/resources/57AEF086913F64A7DA8C528D30C6EE78.jpg" alt="IMAGE"></p><ol start="3"><li>构建一个mavenproject（勾选创建一个简单的maven项目）</li></ol><p><img src="/images/resources/4A786576D76AFE6F259142B70D52183C.jpg" alt="IMAGE"></p><p>目录结构如下:<br><img src="/images/resources/C5D37B5C0774B1F9EC36D6C5FA039BF1.jpg" alt="IMAGE"></p><ol start="4"><li>观察一下pom.xml（自行加入junit）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven001&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在src/main/java 以及 src/test/java中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloMaven &#123;</span><br><span class="line">public String sayHello(String name)&#123;</span><br><span class="line">return &quot;Hello &quot;+name+&quot;!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import com.wwj.hell.HelloMaven;</span><br><span class="line"></span><br><span class="line">public class HelloMavenTest &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testHello()&#123;</span><br><span class="line">HelloMaven hello = new HelloMaven();</span><br><span class="line">String results = hello.sayHello(&quot;wwj&quot;);</span><br><span class="line">//用于判别内容是否一致</span><br><span class="line">assertEquals(&quot;Hello wwj!&quot;,results);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>切换到项目根目录下执行</li></ol><blockquote><p>mvn compile (注意观察info)<br><img src="/images/resources/44ADBEA87CCC1EFCB588E9CB13ADB516.jpg" alt="IMAGE"></p></blockquote><blockquote><p>mvn clean （注意观察info）<br><img src="/images/resources/D114422FC4AE660F431E5BE76090575E.jpg" alt="IMAGE"></p></blockquote><blockquote><p>mvn test (注意观察info)<br> <img src="/images/resources/9CE6A377B5221400276A05AC65FFFCB5.jpg" alt="IMAGE"></p></blockquote><blockquote><p>会新增一个测试报告<br> <img src="/images/resources/D0CF929FCBC72D6F065093AA1C6707DE.jpg" alt="IMAGE"></p></blockquote><blockquote><p>mvn package (注意观察info) （compile-&gt;test-&gt;package）<br><img src="/images/resources/DE3585212E5248521FCDE51128085E43.jpg" alt="IMAGE"></p></blockquote><hr><h2 id="Maven-核心概念解析（pom-目录结构-坐标）"><a href="#Maven-核心概念解析（pom-目录结构-坐标）" class="headerlink" title="Maven 核心概念解析（pom,目录结构,坐标）"></a>Maven 核心概念解析（pom,目录结构,坐标）</h2><ol><li><p>pom.xml文件对整体项目文件的管理。认知maven就是认知pom.xml文件</p></li><li><p><code>src/main/java</code> 为项目的逻辑代码存放地  <code>src/main/resource</code> 为项目资源配置文件,同理测试目录为测试文件与资源的存放地</p></li><li><p>target为compile存放文件的位置</p></li><li><p>坐标主要的目的一个项目能从maven仓库中找到需要的内容,而这个内容需要有一个标识</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven001&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br></pre></td></tr></table></figure><p>执行 mvn install (观察info) 相当于打包jar包放置与本地仓库中</p><blockquote><p>路径:<br><img src="/images/resources/5E0F14C6748755DDD78BD25CBA7E7039.jpg" alt="IMAGE"></p></blockquote><hr><h2 id="Maven-的依赖管理"><a href="#Maven-的依赖管理" class="headerlink" title="Maven 的依赖管理"></a>Maven 的依赖管理</h2><ol><li>依赖管理 <dependency> 中有一个标签叫    <scope></scope>, scope有3个选项compile,test,provided</dependency></li></ol><ul><li>compile 编译 主要为项目主业务代码  从前到后使用</li><li>test    测试 主要提供给测试业务代码 仅仅只在test使用</li><li>provided 可提供的 也就是从编译到测试使用,可以理解为仅仅只在项目中使用,部署后由容易本身提供</li></ul><ol start="2"><li>依赖传递概念</li></ol><p>(1). 假如有Maven项目A，项目B依赖A，项目C依赖B。那么我们可以说 C依赖A。也就是说，依赖的关系为：C—&gt;B—&gt;A。 那么我们执行项目C时，会自动把B、A都下载导入到C项目的jar包文件夹中。这就是依赖的传递性。并且C对B的支撑要达到complie级别,A才能够可见到C. 其余级别不支持</p><p>(2). 如果C现在不要A （使用exclusion）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;exclusions&gt;</span><br><span class="line">   &lt;exclusion&gt;</span><br><span class="line">     &lt;!--被排除的依赖包坐标--&gt;</span><br><span class="line">     &lt;groupId&gt;A&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;A&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">   &lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br></pre></td></tr></table></figure><p>(3). 依赖冲突:一个项目A，通过不同依赖传递路径依赖于X，若在不同路径下传递过来的X版本不同</p><ul><li>短路优先 (会选择version2)</li></ul><p>A -&gt; B -&gt; C -&gt; X(VERSION=1)  和   A -&gt; D -&gt; X(VERSION=2)</p><ul><li>声明优先(会选择version2) 在A的声明中 D如果写在E前则D优先</li></ul><p>A -&gt; D -&gt; X(VERSION=2)  和  A -&gt; E -&gt; X(VERSION=1)</p><ol start="3"><li>统一版本管理</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;wwj.junit&gt;4.0&lt;/wwj.junit&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;wwj.junit&#125;&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="Eclipse-中创建-Maven-JAVEWEB-项目-（勾选简单的maven项目）"><a href="#Eclipse-中创建-Maven-JAVEWEB-项目-（勾选简单的maven项目）" class="headerlink" title="Eclipse 中创建 Maven JAVEWEB 项目 （勾选简单的maven项目）"></a>Eclipse 中创建 Maven JAVEWEB 项目 （勾选简单的maven项目）</h2><ol><li><p><img src="/images/resources/0F6C6973C432AAE577304D8B85482B3F.jpg" alt="IMAGE"></p></li><li><p>项目右键勾选属性:</p></li></ol><p><img src="/images/resources/071A415B5F6AA7FFDE043A8876DE3318.jpg" alt="IMAGE"></p><p>OK~ 一个web项目构建完成</p><hr><h2 id="maven的继承-多个子项目都需要某些依赖-就可以把子项目共同的依赖抽取到父项目中-子项目通过继承得到这些依赖"><a href="#maven的继承-多个子项目都需要某些依赖-就可以把子项目共同的依赖抽取到父项目中-子项目通过继承得到这些依赖" class="headerlink" title="maven的继承 (多个子项目都需要某些依赖, 就可以把子项目共同的依赖抽取到父项目中,子项目通过继承得到这些依赖)"></a>maven的继承 (多个子项目都需要某些依赖, 就可以把子项目共同的依赖抽取到父项目中,子项目通过继承得到这些依赖)</h2><ol><li>构建父项目(打包方式为pom)</li></ol><p><img src="/images/resources/DCCE91BE862AD98BB0BE6D46854BEFBE.jpg" alt="IMAGE"></p><ol start="2"><li>父项目使用 dependencyManagement 标签来管理,<del>optional表示子 pom 无论如何都不能继承(已经失效)</del> </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven003&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 子 pom 可以继承 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.47&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>子项目使用父项目的依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven004&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;!-- 父项目坐标 --&gt;</span><br><span class="line">&lt;groupId&gt;com.wwj&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven003&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;!-- 父项目 pom 文件路径 --&gt;</span><br><span class="line">&lt;relativePath&gt;../maven003/pom.xml&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 不需要版本, 会从父项目继承, 如果指定版本就是代表不是来自父 pom 而是子 pom 自己的. --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="9-maven聚合-将功能模块拆分-最常见的我们整合ssm的时候会将service和dao进行拆分-当然也可以以项目的方式"><a href="#9-maven聚合-将功能模块拆分-最常见的我们整合ssm的时候会将service和dao进行拆分-当然也可以以项目的方式" class="headerlink" title="9.maven聚合 (将功能模块拆分,最常见的我们整合ssm的时候会将service和dao进行拆分,当然也可以以项目的方式)"></a>9.maven聚合 (将功能模块拆分,最常见的我们整合ssm的时候会将service和dao进行拆分,当然也可以以项目的方式)</h2><blockquote><p>maven-parent (Maven Project)</p><blockquote><p>|- maven-son1 (Maven Module)<br>|- maven-son2 (Maven Module)<br>|- …</p></blockquote></blockquote><ol><li><p>创建父模块(父模块一般承担聚合模块和统一管理依赖的作用，没有实际代码和资源文件) （打包方式为pom.xml）</p></li><li><p>右键父项目创建子模块module</p></li></ol><p><img src="/images/resources/1CA2119133EA9373976389513FB0CDE0.jpg" alt="IMAGE"></p><p><img src="/images/resources/C4C12327244DBD23E8658500AF684B77.jpg" alt="IMAGE"></p><p><img src="/images/resources/E788A9661E44A6FF7D1C422539C465CA.jpg" alt="IMAGE"></p><p><strong>分别观察到父亲管理那些模块,儿子的父亲是谁</strong></p><ol start="3"><li>父模块做统一管理</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">  &lt;wwj.json&gt;1.2.47&lt;/wwj.json&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 子 pom 可以继承 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;wwj.json&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>子模块直接进行依赖 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- 子 pom 可以继承 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>切换到maven父项目执行mvn install (观察info)</li></ol><p><img src="/images/resources/D89E092C23EB449A59A0C6867C3CA3AE.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 项目管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle1</title>
      <link href="/2019/07/30/2019-09-10-Oracle(%E7%BC%98)/"/>
      <url>/2019/07/30/2019-09-10-Oracle(%E7%BC%98)/</url>
      
        <content type="html"><![CDATA[<p>Oracle数据库也是一个数据库的中间力量</p><h1 id="服务器的配置"><a href="#服务器的配置" class="headerlink" title="服务器的配置"></a>服务器的配置</h1><ol><li>512M内存 500GB的带宽  10G的SSD</li><li>系统采用centos6 64位</li><li>3.5刀一个月</li></ol><p><strong>XE是免费可授权版.只允许在一个机器上面跑实例。但是用来测试单库是性价比最高的</strong></p><h1 id="XE的下载地址-现在oracle需要采取登录才能授权下载-故采用scp的方式上传到服务器中"><a href="#XE的下载地址-现在oracle需要采取登录才能授权下载-故采用scp的方式上传到服务器中" class="headerlink" title="XE的下载地址 (现在oracle需要采取登录才能授权下载,故采用scp的方式上传到服务器中)"></a>XE的下载地址 (现在oracle需要采取登录才能授权下载,故采用scp的方式上传到服务器中)</h1><p><strong><a href="http://download.oracle.com/otn/linux/oracle11g/xe/oracle-xe-11.2.0-1.0.x86_64.rpm.zip" target="_blank" rel="noopener">http://download.oracle.com/otn/linux/oracle11g/xe/oracle-xe-11.2.0-1.0.x86_64.rpm.zip</a></strong></p><h1 id="上传至root下的自定义文件下"><a href="#上传至root下的自定义文件下" class="headerlink" title="上传至root下的自定义文件下"></a>上传至root下的自定义文件下</h1><blockquote><p>scp /Users/Yun/Downloads/oracle-xe-11.2.0-1.0.x86_64.rpm.zip  <a href="mailto:root@144.202.3.120" target="_blank" rel="noopener">root@144.202.3.120</a>:/root/wwj/</p></blockquote><h1 id="安装固定依赖"><a href="#安装固定依赖" class="headerlink" title="安装固定依赖"></a>安装固定依赖</h1><blockquote><p>yum install libaio libaio-devel bc -y</p></blockquote><h1 id="添加虚拟内存-针对小型服务器-命令请依次执行"><a href="#添加虚拟内存-针对小型服务器-命令请依次执行" class="headerlink" title="添加虚拟内存(针对小型服务器)(命令请依次执行)"></a>添加虚拟内存(针对小型服务器)(命令请依次执行)</h1><ol><li>su - root</li><li>dd if=/dev/zero of=/swapfile bs=1024 count=1048576</li><li>mkswap /swapfile</li><li>swapon /swapfile</li><li>cp /etc/fstab /etc/fstab.backup_$(date +%N)</li><li>echo ‘/swapfile swap swap defaults 0 0’ /etc/fstab</li><li>chown root:root /swapfile</li><li>chmod 0600 /swapfile</li><li>swapon -a</li><li>swapon -s</li></ol><p><strong>注意:需要删除虚拟内存分区即可swapoff  /swapfile和rm -rf   /swapfile</strong></p><h1 id="安装解压命令并解压"><a href="#安装解压命令并解压" class="headerlink" title="安装解压命令并解压"></a>安装解压命令并解压</h1><ol><li>yum install -y unzip zip</li><li>unzip oracle-xe-11.2.0-1.0.x86_64.rpm.zip</li></ol><p><img src="/images/resources/424F01536FAB519A4394C9E084FE5B83.jpg" alt="IMAGE"></p><p><strong>文件安装在disk01中,安装切换到disk01中</strong></p><h1 id="安装oracelXE-切换到Disk01"><a href="#安装oracelXE-切换到Disk01" class="headerlink" title="安装oracelXE(切换到Disk01)"></a>安装oracelXE(切换到Disk01)</h1><ol><li>rpm -ivh oracle-xe-11.2.0-1.0.x86_64.rpm</li></ol><p><img src="/images/resources/2DA0CC6EE065F94EAB657B314A3A542C.jpg" alt="IMAGE"></p><h1 id="执行初始化文件"><a href="#执行初始化文件" class="headerlink" title="执行初始化文件"></a>执行初始化文件</h1><ol><li>/etc/init.d/oracle-xe configure命令</li></ol><p>默认端口为8080 可改:8888</p><p>监听端口为1521  sys与system密码设置为xxxx</p><p>配置为开机启动</p><blockquote><p>等待中……</p></blockquote><p><img src="/images/resources/33294381FC9EB0096E328C78247CBF55.jpg" alt="IMAGE"></p><h2 id="可选操作-需要在命令窗口中进行数据库的访问"><a href="#可选操作-需要在命令窗口中进行数据库的访问" class="headerlink" title="可选操作(需要在命令窗口中进行数据库的访问)"></a>可选操作(需要在命令窗口中进行数据库的访问)</h2><ol><li>cd /u01/app/oracle/product/11.2.0/xe/bin/   (u01在系统的根目录下)</li><li>source ./oracle_env.sh </li></ol><h2 id="可选图形连接界面"><a href="#可选图形连接界面" class="headerlink" title="可选图形连接界面"></a>可选图形连接界面</h2><ol><li>/sbin/iptables -I INPUT -p tcp –dport 1521 -j ACCEPT  (加入端口开放)</li><li>/etc/rc.d/init.d/iptables save   （保存端口）</li><li>/etc/init.d/iptables status   （查看开放的端口）</li></ol><h2 id="可选关闭防火墙"><a href="#可选关闭防火墙" class="headerlink" title="可选关闭防火墙"></a>可选关闭防火墙</h2><ol><li>service iptables start</li><li>service iptables stop</li></ol><p><img src="/images/resources/787A32CA2A1BDB3D74AAA8F38FB65617.jpg" alt="IMAGE"></p><h1 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h1><ol><li>创建一个新的表空间(类似创建一个新的数据库) </li></ol><p><img src="/images/resources/46C2C8C3453B7255300DE85A8427AEA0.jpg" alt="IMAGE"></p><ol start="2"><li>新建一个用户给与connect与resource权限</li></ol><p><img src="/images/resources/398495E85B4EB5F2233F63597022ABD7.jpg" alt="IMAGE"></p><p><img src="/images/resources/6815A1B6FF76EEA564A80E8630AE320E.jpg" alt="IMAGE"></p><ol start="3"><li>更改连接</li></ol><p><img src="/images/resources/85E8F3B5DA1B3FCBDAB895CB63D4795D.jpg" alt="IMAGE"></p><ol start="4"><li>美美的操作oracle数据库</li></ol><p><img src="/images/resources/F93EE07F31FF08592D96621995F0C51B.jpg" alt="IMAGE"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC2</title>
      <link href="/2019/07/29/2019-09-10-SpringMVC(%E4%BB%BD)/"/>
      <url>/2019/07/29/2019-09-10-SpringMVC(%E4%BB%BD)/</url>
      
        <content type="html"><![CDATA[<p>SpringMVC让你的C层更加高效 </p><h1 id="springMVC-下集"><a href="#springMVC-下集" class="headerlink" title="springMVC(下集)"></a>springMVC(下集)</h1><ol><li>SpringMVC 的常用注解</li><li>SpringMVC 静态资源的处理</li><li>SpringMVC 的文件上传和下载</li><li>SpringMVC 的统一异常处理</li><li>SpringMVC 的拦截器</li><li>SpringMVC 的自动校验</li></ol><h2 id="springmvc常用注解"><a href="#springmvc常用注解" class="headerlink" title="springmvc常用注解"></a>springmvc常用注解</h2><h3 id="使用cookie获取页面设置的cookie值-代码示例"><a href="#使用cookie获取页面设置的cookie值-代码示例" class="headerlink" title="使用cookie获取页面设置的cookie值,代码示例:"></a>使用cookie获取页面设置的cookie值,代码示例:</h3><ol><li>构建页面进行cookie的值的设置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //(path)必须要填写，因为JS的默认路径是当前页，如果不填，此cookie只在当前页面生效！~</span><br><span class="line">        document.cookie=&quot;name=wwj;path=/&quot;  </span><br><span class="line">        document.cookie=&quot;age=32;path=/&quot;     </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;a href=&quot;testCookie&quot;&gt;查看Cookie&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>后台业务代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class CookieController &#123;</span><br><span class="line">@RequestMapping(&quot;/testCookie&quot;)</span><br><span class="line">public String testCookie(@CookieValue(value = &quot;name&quot;, required = false) String name,</span><br><span class="line">@CookieValue(value = &quot;age&quot;, required = false) Integer age) &#123;</span><br><span class="line">System.out.println(name + &quot;,&quot; + age);</span><br><span class="line">return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>操作访问，先访问jsp页面进行cookie值的设置。在进行请求的访问</li></ol><h3 id="使用-SessionAttributes将数据放入session作用域中"><a href="#使用-SessionAttributes将数据放入session作用域中" class="headerlink" title="使用@SessionAttributes将数据放入session作用域中"></a>使用@SessionAttributes将数据放入session作用域中</h3><p><strong>需要注意的是@SessionAttributes只能用在类上</strong></p><p><strong>常用的设置@SessionAttributes(value={“user1”, “user2”}) 会将model中属性名为user1和user2的属性添加到会话中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SessionAttributes(value=&#123;&quot;user&quot;&#125;)</span><br><span class="line">@Controller</span><br><span class="line">public class SessionController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/testSessionAttributes&quot;)</span><br><span class="line">    public String testSessionAttributes(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;user&quot;, &quot;wwj&quot;);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问连接,分别在不用的页面进行取值</strong></p><h3 id="使用-ModelAttribute"><a href="#使用-ModelAttribute" class="headerlink" title="使用@ModelAttribute"></a>使用@ModelAttribute</h3><ol><li>注释在一个普通方法(初始化数据)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//构建一个模型</span><br><span class="line">public class Girl &#123;</span><br><span class="line">private  String name;</span><br><span class="line">private  int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ModelController &#123;</span><br><span class="line">    @ModelAttribute(&quot;girl&quot;)</span><br><span class="line">    public Girl init(Model model)&#123;</span><br><span class="line">        Girl g  = new Girl();</span><br><span class="line">        g.setAge(28);</span><br><span class="line">        g.setName(&quot;菲菲&quot;);</span><br><span class="line">        return g;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;/m1&quot;)</span><br><span class="line">    public String m1(Model model) &#123;</span><br><span class="line">        System.out.println(model.containsAttribute(&quot;girl&quot;));</span><br><span class="line">        return &quot;msg&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>直接接收restful格式并进行封装</li></ol><ul><li><p>路径请求      <code>&lt;a href=&quot;m2/wwj/32&quot;&gt;restful操作&lt;/a&gt;</code></p></li><li><p>接收restful</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/m2/&#123;name&#125;/&#123;age&#125;&quot;)</span><br><span class="line">public String m1(@ModelAttribute Girl girl) &#123;</span><br><span class="line">    System.out.println(girl.getName()+girl.getAge());</span><br><span class="line">    return &quot;msg&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意数据:数据被封装到modelattr中，同时也是在model中的</strong></p><h3 id="设置请求方式-了解"><a href="#设置请求方式-了解" class="headerlink" title="设置请求方式 (了解)"></a>设置请求方式 (了解)</h3><p>@RequestMapping(value=”m3”,method=RequestMethod.POST)</p><p>通过method来设置http的请求方式</p><p><strong>总结:其实不在乎注解的与多少，毕竟是属于对servlet的包装，可以假定不管使用什么方式,接收到前台所传递的参数</strong></p><hr><h2 id="springMVC对于静态资源的处理"><a href="#springMVC对于静态资源的处理" class="headerlink" title="springMVC对于静态资源的处理"></a>springMVC对于静态资源的处理</h2><ol><li>使用 <code>&lt;mvc:resources&gt;</code> 掌握</li></ol><blockquote><p><a href="http://localhost:8080/springmvc001/usrjs.jsp" target="_blank" rel="noopener">http://localhost:8080/springmvc001/usrjs.jsp</a></p></blockquote><p><img src="/images/resources/DC81062A73BA8F73B3D2C11A5E678C10.jpg" alt="IMAGE"></p><p>静态资源在加载的时候,被拦截了。这个时候需要我们在springmvc中标注哪些为静态资源，不受springmvc进行拦截</p><p><code>&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt;</code></p><p>location代表着webcontext容器下路径。映射所有js下面的资源为静态资源</p><p><strong>观察浏览器资源加载列表</strong></p><ol start="2"><li>使用<code>&lt;mvc:default-servlet-handler/&gt;</code>（掌握）</li></ol><hr><h2 id="SpringMVC的文件上传和下载"><a href="#SpringMVC的文件上传和下载" class="headerlink" title="SpringMVC的文件上传和下载"></a>SpringMVC的文件上传和下载</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><ol><li>构建form表单  需要设置enctype(编码格式) 为  multipart/form-data 不仅包含文本数据,还包含文件数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 多文件上传 --&gt;</span><br><span class="line">&lt;form action=&quot;uploadUrl&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;filename&quot; /&gt; &lt;input type=&quot;file&quot;</span><br><span class="line">name=&quot;filename&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;文件上传&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>引入对应的jar包</li></ol><p><strong>Commons-fileupload.jar和commons-io.jar 2个包属于依赖关系翻译过来就是通用的上传与通用的读写操作</strong></p><ol start="3"><li>设置对应的上传数据要求在springmvc.xml中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">&lt;!-- 设置请求编码格式，必须与JSP中的pageEncoding属性一致 --&gt;</span><br><span class="line">&lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;!-- 设置允许上传文件的最大值（2MB），单位为字节 --&gt;</span><br><span class="line">&lt;property name=&quot;maxUploadSize&quot; value=&quot;2097152&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>处理对应上传的处理类</li></ol><p><img src="/images/resources/ABC7FA95FB2BF5E1010B01D73786E14C.jpg" alt="IMAGE"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/uploadUrl&quot;)</span><br><span class="line">public String   handleFormUpload(@RequestParam(&quot;filename&quot;) MultipartFile[] files,HttpServletRequest  req)&#123;</span><br><span class="line">//判断文件是否存在</span><br><span class="line">if(files.length&gt;0)&#123;</span><br><span class="line">for (MultipartFile multipartFile : files) &#123;</span><br><span class="line">//获取上传文件的原始名字</span><br><span class="line">String originalFilename = multipartFile.getOriginalFilename();</span><br><span class="line">//一般决定于项目设计的时候所规范的路径</span><br><span class="line">String dirPath = req.getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">File filePath = new File(dirPath);</span><br><span class="line"> //如果保存文件的地址不存在，就先创建目录</span><br><span class="line">                if(!filePath.exists()) &#123;</span><br><span class="line">                    filePath.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                String newFilename = UUID.randomUUID()+&quot;_&quot;+originalFilename;</span><br><span class="line">                try &#123;</span><br><span class="line">multipartFile.transferTo(new File(dirPath + newFilename));</span><br><span class="line">&#125; catch (IllegalStateException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:UUID 是 通用唯一识别码（Universally Unique Identifier），是一种软件建构的标准</strong></p><p><img src="/images/resources/99C8E654E5FE9E5D90EF22EEDD3FACB8.jpg" alt="IMAGE"></p><h4 id="使用ajax进行文件的上传"><a href="#使用ajax进行文件的上传" class="headerlink" title="使用ajax进行文件的上传"></a>使用ajax进行文件的上传</h4><blockquote><p>注意事项:</p></blockquote><ol><li>需要使用到js中一个叫做formData对象</li><li>尽量使用goole或者火狐浏览器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function testup()&#123;</span><br><span class="line">    var form = new FormData(document.getElementById(&quot;tf&quot;));</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:&quot;uploadUrl1&quot;,</span><br><span class="line">        type:&quot;post&quot;,</span><br><span class="line">        data:form,</span><br><span class="line">        processData:false,</span><br><span class="line">        contentType:false,</span><br><span class="line">        success:function(data)&#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">            if(data==&quot;ok&quot;)&#123;</span><br><span class="line">                alert(&quot;上传成功&quot;)</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                alert(&quot;上传失败&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:contentType 和 processData 设置为false 使其能够正确的对formdata进行处理</strong></p><h3 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h3><ol><li>构建请求</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;downloadone&quot;&gt;下载单文件&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;downloadmore&quot;&gt;下载多文件&lt;/a&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>构建处理类:</li></ol><ul><li>单文件下载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class DownloadController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/downloadone&quot;)</span><br><span class="line">public ResponseEntity&lt;byte[]&gt; download(HttpServletRequest req) throws IOException &#123;</span><br><span class="line">// 这个路径由数据库中取出</span><br><span class="line">String resourceName = &quot;计划.txt&quot;;</span><br><span class="line">// 指定全路径位置</span><br><span class="line">File file = new File(req.getServletContext().getRealPath(&quot;/upload/&quot;)+resourceName);</span><br><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">// 避免出现文件名乱码</span><br><span class="line">String filename = new String(resourceName.getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);</span><br><span class="line">//设置响应的内容   attachment 附件</span><br><span class="line">headers.setContentDispositionFormData(&quot;attachment&quot;, filename);</span><br><span class="line">// 设置响应的内容为流的方式</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">return new ResponseEntity&lt;byte[]&gt;(FileUtils.readFileToByteArray(file),headers,HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多文件需要考虑进行打包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/downloadmore&quot;)</span><br><span class="line">public ResponseEntity&lt;byte[]&gt; download1s(HttpServletRequest req) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">//数据库中提取</span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">list.add(&quot;计划.txt&quot;);</span><br><span class="line">list.add(&quot;进度.txt&quot;);</span><br><span class="line"></span><br><span class="line">//压缩后的文件名</span><br><span class="line">String resourcesName = &quot;test.zip&quot;;</span><br><span class="line">//压缩后的全路径</span><br><span class="line">String  pathName = req.getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">File  zipFile = new File(pathName+resourcesName);</span><br><span class="line">ZipOutputStream zipOut = new ZipOutputStream(new FileOutputStream(zipFile));</span><br><span class="line">//读取并写入到压缩包里面</span><br><span class="line">InputStream input = null;</span><br><span class="line">for (String str : list) &#123;</span><br><span class="line">String name = pathName+str;</span><br><span class="line">input = new FileInputStream(new File(name));  </span><br><span class="line">            zipOut.putNextEntry(new ZipEntry(str));  </span><br><span class="line">            int temp = 0;  </span><br><span class="line">            while((temp = input.read()) != -1)&#123;  </span><br><span class="line">                zipOut.write(temp);  </span><br><span class="line">            &#125;  </span><br><span class="line">            input.close();</span><br><span class="line">&#125;</span><br><span class="line">zipOut.close();</span><br><span class="line">File file = new File(pathName+resourcesName);</span><br><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">String filename = new String(resourcesName.getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);</span><br><span class="line">headers.setContentDispositionFormData(&quot;attachment&quot;, filename);</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">return new ResponseEntity&lt;byte[]&gt;(FileUtils.readFileToByteArray(file),headers,HttpStatus.CREATED);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SpringMVC-的统一异常处理-掌握-避免在controller中进行冗余的try-catch操作"><a href="#SpringMVC-的统一异常处理-掌握-避免在controller中进行冗余的try-catch操作" class="headerlink" title="SpringMVC 的统一异常处理(掌握) (避免在controller中进行冗余的try catch操作)"></a>SpringMVC 的统一异常处理(掌握) (避免在controller中进行冗余的try catch操作)</h2><ul><li>先自定义异常</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义异常</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class ServiceException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">public ServiceException(String msg)&#123;</span><br><span class="line">super(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义全局异常处理类 （需要用到@ControllerAdvice以及@ExceptionHandler(ServiceException.class)）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class GlobalExceptionResolver &#123;</span><br><span class="line">   /**</span><br><span class="line">     * 处理所有业务异常</span><br><span class="line">     *</span><br><span class="line">     * @param e 业务异常</span><br><span class="line">     * @return json结果</span><br><span class="line">     */</span><br><span class="line">    @ExceptionHandler(ServiceException.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Girl handleOpdRuntimeException(ServiceException e) &#123;</span><br><span class="line">    Girl g = new Girl();</span><br><span class="line">    g.setAge(18);</span><br><span class="line">    g.setName(&quot;wwj&quot;);</span><br><span class="line">        return g;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller业务处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Econtroller &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 测试返回异常信息</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/exception&quot;)</span><br><span class="line">    public void returnExceptionInfo() &#123;</span><br><span class="line">        if (1 != 2) &#123;</span><br><span class="line">            // 用户民错误或不存在异常</span><br><span class="line">            throw new ServiceException(&quot;错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:开发中,我们在设计业务功能模块，都需要配置对应的exception处理</strong></p><h2 id="SpringMVC-拦截器-掌握-拦截-Interceptor"><a href="#SpringMVC-拦截器-掌握-拦截-Interceptor" class="headerlink" title="SpringMVC 拦截器 (掌握) 拦截 Interceptor"></a>SpringMVC 拦截器 (掌握) 拦截 Interceptor</h2><p><strong>拦截器是对过滤器操作的一种升华。拦截器本身的机制也是aop进行实现</strong></p><ol><li>操作方式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MyInterceptor implements HandlerInterceptor&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span><br><span class="line">throws Exception &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;afterCompletion&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span><br><span class="line">throws Exception &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;postHandle&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;preHandle&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">      &lt;mvc:interceptor&gt;</span><br><span class="line">          &lt;!-- 拦截所有的请求，这个必须写在前面，也就是写在【不拦截】的上面 --&gt;</span><br><span class="line">          &lt;mvc:mapping path=&quot;/**&quot; /&gt;</span><br><span class="line">          &lt;!-- 但是排除下面这些，也就是不拦截请求 --&gt;</span><br><span class="line">          &lt;mvc:exclude-mapping path=&quot;/login.html&quot; /&gt;</span><br><span class="line">          &lt;bean class=&quot;com.wwj.interceptor.MyInterceptor&quot; /&gt;</span><br><span class="line">      &lt;/mvc:interceptor&gt;</span><br><span class="line">  &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>执行的顺序为</p></li><li><p>preHandle   在业务处理器处理请求之前被调用(如果preHandle返回false)</p></li><li><p>postHandle  在业务处理器处理请求执行完成后,生成视图之前执行</p></li><li><p>afterCompletion 完全处理完请求后被调用,可用于清理资源等</p></li></ol><hr><h2 id="SpringMVC-的自动校验-了解"><a href="#SpringMVC-的自动校验-了解" class="headerlink" title="SpringMVC 的自动校验(了解)"></a>SpringMVC 的自动校验(了解)</h2><ol><li>引入相关的jar包</li></ol><p><img src="/images/resources/4219116AAE586BDDCF2CE95010A34E2D.jpg" alt="IMAGE"></p><ol start="2"><li>构建实体类 （有一些注解可以对对象的某个字段进行检验）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import javax.validation.constraints.NotBlank;</span><br><span class="line">import javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">@NotNull(message=&quot;id不能为空!&quot;)</span><br><span class="line">private  int  uid;</span><br><span class="line">@NotBlank(message=&quot;用户名不能为空!&quot;)</span><br><span class="line">private  String uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>(将配置文件中拦截器代码剔除)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;user1&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;uid&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;uname&quot;/&gt;</span><br><span class="line">&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>控制代码中通过提供的errorObj来获取验证的信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Vcontroller &#123;</span><br><span class="line">    @RequestMapping(&quot;/user1&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public User test(@Validated User user, BindingResult result) &#123;</span><br><span class="line">        if (result.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; errors = result.getAllErrors();</span><br><span class="line">            for (ObjectError error : errors) &#123;</span><br><span class="line">                System.out.println(error.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC模式 </tag>
            
            <tag> Spring产品 </tag>
            
            <tag> 替代servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC1</title>
      <link href="/2019/07/26/2019-09-10-SpringMVC(%E7%BC%98)/"/>
      <url>/2019/07/26/2019-09-10-SpringMVC(%E7%BC%98)/</url>
      
        <content type="html"><![CDATA[<p>SpringMVC让你的C层更加高效.</p><h1 id="springMVC初次"><a href="#springMVC初次" class="headerlink" title="springMVC初次"></a>springMVC初次</h1><ol><li>SpringMVC简介</li><li>SpringMVC的执行流程</li><li>SpringMVC的入门案例</li><li>SpringMVC相关配置文件解析</li><li>SpringMVC的参数绑定</li><li>SpringMVC自定义类型转换器</li><li>SpringMVC控制器方法的返回值处理</li><li>SpringMVC的跳转以及重定向传值</li></ol><h2 id="springMVC简介"><a href="#springMVC简介" class="headerlink" title="springMVC简介"></a>springMVC简介</h2><ol><li>springMVC本身也是基于对servlet进行了封装，也是轻量级的web开发框架之一</li><li>从使用角度来说,就是依赖大量的注解，达到传统意思上面MVC的Controller的功效</li></ol><hr><h2 id="springMVC的执行流程"><a href="#springMVC的执行流程" class="headerlink" title="springMVC的执行流程"></a>springMVC的执行流程</h2><ul><li>一个请求匹配前端控制器 DispatcherServlet的请求映射路径(在web.xml中指定),WEB容器将该请求转交给DispatcherServlet * 处理DispatcherServlet 接收到请求后, 将根据请求信息交给处理器映射器(HandlerMapping)</li><li>HandlerMapping 根据用户的url请求 查找匹配该url的 Handler，并返回一个执行链</li><li>DispatcherServlet 再请求 处理器适配器(HandlerAdapter)调用相应的Handler进行处理并返回ModelAndView给DispatcherServlet</li><li>DispatcherServlet 将 ModelAndView 请求 ViewReslover（视图解析器）解析，返回具体 View</li><li>DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）</li><li>DispatcherServlet 将页面响应给用户</li></ul><h3 id="用港剧的方式来说明下-港剧最喜欢的就是走私贩毒什么的-贩毒是暴利，需要周密的计划和设计-才能有获利"><a href="#用港剧的方式来说明下-港剧最喜欢的就是走私贩毒什么的-贩毒是暴利，需要周密的计划和设计-才能有获利" class="headerlink" title="用港剧的方式来说明下(港剧最喜欢的就是走私贩毒什么的 贩毒是暴利，需要周密的计划和设计,才能有获利)"></a>用港剧的方式来说明下(港剧最喜欢的就是走私贩毒什么的 贩毒是暴利，需要周密的计划和设计,才能有获利)</h3><ol><li>现在有一批毒品进行货运 (梁朝伟负责) （梁朝伟不可能直接就联络到接收人） （用户发起一个http请求）</li><li>梁朝伟打电话问周润发,因为周润发那里有一个接收人联络官(黎明)(HandlerMapping),(这里周润发就等同于DispatcherServlet)</li><li>周润发告诉接收人联络官((黎明))之后，接收联络官那里有一个联络表，肯定不是明文显示，找到了对应的接收人（刘德华）(handler) 每个人都有自己接收的方式(刘德华也不例外)（也就是执行链）,</li><li>但是你想，虽然无非就是梁朝伟去找刘德华，但是我们说的，一旦被抓就可能全盘完蛋，黎明和周润发都不可能直接和梁朝伟说，你去找谁。</li><li>所以刘德华（handler）会给(快递员HandlerAdapter)说我是接收人，然后周润发也来问我接收人是谁.我不知道那个是不是毒品。我只知道谁给我，我给谁.按照他们要求的方式进行打包(毒品伪装)（HttpMessageConveter数据转换）</li><li>1 我送达之后，会有一个回执单（上面是暗号)(modelandview),我会给周润发（DispatcherServlet）</li><li>周润发根据这个暗号，然后用心里默默记住的（ViewReslover）类似解码表进行解码</li><li>将所有的交易的信息，时间点（渲染+解析）交给了什么（梁朝伟吗？不是)交给了历史。(everybody都可以阅历历史）</li></ol><p><strong>设计代码，就是所谓的高内聚，低耦合</strong></p><hr><h2 id="SpringMVC入门"><a href="#SpringMVC入门" class="headerlink" title="SpringMVC入门"></a>SpringMVC入门</h2><ol><li>新建项目,并且导入对应的jar包</li></ol><p><img src="/images/resources/7559AFA72D7BFB3BC41FF97F08CF009F.jpg" alt="IMAGE"></p><ol start="2"><li><p>页面中发起一个同步的请求  <a href="hello">hello</a>  (梁朝伟)</p></li><li><p>在web.xml中   (周润发)</p></li></ol><p><strong>注意解决乱码可以配置/,但是可能会出现不生效的情况,所以建议填写(/*)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span><br><span class="line"> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">&lt;!-- 处理POST提交乱码问题 --&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">  &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 前端控制器 --&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;!-- 不使用 默认找 /WEB-INF/[servlet的名称(springmvc)]-servlet.xml --&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>3.1 完善联络关系表  springmvc.xml 在src下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">                   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span><br><span class="line">                       http://www.springframework.org/schema/mvc </span><br><span class="line">                       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd</span><br><span class="line">                       http://www.springframework.org/schema/context </span><br><span class="line">                       http://www.springframework.org/schema/context/spring-context-4.1.xsd&quot;&gt;</span><br><span class="line"> &lt;!-- 扫描包以其子包下所有类的注解 @Controler @Service等 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.wwj&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 视图解释器 使用前后缀拼接跳转页面路径 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> &lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写controller  刘德华</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public ModelAndView login()&#123;</span><br><span class="line">//处理业务逻辑</span><br><span class="line">ModelAndView mv =  new ModelAndView();</span><br><span class="line">mv.addObject(&quot;pOne&quot;,&quot;wwj&quot;);</span><br><span class="line">mv.setViewName(&quot;main&quot;);</span><br><span class="line">return  mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:如果在jsp页面使用el表达式，无法取值的话,可以在jsp抬头上面添加&lt;%@ page isELIgnored =”false” %&gt;</strong></p><hr><h2 id="SpringMVC-相关配置文件解析-了解"><a href="#SpringMVC-相关配置文件解析-了解" class="headerlink" title="SpringMVC 相关配置文件解析(了解)"></a>SpringMVC 相关配置文件解析(了解)</h2><ul><li><p>web.xml中添加了init-param 主要是调整我们的配置文件位置加载在src目录下</p></li><li><p>关于url-pattern常用规则</p></li></ul><ol><li><p>使用url-pattern配置为 /  拦截所有的请求</p></li><li><p>使用(*.action或者*.do)  也就是加一个动作标签</p></li><li><p>如果使用/* 而我们访问的是一个/xxx.html 或者是 /xxx.jsp 的静态资源。那么拦截了之后，返回对应的设置的value=”/WEB-INF/jsp/“ 是无法找到的。</p></li></ol><blockquote><p>/并不是真正意义上的拦截所有请求，它不会拦截jsp的页面请求，其他的请求则会拦截<br>  /*才是真正意义上的拦截所有请求</p></blockquote><hr><h2 id="SpringMVC-的参数绑定的多种方式"><a href="#SpringMVC-的参数绑定的多种方式" class="headerlink" title="SpringMVC 的参数绑定的多种方式"></a>SpringMVC 的参数绑定的多种方式</h2><blockquote><p>分类</p></blockquote><ol><li>接收多个独立的参数</li><li>接收简单的对象类型(包含时间处理)</li><li>接收复杂的对象类型 (了解)</li><li>接收restful形式的参数 （理解）</li><li>接收json数据或者是json字符串</li></ol><blockquote><ol><li>接收多个独立的参数</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;a1&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;a&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;b&quot;/&gt;</span><br><span class="line">&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">//接收多值的参数</span><br><span class="line">@RequestMapping(&quot;/a1&quot;)</span><br><span class="line">public void login(@RequestParam(value=&quot;a&quot;) String a,@RequestParam(value=&quot;b&quot;) String b)&#123;</span><br><span class="line">System.out.println(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>接收简单的对象类型(处理时间类型)</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Person  implements  Serializable&#123;</span><br><span class="line">private  int pid;</span><br><span class="line">private  String name;</span><br><span class="line">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span><br><span class="line">private  Date   bir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;a2&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;pid&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;bir&quot;/&gt;</span><br><span class="line">&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/a2&quot;)</span><br><span class="line">public void login(Person  p)&#123;</span><br><span class="line">System.out.println(p.getPid());</span><br><span class="line">System.out.println(p.getName());</span><br><span class="line">System.out.println(p.getBir().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:如果就只传递类似时间格式的字符串而又不包含的在对象中,可以考虑使用java库处理时间字符串,也可以使用全局的自定义转换器(了解)后续会讲到</strong></p><blockquote><ol start="3"><li>接收复杂的对象类型 (了解)</li></ol></blockquote><p>对象中多添加List属性<code>private List&lt;String&gt; dognames;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;a3&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;pid&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;bir&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;dognames[0]&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;dognames[1]&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;dognames[2]&quot;/&gt;</span><br><span class="line">&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/a3&quot;)</span><br><span class="line">public void login2(Person  p)&#123;</span><br><span class="line">System.out.println(p.getPid());</span><br><span class="line">System.out.println(p.getName());</span><br><span class="line">System.out.println(p.getBir().toString());</span><br><span class="line">System.out.println(p.getDognames().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>接收restful形式的参数 (理解)</li></ol></blockquote><p>何为restful   /a4/pname/wwj/  设计请求的api</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;a4/pname/wwj&quot;&gt;hellrestful&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value=&quot;/a4/&#123;pnameattr&#125;/&#123;name&#125;&quot;)</span><br><span class="line">public void login3(@PathVariable(value=&quot;pnameattr&quot;) String pnameattr,@PathVariable(value=&quot;name&quot;) String name)&#123;</span><br><span class="line">System.out.println(pnameattr+name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.接收json数据或者是json字符串(需要先用到jquery ajax,暂时不设置返回,因为还需额外的jar包进行转换)</p></blockquote><p>暂时先引入:<br><code>&lt;script src=&quot;http://libs.baidu.com/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">var  user = &#123;</span><br><span class="line">uname : &apos;wwj&apos;,</span><br><span class="line">uage : 18</span><br><span class="line">&#125;</span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">          url: &quot;a5&quot;,</span><br><span class="line">          type: &quot;post&quot;,</span><br><span class="line">          dataType:&apos;json&apos;,</span><br><span class="line">          data: user,</span><br><span class="line">          success: function (json) &#123;</span><br><span class="line">     </span><br><span class="line">         &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">//后台接收</span><br><span class="line">@RequestMapping(&quot;/a5&quot;)</span><br><span class="line">public void login4(@RequestParam(&quot;uname&quot;) String uname,@RequestParam(&quot;uage&quot;) String uage)&#123;</span><br><span class="line">System.out.println(uname+uage);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:这种方式不推荐,也就是ajax传递json的字符串,而不是对象,那么需要在ajax中设置 contentType : ‘application/json;charset=utf-8’</strong></p><blockquote><p> 赋值参数绑定</p></blockquote><ol><li>直接使用原生的servlet对象以及model(等同于设置到request作用域中)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/a6&quot;)</span><br><span class="line">public void login5(HttpServletRequest  req ,HttpServletResponse resp,Model  model)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>modelView和modelMap不推荐</strong></p><hr><h2 id="自定义转换类型-处理时间类型"><a href="#自定义转换类型-处理时间类型" class="headerlink" title="自定义转换类型(处理时间类型)"></a>自定义转换类型(处理时间类型)</h2><p>1.定义转换器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line">public class StringToDate  implements Converter&lt;String,Date&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Date convert(String arg0) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">        try &#123;</span><br><span class="line">            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">            Date date = simpleDateFormat.parse(arg0);</span><br><span class="line">            return date;</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注解驱动添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</span><br><span class="line">      &lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">          &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">              &lt;set&gt;</span><br><span class="line">                  &lt;bean class=&quot;com.wwj.convert.StringToDate&quot;&gt;&lt;/bean&gt;</span><br><span class="line">              &lt;/set&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>将前面对象属性中提供的注解去掉即可</p><hr><h2 id="SpringMVC-控制器方法的返回值处理"><a href="#SpringMVC-控制器方法的返回值处理" class="headerlink" title="SpringMVC 控制器方法的返回值处理"></a>SpringMVC 控制器方法的返回值处理</h2><p><img src="/images/resources/74D83869784B0CEBF17D8F05AA7470C9.jpg" alt="IMAGE"></p><hr><h2 id="SpringMVC-的跳转-了解"><a href="#SpringMVC-的跳转-了解" class="headerlink" title="SpringMVC 的跳转 (了解)"></a>SpringMVC 的跳转 (了解)</h2><ol><li><p>如果使用void 采用原生servletAPI中进行请求转发和重定向即可</p></li><li><p>使用springMVC提供的快捷方式  </p></li></ol><ul><li>return “redirect: 资源路径 “;</li><li>return “forward: 资源路径 “;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/a6&quot;)</span><br><span class="line">public String login5(HttpServletRequest  req ,HttpServletResponse resp,Model  model)&#123;</span><br><span class="line">System.out.println(111);</span><br><span class="line">return  &quot;redirect: main.jsp&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重定向传值(了解,需要借助RedirectAttributes属性)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/a6&quot;)</span><br><span class="line">public String login5(RedirectAttributes  rs)&#123;</span><br><span class="line">rs.addAttribute(&quot;pname&quot;,&quot;wwj&quot;);</span><br><span class="line">return  &quot;redirect: index.jsp&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意观察地址栏的变化</strong></p><blockquote><p>不想参数暴露</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/a6&quot;)</span><br><span class="line">public String login5(RedirectAttributes  rs)&#123;</span><br><span class="line">//rs.addAttribute(&quot;pname&quot;,&quot;wwj&quot;);</span><br><span class="line"> rs.addFlashAttribute(&quot;pname&quot;, &quot;wwj&quot;);</span><br><span class="line">return  &quot;redirect: index.jsp&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>然后新的请求接收值的时候 一定使用@ModelAttribute String pname</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC模式 </tag>
            
            <tag> Spring产品 </tag>
            
            <tag> 替代servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAOP</title>
      <link href="/2019/07/25/2019-09-10-SpringAOP/"/>
      <url>/2019/07/25/2019-09-10-SpringAOP/</url>
      
        <content type="html"><![CDATA[<p>Spring的核心思想就是IOC和AOP   </p><h1 id="spring的AOP-面向切面"><a href="#spring的AOP-面向切面" class="headerlink" title="spring的AOP(面向切面)"></a>spring的AOP(面向切面)</h1><ol><li>SpringAOP 详解(aop思想,aop利用代理的想法,代理模式.以及Java提供的动态代理和CGLIB库提供的继承性代理）</li><li>SpringAOP 的事务管理(如何使用spring管理事务。事务的传播性)</li></ol><hr><h2 id="SpringAop详解"><a href="#SpringAop详解" class="headerlink" title="SpringAop详解"></a>SpringAop详解</h2><ol><li>Aop的核⼼思想叫做⾯向切⾯编程,它是⼀种⾯对横向业务流提出的⼀种解耦⽅案(何为aop,就好⽐法式⾯包.你想加点葡萄,花⽣仁什么的,你不可能因为你想吃什么,⽽重新做.你可以⽤到刀切成⼏块,在每块当中镶嵌进去)</li><li>可能会有⼈说,这已经改变的物理结构本⾝发⽣的变化,现实当中不好实现,但是软件开发中,我们作为上帝,那可以随时的组装和实现</li><li>如何实现?从这个例⼦来说,我们可以看到想⾃⼰想加什么就加什么,不想加的时候,又能随时⽅便的去掉.又不承担任何风险.现实当中,我们就要不断的去克隆和复制同⼀块物体,以保证风控程度是接近于0.所以在软件的设计开发当中,就是需要我们考虑的⼀个问题(如何解耦)</li><li>所以我们需要使⽤⼀种称作为代理的机制.</li></ol><p><strong><em>代理顾名思义便是帮XXX去相关的事,好比彩票你自己买不了,你需要要彩票的代理点帮你买</em></strong></p><p><strong><em>回过来,我们用专业的计算术语来解释,功能之间是否能够相互独立,能否保证代码不入侵,能达到同样的效果</em></strong></p><p><strong><em>代码当中体现,能不能尽量在不改动代码的情况下,只以添加类和删减类的插播方式,达到随用随取</em></strong></p><h3 id="代理模式的实现"><a href="#代理模式的实现" class="headerlink" title="代理模式的实现:"></a>代理模式的实现:</h3><ol><li>一共有3个人称出现.代理角色,真实角色,代理角色和抽象角色共同的行为方式。</li><li>代理角色有真实角色的行为引用</li></ol><blockquote><p>代码示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 代理角色和真实角色共同的行为</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface BuyCaiPiao &#123;</span><br><span class="line">void  buy500w();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 真实角色</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class RealRole  implements  BuyCaiPiao&#123;</span><br><span class="line">@Override</span><br><span class="line">public void buy500w() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;自己买彩票&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 代理角色，代理角色需要有真实角色的引用</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class ProxyRole implements BuyCaiPiao &#123;</span><br><span class="line">private BuyCaiPiao bcp;</span><br><span class="line">public ProxyRole(BuyCaiPiao  bcp) &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">this.bcp = bcp;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void buy500w() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">bcp.buy500w();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class TestProxy &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//构建真实角色</span><br><span class="line">RealRole  r  = new RealRole();</span><br><span class="line">//构建代理角色（传入需要被代理的角色）</span><br><span class="line">ProxyRole  p = new ProxyRole(r);</span><br><span class="line">//代理角色执行 （这件事是发生在代理身上的，也就意味着风险的承担方是代理角色）</span><br><span class="line">//从侧方面也可以看到(我们可以额外的在附加其它的动作,而这些都是发生在代理角色身上)</span><br><span class="line">//从代码方面看来,是否是我们尽量做类的代码增或者减，尽量的去避免源对象的改变</span><br><span class="line">    p.buy500w();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式的深入思考"><a href="#代理模式的深入思考" class="headerlink" title="代理模式的深入思考"></a>代理模式的深入思考</h3><ol><li>从上面的代码看,可以发现,如果我们想代理其它的真实角色,那么不说我们需要不断的去扩充接口,扩充真实的代理角色</li><li>是否有一种方式,可以动态的实现真实的角色想要实现的动作（其实就是利用我们的反射机制）</li></ol><h3 id="jdk支持的动态代理方式-实现步骤"><a href="#jdk支持的动态代理方式-实现步骤" class="headerlink" title="jdk支持的动态代理方式(实现步骤)"></a>jdk支持的动态代理方式(实现步骤)</h3><ol><li>同样的构造接口和真实的角色</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 行为接口</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface InterPerson &#123;</span><br><span class="line">     void sayA();</span><br><span class="line">     void sayB(String s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 真实的角色</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class RealPerson implements  InterPerson&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void sayA() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;sayA&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void sayB(String s) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;sayB&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现动态代理特征接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 动态代理接口</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Myhanlder implements  InvocationHandler&#123;</span><br><span class="line"></span><br><span class="line">//需要被代理的真实角色</span><br><span class="line"> private Object  target;</span><br><span class="line"> </span><br><span class="line"> public Myhanlder(Object obj) &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line"> this.target  = obj;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//执行真实角色拥有的方法 ,args代表如果有参数执行有参数</span><br><span class="line">Object  o  = method.invoke(target, args);</span><br><span class="line">return o;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过接口特征构造动态代理对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class TestJdkProxy &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//构建真实角色</span><br><span class="line">InterPerson  ip = new RealPerson();</span><br><span class="line">//通过proxy类进行代理角色创建</span><br><span class="line">InterPerson iproxy = (InterPerson) Proxy.newProxyInstance(InterPerson.class.getClassLoader(),new Class[] &#123;InterPerson.class&#125; , new Myhanlder(ip));</span><br><span class="line">iproxy.sayA();</span><br><span class="line">iproxy.sayB(&quot;ahha&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用cglib的方式"><a href="#使用cglib的方式" class="headerlink" title="使用cglib的方式"></a>使用cglib的方式</h3><p><strong><em>如果只有类,主要通过对字节码的操作.以继承的方式对原有类进行扩展</em></strong></p><ol><li>构建真实角色</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class NewRole &#123;</span><br><span class="line"></span><br><span class="line">public void go()&#123;</span><br><span class="line">System.out.println(&quot;回家&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">public  void gohome()&#123;</span><br><span class="line">System.out.println(&quot;回重庆&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>构建代理拦截器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class CglibProxy implements MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过拦截真实对象的方法</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Object obj = methodProxy.invokeSuper(o, objects);</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>生成代理对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//构建一个增强类</span><br><span class="line">Enhancer  eh  = new Enhancer();</span><br><span class="line">// 增强类需要设置被代理的类型。以及代理的方法的回调</span><br><span class="line">eh.setSuperclass(NewRole.class);</span><br><span class="line">eh.setCallback(new CglibProxy());</span><br><span class="line">//构建代理类</span><br><span class="line">NewRole  nr = (NewRole) eh.create();</span><br><span class="line">nr.go();</span><br><span class="line">nr.gohome();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring利用aop机制的实现"><a href="#spring利用aop机制的实现" class="headerlink" title="spring利用aop机制的实现"></a>spring利用aop机制的实现</h3><p>名词概念:</p><ol><li>Aspect：切面,由一系列切点、增强和引入组成的模块对象,可定义优先级,从而影响增强和引入的执行顺序</li><li>Join point：接入点,程序执行期的一个点,例如方法执行、类初始化、异常处理(一般用来获取方法中的一些元数据)</li><li>Advice：增强,切面在特定接入点的执行动作,包括 “around,” “before” and “after”等多种类型</li><li>Pointcut：切点,用来匹配特定接入点的谓词（表达式）</li><li>Weaving：织入,将一个或多个切面与类或对象链接在一起创建一个被增强对象（也就是构建代理对象的过程）</li></ol><p>通知名词:</p><ol><li>前置通知  在目标方法执行之前执行执行的通知</li><li>后置通知  在目标方法执行之后执行的通知 （出现异常便不再调用）</li><li>环绕通知  在目标方法执行之前和之后都可以执行额外代码的通知。</li><li>异常通知  在目标方法抛出异常时执行的通知</li><li>最终通知  是在目标方法执行之后执行的通知。</li></ol><p>通知的应用场景:</p><p><img src="/images/resources/F6C594E9D348B230CF1726168394C12F.jpg" alt="IMAGE"></p><p>实现方式:</p><ol><li>构建真实角色</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class UserServiceImpl   implements  UserService&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(1/0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义增强类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.springaop;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line">public class Myadvice &#123;</span><br><span class="line">public void before() &#123;</span><br><span class="line">System.out.println(&quot; 这是前置通知！ &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 后置通知</span><br><span class="line">public void afterReturning() &#123;</span><br><span class="line">System.out.println(&quot; 这是后置通知 ( 如果出现异常不会调用 )&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 环绕通知</span><br><span class="line">public Object around(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">System.out.println(&quot; 这是环绕通知之前的部分！ &quot;);</span><br><span class="line">Object proceed = pjp.proceed();// 调用目标方法</span><br><span class="line">System.out.println(&quot; 这是环绕通知之后的部分！ &quot;);</span><br><span class="line">return proceed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 异常通知</span><br><span class="line">public void afterException() &#123;</span><br><span class="line">System.out.println(&quot; 异常出现了！ &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最终通知</span><br><span class="line">public void after() &#123;</span><br><span class="line">System.out.println(&quot; 这是后置通知 ( 出现异常也会调用 )&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置xml 实例化角色 增强类 以及切面，和织入的过程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line"> http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line"> http://www.springframework.org/schema/context </span><br><span class="line"> http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line"> http://www.springframework.org/schema/aop </span><br><span class="line"> http://www.springframework.org/schema/aop/spring-aop-4.2.xsd &quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 1.构建需要被代理的对象 --&gt;</span><br><span class="line">&lt;bean name=&quot;userService&quot; class=&quot;com.wwj.springaop.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!-- 2. 构建需要增强的方法 --&gt;</span><br><span class="line">&lt;bean name=&quot;myAdvice&quot; class=&quot;com.wwj.springaop.Myadvice&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!-- 3. 定义aop --&gt;</span><br><span class="line">&lt;!-- aop 配置 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 自定义切入点 --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line"> 1、execution(): 表达式主体。</span><br><span class="line"></span><br><span class="line"> 2、第一个*号：表示返回类型，*号表示所有的类型。</span><br><span class="line"></span><br><span class="line"> 3、包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包。</span><br><span class="line"></span><br><span class="line"> 4、第二个*号：表示类名，*号表示所有的类。</span><br><span class="line"></span><br><span class="line"> 5、*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;aop:pointcut expression=&quot;execution(* com.wwj.springaop..*.*(..))&quot; id=&quot;anyMethod&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;aop:aspect ref=&quot;myAdvice&quot;&gt;</span><br><span class="line">&lt;!-- 前置通知 --&gt;</span><br><span class="line">&lt;!-- 测试自定义切入点 --&gt;</span><br><span class="line">&lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;anyMethod&quot;/&gt;</span><br><span class="line">&lt;!-- 最终通知 --&gt;</span><br><span class="line">&lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;anyMethod&quot;/&gt;</span><br><span class="line">&lt;!-- 后置通知 --&gt;</span><br><span class="line">&lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;anyMethod&quot;/&gt;</span><br><span class="line">&lt;!-- 环绕通知 --&gt;</span><br><span class="line">&lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;anyMethod&quot;/&gt;</span><br><span class="line">&lt;!-- 异常抛出通知 --&gt;</span><br><span class="line">&lt;aop:after-throwing method=&quot;afterException&quot; pointcut-ref=&quot;anyMethod&quot;/&gt;</span><br><span class="line">&lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>4.测试执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;application3.xml&quot;);</span><br><span class="line">UserService userService = (UserService) ac.getBean(&quot;userService&quot;);</span><br><span class="line">userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringAOP进行事务管理-如何使用spring管理事务。事务的传播性"><a href="#SpringAOP进行事务管理-如何使用spring管理事务。事务的传播性" class="headerlink" title="SpringAOP进行事务管理 (如何使用spring管理事务。事务的传播性)"></a>SpringAOP进行事务管理 (如何使用spring管理事务。事务的传播性)</h2><p><strong>通过上面的例子，我们可以看到即将接触到的事务采用环绕通知的方式为最佳.因为全程都在跟进</strong></p><blockquote><p>何为事务的传播性</p></blockquote><ol><li>当服务被定义，就有可能会有事务的产生</li><li>服务和服务之间相互调用,就会产生我们称作为事务的传播</li><li>事务的传播存在于多个服务相互调用,要保证遵循满足首次产生事务的的ACID</li></ol><blockquote><p>举例说明</p></blockquote><ol><li>转账是一个服务,扣款是一个服务(转账的时候需要调用扣款的服务就构成了)</li><li>转账的时候,扣款出了问题,就需要回滚到首次事务,来保证事务的完整性</li></ol><blockquote><p>代码说明(未加入事务)</p></blockquote><ol><li>mysql数据库一张账户表(李四余额1000，张三余额1000) 张三转账给李四1000（动作）</li></ol><blockquote><p>代码示例</p></blockquote><ol><li>构建dao层以及接口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface AccountDao &#123;</span><br><span class="line"></span><br><span class="line">void  updateAddMoney(int aid,int money);</span><br><span class="line"></span><br><span class="line">void  updateDeleteMoney(int aid,int money);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">//分隔</span><br><span class="line"></span><br><span class="line">@Repository(value=&quot;acDao&quot;)</span><br><span class="line">public class AccountDaoImpl  implements  AccountDao&#123;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private  JdbcTemplate  jdbcTemplate;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void updateAddMoney(int aid, int money) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">jdbcTemplate.update(&quot;update t_account set money=money-? where aid=?&quot;,money,aid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void updateDeleteMoney(int aid, int money) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">jdbcTemplate.update(&quot;update t_account set money=money+? where aid=?&quot;,money,aid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>构建服务接口和接口实现</li></ol><blockquote><p>扣款</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 收款</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface ReciveMoney &#123;</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @param aid  接收人id</span><br><span class="line">     * @param money 接收人金额</span><br><span class="line">     */</span><br><span class="line">void Recivemoney(int aid,int money);</span><br><span class="line">&#125;</span><br><span class="line">//分隔</span><br><span class="line">@Service(&quot;recs&quot;)</span><br><span class="line">public class ReciveMoneyImpl  implements  ReciveMoney&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  AccountDao  acDao;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void Recivemoney(int aid, int money) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">acDao.updateDeleteMoney(aid, money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>转账</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author Yun</span><br><span class="line"> * 扣款</span><br><span class="line"> */</span><br><span class="line">public interface PayMoney &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param aid  扣款人id</span><br><span class="line"> * @param rid   收款人id</span><br><span class="line"> * @param money 扣款人金额</span><br><span class="line"> */</span><br><span class="line">void  paymoney(int aid,int money,int rid);</span><br><span class="line">&#125;</span><br><span class="line">//分隔</span><br><span class="line">@Service(&quot;pays&quot;)</span><br><span class="line">public class PaymoneyImpl  implements  PayMoney&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  AccountDao  acDao;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  ReciveMoney  recs;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void paymoney(int aid, int money,int rid) &#123;</span><br><span class="line">acDao.updateAddMoney(aid, money);</span><br><span class="line">//构成了事务的传播性</span><br><span class="line">recs.Recivemoney(rid, money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Component(value=&quot;testTX&quot;)</span><br><span class="line">public class TestSpringTX &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private  PayMoney  pays;</span><br><span class="line"></span><br><span class="line">public void test1()&#123;</span><br><span class="line">pays.paymoney(1,1000, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;application4.xml&quot;);</span><br><span class="line">TestSpringTX  tx   = (TestSpringTX) ac.getBean(&quot;testTX&quot;);</span><br><span class="line">tx.test1();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p><em>金额变动假定没有出现任何异常的情况</em></p><p><img src="/images/resources/3B6BA7453EA81A4ACD2584964BE97F72.jpg" alt="IMAGE"></p><p>==================&gt;</p><p><img src="/images/resources/C3D70C7B4D6F8BDEC03C0091CFF2510D.jpg" alt="IMAGE"></p><p><strong><em>假定扣款出现问题，模拟sql语句执行错误</em></strong></p><p><img src="/images/resources/0424165414698E56B37D3003C5A745E2.jpg" alt="IMAGE"></p><p>你会发现，钱扣了，但钱没到账</p><h2 id="SpringAOP的事务管理-采用spring进行事务的管理"><a href="#SpringAOP的事务管理-采用spring进行事务的管理" class="headerlink" title="SpringAOP的事务管理(采用spring进行事务的管理)"></a>SpringAOP的事务管理(采用spring进行事务的管理)</h2><ol><li>spring管理事务2种方式</li></ol><ul><li>声明式事务 (全局管理事务 可以采用xml方式 或者是 @Transactional 注解的类级别支持和方法的级别)</li><li>编程式事务 (spring推荐使用TransactionTemplate)类似在jdbc中开启事务(了解)</li></ul><p><strong><em>一个功能是否要事务,必须纳入设计.编码考虑.不能仅仅完成了基本功能就ok</em></strong></p><ol start="2"><li>spring使用声明式事务</li></ol><ul><li>基于XML</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; </span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">                            http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">                            http://www.springframework.org/schema/context </span><br><span class="line">                            http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">                            http://www.springframework.org/schema/aop </span><br><span class="line">                            http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </span><br><span class="line">                            http://www.springframework.org/schema/tx </span><br><span class="line">                            http://www.springframework.org/schema/tx/spring-tx-4.2.xsd &quot;&gt;</span><br><span class="line">&lt;!-- 自动根据扫描对应包下面的注解,并实例化对应的对象 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.wwj.springtx&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 连接管理交给C3P0 --&gt;</span><br><span class="line">&lt;bean name=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--JDBCTemplate 需要 datasource 连接池 --&gt;</span><br><span class="line">&lt;bean name=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 1使用spring事务管理管理数据源操作 --&gt;</span><br><span class="line">&lt;bean name=&quot;transactionManager&quot;</span><br><span class="line">class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 2.定义需要被增强的方法，也就是那些需要介入事务的管理 --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">propagation:REQUIRED(依赖) 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</span><br><span class="line">isolation: 隔离级别  </span><br><span class="line">read-only: 是否只读</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;tx:advice id=&quot;advice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;tx:method name=&quot;pay*&quot; propagation=&quot;REQUIRED&quot; /&gt;&lt;!-- *是对所有方法都加 --&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3.配置切入点，切哪 也就是 织入的过程 --&gt;</span><br><span class="line">&lt;!-- 配置织入 --&gt;</span><br><span class="line">&lt;aop:config  &gt;</span><br><span class="line">    &lt;!-- 配置切点表达式 --&gt;</span><br><span class="line">    &lt;aop:pointcut expression=&quot;execution(* com.wwj.springtx..*.*(..))&quot; id=&quot;txPc&quot;/&gt;</span><br><span class="line">    &lt;!-- 配置切面 : 通知+切点</span><br><span class="line">             advice-ref:通知的名称</span><br><span class="line">             pointcut-ref:切点的名称</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPc&quot; /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>基于注解的方式进行</li></ul><p><img src="/images/resources/AFB74B2718A1DD0791B7C70F3E007F95.jpg" alt="IMAGE"></p><ol><li>直接在方法或者类上面加:</li></ol><p><strong>@Transactional(propagation=Propagation.REQUIRED,isolation=Isolation.REPEATABLE_READ,timeout=-1)</strong></p><ol start="2"><li>xml中加入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1使用spring事务管理管理数据源操作 --&gt;</span><br><span class="line">&lt;bean name=&quot;transactionManager&quot;</span><br><span class="line">class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 支持事务注解 --&gt;</span><br><span class="line">  &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> Spring产品 </tag>
            
            <tag> 面向切面 </tag>
            
            <tag> 事务管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC</title>
      <link href="/2019/07/19/2019-09-10-SpringIOC/"/>
      <url>/2019/07/19/2019-09-10-SpringIOC/</url>
      
        <content type="html"><![CDATA[<p>Spring的核心思想就是IOC和AOP     </p><h1 id="spring路线图-IOC"><a href="#spring路线图-IOC" class="headerlink" title="spring路线图(IOC)"></a>spring路线图(IOC)</h1><ol><li>Spring 框架简介(Spring优势2大核心思想的体现 IOC(控制权利反转)以及Aop(面向切面))</li><li>Spring 入门案例(通过操作 看到对象的生成方式发生的不一样)</li><li>Spring 配置文件中 bean 标签详解 (比较重要的单例和多例的配置)</li><li>SpringIOC 讲解 (何为控制反转 为何依赖注入 以及依赖注入实现的几种方式)</li><li>Spring 整合 JDBC (通过引入数据操作,发现接口和实例对象的管理方式发生的变化)(含注解)</li></ol><hr><h2 id="Spring框架简介"><a href="#Spring框架简介" class="headerlink" title="Spring框架简介"></a>Spring框架简介</h2><p><strong><em>在未来有很多技术,这里可能需要用,那里可能需要用.我们称作为整合,Spring就来给我们提供整合方案,如何整合这就涉及到我们所说的IOC,当然也有人说spring是一个容器(其实当做插线板更好一些)</em></strong></p><blockquote><p>spring的产品线</p></blockquote><p><img src="/images/resources/DFAD0CE766AA6E291FB278936D2FFD37.jpg" alt="IMAGE"></p><ul><li>快速构建可生产的应用程序,快速使用spring进行项目的集成</li><li>构建可协调一切的分布式服务应用程序，提供统一的网关.统一的服务治理,统一的可控制面板,统一的数据消息处理</li><li>构建可统一进行数据清洗的ETL,完善数据仓库信息的,处理任何数据源</li></ul><p><strong><em>注意:最终的目的是为了方便我们把更多的心思放在需求的实现上面(用我们现有的技术体系)</em></strong></p><p><strong><em>注意:如果转换到使用的角度来说,spring(高度自律的管理者)管理着不同的技术所产生出来的对象</em></strong></p><hr><h2 id="Spring入门案例-观察使用步骤以及对象的生成方式"><a href="#Spring入门案例-观察使用步骤以及对象的生成方式" class="headerlink" title="Spring入门案例(观察使用步骤以及对象的生成方式)"></a>Spring入门案例(观察使用步骤以及对象的生成方式)</h2><p>1.构建一个web项目,引入对应的jar包</p><p><img src="/images/resources/5E68A9B44C6A8BC3A6C6D93067471A39.jpg" alt="IMAGE"></p><p>2.构建一个简单的实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">public void invoke()&#123;</span><br><span class="line">System.out.println(&quot;普通方法只能被对象调用&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.构建spring管理的对象的全局文件application.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">                    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 将该技术交给springbean容器进行管理 --&gt;</span><br><span class="line">&lt;bean name=&quot;t1&quot; class=&quot;com.wwj.model.User&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>4.测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;application.xml&quot;);</span><br><span class="line">//2. 向容器“要”user 对象</span><br><span class="line">User u=(User) ac.getBean(&quot;t1&quot;);</span><br><span class="line">//3. 打印 user 对象</span><br><span class="line">System.out.println(u.getClass().getName());</span><br><span class="line">u.invoke();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意1:对象的生成权利交给了谁?谁在管理这个对象?</em></strong></p><hr><h2 id="Spring配置文件中bean标签详解"><a href="#Spring配置文件中bean标签详解" class="headerlink" title="Spring配置文件中bean标签详解"></a>Spring配置文件中bean标签详解</h2><ul><li>name属性代表定义的标记，方便spring查找到需要管理对象的名字</li><li>class 填写管理对象的类型</li><li>在bean标签中有一个scope属性默认为(singleton),决定了对象是以单例还是多例的方式生成.可以改为prototype.(了解即可)</li><li>在bean标签中默认对象有一个生命周期(了解) 分别为 init-method  和 destory-method .控制一个对象的生命周期，方便我们更好的管理对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;application.xml&quot;);</span><br><span class="line">//2. 向容器“要”user 对象</span><br><span class="line">User u=(User) ac.getBean(&quot;t1&quot;);</span><br><span class="line">User u1 = (User) ac.getBean(&quot;t1&quot;); </span><br><span class="line">System.out.println(u==u1);</span><br><span class="line">//3. 打印 user 对象</span><br><span class="line">System.out.println(u.getClass().getName());</span><br><span class="line">u.invoke();</span><br><span class="line">//关闭容器</span><br><span class="line">((ClassPathXmlApplicationContext) ac).close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SpringIOC-讲解-何为控制反转-为何依赖注入-以及依赖注入实现的几种方式"><a href="#SpringIOC-讲解-何为控制反转-为何依赖注入-以及依赖注入实现的几种方式" class="headerlink" title="SpringIOC 讲解 (何为控制反转 为何依赖注入 以及依赖注入实现的几种方式)"></a>SpringIOC 讲解 (何为控制反转 为何依赖注入 以及依赖注入实现的几种方式)</h2><ol><li>先看一下控制正转</li></ol><p><img src="/images/resources/E7919667926E202D2A1770D1D9AD2888.jpg" alt="IMAGE"></p><ol start="2"><li>在看一下控制反转</li></ol><p><img src="/images/resources/E129DC695464C331C5E1970CA072DBFD.jpg" alt="IMAGE"></p><p><strong>IOC:IOC是一种思想,我们称作为控制反转(也就是权利的移交)</strong></p><ol start="3"><li>依赖注入(对控制反转的进一步升华)(关心对象之间的依赖如何进行管理)</li></ol><ul><li>谁依赖于谁：当然是应用程序依赖于IoC容器;</li><li>谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象</li><li>注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）</li></ul><ol start="4"><li><p>我们可以思考出来spring容器等同于是一个万能的工厂，利用反射机制将对象生成出来，并且进行合理的管控</p></li><li><p>主要的目的为了解耦.避免代码的入侵</p></li></ol><blockquote><p>代码示例:假定 小王需要交通工具减轻上班的压力(小王和交通工具就产生了依赖)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    //这里等于这辈子就只能骑自行车了</span><br><span class="line">Bike  b   = new Bike();</span><br><span class="line"></span><br><span class="line">public  void  work()&#123;</span><br><span class="line">b.go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小王富裕了, 要换B打头的车了 如果你改代码就等同于代码入侵，所以我们要抽象出交通工具</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    //这里等于这辈子就只能骑自行车了</span><br><span class="line">//Bike  b   = new Bike();</span><br><span class="line"></span><br><span class="line">//你可以以后换撒都可以(可以通过设置和构造方法进行对象的注入)</span><br><span class="line">    private  Transport  ts;</span><br><span class="line"></span><br><span class="line">public  void  work()&#123;</span><br><span class="line">ts.go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.使用Spring管理对象的注入的几种方式(关注属性注入即可(最常见)</p><ul><li><p>注入的几种方式(属性注入,构造方法注入,数组,集合,map注入)</p></li><li><p>代码示例:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Vmodel &#123;</span><br><span class="line"></span><br><span class="line">// 属性注入</span><br><span class="line">private  Vperson  vp;</span><br><span class="line"></span><br><span class="line">public void setVp(Vperson vp) &#123;</span><br><span class="line">this.vp = vp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//构造方法注入</span><br><span class="line">    private String vname;</span><br><span class="line">    </span><br><span class="line">    public Vmodel()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br><span class="line">    public Vmodel(String vname)&#123;</span><br><span class="line">     this.vname = vname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //复杂类型注入</span><br><span class="line">    private Object[] arr;// 数组类型注入</span><br><span class="line">    private List list;//list/set 类型注入</span><br><span class="line">    private Map map;//map 注入</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对应的配置文件  (我们更多的看到的是ref关联对应的bean)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 属性注入 --&gt;</span><br><span class="line">&lt;bean name=&quot;p1&quot; class=&quot;com.wwj.diimpl.Vperson&quot;&gt;</span><br><span class="line">&lt;property name=&quot;vpname&quot; value=&quot;djwangweijie&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean name=&quot;v1&quot; class=&quot;com.wwj.diimpl.Vmodel&quot;&gt;</span><br><span class="line">&lt;property name=&quot;vp&quot; ref=&quot;p1&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 构造方法注入 --&gt;</span><br><span class="line">&lt;bean name=&quot;v2&quot; class=&quot;com.wwj.diimpl.Vmodel&quot;&gt;</span><br><span class="line">&lt;constructor-arg name=&quot;vname&quot; value=&quot;michael&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 复杂类型的支持 --&gt;</span><br><span class="line">&lt;bean name=&quot;v3&quot; class=&quot;com.wwj.diimpl.Vmodel&quot;&gt;</span><br><span class="line">&lt;property name=&quot;arr&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;tom&lt;/value&gt;</span><br><span class="line">&lt;value&gt;jerry&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;list&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;tom1&lt;/value&gt;</span><br><span class="line">&lt;value&gt;jerry1&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;map&quot;&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=&quot;A&quot; value=&quot;abc&quot;&gt;&lt;/entry&gt;</span><br><span class="line">&lt;entry key=&quot;B&quot; value=&quot;bcd&quot;&gt;&lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>测试文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;application.xml&quot;);</span><br><span class="line">//属性</span><br><span class="line">Vmodel v1  = (Vmodel) ac.getBean(&quot;v1&quot;);</span><br><span class="line">System.out.println(v1.getVp().getVpname());</span><br><span class="line">//构造方法</span><br><span class="line">Vmodel v2  = (Vmodel) ac.getBean(&quot;v2&quot;);</span><br><span class="line">System.out.println(v2.getVname());</span><br><span class="line">//复杂类型</span><br><span class="line">Vmodel v3  = (Vmodel) ac.getBean(&quot;v3&quot;);</span><br><span class="line">System.out.println(v3.getArr().length);</span><br><span class="line">System.out.println(v3.getList().size());</span><br><span class="line">System.out.println(v3.getMap().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Spring-整合-JDBC-含注解"><a href="#Spring-整合-JDBC-含注解" class="headerlink" title="Spring 整合 JDBC(含注解)"></a>Spring 整合 JDBC(含注解)</h2><ol><li>依赖的jar包</li></ol><p><img src="/images/resources/6AD3D3D1ACBB28A1828A6938A86F5280.jpg" alt="IMAGE"></p><ol start="2"><li>类的结构图如下</li></ol><p><img src="/images/resources/983DFAF5E0E3AB17302501F375947558.jpg" alt="IMAGE"></p><ol start="3"><li>关心下我们的配置文件 application1.xml</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">                    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 连接管理交给C3P0 --&gt;</span><br><span class="line">&lt;bean name=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--JDBCTemplate 需要 datasource 连接池 --&gt;</span><br><span class="line">&lt;bean name=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 构建service 和 dao实例对象 --&gt;</span><br><span class="line">&lt;bean name=&quot;dandmDao&quot; class=&quot;com.wwj.spring.jdbc.DandMDaoImpl&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean name=&quot;FindService&quot; class=&quot;com.wwj.spring.jdbc.FindServiceImpl&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dandmDao&quot; ref=&quot;dandmDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>有没有发现虽然写起来不麻烦,但总要看看属性名再去填写配置文件</strong></p><h2 id="补充说明-使用注解的方式实现"><a href="#补充说明-使用注解的方式实现" class="headerlink" title="补充说明:使用注解的方式实现"></a>补充说明:使用注解的方式实现</h2><ol><li>依赖的jar包(多了aop)</li></ol><p><img src="/images/resources/2B9216DAAF081867AD664C342D862F45.jpg" alt="IMAGE"></p><ol start="2"><li>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; </span><br><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">                    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/aop </span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/tx </span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx-4.2.xsd &quot;&gt;     </span><br><span class="line"> &lt;!-- 自动根据扫描对应包下面的注解,并实例化对应的对象 --&gt;</span><br><span class="line"> &lt;context:component-scan base-package=&quot;com.wwj.anotation&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 连接管理交给C3P0 --&gt;</span><br><span class="line">&lt;bean name=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--JDBCTemplate 需要 datasource 连接池 --&gt;</span><br><span class="line">&lt;bean name=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><ol><li>dao类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Repository(value=&quot;dandmDao&quot;)</span><br><span class="line">public class DandMDaoImpl  implements  DandMDao&#123;</span><br><span class="line">@Resource</span><br><span class="line">private  JdbcTemplate  jdbcTemplate;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Dad&gt; getD() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return jdbcTemplate.query(&quot;select * from dad&quot;, new RowMapper&lt;Dad&gt;()&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Dad mapRow(ResultSet rs, int arg1) throws SQLException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Dad d = new Dad();</span><br><span class="line">d.setDname(rs.getString(&quot;dname&quot;));</span><br><span class="line">return d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>service类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Service(value=&quot;fs&quot;)</span><br><span class="line">public class FindServiceImpl implements  FindService&#123;</span><br><span class="line">@Autowired</span><br><span class="line">private  DandMDao  dandmDao;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Component(value=&quot;test&quot;)</span><br><span class="line">public class Testanotation &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private  FindService  fs ;</span><br><span class="line">public  void A()&#123;</span><br><span class="line">fs.FindDandM();</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;application2.xml&quot;);</span><br><span class="line">Testanotation tt = (Testanotation) ac.getBean(&quot;test&quot;);</span><br><span class="line">tt.A();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解说明1"><a href="#注解说明1" class="headerlink" title="注解说明1"></a>注解说明1</h3><ul><li>@Service用于标注业务层组件（我们通常定义的service层就用这个）</li><li>@Controller用于标注控制层组件</li><li>@Repository用于标注数据访问组件，即DAO组件</li><li>@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</li></ul><h3 id="注解说明2"><a href="#注解说明2" class="headerlink" title="注解说明2"></a>注解说明2</h3><ul><li>@Resource、@Autowired</li><li>当需要在某个类中定义一个属性，并且该属性是一个已存在的bean</li><li>因为jdbc在读取xml的时候已经加载了</li><li>@Autowired 可以默认使用取的value名字 同时也可以通过加上@Qualifier进行指定</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> Spring产品 </tag>
            
            <tag> 面向切面 </tag>
            
            <tag> 事务管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate使用</title>
      <link href="/2019/07/18/2019-09-10-Hibernate(%E7%BC%98%E5%88%86)/"/>
      <url>/2019/07/18/2019-09-10-Hibernate(%E7%BC%98%E5%88%86)/</url>
      
        <content type="html"><![CDATA[<p>hibernate是一个全自动对象关系映射框架,值得你去使用一番.</p><h1 id="hibernate路线图"><a href="#hibernate路线图" class="headerlink" title="hibernate路线图"></a>hibernate路线图</h1><ol><li>Hibernate 简介(优点和缺点)</li><li>Hibernate 入门案例(基于XML的操作方式)</li><li>Hibernate 配置文件详解(基于xml的方式)</li><li>Hibernate 常用api介绍  （事务,回顾脏读,不可重复读(行级,读更改),幻读(表级读新增)以及数据库隔离级别.并发事务的解决悲观锁和乐观锁机制）</li><li>使用Hibernate框架完成 CRUD 操作</li><li>Hibernate 的对应关系详解(使用注解的方式进行配置,摘取一对多进行代码数据示例操作)</li></ol><hr><h2 id="Hibernate-简介"><a href="#Hibernate-简介" class="headerlink" title="Hibernate 简介"></a>Hibernate 简介</h2><p><strong>同样的hibernate框架是基于jdbc轻量级进行的封装在这里我们再次提到一下这个叫做ORM(面向对象进行数据结构的设计)</strong></p><ol><li>面向对象进行数据结构的设计和数据库表的设计有什么不同</li><li>hibernate讲究的是全自动对象映射,与mybatis不同,mybatis讲究的是半自动映射</li><li>最先本质是为了解决java程序员设计对象的问题，是java的开发人员不关心数据库设计和范式定律</li><li>随着业务场景的复杂以及追求可插拔的高度自由化,当然同时也是为了以后springBoot中使用JPA做铺垫,hibernate中我们除了在初次使用的时候使用XML配置后，hibernate的级联关系操作我们采取使用注解的方式进行操作</li><li>准确的来说hibernate有的东西,mybatis也有.</li></ol><h2 id="Hibernate-入门案例-基于XML的操作方式"><a href="#Hibernate-入门案例-基于XML的操作方式" class="headerlink" title="Hibernate 入门案例(基于XML的操作方式)"></a>Hibernate 入门案例(基于XML的操作方式)</h2><blockquote><p>1.构建一个新的项目(引入的jar包)</p></blockquote><p>   <img src="/images/resources/8C914248A7B348AFB2AF0EC6DA470E3A.jpg" alt="IMAGE"></p><blockquote><p>2.分别编写实体和对应的映射文件person.clas 和 pserson_hbm.xml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">private  int  pid;</span><br><span class="line">private  String pname;</span><br><span class="line">private  Date   bir;</span><br><span class="line">&#125;</span><br><span class="line">//------------映射文件</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;    </span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">     &lt;!-- 映射哪一个实体类,以及表名 --&gt;</span><br><span class="line">       &lt;class name=&quot;com.wwj.model.Person&quot; table=&quot;person&quot;&gt;</span><br><span class="line">       &lt;!-- 主键的生成策略采用自增  name为对象的属性--&gt;</span><br><span class="line">            &lt;id name=&quot;pid&quot; column=&quot;pid&quot;&gt;</span><br><span class="line">                  &lt;generator class=&quot;increment&quot;&gt;&lt;/generator&gt;</span><br><span class="line">            &lt;/id&gt;</span><br><span class="line">            &lt;property name=&quot;pname&quot; column=&quot;pname&quot;&gt;&lt;/property&gt;</span><br><span class="line">            &lt;property name=&quot;bir&quot; column=&quot;bir&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 3.编写全局声明配置文件 src下 （log4j保持最先的一致）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span><br><span class="line">&quot;http://hibernate.sourceforge.net/hibernate-configuration-</span><br><span class="line">3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">&lt;session-factory&gt;</span><br><span class="line">&lt;!-- 方言 保证控制台输出效果一致--&gt;</span><br><span class="line">&lt;property name=&quot;dialect&quot;&gt;</span><br><span class="line">org.hibernate.dialect.MySQLDialect&lt;/property&gt;</span><br><span class="line">&lt;!-- 数据库驱动jar包 --&gt;</span><br><span class="line">&lt;property name=&quot;connection.driver_class&quot;&gt;</span><br><span class="line">com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;connection.url&quot;&gt;jdbc:mysql://localhost:3306/hibernate&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;connection.username&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;connection.password&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;!--显示sql语句是否格式化sql语句 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">&lt;!--执行DDL的方式,create: 每一次运行都会覆盖原表中的内容 update: 保留原表中的内容 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</span><br><span class="line">&lt;!-- 将我们的对象和表的映射文件加载到主配置文件中 --&gt;</span><br><span class="line">&lt;mapping resource=&quot;com/wwj/model/Person_hbm.xml&quot; /&gt;</span><br><span class="line">&lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p>4.构建操作,对比mybatis执行流程动作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author wwj </span><br><span class="line"> * 1: 读取全局配置文件 </span><br><span class="line"> * 2: 构建 sessionFactory </span><br><span class="line"> * 3: 创建 session(会话)</span><br><span class="line"> * 4: 开启transcation</span><br><span class="line"> * 5: 操作数据   （CRUD）</span><br><span class="line"> * 6: 提交事务 transcation</span><br><span class="line"> * 7: 关闭 session</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class TestHT &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ParseException &#123;</span><br><span class="line">//先处理下时间</span><br><span class="line">SimpleDateFormat sf1 = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = sf1.format(new Date());</span><br><span class="line">Date parse = sf1.parse(format);</span><br><span class="line">// 读取配置文件，实例化 默认的寻找 名字为 hibernate.cfg.xml</span><br><span class="line">Configuration cfg = new Configuration().configure();</span><br><span class="line">// 构建 session 工厂</span><br><span class="line">SessionFactory sf = cfg.buildSessionFactory();</span><br><span class="line">// 创建 session</span><br><span class="line">Session session = sf.openSession();</span><br><span class="line">// 操作数据 (insert delete update) 手动开启事务</span><br><span class="line">Transaction bt = session.beginTransaction();</span><br><span class="line">// 操作数据  (注意这里的面向对象操作)</span><br><span class="line">Person per = new Person();</span><br><span class="line">per.setPname(&quot;张三&quot;);</span><br><span class="line">per.setBir(parse);</span><br><span class="line">// CRUD操作</span><br><span class="line">session.save(per);</span><br><span class="line">// 提交事务</span><br><span class="line">bt.commit();</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>观察控制台的输出结果以及数据库表的结构</em></strong><br><img src="/images/resources/FE3C26123ACCC7FB0D8FDBBF4C32C8BD.jpg" alt="IMAGE"> </p><hr><h2 id="Hibernate配置文件详解"><a href="#Hibernate配置文件详解" class="headerlink" title="Hibernate配置文件详解"></a>Hibernate配置文件详解</h2><blockquote><p>关于person映射文件以及全局文件详见代码说明</p></blockquote><hr><h2 id="Hibernate常用api介绍"><a href="#Hibernate常用api介绍" class="headerlink" title="Hibernate常用api介绍"></a>Hibernate常用api介绍</h2><ol><li>基本上大部分的框架都有一个叫做config的接口(使用xml解析填写的配置文件)</li><li>xxxFactory,万物皆有工厂造出来,不会平白无故的生成(工厂模式)</li><li>工厂虽然可以有很多,工厂很庞大,庞大就耗资源,所以我们才考虑对象的生成(单例模式)</li></ol><h3 id="1-事务的ACID"><a href="#1-事务的ACID" class="headerlink" title="(1)事务的ACID"></a>(1)事务的ACID</h3><ol><li>原子性(Atomicity)   要么买要么就不买</li><li>一致性(Consistency）有买有卖,不能空仓打粮仓</li><li>隔离性(Isolation)   大家交易同一个物品的时候(互相又看不到)但是又不应该出现价格的相互影响(信息的壁垒)</li><li>持久性(Durability)  有迹可循,有记录</li></ol><h3 id="2-事务并发"><a href="#2-事务并发" class="headerlink" title="(2)事务并发"></a>(2)事务并发</h3><blockquote><p>多个线程访问数据库同一条数据</p></blockquote><ol><li>脏读 </li></ol><p><img src="/images/resources/00AE463110402D74030D64CEA874CB6B.jpg" alt="IMAGE"> </p><ol start="2"><li>不可重复读 </li></ol><p><img src="/images/resources/37A4EEF1403AB40A3305FC0B8F4EBFCA.jpg" alt="IMAGE"></p><ol start="3"><li>幻读 </li></ol><p><img src="/images/resources/ED12EF6CD154251AEE3FDF20708AEEF0.jpg" alt="IMAGE"></p><ol start="4"><li><p>不可重复读发生点在一行上面,而幻读是发生在整张表上面</p></li><li><p>行级锁机制和表级锁都等同于操作上面仅且只有一个事务</p></li></ol><blockquote><p>补充说明:通过数据所提供的隔离级别(由低到高)</p></blockquote><ol><li>ISOLATION_READ_UNCOMMITTED：这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。</li><li>ISOLATION_READ_COMMITTED：保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据</li><li>ISOLATION_REPEATABLE_READ：这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。</li><li>ISOLATION_SERIALIZABLE：这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。</li></ol><blockquote><p>重点说明 (操作数据都是先查在操作)</p></blockquote><ol><li>悲观锁机制:也就是同步执行,一个一个来 查询语句加上for update</li><li>乐观锁:  使用版本号的机制<ul><li>大家先查,看到的版本默认为1</li><li>做增加删除修改的时候在版本号上面加1 帅选条件要根据当前版本号  最后提交总有先后</li><li>有一个操作一定会发生异常，通过捕获异常来进行下一步的处理</li></ul></li></ol><hr><h2 id="使用-Hibernate-框架完成-CRUD-操作"><a href="#使用-Hibernate-框架完成-CRUD-操作" class="headerlink" title="使用 Hibernate 框架完成 CRUD 操作"></a>使用 Hibernate 框架完成 CRUD 操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class TestHT &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ParseException &#123;</span><br><span class="line">//先处理下时间</span><br><span class="line">SimpleDateFormat sf1 = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = sf1.format(new Date());</span><br><span class="line">Date parse = sf1.parse(format);</span><br><span class="line">// 读取配置文件，实例化 默认的寻找 名字为 hibernate.cfg.xml</span><br><span class="line">Configuration cfg = new Configuration().configure();</span><br><span class="line">// 构建 session 工厂</span><br><span class="line">SessionFactory sf = cfg.buildSessionFactory();</span><br><span class="line">// 创建 session</span><br><span class="line">Session session = sf.openSession();</span><br><span class="line">// 操作数据 (insert delete update) 手动开启事务</span><br><span class="line">Transaction bt = session.beginTransaction();</span><br><span class="line">// 操作数据</span><br><span class="line">Person per = new Person();</span><br><span class="line">per.setPname(&quot;张三&quot;);</span><br><span class="line">per.setBir(parse);</span><br><span class="line">// CRUD操作</span><br><span class="line">// --1 .增加</span><br><span class="line">session.save(per);</span><br><span class="line">// --2 .查询 （如果查询多个,需要用到hql语句）</span><br><span class="line">Person p = (Person) session.get(Person.class, 1);</span><br><span class="line">// --3. 修改需要先查</span><br><span class="line">p.setPname(&quot;小李&quot;);</span><br><span class="line">session.update(p);</span><br><span class="line">// -- 删除</span><br><span class="line">session.delete(p);</span><br><span class="line">// -- 查询所有</span><br><span class="line">Query createQuery = session.createQuery(&quot;from Person&quot;);</span><br><span class="line">List&lt;Person&gt; list = createQuery.list();</span><br><span class="line">for(Person pp:list) &#123;</span><br><span class="line">System.out.println(pp.getPname());</span><br><span class="line">&#125;</span><br><span class="line">// 提交事务</span><br><span class="line">bt.commit();</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Hibernate的对应关系详解-采用注解的方式"><a href="#Hibernate的对应关系详解-采用注解的方式" class="headerlink" title="Hibernate的对应关系详解 (采用注解的方式)"></a>Hibernate的对应关系详解 (采用注解的方式)</h2><p>1.一对一双向注解</p><blockquote><p>Dad类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.onetoone;</span><br><span class="line"></span><br><span class="line">import javax.persistence.CascadeType;</span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.JoinColumn;</span><br><span class="line">import javax.persistence.OneToOne;</span><br><span class="line">@Entity</span><br><span class="line">public class Dad &#123;</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue</span><br><span class="line">private int did;</span><br><span class="line">private String dadName;</span><br><span class="line"></span><br><span class="line">@OneToOne(cascade = CascadeType.ALL)</span><br><span class="line">@JoinColumn(name=&quot;sonId&quot;,unique=true)</span><br><span class="line">private Son son;</span><br><span class="line">public int getDid() &#123;</span><br><span class="line">return did;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setDid(int did) &#123;</span><br><span class="line">this.did = did;</span><br><span class="line">&#125;</span><br><span class="line">public String getDadName() &#123;</span><br><span class="line">return dadName;</span><br><span class="line">&#125;</span><br><span class="line">public void setDadName(String dadName) &#123;</span><br><span class="line">this.dadName = dadName;</span><br><span class="line">&#125;</span><br><span class="line">public Son getSon() &#123;</span><br><span class="line">return son;</span><br><span class="line">&#125;</span><br><span class="line">public void setSon(Son son) &#123;</span><br><span class="line">this.son = son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Son类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.onetoone;</span><br><span class="line"></span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.JoinColumn;</span><br><span class="line">import javax.persistence.OneToOne;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class Son &#123;</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue</span><br><span class="line">private  int sid;</span><br><span class="line">private  String sname;</span><br><span class="line"></span><br><span class="line">@OneToOne(mappedBy=&quot;son&quot;)</span><br><span class="line">private  Dad  dad;</span><br><span class="line">public int getSid() &#123;</span><br><span class="line">return sid;</span><br><span class="line">&#125;</span><br><span class="line">public void setSid(int sid) &#123;</span><br><span class="line">this.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line">public String getSname() &#123;</span><br><span class="line">return sname;</span><br><span class="line">&#125;</span><br><span class="line">public void setSname(String sname) &#123;</span><br><span class="line">this.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line">public Dad getDad() &#123;</span><br><span class="line">return dad;</span><br><span class="line">&#125;</span><br><span class="line">public void setDad(Dad dad) &#123;</span><br><span class="line">this.dad = dad;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>2.一对多双向注解</p><blockquote><p> Dad类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.onetomany;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.persistence.CascadeType;</span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.JoinColumn;</span><br><span class="line">import javax.persistence.OneToMany;</span><br><span class="line">import javax.persistence.OneToOne;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class Dad &#123;</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue</span><br><span class="line">private int did;</span><br><span class="line">private String dadName;</span><br><span class="line"></span><br><span class="line">@OneToMany(cascade=CascadeType.ALL,mappedBy=&quot;dad&quot;)</span><br><span class="line">private List&lt;Son&gt; sons;</span><br><span class="line">public int getDid() &#123;</span><br><span class="line">return did;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setDid(int did) &#123;</span><br><span class="line">this.did = did;</span><br><span class="line">&#125;</span><br><span class="line">public String getDadName() &#123;</span><br><span class="line">return dadName;</span><br><span class="line">&#125;</span><br><span class="line">public void setDadName(String dadName) &#123;</span><br><span class="line">this.dadName = dadName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public List&lt;Son&gt; getSons() &#123;</span><br><span class="line">return sons;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSons(List&lt;Son&gt; sons) &#123;</span><br><span class="line">this.sons = sons;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Son类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.onetomany;</span><br><span class="line"></span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.JoinColumn;</span><br><span class="line">import javax.persistence.ManyToOne;</span><br><span class="line">import javax.persistence.OneToOne;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class Son &#123;</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue</span><br><span class="line">private  int sid;</span><br><span class="line">private  String sname;</span><br><span class="line"></span><br><span class="line">@ManyToOne</span><br><span class="line">@JoinColumn(name=&quot;dadId&quot;)</span><br><span class="line">private  Dad  dad;</span><br><span class="line">public int getSid() &#123;</span><br><span class="line">return sid;</span><br><span class="line">&#125;</span><br><span class="line">public void setSid(int sid) &#123;</span><br><span class="line">this.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line">public String getSname() &#123;</span><br><span class="line">return sname;</span><br><span class="line">&#125;</span><br><span class="line">public void setSname(String sname) &#123;</span><br><span class="line">this.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line">public Dad getDad() &#123;</span><br><span class="line">return dad;</span><br><span class="line">&#125;</span><br><span class="line">public void setDad(Dad dad) &#123;</span><br><span class="line">this.dad = dad;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>3.多对多双向注解</p><blockquote><p>Dad类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.manytomany;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.persistence.CascadeType;</span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.JoinColumn;</span><br><span class="line">import javax.persistence.JoinTable;</span><br><span class="line">import javax.persistence.ManyToMany;</span><br><span class="line">import javax.persistence.OneToMany;</span><br><span class="line">import javax.persistence.OneToOne;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class Dad &#123;</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue</span><br><span class="line">private int did;</span><br><span class="line">private String dadName;</span><br><span class="line"></span><br><span class="line">@ManyToMany(cascade = &#123;CascadeType.ALL&#125;)</span><br><span class="line">@JoinTable(name=&quot;dad_son&quot;,</span><br><span class="line">joinColumns=&#123;@JoinColumn(name=&quot;did&quot;)&#125;,</span><br><span class="line">inverseJoinColumns=&#123;@JoinColumn(name=&quot;sid&quot;)&#125;)</span><br><span class="line">private List&lt;Son&gt; sons = new ArrayList&lt;&gt;();</span><br><span class="line">public int getDid() &#123;</span><br><span class="line">return did;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setDid(int did) &#123;</span><br><span class="line">this.did = did;</span><br><span class="line">&#125;</span><br><span class="line">public String getDadName() &#123;</span><br><span class="line">return dadName;</span><br><span class="line">&#125;</span><br><span class="line">public void setDadName(String dadName) &#123;</span><br><span class="line">this.dadName = dadName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public List&lt;Son&gt; getSons() &#123;</span><br><span class="line">return sons;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSons(List&lt;Son&gt; sons) &#123;</span><br><span class="line">this.sons = sons;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>son类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.wwj.manytomany;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.JoinColumn;</span><br><span class="line">import javax.persistence.JoinTable;</span><br><span class="line">import javax.persistence.ManyToMany;</span><br><span class="line">import javax.persistence.ManyToOne;</span><br><span class="line">import javax.persistence.OneToOne;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class Son &#123;</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue</span><br><span class="line">private  int sid;</span><br><span class="line">private  String sname;</span><br><span class="line"></span><br><span class="line">@ManyToMany</span><br><span class="line">@JoinTable(name=&quot;dad_son&quot;,</span><br><span class="line">joinColumns=&#123;@JoinColumn(name=&quot;sid&quot;)&#125;,</span><br><span class="line">inverseJoinColumns=&#123;@JoinColumn(name=&quot;did&quot;)&#125;)</span><br><span class="line">private  List&lt;Dad&gt;  dads;</span><br><span class="line">public int getSid() &#123;</span><br><span class="line">return sid;</span><br><span class="line">&#125;</span><br><span class="line">public void setSid(int sid) &#123;</span><br><span class="line">this.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line">public String getSname() &#123;</span><br><span class="line">return sname;</span><br><span class="line">&#125;</span><br><span class="line">public void setSname(String sname) &#123;</span><br><span class="line">this.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line">public List&lt;Dad&gt; getDads() &#123;</span><br><span class="line">return dads;</span><br><span class="line">&#125;</span><br><span class="line">public void setDads(List&lt;Dad&gt; dads) &#123;</span><br><span class="line">this.dads = dads;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> orm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis2</title>
      <link href="/2019/07/18/2019-09-10-Mybatis(%E4%BB%BD)/"/>
      <url>/2019/07/18/2019-09-10-Mybatis(%E4%BB%BD)/</url>
      
        <content type="html"><![CDATA[<p>mybatis是一个优秀的开源框架,半自动ORM映射,能够适配各种业务需求</p><h1 id="mybatis路线图-下"><a href="#mybatis路线图-下" class="headerlink" title="mybatis路线图(下)"></a>mybatis路线图(下)</h1><ol><li>MyBatis的多表联合查询(了解一对一,熟练一对多(理解延迟加载),熟练多对多)</li><li>MyBatis的动态SQL(嵌套的语句的几种方式,按需使用) </li><li>MyBatis中#{}${}之间的区别</li><li>MyBatis的延迟加载(什么是延迟加载,好处,场景)</li><li>MyBatis的缓存机制(缓存机制策略,一级缓存和二级缓存的不同,二级缓存的实现)</li><li>MyBatis逆向工程(了解逆向工程,思考不方便的地方)</li></ol><hr><h2 id="MyBatis的多表联合查询"><a href="#MyBatis的多表联合查询" class="headerlink" title="MyBatis的多表联合查询"></a>MyBatis的多表联合查询</h2><blockquote><p>1对1的说明:在级联关系中OneToOne是比较不太频繁出现的一种情况(在数据库设计上面可以考虑共用主键关系,或者利用一对多进行变种实现,利用外键可设置唯一约束<strong>UNIQUE约束</strong>),我们应该专注sql语句,追求高度自由化,虽然mybatis提供一对一的关联设置,但是我们还是利用一对多的方式进行变种实现</p></blockquote><p><strong>引用:级联不是必须的,级联的好处是获取关联数据十分便捷,但是级联过多会增加系统的复杂度，同时降低系统的性能,此增彼减,所以当级联的层级超过3层时,就不要考虑使用级联了,因为这样会造成多个对象的关联,导致系统的耦合,复杂和难以维护.在现实的使用过程中,要根据实际情况判断是否需要使用级联.</strong></p><blockquote><p>1对m的实现方式与m对1实现方式:(场景:1个用户有多个贴子,多个帖子的著作人)</p></blockquote><ul><li><p>表和实体关系说明:user表和post表为1:M的关系</p></li><li><p>实体代码如下:自行get和set</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">private int uid;</span><br><span class="line">private String uname;</span><br><span class="line">private List&lt;Post&gt; posts;</span><br><span class="line">&#125;</span><br><span class="line">public class Post &#123;</span><br><span class="line">  private  int pid;</span><br><span class="line">  private  int pname;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>接口和mapper映射内容操作如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 进行1对多的操作</span><br><span class="line"> * @author Yun</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">/**</span><br><span class="line"> * 获取用户的信息和所发的帖子</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">    List&lt;User&gt; getUsers();</span><br><span class="line">&#125;</span><br><span class="line">//-----------对应的动作实现</span><br><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.UserDao&quot;&gt;</span><br><span class="line">&lt;!-- 定义一对多的resultmap --&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.User&quot; id=&quot;users&quot;&gt;</span><br><span class="line">&lt;id property=&quot;uid&quot; column=&quot;uid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;uname&quot; property=&quot;uname&quot; /&gt;</span><br><span class="line">&lt;collection property=&quot;posts&quot; ofType=&quot;com.wwj.model.Post&quot;&gt;</span><br><span class="line">&lt;id property=&quot;pid&quot; column=&quot;pid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;pname&quot; property=&quot;pname&quot; /&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">//----------数据库操作</span><br><span class="line">&lt;select id=&quot;getUsers&quot; resultMap=&quot;users&quot;&gt;</span><br><span class="line">select u.*,p.*</span><br><span class="line">from user u,post p</span><br><span class="line">where u.uid = p.uid</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><blockquote><p>接下来是多对一的实现也就是在站在帖子这一边,展现帖子的时候希望看到著作人是谁(注意:实体会发生一点小的变动,在post属性中添加user属性)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public interface PostDao &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取所有帖子信息</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">List&lt;Post&gt;  getPosts();</span><br><span class="line">&#125;</span><br><span class="line">//-------动作的实现映射</span><br><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.PostDao&quot;&gt;</span><br><span class="line">&lt;!-- 定义一对多的resultmap --&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.Post&quot; id=&quot;posts&quot;&gt;</span><br><span class="line">&lt;id property=&quot;pid&quot; column=&quot;pid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;pname&quot; property=&quot;pname&quot; /&gt;</span><br><span class="line">&lt;association property=&quot;user&quot; javaType=&quot;com.wwj.model.User&quot;&gt;</span><br><span class="line">&lt;id property=&quot;uid&quot; column=&quot;uid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;uname&quot; property=&quot;uname&quot; /&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getPosts&quot; resultMap=&quot;posts&quot;&gt;</span><br><span class="line">select u.*,p.*</span><br><span class="line">from user u,post p</span><br><span class="line">where u.uid = p.uid</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><blockquote><p>下面是多对多上面的操作场景(一个用户可以有多个兴趣,一个兴趣可能有多个人选择)</p></blockquote><p><strong>构建二个实体分别是animal和interest和第三方表(animal_interest)</strong></p><ol><li>创建一个第三方表的映射接口(animal_interestDao)和映射的实现(animal_interestMapper.xml)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    /**</span><br><span class="line"> * 根据兴趣id查看有多少用户选择</span><br><span class="line"> * @param iid</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">List&lt;Animal&gt; getAnimalByIid(int iid);</span><br><span class="line">/**</span><br><span class="line"> * 根据用户id查看有当前用户有哪些兴趣</span><br><span class="line"> * @param aid</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">List&lt;Interest&gt; getInterestByAid(int aid);</span><br><span class="line">//------对应的映射实现</span><br><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.Animal_InterestDao&quot;&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.Animal&quot; id=&quot;animals&quot;&gt;</span><br><span class="line">&lt;id property=&quot;aid&quot; column=&quot;aid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;aname&quot; property=&quot;aname&quot; /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.Interest&quot; id=&quot;interests&quot;&gt;</span><br><span class="line">&lt;id property=&quot;iid&quot; column=&quot;iid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;iname&quot; property=&quot;iname&quot; /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getAnimalByIid&quot; parameterType=&quot;int&quot; resultMap=&quot;animals&quot;&gt;</span><br><span class="line">select</span><br><span class="line">a.*,ai.iid</span><br><span class="line">from animal a,animal_interest ai</span><br><span class="line">where a.aid = ai.aid</span><br><span class="line">and ai.iid = #&#123;iid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getInterestByAid&quot; parameterType=&quot;int&quot; resultMap=&quot;interests&quot;&gt;</span><br><span class="line">select</span><br><span class="line">i.*,ai.aid</span><br><span class="line">from interest i,animal_interest ai</span><br><span class="line">where i.iid = ai.iid</span><br><span class="line">and ai.aid = #&#123;aid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>分别构建AnimalDao和InterestDao以及映射文件</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> //获取用户信息</span><br><span class="line"> List&lt;Animal&gt;  getAnimals();</span><br><span class="line">//-------</span><br><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.AnimalDao&quot;&gt;</span><br><span class="line">&lt;!-- 定义一对多的resultmap --&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.Animal&quot; id=&quot;animals1&quot;&gt;</span><br><span class="line">&lt;id property=&quot;aid&quot; column=&quot;aid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;uname&quot; property=&quot;uname&quot; /&gt;</span><br><span class="line">&lt;collection property=&quot;interests&quot;  column=&quot;aid&quot; select=&quot;com.wwj.dao.Animal_InterestDao.getInterestByAid&quot;&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getAnimals&quot; resultMap=&quot;animals1&quot; &gt;</span><br><span class="line">select a.*</span><br><span class="line">from animal a</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">   &lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public interface InterestDao &#123;</span><br><span class="line">/**</span><br><span class="line"> * 获取兴趣信息</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">List&lt;Interest&gt;  getInterests();</span><br><span class="line">&#125;</span><br><span class="line">//----------------------------</span><br><span class="line">&lt;!-- 定义一对多的resultmap --&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.Interest&quot; id=&quot;interests1&quot;&gt;</span><br><span class="line">&lt;id property=&quot;iid&quot; column=&quot;iid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;uname&quot; property=&quot;uname&quot; /&gt;</span><br><span class="line">&lt;collection property=&quot;animals&quot;  column=&quot;iid&quot; select=&quot;com.wwj.dao.Animal_InterestDao.getAnimalByIid&quot;&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=&quot;getInterests&quot; resultMap=&quot;interests1&quot; &gt;</span><br><span class="line">select i.*</span><br><span class="line">from interest i</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="MyBatis的动态SQL"><a href="#MyBatis的动态SQL" class="headerlink" title="MyBatis的动态SQL"></a>MyBatis的动态SQL</h2><p><strong>模拟一张用户表进行说明,以及代码说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface TestUserDao &#123;</span><br><span class="line">/**</span><br><span class="line"> * 依次为if/whereif/set/(whenchoose)/foreach</span><br><span class="line"> * @param msg</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">TestUser getUser(Map msg);</span><br><span class="line">TestUser getUserUseWhere(Map msg);</span><br><span class="line">TestUser updateUserById(Map msg);</span><br><span class="line">TestUser selectUserByChoose(Map msg);</span><br><span class="line">List&lt;TestUser&gt; selectUserByListId(List ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.UserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type=&quot;com.wwj.model.TestUser&quot; id=&quot;tuser&quot;&gt;</span><br><span class="line">&lt;id property=&quot;tid&quot; column=&quot;tid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;tname&quot; property=&quot;tname&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;tage&quot; property=&quot;tage&quot; /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getUser&quot; resultMap=&quot;tuser&quot;&gt;</span><br><span class="line">select  * from testuser</span><br><span class="line">where </span><br><span class="line">   &lt;if test=&quot;tname != null&quot;&gt;</span><br><span class="line">           tname=#&#123;tname&#125;</span><br><span class="line">        &lt;/if&gt;     </span><br><span class="line">        &lt;if test=&quot;tage != null&quot;&gt;</span><br><span class="line">           and tage=#&#123;tage&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- where”标签会知道如果它包含的标签中有返回值的话,它就插入一个‘where’.此外，如果标签首次返回的内容是以AND或OR开头的,则它会剔除掉。 --&gt;</span><br><span class="line">&lt;select id=&quot;getUserUseWhere&quot; resultMap=&quot;tuser&quot;&gt;</span><br><span class="line">select  * from testuser</span><br><span class="line">&lt;where&gt;</span><br><span class="line">   &lt;if test=&quot;tname != null&quot;&gt;</span><br><span class="line">           tname=#&#123;tname&#125;</span><br><span class="line">        &lt;/if&gt;     </span><br><span class="line">        &lt;if test=&quot;tage != null&quot;&gt;</span><br><span class="line">           and tage=#&#123;tage&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">        </span><br><span class="line">   &lt;!-- (不常用)trim标记是一个格式化的标记，可以完成set或者是where标记的功能</span><br><span class="line">        prefix：前缀　　　　　　</span><br><span class="line">prefixoverride：去掉第一个 </span><br><span class="line">suffix：后缀　　</span><br><span class="line">suffixoverride：去掉最后一个   </span><br><span class="line">        &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and | or&quot;&gt;</span><br><span class="line">            &lt;if test=&quot;username != null&quot;&gt;</span><br><span class="line">               and username=#&#123;username&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;sex != null&quot;&gt;</span><br><span class="line">               and sex=#&#123;sex&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/trim&gt; --&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;update id=&quot;updateUserById&quot;  parameterType=&quot;java.util.Map&quot;&gt;</span><br><span class="line">    update testuser </span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test=&quot;tname != null and tname != &apos;&apos;&quot;&gt;</span><br><span class="line">                tname = #&#123;tname&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;tage != null and tage != &apos;&apos;&quot;&gt;</span><br><span class="line">                tage = #&#123;tage&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">     </span><br><span class="line">     where tid=#&#123;tid&#125;</span><br><span class="line">     &lt;/update&gt;</span><br><span class="line">     &lt;select id=&quot;selectUserByChoose&quot;  resultMap=&quot;tuser&quot; parameterType=&quot;java.util.Map&quot;&gt;</span><br><span class="line">      select * from testuser</span><br><span class="line">      &lt;where&gt;</span><br><span class="line">          &lt;choose&gt;</span><br><span class="line">              &lt;when test=&quot;tid !=&apos;&apos; and tid != null&quot;&gt;</span><br><span class="line">                  tid=#&#123;tid&#125;</span><br><span class="line">              &lt;/when&gt;</span><br><span class="line">              &lt;when test=&quot;tname !=&apos;&apos; and tname != null&quot;&gt;</span><br><span class="line">                  and tname=#&#123;tname&#125;</span><br><span class="line">              &lt;/when&gt;</span><br><span class="line">              &lt;otherwise&gt;</span><br><span class="line">                  and tage=#&#123;tage&#125;</span><br><span class="line">              &lt;/otherwise&gt;</span><br><span class="line">          &lt;/choose&gt;</span><br><span class="line">      &lt;/where&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectUserByListId&quot; resultMap=&quot;tuser&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class="line">        select * from testuser</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            collection:指定输入对象中的集合属性  </span><br><span class="line">            item:每次遍历生成的对象</span><br><span class="line">            open:开始遍历时的拼接字符串</span><br><span class="line">            close:结束时拼接的字符串</span><br><span class="line">            separator:遍历对象之间需要拼接的字符串</span><br><span class="line">            select * from user where 1=1 and (id=1 or id=2 or id=3)</span><br><span class="line">          --&gt;</span><br><span class="line">        &lt;foreach collection=&quot;list&quot; item=&quot;tid&quot; open=&quot;and (&quot; close=&quot;)&quot; separator=&quot;or&quot;&gt;</span><br><span class="line">            tid=#&#123;tid&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;/mapper&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="MyBatis中-和-区别"><a href="#MyBatis中-和-区别" class="headerlink" title="MyBatis中#{}和${}区别"></a>MyBatis中#{}和${}区别</h2><p><strong>简单的说#{}是采用占位符的方式，而$是采用是字符串拼接的方式</strong><br><strong><em>字符串拼接的方式就一定会存在sql注入的问题</em></strong></p><hr><h2 id="MyBatis的延迟加载"><a href="#MyBatis的延迟加载" class="headerlink" title="MyBatis的延迟加载"></a>MyBatis的延迟加载</h2><p><strong>(延迟加载===按需加载)</strong></p><ol><li>比如刚才的一个用户有多个兴趣,现在需要用户信息的时候,编写sql语句的时候同时也把暂时不需要看用户的兴趣的数据加载出来,在数据量大的情况就肯定有瓶颈。</li><li>所以我们可以参照多对多示例中进行设置延迟加载,来观察sql语句的发出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//代码示例如下: 我仅仅需要用户信息,但是同样的也把其它非相关的信息加载出来了</span><br><span class="line">List&lt;Animal&gt;  as =session.selectList(&quot;getAnimals&quot;);</span><br><span class="line">System.out.println(as.get(0).getAname());</span><br><span class="line">//---------</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select a.* from animal a </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">DEBUG [main] - ====&gt;  Preparing: select i.*,ai.aid from interest i,animal_interest ai where i.iid = ai.iid and ai.aid = ?</span><br></pre></td></tr></table></figure><ol start="3"><li>配置延迟加载</li></ol><p><strong>全局配置文件中配置添加</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;!-- 启用延迟加载特性，不配置默认关闭该特性--&gt;</span><br><span class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;&gt;&lt;/setting&gt;</span><br><span class="line">    &lt;!-- 按需加载: false:使用关联属性，及时加载;    true,加载对象，则加载所有属性--&gt;</span><br><span class="line">     &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line">    //------信息展示结果</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select a.* from animal a </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">DEBUG [main] - &lt;==      Total: 2</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select i.*,ai.aid from interest i,animal_interest ai where i.iid = ai.iid and ai.aid = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] - &lt;==      Total: 3</span><br><span class="line">唱歌</span><br></pre></td></tr></table></figure><hr><h2 id="MyBatis的缓存机制"><a href="#MyBatis的缓存机制" class="headerlink" title="MyBatis的缓存机制"></a>MyBatis的缓存机制</h2><ol><li>一级缓存(缓存不相互共享,在同一个事务中,如果存在同样的操作,中间不带增删改操作的话。那么不在进行二次IO读取操作)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Animal&gt;  as =session.selectList(&quot;getAnimals&quot;);</span><br><span class="line">System.out.println(as.get(0).getAname());</span><br><span class="line">List&lt;Animal&gt;  ass =session.selectList(&quot;getAnimals&quot;);</span><br><span class="line">System.out.println(as.get(0).getAname());</span><br><span class="line">//------</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select a.* from animal a </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">DEBUG [main] - &lt;==      Total: 2</span><br><span class="line">用户1</span><br><span class="line">用户1</span><br></pre></td></tr></table></figure><ol start="2"><li>二级缓存(缓存共享)需要映射的接口对应的映射文件加入:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;com.wwj.dao.AnimalDao&quot;&gt;</span><br><span class="line">&lt;cache/&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = build.openSession();</span><br><span class="line">List&lt;Animal&gt;  as =session.selectList(&quot;getAnimals&quot;);</span><br><span class="line">System.out.println(as.get(0).getAname());</span><br><span class="line">List&lt;Animal&gt;  ass =session.selectList(&quot;getAnimals&quot;);</span><br><span class="line">System.out.println(as.get(0).getAname());   </span><br><span class="line">// 提交事务</span><br><span class="line">session.commit();</span><br><span class="line">// 关闭 session</span><br><span class="line">session.close();</span><br><span class="line">System.out.println(&quot;---------------------------分割线利于观察&quot;);</span><br><span class="line">//关闭了之后数据会放入缓存中</span><br><span class="line">//测试二级缓存</span><br><span class="line">SqlSession session1 = build.openSession();</span><br><span class="line">List&lt;Animal&gt;  asss =session1.selectList(&quot;getAnimals&quot;);</span><br><span class="line">System.out.println(as.get(0).getAname());</span><br><span class="line">// 提交事务</span><br><span class="line">session1.commit();</span><br><span class="line">// 关闭 session</span><br><span class="line">session1.close();</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//-----控制台结果</span><br><span class="line">DEBUG [main] - &lt;==      Total: 2</span><br><span class="line">用户1</span><br><span class="line">DEBUG [main] - Cache Hit Ratio [com.wwj.dao.AnimalDao]: 0.0</span><br><span class="line">用户1</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.Connection@8c03696]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.Connection@8c03696]</span><br><span class="line">DEBUG [main] - Returned connection 146814614 to pool.</span><br><span class="line">---------------------------分割线利于观察</span><br><span class="line">DEBUG [main] - Cache Hit Ratio [com.wwj.dao.AnimalDao]: 0.3333333333333333</span><br><span class="line">用户1</span><br></pre></td></tr></table></figure><h3 id="缓存机制策略的补充"><a href="#缓存机制策略的补充" class="headerlink" title="(缓存机制策略的补充)"></a>(缓存机制策略的补充)</h3><ol><li>默认mybatis映射语句文件中所有的select语句将会被缓存<br> 映射语句文件中所有的insert update delete 语句会刷新缓存<br> 缓存会使用(Least Flush Interval,LRU最近最少使用的)算法来收回<br> 根据时间表（如 no Flush Interval,没有刷新间隔），缓存不会以任何时间顺序来刷新</li><li>eviction(收回策略===更新策略)<pre><code>LRU 最近最少使用的，移除最长时间不被使用的对象,这是默认值FIFO 先进先出，按对象进入缓存的顺序来移除它们SOFT 软引用，移除基于垃圾回收器状态和软引用规则的对象WEAK 弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象</code></pre></li><li>缓存存在数据可能出现脏读的现象(操作同一数据)缓存数据尽量用在变更不频繁的数据上面<pre><code>影响缓存的三个因素(缓存更新策略,缓存最大数据量,命中率)</code></pre></li></ol><hr><h2 id="MyBatis逆向工程"><a href="#MyBatis逆向工程" class="headerlink" title="MyBatis逆向工程"></a>MyBatis逆向工程</h2><ol><li>逆向工程我们做简单的展示</li><li>逆向工程的含义在于根据数据库的表的结构以面向对象的方式自动的帮助我们生成对应的实体类</li><li>逆向为什么不太常用，因为一旦数据库的结构和关联发生变化，那么实际开发过程中就需要自己手动调整对应的实体类,这个可以说是一个非常浩瀚的工程,无论从人力和无力成本看来都得不偿失</li><li>以前我们可以说小的项目,用逆向比较方便,不如我们把逆向看成是不可取的，mybatis本身也是追求语句的自由化。所以逆向作为了解即可.</li></ol><ul><li>引入对应的jar包 </li><li>构建逆向配置xml文件generatorConfig.xml位置在项目外</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;!-- targetRuntime=“MyBatis3“可以生成带条件的增删改查，targetRuntime=“MyBatis3Simple“可以生成基本的增删改查 --&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3Simple&quot;&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">            connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis&quot; userId=&quot;root&quot;</span><br><span class="line">            password=&quot;root&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 </span><br><span class="line">            NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject:生成PO类的位置 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.wwj.model1&quot;</span><br><span class="line">            targetProject=&quot;./src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;com.wwj.dao1&quot; </span><br><span class="line">            targetProject=&quot;./src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">            targetPackage=&quot;com.wwj.dao1&quot; </span><br><span class="line">            targetProject=&quot;./src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &lt;!-- 指定数据库表 --&gt;</span><br><span class="line">&lt;table schema=&quot;mybatis&quot; tableName=&quot;person&quot; domainObjectName=&quot;personG&quot;&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><ul><li>构建生成main函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TestG &#123;</span><br><span class="line">  public void generator() throws Exception&#123;</span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();</span><br><span class="line">      boolean overwrite = true;</span><br><span class="line">      //指定 逆向工程配置文件</span><br><span class="line">      File configFile = new File(&quot;generatorConfig.xml&quot;); </span><br><span class="line">      ConfigurationParser cp = new ConfigurationParser(warnings);</span><br><span class="line">      Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">      DefaultShellCallback callback = new DefaultShellCallback(overwrite);</span><br><span class="line">      MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,</span><br><span class="line">              callback, warnings);</span><br><span class="line">      myBatisGenerator.generate(null);</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line">  public static void main(String[] args) throws Exception &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">      TestG generatorSqlmap = new TestG();</span><br><span class="line">          generatorSqlmap.generator();</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久化 </tag>
            
            <tag> orm </tag>
            
            <tag> 半自动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
